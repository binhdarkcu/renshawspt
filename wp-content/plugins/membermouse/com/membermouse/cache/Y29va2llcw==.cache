/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_Cookies
{
	public static $COOKIE_PREFIX = "mm_cookie_";
	
	public static function setCookies()
	{
		$affiliateId = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE);
		$subAffiliateId = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE);
		$lifespan = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE_LIFESPAN);
		
		$affiliateAliases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE_ALIAS);
		
		if(!empty($affiliateAliases))
		{
			$affiliateAliases = explode(",", $affiliateAliases);
			
			for($i = 0; $i < count($affiliateAliases); $i++)
			{
				$affiliateAliases[$i] = trim($affiliateAliases[$i]);
			}
		}
		else
		{
			$affiliateAliases = array();
		}
		
		$subAffiliateAliases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE_ALIAS);
		
		if(!empty($subAffiliateAliases))
		{
			$subAffiliateAliases = explode(",", $subAffiliateAliases);
			
			for($i = 0; $i < count($subAffiliateAliases); $i++)
			{
				$subAffiliateAliases[$i] = trim($subAffiliateAliases[$i]);
			}
		}
		else
		{
			$subAffiliateAliases = array();
		}
		
		// get affiliate tracking IDs from active affiliate provider
		$affiliateProvider = MM_AffiliateProviderFactory::getActiveProvider();
		
		if($affiliateProvider)
		{
			$providerAffiliateId = $affiliateProvider->getAffiliateTrackingId();
			$providerSubaffiliateId = $affiliateProvider->getSubaffiliateTrackingId();
			
			if(!empty($providerAffiliateId))
			{
				$affiliateAliases[] = trim($providerAffiliateId);
			}
			
			if(!empty($providerSubaffiliateId))
			{
				$subAffiliateAliases[] = trim($providerSubaffiliateId);
			}
		}
			
		if(intval($lifespan) > 0) 
		{
			$days = time() + 3600 * 24 * intval($lifespan);
			
			foreach($_GET as $key=>$value)
	        {
	        	if(!is_array($value))
	        	{
		        	if(($key == $affiliateId) || ($key == $subAffiliateId))
		        	{
		        		if(self::doSetAffiliateValue($key))
		        		{
		        			setcookie(self::$COOKIE_PREFIX.$key, $value, $days, "/");
		        		}
		        	}
		        	else if(in_array($key, $affiliateAliases))
		        	{
		        		if(self::doSetAffiliateValue($affiliateId))
		        		{
		        			setcookie(self::$COOKIE_PREFIX.$affiliateId, $value, $days, "/");
		        		}
		        	}
		        	else if(in_array($key, $subAffiliateAliases))
		        	{
		        		if(self::doSetAffiliateValue($subAffiliateId))
		        		{
		        			setcookie(self::$COOKIE_PREFIX.$subAffiliateId, $value, $days, "/");
		        		}
		        	}
		        	else
		        	{
		        		$infoObj = new stdClass();
		        		$infoObj->key = $key;
		        		$infoObj->value = $value;
		        		$infoObj->days = $days;
		        		
		        		$doSetCookie = apply_filters(MM_Filters::$SET_COOKIE, $infoObj);
		        		
		        		if($doSetCookie !== false)
		        		{
	        				setcookie(self::$COOKIE_PREFIX.$key, $value, $days, "/");
		        		}
		        	}
	        	}
	        }
		}
		
		return true;
	}
	
	/**
	 * Affiliate cookies should only be set if they're not set already
	 * @param String $key the key of the cookie to set
	 * @return boolean returns true if it's ok to set the cookie, false otherwise
	 */
	private static function doSetAffiliateValue($key)
	{
		if(!isset($_COOKIE[self::$COOKIE_PREFIX.$key]) || (isset($_COOKIE[self::$COOKIE_PREFIX.$key]) && empty($_COOKIE[self::$COOKIE_PREFIX.$key])))
		{
			return true;
		}
		return false;
	}
	
	public static function getCookie($key)
	{
		$affiliateId = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE);
		$subAffiliateId = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE);
		
		$affiliateAliases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE_ALIAS);
		
		if(!empty($affiliateAliases))
		{
			$affiliateAliases = explode(",", $affiliateAliases);
				
			for($i = 0; $i < count($affiliateAliases); $i++)
			{
				$affiliateAliases[$i] = trim($affiliateAliases[$i]);
			}
		}
		else 
		{
			$affiliateAliases = array();
		}
		
		$subAffiliateAliases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE_ALIAS);
		
		if(!empty($subAffiliateAliases))
		{
			$subAffiliateAliases = explode(",", $subAffiliateAliases);
				
			for($i = 0; $i < count($subAffiliateAliases); $i++)
			{
				$subAffiliateAliases[$i] = trim($subAffiliateAliases[$i]);
			}
		}
		else 
		{
			$subAffiliateAliases = array();
		}
		
		// get affiliate tracking IDs from active affiliate provider
		$affiliateProvider = MM_AffiliateProviderFactory::getActiveProvider();
		
		if($affiliateProvider)
		{
			$providerAffiliateId = $affiliateProvider->getAffiliateTrackingId();
			$providerSubaffiliateId = $affiliateProvider->getSubaffiliateTrackingId();
				
			if(!empty($providerAffiliateId))
			{
				$affiliateAliases[] = trim($providerAffiliateId);
			}
				
			if(!empty($providerSubaffiliateId))
			{
				$subAffiliateAliases[] = trim($providerSubaffiliateId);
			}
		}
		
		// When cookie values are set the page needs to be refreshed in order for the values to be read.
		// This isn't satisfactory for the needs of MemberMouse. We want values passed from the querystring
		// to be available immediately to drive dynamic content generation. For affiliate and sub-affiliate
		// params, the values stored in the cookies take precedence. For all other values, the value stored
		// in the querystring takes precendence. 
		if(($key == $affiliateId) || ($key == $subAffiliateId))
		{
			$affValue = "";
			
			// try gettin affiliate value from cookies...
			if(isset($_COOKIE[self::$COOKIE_PREFIX.$key]))
			{
				$affValue = $_COOKIE[self::$COOKIE_PREFIX.$key];
			}
			
			// if affiliate value is still empty, check the querystring
			if($affValue == "" && isset($_GET[$key]))
			{
				$affValue = $_GET[$key];
			}
			
			// if affiliate value is still empty, check the aliases
			if($affValue == "")
			{
				$aliases = ($key == $affiliateId) ? $affiliateAliases : $subAffiliateAliases;
				
				foreach($aliases as $alias)
				{
					if(isset($_GET[$alias]))
					{
						$affValue = $_GET[$alias];
					}
				}
			}
			
			return $affValue;
		}
		else 
		{
			$cookieValue = "";
			
			if(isset($_GET[$key]))
			{
				$cookieValue = $_GET[$key];
			}
			else if(isset($_COOKIE[self::$COOKIE_PREFIX.$key])) 
			{
				$cookieValue = $_COOKIE[self::$COOKIE_PREFIX.$key];
			}
			
			return $cookieValue;
		}
		
		return "";
	}
	
	public static function getAffiliateValue()
	{
		return self::getCookie(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFFILIATE));
	}
	
	public static function getSubAffiliateValue()
	{
		return self::getCookie(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE));
	}
}
