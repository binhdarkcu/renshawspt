class MM_OrderTagProcessor
{	
	public static $TAG_ORDER_DATA = "mm_order_data";
	public static $TAG_PURCHASE_LINK = "mm_purchase_link";
	
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is related to orders.
	 * 
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to orders.
	 */
	public static function isOrderSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_ORDER_DATA:
			case self::$TAG_PURCHASE_LINK:
				return true;
				
			default:
				return false;
		}
	}
	
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		switch($smartTag) 
		{
			case self::$TAG_ORDER_DATA:
				return self::mm_order_data($content, $atts, $code);
				
			case self::$TAG_PURCHASE_LINK:
				return self::mm_purchase_link($content, $atts, $code);
				
			default:
				return "Invalid Order SmartTag {$smartTag} found.";
		}
	}
	
	
	/**
	 * This function processes the MM_Order_Data tag. It is responsible for 
	 * returning order data based on the order ID present in the transaction key.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_order_data($content, $atts, $code)
	{
		$order = MM_SmartTagUtil::getCurrentOrder();
		
		// determine if this is a rebill data request
		$isRebill = false;
		if(!is_null(MM_SmartTagUtil::$context))
		{
			$orderAttributes = MM_SmartTagUtil::$context->getOrderAttributes();
			if(!is_null($orderAttributes) && isset($orderAttributes["is_rebill"]))
			{
				$isRebill = $orderAttributes["is_rebill"];
			}
			
			if($isRebill)
			{
				$rebillData = MM_OrderUtils::getRebillAmounts($order);
			}
		}
		
		if($order->isValid())
		{
			if(is_array($atts) && count($atts) > 0)
			{
				foreach($atts as $k=>$v)
				{
					$key = strtolower($k);
					$$key = $v;
				}
			}
			
			if(isset($name))
			{
				switch(strtolower($name))
				{
					case "id":
						return $order->getOrderNumber();
						
					case "total":
						if($isRebill && isset($rebillData["rebill_total"]))
						{
							return (isset($doformat)&&($doformat == "true"))?_mmf($rebillData["rebill_total"], $order->getCurrency()):$rebillData["rebill_total"];
						}
						else 
						{
							return (isset($doformat)&&($doformat == "true"))?$order->getTotal(true):$order->getTotal(false);
						}
						
					case "subtotal":
						if($isRebill && isset($rebillData["rebill_subtotal"]))
						{
							return (isset($doformat)&&($doformat == "true"))?_mmf($rebillData["rebill_subtotal"], $order->getCurrency()):$rebillData["rebill_subtotal"];
						}
						else
						{
							return (isset($doformat)&&($doformat == "true"))?$order->getSubtotal(true):$order->getSubtotal(false);
						}
						
					case "discount":
						if($isRebill && isset($rebillData["rebill_discount"]))
						{
							return (isset($doformat)&&($doformat == "true"))?_mmf($rebillData["rebill_discount"], $order->getCurrency()):$rebillData["rebill_discount"];
						}
						else
						{
							return (isset($doformat)&&($doformat == "true"))?$order->getDiscount(true):$order->getDiscount(false);
						}
						
					case "shipping":
						if($isRebill && isset($rebillData["rebill_shipping"]))
						{
							return (isset($doformat)&&($doformat == "true"))?_mmf($rebillData["rebill_shipping"], $order->getCurrency()):$rebillData["rebill_shipping"];
						}
						else
						{
							return (isset($doformat)&&($doformat == "true"))?$order->getShipping(true):$order->getShipping(false);
						}
						
					case "shippingmethod":
						return $order->getShippingOptionDescription();
						
					case "billingaddress":
						return $order->getBillingAddress()->getAddressLine1();
						
					case "billingcity":
						return $order->getBillingAddress()->getCity();
						
					case "billingstate":
						return $order->getBillingAddress()->getState();
						
					case "billingzipcode":
						return $order->getBillingAddress()->getPostalCode();
						
					case "billingcountry":
						return $order->getBillingAddress()->getCountry();
						
					case "billingcountryname":
						return MM_CountryUtils::getCountryName($order->getBillingAddress()->getCountry());
						
					case "shippingaddress":
						return $order->getShippingAddress()->getAddressLine1();
						
					case "shippingcity":
						return $order->getShippingAddress()->getCity();
						
					case "shippingstate":
						return $order->getShippingAddress()->getState();
						
					case "shippingzipcode":
						return $order->getShippingAddress()->getPostalCode();
						
					case "shippingcountry":
						return $order->getShippingAddress()->getCountry();
						
					case "shippingcountryname":
						return MM_CountryUtils::getCountryName($order->getShippingAddress()->getCountry());
						
					case "affiliateid":
						return $order->getAffiliateId();
						
					case "subaffiliateid":
						return $order->getSubAffiliateId();
						
					case "ipaddress":
						return $order->getIPAddress();
						
					case "productid":
						$productId = "";
						$orderItems = $order->getProducts();
						
						foreach($orderItems as $orderItem)
						{
							$product = new MM_Product($orderItem->getItemId());
								
							if($product->isValid())
							{
								// assumes only one product per order
								$productId = $product->getId();
								break;
							}
						}
						
						return $productId;
						
					case "productname":
						$productName = "";
						$orderItems = $order->getProducts();
					
						foreach($orderItems as $orderItem)
						{
							$product = new MM_Product($orderItem->getItemId());
					
							if($product->isValid())
							{
								// assumes only one product per order
								$productName = $product->getName();
								break;
							}
						}
					
						return $productName;
						
					case "couponcode":
						$couponCode = "";
						$orderItems = $order->getCoupons();
						
						foreach($orderItems as $orderItem)
						{
							$coupon = new MM_Coupon($orderItem->getItemId());
						
							if($coupon->isValid())
							{
								// assumes only one coupon code per order
								$couponCode = $coupon->getCouponCode();
								break;
							}
						}
						
						return $couponCode;
						
					case "giftlink":
						$giftLink = MM_NO_DATA;
						$orderItems = $order->getProducts();
					
						foreach($orderItems as $orderItem)
						{	
							if($orderItem->isGift())
							{
								$giftCouponCode = MM_Coupon::getGiftCouponCode($orderItem->getId());
								
								if(!empty($giftCouponCode))
								{
									$giftLink = MM_CorePageEngine::getRedeemGiftPageStaticLink($orderItem->getItemId());
									$giftLink = MM_Utils::appendUrlParam($giftLink, "coupon", $giftCouponCode);
								}
							}
						}
					
						return $giftLink;
						
					default:
						return "Invalid SmartTag Configuration: The 'name' attribute '{$name}' is invalid for SmartTag {$code}.";
				}
			}
			else
			{
				return "Invalid SmartTag Configuration: The 'name' attribute is required for SmartTag {$code}.";
			}
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Purchase_Link tag. It is responsible for
	 * returning a purchase link based on the productId or membershipId attribute passed.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_purchase_link($content, $atts, $code)
	{
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		// handle ClickBank purchase links
		if(isset($paymentmethod) && strtolower($paymentmethod) == strtolower(MM_PaymentService::$CLICKBANK_SERVICE_TOKEN))
		{
			// get product ID
			if(isset($productid) || isset($membershipid))
			{
				if(isset($productid))
				{
					$product = new MM_Product($productid);
			
					if(!$product->isValid())
					{
						return "Invalid SmartTag Configuration: Product ID '{$productid}' is invalid.";
					}
				}
				else if(isset($membershipid))
				{
					$membership = new MM_MembershipLevel($membershipid);
			
					if($membership->isValid())
					{
						if(!$membership->isFree())
						{
							$productid = $membership->getDefaultProduct();
						}
					}
					else
					{
						return "Invalid SmartTag Configuration: Membership Level ID '{$membershipid}' is invalid.";
					}
				}
			}
			
			if(isset($productid))
			{
				$service = MM_PaymentServiceFactory::getPaymentService(MM_PaymentService::$CLICKBANK_SERVICE_TOKEN);
				
				if($service->isActive())
				{
					$url = $service->getPurchaseLink($productid);
					
					if(!is_null($url))
					{
						return $url;
					}
					else 
					{
						return "No ClickBank product mapped to product ID {$productid}.";
					}
				}
				else 
				{
					return "Invalid SmartTag Configuration: ClickBank is not an active payment method.";
				}
			}
		}
		
		// handle all other purchase links
		$currentUser = MM_SmartTagUtil::getCurrentUser(true);
		if($currentUser->isValid() && (empty($usecardonfile) || $usecardonfile == "true"))
		{
			$hasCardOnFile = $currentUser->hasCardOnFile();
		}
		else
		{
			$hasCardOnFile = false;
		}
		
		if(isset($productid) || isset($membershipid))
		{
			if(isset($productid))
			{
				$product = new MM_Product($productid);
				
				if($product->isValid())
				{
					if(!$hasCardOnFile)
					{
						$url = MM_CorePageEngine::getCheckoutPageStaticLink($productid);
						
						if(isset($autologin) && $autologin == "true")
						{
							// generate a login token
							$currentUser = MM_SmartTagUtil::getCurrentUser();
							if($currentUser->isValid())
							{
								$loginTokenResponse = MM_LoginToken::generateToken($currentUser->getId());
								
								if (MM_Response::isSuccess($loginTokenResponse))
								{
									$loginToken = $loginTokenResponse->message;
									$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_LOGIN_TOKEN, $loginToken);
								}
							}
						}
						
						if(isset($isgift) && $isgift == "true")
						{
							$url = MM_Utils::appendUrlParam($url, "gift", "yes");
						}
						
						return $url;
					}
					else
					{
						$width = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_WIDTH);
						$height = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_HEIGHT);
						$isgift = (isset($isgift) && $isgift == "true") ? "true" : "false";
						
						if(empty($bypassconfirmation) || $bypassconfirmation != "true")
						{
							return "javascript:pymtutils_js.showPaymentConfirmation({$currentUser->getId()}, {$productid}, {$height}, {$width}, '{$isgift}');";
						}
						else
						{		
							return "javascript:pymtutils_js.placeOrderCardOnFile({$currentUser->getId()}, {$productid}, 'user', '{$isgift}');";
						}
					}
				}
				else
				{
					return "Invalid SmartTag Configuration: Product ID '{$productid}' is invalid.";
				}
			}
			else if(isset($membershipid))
			{
				$membership = new MM_MembershipLevel($membershipid);
				
				if($membership->isValid())
				{
					if($membership->isFree() || !$hasCardOnFile)
					{
						$url = MM_CorePageEngine::getCheckoutPageStaticLink($membershipid, true);

						if(!$membership->isFree() && isset($isgift) && $isgift == "true")
						{
							$url = MM_Utils::appendUrlParam($url, "gift", "yes");
						}
						
						return $url;
					}
					else
					{
						$productid = $membership->getDefaultProduct();
						$width = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_WIDTH);
						$height = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_HEIGHT);
						$isgift = (isset($isgift) && $isgift == "true") ? "true" : "false";
						
						if(empty($bypassconfirmation) || $bypassconfirmation != "true")
						{
							return "javascript:pymtutils_js.showPaymentConfirmation({$currentUser->getId()}, {$productid}, {$height}, {$width}, '{$isgift}');";
						}
						else
						{
							return "javascript:pymtutils_js.placeOrderCardOnFile({$currentUser->getId()}, {$productid}, 'user', '{$isgift}');";
						}
					}
				}
				else
				{
					return "Invalid SmartTag Configuration: Membership Level ID '{$membershipid}' is invalid.";
				}
			}
		}
		else
		{
			$membership = MM_MembershipLevel::getDefaultMembership();
			$url = MM_CorePageEngine::getCheckoutPageStaticLink($membership->getId(), true);
			
			if(!$membership->isFree() && isset($isgift) && $isgift == "true")
			{
				$url = MM_Utils::appendUrlParam($url, "gift", "yes");
			}
			
			return $url;
		}
	}
}
