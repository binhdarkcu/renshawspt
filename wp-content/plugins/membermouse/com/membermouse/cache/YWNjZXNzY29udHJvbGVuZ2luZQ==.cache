/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */

class MM_AccessControlEngine
{
	public static $ACCESS_TYPE_MEMBERSHIP = "membership";
	public static $ACCESS_TYPE_BUNDLE = "bundle";
	
	/**
	 * Convenience method to extract the products from an order and pass them to assignAccessFromOrderItems
	 * 
	 * @param MM_Order $order The order to use when assigning access rights
	 * @return MM_Response passed through from MM_AccessControlEngine::assignAccessFromOrderItems
	 */
	public static function assignAccessFromOrder(MM_Order $order)
	{
		return self::assignAccessFromOrderItems($order->getCustomer(),$order->getProducts());
	}
	
	
	/**
	 * Assign membership and/or bundle access given a user and an array of order items
	 * Currently, special products are used to represent memberships and bundles and products are stored in order items,
	 * so the order items array is scanned, and based on the existence of these products, access is applied. Products that
	 * do not grant the purchaser additional rights are ignored
	 *
	 * @param MM_User $user The user who will be receiving access modification
	 * @param Array $orderItemsArray An array of MM_OrderItem objects
	 * @return MM_Response object representing the success or failure of the assignment of membership and/or bundle access rights to the user. See MM_AccessControlEngine::assignMembershipToUser() and MM_AccessControlEngine::assignBundleToUser()
	 */
	public static function assignAccessFromOrderItems(MM_User $user, $orderItemsArray)
	{
		if (!$user->isValid())
		{
			return new MM_Response("Invalid user, cannot assign access rights",MM_Response::$ERROR);
		}
	
		if (!is_array($orderItemsArray) || (count($orderItemsArray) == 0))
		{
			return new MM_Response("Error assigning access to user ".$user->getUsername(),MM_Response::$ERROR);
		}
		
		$associatedAccessFound = false;
		
		foreach ($orderItemsArray as $orderItem)
		{
			$response = new MM_Response();
			
			// if this is a gift, create a gift coupon and bypass assigning access 
			if($orderItem->isGift())
			{
				// create gift coupon
				$couponCode = MM_Coupon::generateCouponCode();
				
				if(MM_Response::isError($couponCode))
				{
					return new MM_Response("Unable to create gift coupon", MM_Response::$ERROR);
				}
				
				$coupon = new MM_Coupon();
				$coupon->setIsGift(true);
				$coupon->setGiftUserId($user->getId());
				$coupon->setGiftOrderItemId($orderItem->getId());
				$coupon->setQuantity(1);
				$coupon->setCouponType(MM_Coupon::$TYPE_FREE);
				$coupon->setCouponName("Gift Coupon (Member ID: #{$user->getId()})");
				$coupon->setCouponCode($couponCode->message);
				$products = array($orderItem->getItemId()=>$orderItem->getItemId());
				$coupon->setProducts($products);
				$result = $coupon->commitData();
				
				if($result === false)
				{
					return new MM_Response("Unable to create gift coupon", MM_Response::$ERROR);
				}
				
				// bypass assigning access to this customer since access will be redeemed by 
				// the customer who uses the coupon
				continue;
			}
			
			$product = new MM_Product($orderItem->getItemId());
			if ($product->isValid())
			{
				$membership = $product->getAssociatedMembership();
				if ($membership->isValid())
				{
					// populate the order item access table prior to applying access so that the isComplimentary method
					// will return the appropriate value in the push notifications
					$orderItemAccess = new MM_OrderItemAccess();
					$orderItemAccess->setOrderItemId($orderItem->getId());
					$orderItemAccess->setAccessType(MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP);
					$orderItemAccess->setAccessTypeId($membership->getId());
					$orderItemAccess->setUserId($user->getId());
					$orderItemAccess->commitData();
					
					$response = self::assignMembershipToUser($user, $membership);
						
					if(MM_Response::isSuccess($response))
					{
						$associatedAccessFound = true;
						
						$response = self::cancelPreviousProductsForMembership($user, $membership->getId(), $orderItem); 
						if(MM_Response::isError($response))
						{
							return $response;
						}
					}
					else
					{
						// delete order item access if access wasn't applied successfully
						$orderItemAccess->delete();
					}
				}
	
				$bundle = $product->getAssociatedBundle();
				if ($bundle->isValid())
				{
					// populate the order item access table prior to applying access so that the isComplimentary method
					// will return the appropriate value in the push notifications
					$orderItemAccess = new MM_OrderItemAccess();
					$orderItemAccess->setOrderItemId($orderItem->getId());
					$orderItemAccess->setAccessType(MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE);
					$orderItemAccess->setAccessTypeId($bundle->getId());
					$orderItemAccess->setUserId($user->getId());
					$orderItemAccess->commitData();
					
					$response = self::assignBundleToUser($user, $bundle);	

					if(MM_Response::isSuccess($response))
					{
						$associatedAccessFound = true;
					}
					else
					{
						// delete order item access if access wasn't applied successfully
						$orderItemAccess->delete();
					}
				}
			}
				
			// check for errors
			if(MM_Response::isError($response))
			{
				return $response;
			}
		} 
		
		// if member has the default membership and their account is pending|error status and 
		// no associated access rights were associated with the products purchased, set the account to active
		$dfltMembership = MM_MembershipLevel::getDefaultMembership();
		
		if(($associatedAccessFound == false) && (intval($user->getMembershipId()) == intval($dfltMembership->getId())) 
			&& ($user->getStatus() == MM_Status::$PENDING_ACTIVATION || $user->getStatus() == MM_Status::$ERROR))
		{
			$user->setStatus(MM_Status::$ACTIVE);
			$result = $user->commitData();
			
			// check for errors
			if(MM_Response::isError($result))
			{
				return $result;
			}
		} 

		// if this line is reached all access rights were applied successfully 
		return new MM_Response();
	}
	
	
	/**
	 * Assign access to a membership given a user and a membership
	 *
	 * @param MM_User $user The user who will be receiving the membership
	 * @param MM_MembershipLevel $membership The membership to apply to the user
	 * @return MM_Response object representing the success or failure of the commit of the user object representing the user with the modified rights. See MM_User::commitData()
	 */
	public static function assignMembershipToUser(MM_User $user, MM_MembershipLevel $membership)
	{
		if(!$user->isValid())
		{
			return new MM_Response("Invalid user, cannot assign access rights", MM_Response::$ERROR);
		}

		if(!$membership->isValid())
		{
			return new MM_Response("Invalid membership, cannot assign access rights", MM_Response::$ERROR);
		}
		
		// checks for existing members (accounts with pending/error
		// status are still considered to be in an initial state because they've never been active) ...
		if(($user->getStatus() != MM_Status::$PENDING_ACTIVATION && $user->getStatus() != MM_Status::$ERROR))
		{
			// check if existing member is changing their membership 
			if($user->getMembershipId() != $membership->getId())
			{
				return self::changeMembership($user, $membership->getId());
			}
			
			// check if member is purchasing the same membership again and if it's an expiring membership
			// update their expiration date
			else 
			{
				if($membership->doesExpire())
				{
					// update expiration date
					if($user->getStatus() == MM_Status::$EXPIRED)
					{
						$newExpirationDate = $membership->getExpirationDate(MM_Utils::getCurrentTime());
					}
					else
					{
						$crntExpirationDate = $user->getExpirationDate();
							
						if(strtotime(MM_Utils::getCurrentTime()) > strtotime($crntExpirationDate))
						{
							$crntExpirationDate = MM_Utils::getCurrentTime();
						}
						
						$newExpirationDate = $membership->getExpirationDate($crntExpirationDate);
					}
					
					$user->setExpirationDate($newExpirationDate);
				}
			}
		}
	
		$user->setMembershipId($membership->getId());
		$user->setStatus(MM_Status::$ACTIVE);
		$user->updateWPUserRole();
		return $user->commitData();
	}
	
	
	/**
	 * Assign access to a bundle given a user and a bundle
	 *
	 * @param MM_User $user The user who will be receiving the membership
	 * @param MM_Bundle $bundle The bundle to apply to the user
	 * @return MM_Response object representing the success or failure of the commit of the user object representing the user with the modified rights. See MM_User::commitData()
	 */
	public static function assignBundleToUser(MM_User $user, MM_Bundle $bundle)
	{
		if (!$user->isValid())
		{
			return new MM_Response("Invalid user, cannot assign access rights", MM_Response::$ERROR);
		}
		
		if (!$bundle->isValid())
		{
			return new MM_Response("Invalid bundle, cannot assign access rights", MM_Response::$ERROR);
		}
		
		// determine if this is the first time the user is having this bundle applied to their account or
		// if the expiration date should be updated
		if($bundle->doesExpire())
		{
			$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundle->getId());
			
			if($appliedBundle->isValid())
			{
				// update expiration date
				if($appliedBundle->getStatus() == MM_Status::$EXPIRED)
				{
					$newExpirationDate = $bundle->getExpirationDate(MM_Utils::getCurrentTime());
				}
				else
				{
					$crntExpirationDate = $appliedBundle->getExpirationDate();
					
					if(strtotime(MM_Utils::getCurrentTime()) > strtotime($crntExpirationDate))
					{
						$crntExpirationDate = MM_Utils::getCurrentTime();
					}
					
					$newExpirationDate = $bundle->getExpirationDate($crntExpirationDate);
				}
					
				$appliedBundle->setExpirationDate($newExpirationDate);
				$response = $appliedBundle->commitData();
					
				if(MM_Response::isError($response))
				{
					return new MM_Response("Error updating expiration date on bundle.", MM_Response::$ERROR);
				}
			}
		}
		
		$result = $user->addBundle($bundle->getId());
		
		if(MM_Response::isError($result))
		{
			return $result;
		}
		
		$dfltMembership = $bundle->getDfltMembership();
		
		// check if user has a membership and if not, apply the default membership
		if(is_null($user->getMembershipId()) || intval($user->getMembershipId()) == 0)
		{
			$response = self::assignMembershipToUser($user, $dfltMembership);
			
			if(MM_Response::isError($response))
			{
				return new MM_Response("Error applying bundle, could not assign default membersip level.", MM_Response::$ERROR);
			}
		}
		else if((intval($user->getMembershipId()) == intval($dfltMembership->getId())) && 
				($user->getStatus() == MM_Status::$PENDING_ACTIVATION || $user->getStatus() == MM_Status::$ERROR))
		{
			// if user has a default membership but it's pending or in error status, mark it as active
			// this covers a case where the customer's first purchase was a bunlde, there was an error
			// and then they fixed the error and successfully purchased the bundle.
			$user->setStatus(MM_Status::$ACTIVE);
			$result = $user->commitData();
		}
		
		return $result;
	}
	
	
	/**
	 * Remove access to a bundle given a user and a bundle and optionally a status. This method also calls 
	 * MM_PaymentUtils::cancelSubscription to cancel any recurring billing.
	 *
	 * @param MM_User $user The user to remove the bundle from
	 * @param MM_Bundle $bundle The bundle to remove from the user
	 * @param Number $forceStatus optionally a status can be passed to dictate if the bundle should be paused or canceled
	 * @return MM_Response object representing the success or failure of the commit of the user object representing the user with the modified rights. See MM_User::commitData()
	 */
	public static function removeBundleFromUser(MM_User $user, MM_Bundle $bundle, $forceStatus="")
	{
		if (!$user->isValid())
		{
			return new MM_Response("Invalid user, cannot assign access rights", MM_Response::$ERROR);
		}
		
		if ($bundle->isValid())
		{
			if(!empty($forceStatus) && $forceStatus != MM_Status::$CANCELED && $forceStatus != MM_Status::$PAUSED)
			{
				return new MM_Response("Invalid status '{$forceStatus}'. When removing bundles, they can only be paused or canceled.", MM_Response::$ERROR);
			}
			
			$result = MM_PaymentUtils::cancelSubscription($user, $bundle);
			
			if(MM_Response::isSuccess($result))
			{
				$canceledOrderItems = $result->getData("orderItems");
				
				// determine if cancellation should be pending
				if(is_array($canceledOrderItems) && count($canceledOrderItems) > 0)
				{
					// get the first order item whose subscription was just canceled
					$orderItem = MM_OrderItem::create($canceledOrderItems[0]);
						
					$cancellationDate = MM_AccessControlEngine::getCancellationDateByOrderItem($orderItem);
				
					if(!is_null($cancellationDate))
					{
						// set the cancellation date for the applied bundle and
						// set the pending status value
						$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundle->getId());
						
						if($appliedBundle->isValid())
						{
							$appliedBundle->setCancellationDate($cancellationDate);
							$pendingStatus = $forceStatus;
							
							if(empty($forceStatus))
							{
								$cancellationMethod = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_DFLT_CANCELLATION_METHOD);
								if ($cancellationMethod == MM_CancellationMethod::$CANCEL_HARD)
								{
									$pendingStatus = MM_Status::$CANCELED;
								}
								else if ($cancellationMethod == MM_CancellationMethod::$CANCEL_PAUSE)
								{
									$pendingStatus = MM_Status::$PAUSED;
								}
								else
								{
									$pendingStatus = MM_Status::$CANCELED;
								}
							}
							
							$appliedBundle->setPendingStatus($pendingStatus);
							$result = $appliedBundle->commitData();
							
							if(MM_Response::isSuccess($result))
							{
								$forceStatus = MM_Status::$PENDING_CANCELLATION;
							}
						}
					}
				}
				
				return $user->removeBundle($bundle->getId(), $forceStatus);
			}
			else
			{
				return $result;
			}
		}
		else 
		{
			return new MM_Response("Invalid bundle, cannot remove access rights", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Returns a url for the paid confirmation page that pertains to an order
	 * @param MM_Order $order The order to generate a confirmation url for
	 * @return String confirmation url on success, boolean false on error
	 */
	public static function getConfirmationUrlForOrder(MM_Order $order)
	{
		$orderProducts = $order->getProducts();
		$firstProduct = array_shift($orderProducts);
		$params = array();
		
		if (($firstProduct instanceof MM_OrderItem) && ($firstProduct->getItemType() == MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT))
		{
			$firstProduct = new MM_Product($firstProduct->getItemId()); //reassign the associated product into the variable
			$membership = $firstProduct->getAssociatedMembership();
			$bundle = $firstProduct->getAssociatedBundle();
			$params["orderId"] = $order->getId();
			
			if ($membership->isValid() && $membership->isFree())
			{
				$params['isFree'] = $membership->isFree();
				$params['refType'] = MM_TYPE_MEMBERSHIP_LEVEL;
				$params['refId'] = $membership->getId();
			}
			else if ($bundle->isValid() && $bundle->isFree())
			{
				$params['isFree'] = $bundle->isFree();
				$params['refType'] = MM_TYPE_BUNDLE;
				$params['refId'] = $bundle->getId();
			}
			else
			{
				$params['isFree'] = 0;
				$params['refType'] = MM_TYPE_PRODUCT;
				$params['refId'] = $firstProduct->getId();
			}
				
			$confirmationUrl = MM_CorePageEngine::getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
			return $confirmationUrl;
		}
		else 
		{
			return false;
		}
	}
	
	
	/**
	 * For the specified order item, find any bundles or membership levels attached to the products contained within, and
	 * revoke access to those items
	 * 
	 * @param MM_OrderItem $orderItem The item to disable
	 * @return MM_Response indicating whether the operation was successful or encountered an error
	 */
	public static function revokeAccessForOrderItem(MM_OrderItem $orderItem)
	{
		global $wpdb;
		
		if (is_null($orderItem) || ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT))
		{
			return new MM_Response("Invalid order item sent to revokeAccessForOrderItem()",MM_Response::$ERROR);
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		if (!$order->isValid())
		{
			return new MM_Response("Invalid order supplied in revokeAccessForOrderItem()",MM_Response::$ERROR);
		}
		
		// if this order item is a gift, it may be that access is associated with another order item so
		// attempt to lookup the other order item
		if($orderItem->isGift())
		{
			$couponsTable = MM_TABLE_COUPONS;
			$couponUsageTable = MM_TABLE_COUPON_USAGE;
				
			$sql = "SELECT cu.product_order_item_id, c.id as coupon_id FROM {$couponsTable} c LEFT JOIN {$couponUsageTable} cu ".
				"ON (c.id = cu.coupon_id) WHERE c.gift_order_item_id={$orderItem->getId()} LIMIT 1;";
			
			$results = $wpdb->get_row($sql);

			if($results)
			{
				if(!empty($results->product_order_item_id))
				{
					$orderItem = MM_OrderItem::create($results->product_order_item_id);
				
					if(!$orderItem->isValid())
					{
						return new MM_Response("Invalid order item with ID '{$results->product_order_item_id}' associated with gift",MM_Response::$ERROR);
					}
				}
				else 
				{
					// if we've gotten here it means that the gift coupon hasn't been redeemed yet so we want to remove the coupon
					if(!empty($results->coupon_id))
					{
						$coupon = new MM_Coupon($results->coupon_id);
						
						if($coupon->isValid())
						{
							$coupon->remove();
						}
					}
					else
					{
						return new MM_Response();
					}
				}
			}
			else 
			{
				return new MM_Response();
			}
		}
		
		// get access associated with the order item
		$orderItemAccessTable = MM_TABLE_ORDER_ITEM_ACCESS;
		$orderItemsTable = MM_TABLE_ORDER_ITEMS;
		$appliedBundlesTable = MM_TABLE_APPLIED_BUNDLES;
		$userDataTable = MM_TABLE_USER_DATA;
		
		$sql = "SELECT order_item_id, user_id, access_type, access_type_id FROM {$orderItemAccessTable} WHERE order_item_id = '{$orderItem->getId()}';";
		$orderItemAccessItems = $wpdb->get_results($sql);
		
		if($orderItemAccessItems)
		{
			$cancellationMethod = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_DFLT_CANCELLATION_METHOD);
			$newStatus = MM_Status::$CANCELED;
			if ($cancellationMethod == MM_CancellationMethod::$CANCEL_HARD)
			{
				$newStatus = MM_Status::$CANCELED;
			}
			else if ($cancellationMethod == MM_CancellationMethod::$CANCEL_PAUSE)
			{
				$newStatus = MM_Status::$PAUSED;
			}
			
			// determine if order item is associated with a subscription and determine if access should be 
			// marked pending cancellation
			$cancellationDate = null;
			if($orderItem->isRecurring())
			{
				$cancellationDate = MM_AccessControlEngine::getCancellationDateByOrderItem($orderItem);
			}
			
			foreach($orderItemAccessItems as $orderItemAccessItem)
			{	
				$user = new MM_User($orderItemAccessItem->user_id);
				
				if(!$user->isValid())
				{
					continue;
				}
				
				
				// we need to check if the same access is being provided by another purchase, and only revoke if its not
				$otherAccess = false;
				if ($orderItemAccessItem->access_type == MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE)
				{
					$sql = "SELECT COUNT(*) AS other_access ".
						   "FROM {$orderItemAccessTable} oia INNER JOIN {$orderItemsTable} oi ON (oia.order_item_id = oi.id) ".
						   "INNER JOIN {$appliedBundlesTable} ab ON (oia.access_type_id = ab.bundle_id) ".
						   "WHERE oia.order_item_id != '{$orderItemAccessItem->order_item_id}' ".
						   "AND oia.user_id = '{$orderItemAccessItem->user_id}' ".
						   "AND oia.access_type = '{$orderItemAccessItem->access_type}' ".
						   "AND oia.access_type_id = '{$orderItemAccessItem->access_type_id}'".
						   "AND oi.status != %s";
					
					$otherAccess = $wpdb->get_var($wpdb->prepare($sql,MM_OrderItem::$STATUS_RECURRING_CANCELLED));
					$otherAccess = (is_numeric($otherAccess) && ($otherAccess > 0));
				}
				else if ($orderItemAccessItem->access_type == MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP)
				{
					$sql =  "SELECT COUNT(*) AS other_access ".
						   	"FROM {$orderItemAccessTable} oia INNER JOIN {$orderItemsTable} oi ON (oia.order_item_id = oi.id) ".
						   	"INNER JOIN {$userDataTable} ud ON (oia.access_type_id = ud.membership_level_id) ".
						   	"WHERE oia.order_item_id != '{$orderItemAccessItem->order_item_id}' ".
						   	"AND oia.user_id = '{$orderItemAccessItem->user_id}' ".
						   	"AND oia.access_type = '{$orderItemAccessItem->access_type}' ".
						   	"AND oia.access_type_id = '{$orderItemAccessItem->access_type_id}'".
							"AND oi.status != %s";
					
					$otherAccess = $wpdb->get_var($wpdb->prepare($sql,MM_OrderItem::$STATUS_RECURRING_CANCELLED));
					$otherAccess = (is_numeric($otherAccess) && ($otherAccess > 0));
				}
				
				if (!$otherAccess)
				{
					// remove access based on the access type
					switch($orderItemAccessItem->access_type)
					{
						case MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP:
							// only update if membership level matches and status is different
							if(($user->getMembershipId() == $orderItemAccessItem->access_type_id) && ($user->getStatus() != $newStatus))
							{
								$user->setStatus($newStatus);
								
								if(!is_null($cancellationDate))
								{
									// set the cancellation date for the membership level and
									// set the pending status value
									$user->setStatus(MM_Status::$PENDING_CANCELLATION);
									$user->setCancellationDate($cancellationDate);
									$user->setPendingStatus($newStatus);
								}
								
								$res = $user->commitData();
							
								if(MM_Response::isError($res))
								{
									return $res;
								}
							}
							break;
							
						case MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE:
							if (!$otherAccess)
							{
								if(!is_null($cancellationDate))
								{
									// set the cancellation date for the applied bundle and
									// set the pending status value
									$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $orderItemAccessItem->access_type_id);
								
									if($appliedBundle->isValid())
									{
										$appliedBundle->setCancellationDate($cancellationDate);	
										$appliedBundle->setPendingStatus($newStatus);
										$result = $appliedBundle->commitData();
											
										if(MM_Response::isSuccess($result))
										{
											$newStatus = MM_Status::$PENDING_CANCELLATION;
										}
									}
								}
								
								$user->removeBundle($orderItemAccessItem->access_type_id, $newStatus);
							}
							break;
							
						default:
							continue;
					}
				}
			}
		}
		else
		{
			// unable to locate access associated with order item / user combination. just return
			// success as technically the function has completed successfully in that any associated 
			// access has been removed
			return new MM_Response();
		}
		
		//if execution gets here, everything is probably ok
		return new MM_Response();
	}
	
	
	/**
	 * This method is responsible for changing a user's membership status. This method also calls 
	 * MM_PaymentUtils::cancelSubscription to cancel any recurring billing.
	 * 
	 * @param MM_User $user The user to change the membership status of
	 * @param Number $newStatus The ID of the status to change the membership status to
	 * 
	 * @return MM_Response indicating whether the operation was successful or encountered an error
	 */
	public static function changeMembershipStatus(MM_User $user, $newStatus)
	{	  
		if(!empty($newStatus))
		{
			if($user->isValid())
			{
				if($user->getStatus() != $newStatus)
				{
					$result = new MM_Response();
					
					// if changing to paused/canceled status, cancel subscription
					if($newStatus == MM_Status::$CANCELED || $newStatus == MM_Status::$PAUSED)
					{
						$result = MM_PaymentUtils::cancelSubscription($user, $user->getMembershipLevel());
						
						if(MM_Response::isSuccess($result))
						{ 
							$cancelChecked = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_DFLT_CANCELLATION_METHOD); 
							if($newStatus == MM_Status::$CANCELED && $cancelChecked == MM_CancellationMethod::$CANCEL_PAUSE)
							{ 
								$user->setStatus(MM_Status::$PAUSED);
							}
							else
							{ 
								$user->setStatus($newStatus);
							} 
							
							$canceledOrderItems = $result->getData("orderItems");
						
							// if attempting to cancel/pause, determine if cancellation should be pending
							if(($newStatus == MM_Status::$CANCELED || $newStatus == MM_Status::$PAUSED)
							&& is_array($canceledOrderItems) && count($canceledOrderItems) > 0)
							{
								// get the first order item whose subscription was just canceled
								$orderItem = MM_OrderItem::create($canceledOrderItems[0]);
									
								$cancellationDate = MM_AccessControlEngine::getCancellationDateByOrderItem($orderItem);
						
								if(!is_null($cancellationDate))
								{
									// set the cancellation date for the membership level and
									// set the pending status value
									$user->setStatus(MM_Status::$PENDING_CANCELLATION);
									$user->setCancellationDate($cancellationDate);
									$user->setPendingStatus($newStatus);
								}
							}
								
							$result = $user->commitData();
						}
						else
						{
							return $result;
						}
					}
					else 
					{
						$membership = $user->getMembershipLevel();
						if($membership->doesExpire())
						{
							// update expiration date
							if($user->getStatus() == MM_Status::$EXPIRED)
							{
								$newExpirationDate = $membership->getExpirationDate(MM_Utils::getCurrentTime());
								$user->setExpirationDate($newExpirationDate);
							}
						}
						
						$user->setStatus($newStatus);
						$result = $user->commitData();
					}		
				}
				else 
				{
					$result = new MM_Response("Membership status is already set to '".MM_Status::getName($newStatus)."'", MM_Response::$ERROR);
				}
			
				if(MM_Response::isSuccess($result))
				{
					return new MM_Response("Membership status for '".$user->getUsername()."' successfully changed to '".MM_Status::getName($newStatus)."'");
				}
				else
				{
					return $result;
				}
			}
			else
			{
				return new MM_Response("Error changing membership status. Invalid member ID '".$memberId."'.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error changing membership status. Status cannot be empty.", MM_Response::$ERROR);
		}
	}


	/*
	 * This method looks in current membership (provided they are the same) and then applies cancelation to any
	 * existing memberships products that exist currently.  Therefor if a user upgrades a current membership from one product
	 * to another, we cancel the previous gracefully.
	 *
	 * @param MM_User $user The user to modify the membership product of
	 * @param Number $newMembershipId the ID of the membership to change to
	 * @param MM_OrderItem newOrderItem is a order item object being purchased
	 *
	 * @return MM_Response indicating whether the operation was successful or encountered an error
	 */
	public static function cancelPreviousProductsForMembership(MM_User $user, $newMembershipId, MM_OrderItem $newOrderItem)
	{ 
		if($newOrderItem->getItemType() == MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			if($user->isValid())
			{
				if($user->getMembershipId() == $newMembershipId)
				{
					$items = MM_OrderItemAccess::getOrderItemByAccess($user->getId(), MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP, $user->getMembershipLevel()->getId());
						
					foreach($items as $orderItemAccess)
					{
						if($orderItemAccess->isValid())
						{
							$existingOrderItem = new MM_OrderItem($orderItemAccess->getOrderItemId());
								
							if($existingOrderItem->isValid())
							{
								if($existingOrderItem->getItemType()==MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
								{ 
									if($existingOrderItem->isRecurring())
									{
										if($newOrderItem->getId()!=$existingOrderItem->getId())
										{
											$response = MM_PaymentUtils::cancelSubscriptionForOrderItem($existingOrderItem);

											if($response->type != MM_Response::$SUCCESS)
											{
												return $response;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return new MM_Response();
	} 
	
	
	/**
	 * This method is responsible for changing a user's membership. This method also calls 
	 * MM_PaymentUtils::cancelSubscription to cancel any active recurring billing on the previous 
	 * membership. 
	 * 
	 * @param MM_User $user The user to change the membership of
	 * @param Number $newMembershipId the ID of the membership to change to
	 * @param boolean $ignorePaymentServiceErrors Whether to continue or not if the payment service returns an error (ie. if the subscription is already canceled remotely)
	 * 
	 * @return MM_Response indicating whether the operation was successful or encountered an error
	 */
	public static function changeMembership(MM_User $user, $newMembershipId, $ignorePaymentServiceErrors=false)
	{	
		if($user->isValid())
		{
			$newMembership = new MM_MembershipLevel($newMembershipId);
			
			if(!$newMembership->isValid())
			{
				return new MM_Response("Error changing membership. Invalid membership ID '".$newMembershipId."'.", MM_Response::$ERROR);
			}
		
			if($user->getMembershipId() != $newMembershipId)
			{
				// cancel subscription related to current membership
				$result = MM_PaymentUtils::cancelSubscription($user, $user->getMembershipLevel());
					
				if(MM_Response::isSuccess($result) || $ignorePaymentServiceErrors)
				{
					$user->setMembershipId($newMembership->getId());
					$user->setStatus(MM_Status::$ACTIVE);
					
					if($newMembership->doesExpire())
					{
						// set expiration date
						$expirationDate = $newMembership->getExpirationDate(MM_Utils::getCurrentTime());	
						$user->setExpirationDate($expirationDate);
					}

					$user->updateWPUserRole();
					$result = $user->commitData();
				}
				else
				{
					$result->addData("payment_service_cancel_failed","true"); //add indicator to result to let the front-end know that the operation failed due to a payment service error during cancellation
					return $result;
				}
			}
			else 
			{
				$result = new MM_Response("Membership is already set to '".$newMembership->getName()."'", MM_Response::$ERROR);
			}
		
			if(MM_Response::isSuccess($result))
			{
				return new MM_Response("Membership for '".$user->getUsername()."' successfully changed to '".$newMembership->getName()."'");
			}
			else
			{
				return $result;
			}
		}
		else
		{
			return new MM_Response("Error changing membership. Invalid member ID '".$memberId."'.", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * This method is responsible for changing the status of a bundle on a member's account.
	 *
	 * @param MM_User $user The user to change the bundle status on
	 * @param MM_Bundle $bundle The bundle to change the status of
	 * @param Number $newStatus The ID of the status to change the bundle status to
	 *
	 * @return MM_Response indicating whether the operation was successful or encountered an error
	 */
	public static function changeBundleStatus(MM_User $user, MM_Bundle $bundle, $newStatus)
	{
		if(!empty($newStatus))
		{
			if($user->isValid() && $bundle->isValid())
			{
				if($newStatus == MM_Status::$ACTIVE)
				{
					// check if user already has the requested bundle
					$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundle->getId());
				
					if($appliedBundle->isValid() && $appliedBundle->getStatus() == MM_Status::$ACTIVE)
					{
						return new MM_Response("This member already has the '".$bundle->getName()."' bundle applied to their account.", MM_Response::$ERROR);
					}
				
					$result = MM_AccessControlEngine::assignBundleToUser($user, $bundle);
				
					// cancel subscriptions for other bundles in the same bundle group
					
					if(MM_Response::isSuccess($result))
					{
						return new MM_Response("'{$bundle->getName()}' has been successfully activated");
					}
					else
					{
						return $result;
					}
				}
				else
				{
					if($newStatus == MM_Status::$PAUSED || $newStatus == MM_Status::$CANCELED)
					{
						$result = MM_AccessControlEngine::removeBundleFromUser($user, $bundle, $newStatus);
					}
					else
					{
						$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundle->getId());
						$appliedBundle->setStatus($newStatus);
						$result = $appliedBundle->commitData();
					}
					
					if(MM_Response::isSuccess($result))
					{
						if(!empty($newStatus))
						{
							return new MM_Response("'{$bundle->getName()}' has been successfully changed to ".MM_Status::getName($newStatus, true));
						}
						else
						{
							return new MM_Response("'{$bundle->getName()}' has been successfully removed");
						}
					}
					else
					{
						return $result;
					}
				}
			}
			else
			{
				return new MM_Response("Error changing bundle status. Invalid member or bundle passed.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Error changing bundle status. Status cannot be empty.", MM_Response::$ERROR);
		}
	}
	
	/**
	 * This method is responsible for determining the appropriate pending cancellation date for the order item passed.
	 *
	 * @param MM_OrderItem $orderItem The order item to determine the pending cancellation date for
	 *
	 * @return Date a date object with the pending cancellation date. null if a date couldn't be calculated
	 */
	protected static function getCancellationDateByOrderItem(MM_OrderItem $orderItem)
	{
		$cancellationDate = null;
		
		if($orderItem->isValid())
		{
			global $wpdb;
		
			//non-recurring items should never have this method called, but if it is ever called in the future, cancellation will be immediate
			if (!$orderItem->isRecurring())
			{
				return null;
			}
			
			// retrieve the last payment associated with the order item
			$transactionLookupSQL = "SELECT MIN(transaction_date) AS first_transaction_date, MAX(transaction_date) AS last_transaction_date ".
								    "FROM ".MM_TABLE_TRANSACTION_LOG. " WHERE order_item_id=%s AND ((transaction_type='".MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT."') OR (transaction_type='".
									 MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT."'))";
			$transactionLookupSQL = $wpdb->prepare($transactionLookupSQL,$orderItem->getId());
			$pymtInfo = $wpdb->get_row($transactionLookupSQL);
				
			if ($orderItem->hasTrialPeriod() && ($orderItem->getTrialAmount() == 0.00) && ($pymtInfo->last_transaction_date == null))
			{
				//if the customer is in a free trial period and no payments have been received, the cancellation date is the end of the trial period
				$orderDate = $wpdb->get_var("SELECT date_added FROM ".MM_TABLE_ORDERS." WHERE id='{$orderItem->getOrderId()}'");
				if ($orderDate == null)
				{
					return null;
				}
				$now = MM_Utils::getCurrentTime("timestamp");
				$period = $orderItem->getTrialDuration();
				$frequency = $orderItem->getTrialFrequency();
				$trialEnds = strtotime("+{$period} {$frequency}",strtotime($orderDate));
				if ($now < $trialEnds)
				{
					return Date("Y-m-d H:i:s", $trialEnds);
				}
			}
			
			//From this point forward, we need a payment to have been made to calculate a cancellation date
			if ($pymtInfo->last_transaction_date == null)
			{
				return null;
			}
			
			//this covers orders without trials, paid trials, and free trials where at least one transaction has been recorded
			$inTrialPeriod = false;
			if ($orderItem->hasTrialPeriod())  
			{
				$lastTransactionTS = strtotime($pymtInfo->last_transaction_date);
				$firstTransactionTS = strtotime($pymtInfo->first_transaction_date);
				$trialEndsTS = strtotime("{$pymtInfo->first_transaction_date} + {$orderItem->getTrialDuration()} {$orderItem->getTrialFrequency()}");
				$currentTS = MM_Utils::getCurrentTime("timestamp");
				if (($firstTransactionTS == $lastTransactionTS) && ($currentTS < $trialEndsTS)) //assume multiple payments means the trial is over 
				{
					$inTrialPeriod = true;
					$lastPymtDate = $pymtInfo->last_transaction_date;
					$period = $orderItem->getTrialDuration();
					$frequency = $orderItem->getTrialFrequency();
				}
			}
			
			if (!$inTrialPeriod)
			{
				$lastPymtDate = $pymtInfo->last_transaction_date;
				$period = $orderItem->getRebillPeriod(); // i.e. 1, 14
				$frequency = $orderItem->getRebillFrequency(); // i.e. days, weeks, months
			}
				
			$cancellationDate = Date("Y-m-d H:i:s", strtotime("{$lastPymtDate} + {$period} {$frequency}"));
			
		}
		
		return $cancellationDate;
	}
}

