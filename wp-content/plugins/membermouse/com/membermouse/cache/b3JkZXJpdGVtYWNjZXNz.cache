/** 
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_OrderItemAccess extends MM_Entity
{	
	public static $ACCESS_TYPE_MEMBERSHIP = "membership";
	public static $ACCESS_TYPE_BUNDLE = "bundle";
	
	private $accessType = "";
	private $accessTypeId = "";
	private $userId = "";
	private $orderItemId = "";

	
	public function getData()
	{	
		parent::invalidate();
	}

	/**
	 * @return array of MM_OrderItemAccess instances
	 */
	public static function getOrderItemByAccess($userId, $accessType, $accessTypeId)
	{
		$items = array();
	
		global $wpdb;
		$sql = "SELECT * FROM ".MM_TABLE_ORDER_ITEM_ACCESS." WHERE user_id='{$userId}' AND access_type='{$accessType}' AND access_type_id='{$accessTypeId}';";
		$results = $wpdb->get_results($sql);
		
		if($results)
		{
			foreach($results as $rowData)
			{
				$orderItemAccess = new MM_OrderItemAccess();
				$orderItemAccess->setData($rowData);
				$items[] = $orderItemAccess;
			}
		}
	
		return $items;
	}

	public static function getAccessByOrderItem($orderItemId)
	{
		$orderItemAccess = new MM_OrderItemAccess();
	
		global $wpdb;
		$sql = "SELECT * FROM ".MM_TABLE_ORDER_ITEM_ACCESS." WHERE order_item_id='{$orderItemId}' LIMIT 1;";
		$result = $wpdb->get_row($sql);
	
		if($result)
		{
			$orderItemAccess->setData($result);
		}
		else
		{
			$orderItemAccess->invalidate();
		}
	
		return $orderItemAccess;
	}

	public function setData($data)
	{
		try 
		{	
			if($data)
			{
				$this->accessType = $data->access_type;
				$this->accessTypeId = $data->access_type_id;
				$this->userId = $data->user_id;
				$this->orderItemId = $data->order_item_id;
				
				if(intval($this->userId) > 0 && intval($this->accessTypeId) > 0 && intval($this->orderItemId) > 0)
				{
					parent::validate();
				}
			}
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{
		global $wpdb;
		
		// validate required data
		if(empty($this->userId) || empty($this->orderItemId) || empty($this->accessType) || empty($this->accessTypeId))
		{
			return new MM_Response("Unable to save order item access. Order item ID, access type, access type ID and user ID are required.", MM_Response::$ERROR);
		}
		
		// delete order item access rows with the exact same properties
		$this->delete();
		
		$sql = "INSERT INTO ".MM_TABLE_ORDER_ITEM_ACCESS." SET ";
		$sql .= " access_type='{$this->accessType}', access_type_id='{$this->accessTypeId}', ";
		$sql .= " user_id='{$this->userId}', order_item_id = '{$this->orderItemId}';";
		$result = $wpdb->query($sql);
		
		if(!$result)
		{
			return new MM_Response("Unable to insert order item ID '{$this->orderItemId}' with user ID '{$this->userId}' access type '{$this->accessType}' ({$this->accessTypeId})", MM_Response::$ERROR);
		}
			
		return new MM_Response();
	}
	
	public function delete()
	{
		global $wpdb;
		
		// validate required data
		if(empty($this->userId) || empty($this->orderItemId) || empty($this->accessType) || empty($this->accessTypeId))
		{
			return new MM_Response("Unable to delete order item access. Order item ID, access type, access type ID and user ID are required.", MM_Response::$ERROR);
		}
		
		$sql = "DELETE FROM ".MM_TABLE_ORDER_ITEM_ACCESS." WHERE ";
		$sql .= " access_type='{$this->accessType}' AND access_type_id='{$this->accessTypeId}' AND ";
		$sql .= " user_id='{$this->userId}' AND order_item_id = '{$this->orderItemId}';";
		$result = $wpdb->query($sql);
		
		if(!$result)
		{
			return new MM_Response("Unable to delete order item ID '{$this->orderItemId}' with user ID '{$this->userId}' access type '{$this->accessType}' ({$this->accessTypeId})", MM_Response::$ERROR);
		}
			
		return new MM_Response();
	}
	
	
	/** GETTERS / SETTERS **/

	public function setAccessType($val)
	{
		if($val == self::$ACCESS_TYPE_BUNDLE || $val == self::$ACCESS_TYPE_MEMBERSHIP)
		{
			$this->accessType = $val;
		}
	}

	public function getAccessType()
	{
		return $this->accessType;
	}

	public function setAccessTypeId($val)
	{
		$this->accessTypeId = $val;
	}

	public function getAccessTypeId()
	{
		return $this->accessTypeId;
	}

	public function setUserId($val)
	{
		$this->userId = $val;
	}

	public function getUserId()
	{
		return $this->userId;
	}

	public function setOrderItemId($val)
	{
		$this->orderItemId = $val;
	}

	public function getOrderItemId()
	{
		return $this->orderItemId;
	}
	
}