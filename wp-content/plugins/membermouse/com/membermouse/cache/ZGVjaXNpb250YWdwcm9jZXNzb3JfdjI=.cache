class MM_DecisionTagProcessor_V2 extends MM_DecisionTagProcessor
{	
	public static function mm_member_decision($content, $atts, $code)
	{
		$user = MM_SmartTagUtil::getCurrentUser();
		$customFields = array();
		$daysWithBundles = array();
		
		if(is_array($atts) && count($atts)>0)
		{
			foreach($atts as $k=>$v)
			{
				$k = strtolower($k);
				
				if(strpos($k, "customfield_") !== false)
				{
					$fieldId = preg_replace("/[^0-9]+/", "", $k);
					$customFields[$fieldId] = stripslashes($v);
				}
				else if(strpos($k, "dayswithbundle_") !== false)
				{
					$bundleId = preg_replace("/[^0-9]+/", "", $k);
					$daysWithBundles[$bundleId] = $v;
				}
				else
				{
					$key = $k;
					$$key=$v;
				}
			}
		}
		
		if($user->isValid())
		{	
			$statusCheck = self::$IGNORE;
			$membershipCheck = self::$IGNORE;
			$bundleCheck = self::$IGNORE;
			$productCheck = self::$IGNORE;
			$isFreeCheck = self::$IGNORE;
			$customFieldChecks = array();
			$daysAsMember = 0;
			$daysAsMemberComparison = ">";

			if($user->isAdmin() || MM_Employee::isEmployee($user->getId()))
			{
				$preview_obj = MM_Preview::getData();
				$crntMembershipId = $preview_obj->getMembershipId();
			}
			else
			{
				$crntMembershipId = $user->getMembershipId();
			}
			
			// get number of days as member
			if(isset($daysasmember))
			{
				if(intval($daysasmember) < 0)
				{
					$daysAsMemberComparison = "<";
				}
				
				$daysAsMember = abs($daysasmember);
			}
			
			// check to see if the current member has the appropriate status
			if(isset($status))
			{
				$compare = array();
				$compare[] = MM_Status::getSmartTagValue($user->getStatus());
				$statusCheck = self::doComparison($status, $compare);
			}
			
			// check to see if the current member has the appropriate membership level
			if(isset($membershipid))
			{
				$compare = array();
				$compare[] = $crntMembershipId;
				$membershipCheck = self::doComparison($membershipid, $compare);
			}
				
			// check to see if the current member has the appropriate bundle
			if(isset($hasbundle))
			{
				$compare = array();
				
				// get data from preview bar
				if($user->isAdmin() || MM_Employee::isEmployee($user->getId()))
				{
					$compare = MM_Preview::getData()->getBundles();
				}
				else 
				{
					// get bundles directly applied to the member's account
					$appliedBundles = $user->getAppliedBundles();
					
					foreach($appliedBundles as $appliedBundle)
					{
						$compare[] = $appliedBundle->getBundleId();
					}
				}
				
				// get bundle applied to the member's account via their membership level
				$membership = new MM_MembershipLevel($crntMembershipId);
				$membershipBundles = $membership->getBundles();
					
				foreach($membershipBundles as $id=>$name)
				{
					$compare[] = $id;
				}

				$bundleCheck = self::doComparison($hasbundle, $compare);
			}
			
			// check to see if the current member has purchased products
			if(isset($purchasedproduct))
			{
				$compare = array();
			
				if(!$user->isAdmin())
				{
					$productsPurchased = $user->getProductsPurchased(array(MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH));
						
					foreach($productsPurchased as $productId)
					{
						$compare[] = $productId;
					}
				}
			
				$productCheck = self::doComparison($purchasedproduct, $compare);
			}
		
			// check to see if current member has the appropriate membership level (free or paid)
			if(isset($isfree))
			{
				$isFreeCheck = self::$FAIL;
					
				$membershipLevel = new MM_MembershipLevel($crntMembershipId);
						
				if($membershipLevel->isValid())
				{
					$isFreeMember = $membershipLevel->isFree();
		
					if((strtolower($isfree) == "true" && $isFreeMember == true) || (strtolower($isfree) == "false" && $isFreeMember == false))
					{
						$isFreeCheck = self::$PASS;
					}
					else
					{
						$isFreeCheck = self::$FAIL;
					}
				}
				else
				{
					$isFreeCheck = self::$PASS;
				}
			}
			
			// check to see if the current member has the appropriate custom fields
			if(count($customFields) > 0)
			{
				foreach($customFields as $fieldId=>$value)
				{
					if(isset($value))
					{
						$data = $user->getCustomDataByFieldId($fieldId);
						
						$compare = array();
						$compare[] = strtolower(stripslashes($data->getValue()));
						$customFieldChecks[] = self::doComparison(strtolower($value), $compare);
					}
				}
			}
		}
		else
		{
			$statusCheck = $membershipCheck = $bundleCheck = $productCheck = $isFreeCheck = self::$IGNORE;
			$customFieldChecks = array();
			$daysAsMember = 0;
		}
		
		// check to see if the current visitor is a member
		if(isset($ismember))
		{
			$isMemberCheck = self::$FAIL;
		
			if(($ismember == "true" && $user->isValid()) || ($ismember == "false" && !$user->isValid()))
			{
				$isMemberCheck = self::$PASS;
			}
			else
			{
				$isMemberCheck = self::$FAIL;
			}
		}
		else
		{
			$isMemberCheck = self::$IGNORE;
		}
		
		// render content if everything checks out
		if($user->isValid())
		{
			if(self::pass($statusCheck) && self::pass($membershipCheck) && self::pass($bundleCheck) && self::pass($productCheck)
				&& self::pass($isFreeCheck) && self::pass($isMemberCheck) && self::checkCustomFields($customFieldChecks))
			{
				$daysAsMemberCheck = self::checkDaysWithAccess($user, MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP, $crntMembershipId, $daysAsMember, $daysAsMemberComparison) ? self::$PASS : self::$FAIL;
				$daysWithBundlesCheck = self::$IGNORE;
				
				// check to see if the current member has the appropriate days with bundles
				if(count($daysWithBundles) > 0)
				{
					$daysWithBundlesCheck = self::$PASS;
					
					foreach($daysWithBundles as $bundleId=>$value)
					{
						if(isset($value))
						{
							$daysWithBundle = $value;
							$daysWithBundleComparison = ">";
							
							if(intval($daysWithBundle) < 0)
							{
								$daysWithBundleComparison = "<";
							}
							
							$daysWithBundle = abs($daysWithBundle);
							
							if(!self::checkDaysWithAccess($user, MM_AccessControlEngine::$ACCESS_TYPE_BUNDLE, $bundleId, $daysWithBundle, $daysWithBundleComparison))
							{
								$daysWithBundlesCheck = self::$FAIL;
								break;
							}
						}
					}
				}
				
				if(self::pass($daysAsMemberCheck) && self::pass($daysWithBundlesCheck))
				{
					return do_shortcode($content);
				}
			}
		}
		else if(self::pass($isMemberCheck, true))
		{
			return do_shortcode($content);
		}
	}
	
	private static function checkCustomFields($customFieldChecks)
	{
		if(!is_array($customFieldChecks) || count($customFieldChecks) == 0)
		{
			return true;
		}
		
		if(is_array($customFieldChecks) && count($customFieldChecks) > 0 && !in_array(self::$FAIL, $customFieldChecks))
		{
			return true;
		}
		
		return false;
	}
	
	/**
	 * This function processes the MM_Order_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed. It can be
	 * used in the context of a checkout form or a confirmation page
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_order_decision($content, $atts, $code)
	{
		$outputStr = "";
	
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		$form = MM_ObjectCache::get(MM_ObjectCache::$KEY_LAST_FORM);
		$order = MM_SmartTagUtil::getCurrentOrder();
		$productId = 0;
		$membershipId = 0;
		$isShippable = false;
		$isFree = false;
		$isGift = false;
		$isDiscounted = false;
		$dataSet = false;
		
		if(isset($form) && !empty($form))
		{
			// get data from Checkout Form
			$dataSet = true;
			$productId = $form->productId;
			$membershipId = $form->membershipLevelId;
			$isFree = $form->isFree;
			$isGift = $form->isGift;
			$isShippable = $form->isShippable;
			$isDiscounted = true; // always set isDiscounted to true for checkout forms because 
								  // javascript will be used to show/hide the discount section
		}
		else if($order->isValid())
		{
			// get data from order
			$products = $order->getProducts();
			if(count($products) > 0)
			{
				$orderItem = array_pop($products); // currently assuming supporting 1 product per order
				if($orderItem->isValid())
				{
					$productId = $orderItem->getItemId();
					$product = new MM_Product($productId);
					
					if($product->isValid())
					{
						$dataSet = true;
						$isFree = false;
						$isGift = $orderItem->isGift();
						$isShippable = $product->isShippable();
						$assocMembership = $product->getAssociatedMembership();
						
						if($assocMembership->isValid())
						{
							$membershipId = $assocMembership->getId();
						}
					}
				}
			}
			
			$discount = abs($order->getDiscount());
			
			if($discount > 0)
			{
				$isDiscounted = true;
			}
		}
		else 
		{
			// if the form or order is not set then that means it was a free member sign up
			// confirm that this is a confirmation page and then populate the data from the 
			// user in the session
			global $post;
			
			if(isset($post->ID) && intval($post->ID)>0)
			{
				$postId = $post->ID;
			}
			else if(isset($post->data->ID) && intval($post->data->ID))
			{
				$postId = $post->data->ID;
			}
			
			if(MM_CorePageEngine::isConfirmationPage($postId))
			{
				$user = MM_SmartTagUtil::getCurrentUser();
				
				if($user->isValid())
				{
					$dataSet = true;
					$isFree = $user->getMembershipLevel()->isFree();
					$isShippable = false;
					$productId = 0;
					$isDiscounted = false;
					$membershipId = $user->getMembershipId();
				}
			}
		}
		
		if($dataSet)
		{
			$productCheck = self::$IGNORE;
			$membershipCheck = self::$IGNORE;
			$isFreeCheck = self::$IGNORE;
			$isGiftCheck = self::$IGNORE;
			$isShippableCheck = self::$IGNORE;
			$isDiscountedCheck = self::$IGNORE;
			
			// check for product
			if(isset($productid))
			{
				$compare = array();
				$compare[] = $productId;
				$productCheck = self::doComparison($productid, $compare);
			}
			
			// check for membership
			if(isset($membershipid))
			{
				$compare = array();
				$compare[] = $membershipId;
				$membershipCheck = self::doComparison($membershipid, $compare);
			}
			
		 	// check if membership is free
			if(isset($isfree))
	 		{
	 		 	$isFreeCheck = self::$FAIL;
	 			 	 
	 			if((strtolower($isfree) == "true" && $isFree == true) 
	 					|| (strtolower($isfree) == "false" && $isFree == false))
	 			{
	 				$isFreeCheck = self::$PASS;
	 			}
	 			else
	 			{
	 				$isFreeCheck = self::$FAIL;
	 			}
		 	}
			
		 	// check if product is gift
			if(isset($isgift))
	 		{
	 		 	$isGiftCheck = self::$FAIL;
	 			 	 
	 			if((strtolower($isgift) == "true" && $isGift == true) 
	 					|| (strtolower($isgift) == "false" && $isGift == false))
	 			{
	 				$isGiftCheck = self::$PASS;
	 			}
	 			else
	 			{
	 				$isGiftCheck = self::$FAIL;
	 			}
		 	}
			
		 	// check if product is shippable
			if(isset($isshippable))
	 		{
	 		 	$isShippableCheck = self::$FAIL;
	 			 	 
	 			if((strtolower($isshippable) == "true" && $isShippable == true) 
	 					|| (strtolower($isshippable) == "false" && $isShippable == false))
	 			{
	 				$isShippableCheck = self::$PASS;
	 			}
	 			else
	 			{
	 				$isShippableCheck = self::$FAIL;
	 			}
		 	}
		 	
		 	// check if order is discounted
		 	if(isset($isdiscounted))
		 	{
		 		$isDiscountedCheck = self::$FAIL;
		 	
		 		if((strtolower($isdiscounted) == "true" && $isDiscounted == true)
		 		|| (strtolower($isdiscounted) == "false" && $isDiscounted == false))
		 		{
		 			$isDiscountedCheck = self::$PASS;
		 		}
		 		else
		 		{
		 			$isDiscountedCheck = self::$FAIL;
		 		}
		 	}
		 	
		 	if((self::pass($productCheck) && self::pass($membershipCheck)
		 			&& self::pass($isFreeCheck) && self::pass($isShippableCheck)
		 			&& self::pass($isDiscountedCheck) && self::pass($isGiftCheck)) ||
		 	 	(isset($isdiscounted) && isset($form) && !empty($form) && !self::pass($isDiscountedCheck)))
		 	{
		 		$output = do_shortcode($content);
		 		
		 		// if we're on a checkout form and processing an isDiscount order decision, 
		 		// surround the content with a <div> so that it can be controlled by javascript
		 		if(isset($isdiscounted) && isset($form) && !empty($form))
		 		{
		 			$crntDiscountBlockNum = count($form->discountBlocks);
		 			$discountBlockId = "mm-discount-info-block-".$crntDiscountBlockNum;
		 			$form->discountBlocks[$crntDiscountBlockNum] = $discountBlockId;
		 			$output = "<div id=\"{$discountBlockId}\" style=\"display:none;\" class=\"mm-discount-{$isdiscounted}\">{$output}</div>";
		 		}
		 		
		 		return $output;
		 	}
		 	else
		 	{
		 		return "";
		 	}
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Affiliate_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed and the current 
	 * affiliate/subaffiliate values stored in cookies
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_affiliate_decision($content, $atts, $code)
	{
		if(self::checkCookies($atts))
		{
			return do_shortcode($content);
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Custom_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the parameters passed and the current 
	 * values stored in cookies
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_custom_decision($content, $atts, $code)
	{
		if(self::checkCookies($atts))
		{
			return do_shortcode($content);
		}
		else
		{
			return "";
		}
	}
 	
 	protected static function checkCookies($atts)
 	{
 		$testResults = array();
 		$checkCtr = 0;
 			
 		if(is_array($atts) && count($atts) > 0)
 		{	
 			foreach($atts as $key=>$checkValues)
 			{
 				$testResults[$checkCtr] = $cookiesCheck = self::$FAIL;
 				
 				// get value set in cookies for the current key
 				if(strtolower($key) == "affiliate")
 				{
 					$cookieValue = MM_Cookies::getAffiliateValue();
 				}
 				else if(strtolower($key) == "subaffiliate")
 				{
 					$cookieValue = MM_Cookies::getSubAffiliateValue();
 				}
 				else
 				{
 					$cookieValue = MM_Cookies::getCookie($key);
 				}
				
 				$compare = array();
 				$compare[] = $cookieValue;
 				$testResults[$checkCtr] = self::doComparison($checkValues, $compare);
 				
 				$checkCtr++;
 			}
 		}
 		
 		$testPassed = true;
 		for($i = 0; $i < count($testResults); $i++)
 		{
 			$testPassed = $testPassed && self::pass($testResults[$i]);
 		}
 		
 		return $testPassed;
 	}
 	
 	private static function doComparison($expression, $compareValues)
 	{
 		$eqFormat = "in_array('".self::$PLACEHOLDER_VALUE."', \$compareValues)";
 		$nEqFormat = "!in_array('".self::$PLACEHOLDER_VALUE."', \$compareValues)";
 		$expression = self::parseExpression($expression, $eqFormat, $nEqFormat);
 		$result = false;
 		
 		if(!empty($expression))
 		{
 			eval("\$result = {$expression};");	
 		}
 		
 		if($result)
 		{
 			return self::$PASS;
 		}
 		else
 		{
 			return self::$FAIL;
 		}
 	}
	
	private static function parseExpression($rawExpression, $eqFormat, $nEqFormat)
	{
		$rawExpression = str_split(html_entity_decode($rawExpression));
		$specialCharacters = array("(", ")", "&", "|");
		$buffer = "";
		$expression = "";
		
		foreach($rawExpression as $character)
		{
			// if this is a special character, add it to the expression
			// otherwise add it to the buffer
			if(in_array($character, $specialCharacters)) 
			{
				// if buffer contains items, create the equation and 
				// add it to the expression
				if(!empty($buffer))
				{
					if(trim($buffer) == "!")
					{
						$expression .= $buffer;
					}
					else 
					{
						$format = (self::doNegateValue($buffer)) ? $nEqFormat : $eqFormat;
						$buffer = (self::doNegateValue($buffer)) ? substr($buffer, 1) : $buffer;
						$expression .= str_replace(self::$PLACEHOLDER_VALUE, trim($buffer), $format);
					}
					
					$buffer = "";
				}
				
				$expression .= $character;
			}
			else 
			{
				$buffer .= $character;
			}
		}
		
		if(!empty($buffer))
		{
			if(trim($buffer) == "!")
			{
				$expression .= $buffer;
			}
			else 
			{
				$format = (self::doNegateValue($buffer)) ? $nEqFormat : $eqFormat;
				$buffer = (self::doNegateValue($buffer)) ? substr($buffer, 1) : $buffer;
				$expression .= str_replace(self::$PLACEHOLDER_VALUE, trim($buffer), $format);
			}
		}
		
		$expression = str_replace("&", "&&", $expression);
		$expression = str_replace("|", "||", $expression);
		
		return $expression;
	}
 	
 	private static function doNegateValue($value)
 	{
 		if(strpos($value, "!") === 0)
 		{
 			return true;
 		}
 		else
 		{
 			return false;
 		}
 	}
}
