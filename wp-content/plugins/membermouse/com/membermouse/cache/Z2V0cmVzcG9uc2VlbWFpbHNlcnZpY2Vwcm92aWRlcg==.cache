/**
 * 
 * @author Ben Daughtry, MemberMouse LLC
 * This is an implementation of the Email Service Provider interface for GetResponse. The GetResponse API is a 
 * JSON-RPC api which is documented at https://github.com/GetResponse/DevZone/tree/master/API
 * An API key is used for authentication, and requests are sent to the endpoint at the URL below in $GETRESPONSE_DEFAULT_URL
 * The highest level of GetResponse account is the GetResponse360 account, and these accounts have custom api urls, so this parameter is
 * configurable
 *
 */
class MM_GetResponseEmailServiceProvider extends MM_AbstractEmailServiceProvider 
{
	private $apiKey;
	private $apiUrl;
	private $is360 = false;
	
	//this variable is a placeholder for the json-rpc client
	private $client;
	
	//the default API url
	private static $GETRESPONSE_DEFAULT_URL = "http://api2.getresponse.com";
	
	
	/**
	 *
	 * The GetResponse api requires an apiKey and an apiUrl for access, so these are required parameters for 
	 * the constructor
	 * 
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info)
	{
		$additional_data = (is_object($provider_info) && isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (!empty($provider_info->api_key))
		{
			parent::__construct($provider_info);
			
			$this->apiKey = $provider_info->api_key;
			$this->is360 = isset($additional_data['is360'])?(bool)$additional_data['is360']:false;
			$this->apiUrl = isset($additional_data['apiUrl'])?$additional_data['apiUrl']:MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL;
			
			$this->client = new MM_jsonRPCClient($this->apiUrl);
		}
	}
	
	
	/**
	 * Adds a member to a list and syncs custom field data with first name, last name, and product bundle status
	 * 
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response indicating success or failure
	 */
	public function addMemberToList($email,$listId,$includeBundleInfo=true) 
	{
		if (empty($listId))
		{
			//no list supplied, nothing to do... return success
			return new MM_Response();
		}
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		
		$customs_response = $this->getMemberCustomFields($email, true, $includeBundleInfo);
		if ($customs_response->type == MM_Response::$ERROR) 
		{
			return $customs_response;
		}
		
		try
		{
			$params = array();
			$params['campaign'] = $listId;
			$params['name'] = $member->getFullName();
			$params['email'] = $email;
			$params['cycle_day'] = 0;
			$params['ip'] = MM_Utils::getClientIPAddress();
			$params['customs'] = $customs_response->message;
			$response = $this->client->add_contact($this->getApiKey(),$params);
			if (!is_array($response) || (!isset($response['queued'])) || ($response['queued'] != 1))
			{
				return new MM_Response("Error adding {$email} to list: {$response}",MM_Response::$ERROR);
			}
		}
		catch (Exception $e)
		{
			return new MM_Response("Error adding {$email} to list",MM_Response::$ERROR);
		}
		return new MM_Response();
	}	
	
	
	/**
	 *
	 * Gets the custom fields to associate with a member. Currently this is first_name, last_name, email, and any access tags
	 * GetResponse is more flexible than the other providers, so this can be expanded in the future, at the contact level
	 * 
	 * @param String $email The email address of the member
	 * @param boolean $structured (optional) Determines whether or not to structure the fields in the custom fields format required by GetResponse
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response containing an array of merge data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	private function getMemberCustomFields($email,$structured=true,$includeBundleInfo=true)
	{
		$user = MM_User::findByEmail($email);
		
		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}
	
		$customs = array();
		$firstName = $user->getFirstName();
		$lastName = $user->getLastName();
		
		if(!empty($firstName))
		{
			$customs['first_name'] = $firstName;
		}
		
		if(!empty($lastName))
		{
			$customs['last_name'] = $lastName;
		}
		
		if($includeBundleInfo)
		{
			//set all access tags false to start
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = strtoupper($reqTag);
				$customs[$reqTag] = "FALSE";
			}
		
			//now set the ones the user has equal to true
			$appliedBundles = $user->getAppliedBundles();
			
			foreach ($appliedBundles as $appliedBundle)
			{
				$bundle = $appliedBundle->getBundle();
					
				if($bundle->isValid())
				{
					$shortName = strtoupper($bundle->getShortName());
					$customs[$shortName] = "TRUE";
				}
			}
		}
		
		if ($structured)
		{
			return new MM_Response($this->transformCustomFieldStructure($customs));
		}
		else
		{
			return new MM_Response($customs);
		}
	}
	
	
	/**
	 * Reformats a key/value array into the nested array structure used by GetResponse for custom fields
	 * 
	 * @param array $customs A key/value array of the custom field data
	 * @return An array containing the nested arrays in a format acceptable for transit to GetResponse
	 */
	private function transformCustomFieldStructure($customs)
	{
		$structuredArray = array();
		foreach ($customs as $k=>$v)
		{
			$structuredArray[] = array("name"=>$k,"content"=>$v);
		}
		return $structuredArray;
	}	
	
	
	/**
	 * Changes a members list subscription based on a change in membership level. 
	 * GetResponse allows a one-operation move
	 * 
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The member type id of the member's new member type
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType) 
	{
		//step 1: get the member's current information
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid()) 
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		
		//step 2: deal with the 3 possible scenarios - 
		//a. the member is not currently subscribed to a list, but the new membertype has a list 
		//b. the member is subscribed to a list, but the new member type does NOT have a list
		//c. the member is subscribed to a list, and their new member type has a different list
		//d. the list for the old and new member types are the same, in which update and return true
		
		//get the old list
		$oldListId = $member->getSubscribedListId();
		
		//get the new list
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			return new MM_Response($newListId->message,MM_Response::$ERROR);
		}
		$newListId = $newListId->message;
		
		if (empty($oldListId))
		{
			//the member was previously not subscribed to a list, so this is a simple add operation - fulfills condition a.
			return $this->addMemberToList($email, $newListId);
		}
		
		if (empty($newListId))
		{
			//there is an oldListId, but not a destination (newListId), which means its a simple remove operation - fulfills condition b
			return $this->removeMemberFromList($email, $oldListId);
		}
		
		if ($oldListId == $newListId)
		{
			//list is the same, update member and return - condition d.
			return $this->updateMember($email, $oldListId);
		}
		
		$oldListExists = true;
		$newListExists = true;
		
		try 
		{
			//retrieve the lists
			$listsResponse = $this->getLists();
			if ($listsResponse->type == MM_Response::$ERROR)
			{
				//error retrieving the campaigns (a basic op).. something is wrong, so report it
				return $listsResponse;
			}
			//now test to make sure the lists still exist
			$lists = $listsResponse->message;
			if (!array_key_exists($oldListId, $lists))
			{
				$oldListExists = false;
			}
			
			if (!array_key_exists($newListId, $lists))
			{
				$newListExists = false;
			}
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
		
		
		if (!$oldListExists && $newListExists)
		{
			return $this->addMemberToList($email, $newListId);  //source list was [probably] deleted, making this condition a
		}
		
		if ($oldListExists && !$newListExists)
		{
			return $this->removeMemberFromList($email, $oldListId); //destination list was [probably] deleted making this condition b
		}
		
		try 
		{
			//if execution reaches here, there is a oldListId and a newListId, so find (and update) the contact and process the move - fulfills condition c.
			$contactId_response = $this->getContactId($email, $oldListId);
			if ($contactId_response->type == MM_Response::$ERROR)
			{
				return $contactId_response; //error retrieving the contact id
			}
			$contactId = $contactId_response->message; //an array
			if (empty($contactId))
			{
				//contact was not found on the old list, try it as a simple add
				return $this->addMemberToList($email, $newListId);
			}
			
			$this->updateMemberWithContactId($contactId,$email); //sync any custom field changes
			
			//perform the move
			$params = array();
			$params['contact'] = $contactId;
			$params['campaign'] = $newListId;
			$response = $this->client->move_contact($this->getApiKey(),$params);
			if (is_array($response) && ($response['updated'] == 1))
			{
				return new MM_Response();
			}
			else 
			{
				return new MM_Response("Change list operation sent to GetResponse, but the remote side did not return the expected response",MM_Response::$ERROR);
			}
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Configures the GetResponse provider in order to do the initial connect
	 * 
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param An array containing the values posted from the form rendered by renderOptionsDialog
	 * @return MM_Response indicating success or failure
	 */
	public function configureFromOptions($optionData) 
	{
		if (isset($optionData['getresponse_api_key']) && !empty($optionData['getresponse_api_key'])) 
		{
			$this->setAPIKey($optionData['getresponse_api_key']);
			if (isset($optionData['is360']) && ((bool)$optionData))
			{
				$this->setGetResponse360(true);
				$this->setApiUrl($optionData['custom_api_url']);
			}
			else
			{
				$this->setGetResponse360(false);
				$this->setApiUrl(MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL);
			}
			$this->client = new MM_jsonRPCClient($this->getApiUrl());
			return new MM_Response();
		}
		else
		{
			return new MM_Response("Please enter a valid API key to use GetResponse",MM_Response::$ERROR);
		}
		
	}
	
	
	/**
	 *
	 * Return the lists (campaigns) associated with the configured apiKey, in an array keyed by id with the values being list names
	 * @return MM_Response containing lists as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getLists() 
	{
		try 
		{
			$list_array = $this->client->get_campaigns($this->getApiKey());
		}
		catch (Exception $e)
		{
			return new MM_Response("There was an error connecting to GetResponse. Please check your configuration settings",MM_Response::$ERROR);
		}
		
		$list_array = (is_array($list_array))?$list_array:array();
		$lists = array();
		foreach ($list_array as $campaign_id=>$campaign_data)
		{
			$campaign_name = (isset($campaign_data['name']))?$campaign_data['name']:$campaign_id;
			$lists[$campaign_id] = $campaign_name;
		}
		
		return new MM_Response($lists,MM_Response::$SUCCESS);
	}	
	
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && (isset($optionData['getresponse_api_key'])) && !empty($optionData['getresponse_api_key']))
		{
			//make sure there is a custom api url if they selected that this is a getresponse360 account
			if (isset($optionData['is360']) && ($optionData['is360'] == true) && (!isset($optionData['custom_api_url']) || empty($optionData['custom_api_url'])))
			{
				return new MM_Response("Error: No custom url supplied. For GetResponse360 accounts, a custom API url is required. This can be obtained from your GetResponse account manager",MM_Response::$ERROR);
			}
			
			$provider_token = $optionData['provider_token'];
			$api_key = $optionData['getresponse_api_key'];
			$prospect_list_id = $optionData['prospect_list_id'];
			$cancellation_list_id = $optionData['cancellation_list_id'];
				
			$this->setAPIKey($api_key);
			if (isset($optionData['is360']))
			{
				$this->setGetResponse360($optionData['is360']);
			}
			else
			{
				$this->setGetResponse360(false);
			}
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid())
			{
				//first write the provider's configuration options
				$provider_entity->setAPIKey($api_key);
				if ($this->isGetResponse360())
				{
					$provider_entity->setConfigOption("is360", true);
					$provider_entity->setConfigOption("apiUrl", $optionData['custom_api_url']);
				}
				else
				{
					$provider_entity->setConfigOption("is360", false);
				}
				$provider_entity->setActive(true);
				$provider_entity->setProspectListID($prospect_list_id);
				$provider_entity->setCancellationListID($cancellation_list_id);
				$commit_response = $provider_entity->commitData();
				if ($commit_response->type == MM_Response::$ERROR)
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the list mappings
				if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings']))
				{
					$provider_id = $provider_entity->getId();
					return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
				}
			}
			else
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else
		{
			//optionData is not an array, or the api key was not sent
			return new MM_Response("Failed to save settings: Incorrect options format or API Key not sent",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Removes a member from a list
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)  
	{
		if (empty($listId)) 
		{
			return new MM_Response();
		}
	
		try 
		{
			$contactId_response = $this->getContactId($email, $listId);
			if ($contactId_response->type == MM_Response::$ERROR)
			{
				throw new Exception($contactId_response->message);
			}
			$contactId = $contactId_response->message;
			if (empty($contactId))
			{
				//contact is not on the list, return success
				return new MM_Response();
			}
			
			$params = array();
			$params['contact'] = $contactId;
			$response = $this->client->delete_contact($this->getApiKey(),$params);
			if (is_array($response) && ($response['deleted'] == 1))
			{
				return new MM_Response(); //remote side returned expected success message
			}
			else
			{
				return new MM_Response("GetResponse removal request sent, but remote side did not return expected message",MM_Response::$ERROR);
			}
		}
		catch (Exception $e)
		{
			return new MM_Response("Error removing {$email} from list:".$e->getMessage(),MM_Response::$ERROR);
		}
		return new MM_Response();
	}
	
	
	/**
	 * Takes an email address and retrieves the GetResponse contactId for that contact. 
	 * Reurnd the first id if multiple values are returned (shouldn't happen), returns empty string if contact is not found
	 * All return values are wrapped in an MM_Response
	 * Returns an error if the api returns an error condition
	 * 
	 * @param String $email The email of the contact
	 * @param String $listId The CampaignId of the campaign to search for the contact in 
	 * @return MM_Response An MM_Response object containing an array of matching contact ids in the message on success, the error condition on failure 
	 */
	private function getContactId($email,$listId)
	{
		if (empty($listId))
		{
			return new MM_Response("Unable to return GetResponse contactId for {$email} because no campaign was supplied");
		}
		
		try 
		{
			$params = array();
			$params['campaigns'] = array($listId);
			$params['email'] = array("EQUALS"=>$email);
			$response = $this->client->get_contacts($this->getApiKey(), $params);
			if (is_array($response))
			{
				if (count($response) == 0)
				{
					return new MM_Response("");
				}
				else
				{
					reset($response);
					return new MM_Response(key($response));
				}
			}
			else
			{
				return new MM_Response("Error retrieving contactId for {$email}",MM_Response::$ERROR);
			}
		}
		catch (Exception $e)
		{
			return new MM_Response("Error retrieving contactId for $email",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Updates a members information attached to a subscribed list
	 * 
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 * @return MM_Response indicating success or failure 
	 */
	public function updateMember($email,$listId,$newEmail="") 
	{
		$contactIdResponse = $this->getContactId($email, $listId);
		if (MM_Response::isError($contactIdResponse))
		{
			return $contactIdResponse;
		}
		$contactId = $contactIdResponse->message;
		return $this->updateMemberWithContactId($contactId, $email,$newEmail);
	}
	
	
	/**
	 * This method allows a member to be updated based on their GetResponse contact id. Placing this logic here instead of
	 * in updateMember eliminates the need to make a duplicate call to retrieve the contact id if you already have it
	 * 
	 * @param String $contactId - The id of the contact, which is unique to a campaign
	 * @param String $currentEmail - The current email address of the contact
	 * @param String $newEmail (optional) - If changing email addresses, this is the new email
	 */
	private function updateMemberWithContactId($contactId, $currentEmail, $newEmail="")
	{
		try
		{
			if(empty($contactId))
			{
				return new MM_Response("Contact ID is required while attempting to update information",MM_Response::$ERROR);
			}
			
			//get the old contact info
			$params = array();
			$params['contact'] = $contactId;
			$oldContact = $this->client->get_contact($this->getApiKey(),$params);
			if (!is_array($oldContact) || !array_key_exists($contactId, $oldContact))
			{
				return new MM_Response("Unable to locate existing GetResponse contact {$contactID} while attempting to update information",MM_Response::$ERROR);
			}
			
			$mergeResponse = $this->getMemberCustomFields($currentEmail,false);
			if ($mergeResponse->type == MM_Response::$ERROR)
			{
				//can't retrieve data to update with from MemberMouse for some reason
				return $mergeResponse;
			}
			
			if ($newEmail != "")
			{
				//get the contact custom fields
				$oldCustomFields = $this->get_contact_customs($this->getApiKey(),$params);
				if (!is_array($oldCustomFields))
				{
					$oldCustomFields = array();
				}
				
				$mergeData = $mergeResponse->message + $oldCustomFields; //merge the retrieved custom fields with the data from mm				
			}
			else 
			{
				$mergeData = $mergeResponse->message;
			}
			
			$customFields = $this->transformCustomFieldStructure($mergeData);
			
			//There are two scenarios that need to be addressed here: Updating a contact, and changing a contact's email
			//the GetResponse API add_contact method is used to both add and update. The default action is for GetResponse to autodetect.
			//In both cases, the current email needs to be part of an add_contact request
			//there is no method to change email address (presumably because of the opt-in reqs), so to change email, we
			//delete the old one after adding the new one
			
			unset($oldContact[$contactId]['origin']);
			unset($oldContact[$contactId]['created_on']);
			unset($oldContact[$contactId]['changed_on']);
			$oldContact[$contactId]['email'] = ($newEmail == "")?$currentEmail:$newEmail;
			$oldContact[$contactId]['customs'] = $customFields;
			$response = $this->client->add_contact($this->getApiKey(),$oldContact[$contactId]);
			
			if (!is_array($response) || (!isset($response['queued'])) || ($response['queued'] != 1))
			{
				return new MM_Response("Error updating {$oldContact[$contactId]['email']}",MM_Response::$ERROR);
			}
			if ($newEmail != "")
			{
				//remove the old email
				$deleteParams['contact'] = $contactId;
				$response = $this->client->delete_contact($this->getApiKey(),$deleteParams);
				if (!is_array($response) || (!isset($response['deleted'])) || ($response['deleted'] != 1))
				{
					return new MM_Response("GetResponse removal request sent, but remote side did not return expected message",MM_Response::$ERROR);
				}
			}
			return new MM_Response();
			
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * GetResponse has multiple account types. The highest account level (GetResponse360) uses a custom api url to connect to the api.
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post)
	{
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		
		$api_key_value  = ($provider_entity->isValid())?$provider_entity->getAPIKey():"";
		$api_url_value  = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiUrl"):"";
		$is360 = ($provider_entity->isValid())?$provider_entity->getConfigOption("is360"):"";
		$getresponse360 = ($is360 == true)?"checked":""; //this variable only determines whether the checkbox starts off as checked
		$gr360_style = (isset($getresponse360))?"display:none;":"";
		$custom_api_url = ((bool)$is360 === true)?$api_url_value:"";
		
		$form = new MM_EmailServiceProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">
			<label style="float:left; width:16em;">API Key</label>
			<input type="text" name="getresponse_api_key" id="getresponse_api_key" size="37" value="{$api_key_value}"/><br/>
			<label style="float:left; width:16em;">GetResponse360 Account</label>
			<input type="checkbox" name="is360" value="true" {$getresponse360} onClick="jQuery('#gr360').toggle();"/><br/>
			<span id='gr360' style='{$gr360_style}'>
				<label style="float:left; width:16em;">Custom API URL</label>
				<input type="text" name="custom_api_url" value="{$custom_api_url}" size="37" />
			</span>
			<br/>
			<br/>
			*Note: GetResponse uses the term <i>Campaign</i> for what MemberMouse considers to be a <i>list</i> <br/>
		</div>
OPTIONS;
		return $form;
	}
	
	
	/**
	 * Returns the configured API key
	 * 
	 * @return The API key
	 */
	public function getApiKey()
	{
		return $this->apiKey;
	}
	
	
	/**
	 * Sets the API key
	 * 
	 * @param String $apiKey
	 */
	public function setApiKey($apiKey)
	{
		$this->apiKey = $apiKey;
	}
	
	
	/**
	 * Returns the configured API url. For non-GetResponse360 accounts, this should always be the default
	 * 
	 * @return The API url 
	 */
	public function getApiUrl()
	{
		return (empty($this->apiUrl))?MM_GetResponseEmailServiceProvider::$GETRESPONSE_DEFAULT_URL:$this->apiUrl;
	}
	
	
	/**
	 * Set the API url
	 * 
	 * @param String $apiUrl
	 */
	public function setApiUrl($apiUrl)
	{
		$this->apiUrl = $apiUrl;
	}
	
	
	/**
	 * Sets whether or not the account being connected to is a GetResponse360 account
	 * 
	 * @param boolean true or false
	 */
	public function setGetResponse360($is360)
	{
		$this->is360 = (bool)$is360;
	}
	
	
	/**
	 * Returns whether or not the account being connected to is a GetResponse360 account
	 * 
	 * @return boolean true or false
	 */
	public function isGetResponse360()
	{
		return (bool)$this->is360;
	}
}
