/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MemberMouseService
{
	public static $SERVERIP = MM_CENTRAL_SERVER; 

	private static $CHECKIN_FAIL_MAX_COUNT = 10;
	private static $CHECKIN_INTERVAL = 4;
	private static $CHECKIN_WARNING_THRESHOLD = 7;
	public static $DEFAULT_MINOR_VERSION = "100";
	
	public static $USAGE_PAID_MEMBERS = "usage_paid_members";
	public static $USAGE_FREE_MEMBERS = "usage_free_members";
	public static $USAGE_PAID_BUNDLES = "usage_paid_bundles";
	public static $USAGE_FREE_BUNDLES = "usage_free_bundles";
	public static $USAGE_ORDERS = "usage_orders";
	public static $CONFIG_PAYMENT_METHODS = "config_payment_methods";
	public static $CONFIG_MEMBERSHIPS_FREE = "config_free_memberships";
	public static $CONFIG_MEMBERSHIPS_PAID = "config_paid_memberships";
	public static $CONFIG_BUNDLES_FREE = "config_free_bundles";
	public static $CONFIG_BUNDLES_PAID = "config_paid_bundles";
	public static $CONFIG_PRODUCTS = "config_products";
	public static $CONFIG_DEFAULT_EMPLOYEE_EMAIL = "config_dflt_employee_email";
	public static $CONFIG_DEFAULT_EMPLOYEE_NAME = "config_dflt_employee_name";
	public static $CONFIG_CURRENCY = "config_currency";
	
	public static $PROPS_WP_VERSION = "wp_version";
	public static $PROPS_PHP_VERSION = "php_version";
	public static $PROPS_MM_BETA = "mm_beta";
	
	public static $METHOD_AUTHORIZE = "authorizePlugin";
	public static $METHOD_ACTIVATE = "activatePlugin";
	public static $METHOD_DEACTIVATE = "deactivatePlugin";
	public static $METHOD_REPORT_SCHEDULE_STATE = "reportScheduleState";
	
	public static $OPTION_KEY_CHECKIN_FAILED_COUNT = "mm-option-failed-checkin-count";
	private static $CACHED_LICENSE_OBJ = null;
	private static $AUTH_LOCK = false;
	private static $AUTH_LOCK_IDENTIFIER = "mm-authorization-lock";

	
	/**
	 * Determines if the plugin should authorize with MM central
	 */
	private static function doAuthorize()
	{
		$lockStatus = self::acquireSemaphore();
		if ($lockStatus === 0)
		{
			return false;
		}

		if(!preg_match("/(plugins\.php)/", $_SERVER["PHP_SELF"]))
		{
			$lastCheckin = base64_decode(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_LAST_CHECKIN));
			$nextCheck = strtotime("+".self::$CHECKIN_INTERVAL." day", strtotime($lastCheckin));
			$today = date("Y-m-d h:i:s"); 
			if(strtotime($today) >= $nextCheck)
			{ 
				return true;
			}
			return false;
		} 
		return false;
	}
	
	private static function hasSurpassedFailedThresholdMax()
	{
		$cnt = MM_OptionUtils::getOption(self::$OPTION_KEY_CHECKIN_FAILED_COUNT);
		if(is_null($cnt) || empty($cnt))
		{
			$cnt = 0;
		}
		if($cnt>=self::$CHECKIN_FAIL_MAX_COUNT)
		{ 
			return true;
		} 
		return false;
	}
	
	private static function updateFailedRequestCount()
	{
	    global $wpdb;
	    
	    if (!is_object($wpdb))
	    {
	        return; //error
	    }
	    
	    //acquire semaphore
	    $internalLockID = "mm-service-failure-check-internal";
	    $lockAcquired = $wpdb->get_var($wpdb->prepare("SELECT IF(IS_FREE_LOCK(%s),COALESCE(GET_LOCK(%s,0),-1),0)",$internalLockID,$internalLockID));
	    if ($lockAcquired == "1")
	    {    
        		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_LAST_CHECKIN, base64_encode(date("Y-m-d h:i:s")));
        		$cnt = MM_OptionUtils::getOption(self::$OPTION_KEY_CHECKIN_FAILED_COUNT);
        		if(empty($cnt) || !is_numeric($cnt))
        		{
        			$cnt = 0;
        		}
        		$cnt++;
        			
        		MM_OptionUtils::setOption(self::$OPTION_KEY_CHECKIN_FAILED_COUNT, $cnt);
        		if ($cnt > self::$CHECKIN_WARNING_THRESHOLD)
        		{
        			self::sendWarningEmail();
        		}
        		//release semaphore
        		$wpdb->query($wpdb->prepare("SELECT RELEASE_LOCK(%s)",$internalLockID));
	    }
	}
	
	public static function authorize($refreshClasses=true)
	{
		if ($refreshClasses)
		{
			//class refresh requests means the call is coming from external, attempt to acquire the semaphore
			if ((self::$AUTH_LOCK === false)  && (self::acquireSemaphore() === 0))
			{
				return true;
			}
		}
		$url = MM_OptionUtils::getOption("siteurl");
		$version = MemberMouse::getPluginVersion();
		$postvars = "url=".urlencode($url)."&version=".$version;
		$minorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION);

		if($minorVersion !== false && intval($minorVersion) > 0)
		{
			$postvars .= "&minor_version=".$minorVersion;
		}
		else 
		{
			$postvars .= "&minor_version=".self::$DEFAULT_MINOR_VERSION;
		}
		
		if(class_exists("MM_AppliedBundle"))
		{
			$postvars .= "&statistics=".urlencode(json_encode(MM_MemberMouseService::generateStatistics()));
		}
		
		$postvars .= "&properties=".urlencode(json_encode(MM_MemberMouseService::generateProperties()));
		
		$postvars .= "&get_classes=".($refreshClasses ? "1" : "0");

		$json_data = self::sendRequest(self::$METHOD_AUTHORIZE, $postvars);
		
		if($json_data === false)
		{  
			self::updateFailedRequestCount();
			if (self::hasSurpassedFailedThresholdMax())
			{
				if(MM_Utils::isMemberMouseActive())
				{
					self::initiatePluginDeactivation();
				}
			}
			return false;
		}
		else if(self::isUnauthorizedResult($json_data))
		{
			if(MM_Utils::isMemberMouseActive())
			{
				self::initiatePluginDeactivation();
			}
			return false;
		}

		MM_OptionUtils::setOption(self::$OPTION_KEY_CHECKIN_FAILED_COUNT, 0);
		$json = $json_data->response_data;
		if ($refreshClasses && self::$AUTH_LOCK)
		{
			self::releaseSemaphore();
		}
		return self::updateLicenseData($json);
	}
	
	public static function activatePlugin()
	{
		$postvars = "url=".MM_OptionUtils::getOption("siteurl");
		self::sendRequest(self::$METHOD_ACTIVATE, $postvars);
	}
	
	public static function deactivatePlugin()
	{
		global $wpdb;
		
		// clear license data
		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_LICENSE_DATA, "");
		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_LAST_CHECKIN, "");
		
		$postvars = "url=".MM_OptionUtils::getOption("siteurl");
		self::sendRequest(self::$METHOD_DEACTIVATE, $postvars);
		
		$sql = "DELETE FROM ".MM_TABLE_CONTAINER;
		$wpdb->query($sql);
	}
	
	/**
	 * This function forces a checkin
	 */
	public static function ping()
	{
		// check if MemberMouse plugin is active
		if(!MM_Utils::isMemberMouseActive())
		{
			return new MM_Response("MemberMouse plugin is currently deactivated", MM_Response::$ERROR);
		}
		
		return self::authorize(false);
	}
	
	private static function updateLicenseData($json)
	{
		if(isset($json->isValid))
		{
			if(isset($json->licenseData))
			{
				$license = new MM_License("", false);
				$license->setData($json->licenseData);
				MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_LAST_CHECKIN, base64_encode(date("Y-m-d h:i:s")));
				MM_MemberMouseService::storeLicense($license);
			}
			
			if(!empty($json->classes))
			{	
				self::saveDynamicClasses($json->classes);
			}
			
			if(!empty($json->notifications) && is_array($json->notifications))
			{
				foreach($json->notifications as $notification)
				{
					switch($notification->type)
					{
						case "major-version-upgrade":
							MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_UPGRADE_NOTICE, $notification->value);
							break;
							
						case "minor-version-upgrade":
        					MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION, $notification->value);
							break;
					}
				}
			}
	
			return true;
		}
	
		return false;
	}
	
	
	/** UTILITIES **/
	
	private static function saveDynamicClasses($classes)
	{
		global $wpdb;
		
		if(is_object($classes) || is_array($classes))
		{
			$sql = "DELETE FROM ".MM_TABLE_CONTAINER." WHERE is_system='0'";
			$wpdb->query($sql);
			
			foreach($classes as $className=>$classEntry)
			{
				$sql = "INSERT INTO ".MM_TABLE_CONTAINER." SET name='%s', obj='%s', date_added=NOW()";
				
				if(strtolower($className) == "membermouseservice")
				{
					$sql = "UPDATE ".MM_TABLE_CONTAINER." SET name='%s', obj='%s', date_added=NOW() where name='membermouseservice' LIMIT 1";
				}
				
				if($wpdb->query($wpdb->prepare($sql, $className, $classEntry)))
				{
					$cacheResult = self::cacheClass($className, $classEntry);
				}
			}
			
			MM_Session::value(MM_Session::$KEY_USING_DB_CACHE, !$cacheResult);
		}
		
		return true;
	}

	private static function cacheClass($className, $classEntry)
	{
		$filePath = MM_PLUGIN_ABSPATH."/com/membermouse/cache";
		
		if(is_dir($filePath))
		{
			if(is_writeable($filePath))
			{
				if(preg_match("/(membermouse_schema)$/", $className))
				{
					$filePath .= "/".$className.".sql";
				}
				else
				{
					$filePath .= "/".base64_encode($className).".cache";
				}
				
				$fh = fopen($filePath, 'w');
				fwrite($fh, $classEntry);
				fclose($fh);
				
				if(file_exists($filePath))
				{
					@chmod($filePath, 0744);
				}
				
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	} 
	
	private static function sendRequest($method, $postvars)
	{
		$url = self::$SERVERIP.$method;
		
		$response = wp_remote_post($url, array('method' => 'POST',
											   'timeout' => 45,
											   'body'=>$postvars));
		
		if (is_wp_error($response) || (isset($response['response']) && isset($response['response']['code']) && ($response['response']['code'] != "200")) || 
				(!isset($response['body'])) ) 
		{
			// unable to connect to server
			return false;
		}
		else 
		{
			
			$json = json_decode($response['body']);
			if(!is_null($json) && isset($json->response_data))
			{	
				$origResponse = $json->response_data;
				if(is_string($json->response_data))
				{
					$json->response_data = json_decode($json->response_data);
						
					if(is_null($json->response_data))
					{
						$json->response_data = $origResponse;
					}
				}
			
				// validate license data for authorizations
				if($method == self::$METHOD_AUTHORIZE && (!isset($json->response_data->licenseData) || !isset($json->response_data->licenseData->id)))
				{
					$error = new stdClass();
					$error->response_code = "401";
					return $error;
				}
				
				return $json;
			}
			else 
			{
				// license is canceled
				$error = new stdClass();
				$error->response_code = "401";
				return $error;
			}
		}
	}
	

	public static function isSuccessfulResult($result)
	{ 
		if(!is_null($result) && ($result->response_code == "200"))
		{
			return true;
		}
	
		return false;
	}
	
	
	public static function isUnauthorizedResult($result)
	{
		if (($result != null) && (isset($result->response_code)) && ($result->response_code == "401"))
		{
			return true;
		}
		return false;
	}
	
	
	/** SITE STATS AND PROPERTIES **/
	
	public static function generateStatistics()
	{
		global $wpdb;
		
		$statistics = array(self::$USAGE_PAID_MEMBERS => 0,
							self::$USAGE_FREE_MEMBERS => 0,
							self::$USAGE_PAID_BUNDLES => 0,
							self::$USAGE_FREE_BUNDLES => 0,
							self::$USAGE_ORDERS => 0,
							self::$CONFIG_PAYMENT_METHODS => "",
							self::$CONFIG_MEMBERSHIPS_PAID => 0,
							self::$CONFIG_MEMBERSHIPS_FREE => 0,
							self::$CONFIG_BUNDLES_PAID => 0,
							self::$CONFIG_BUNDLES_FREE => 0,
							self::$CONFIG_PRODUCTS => 0,
							self::$CONFIG_DEFAULT_EMPLOYEE_EMAIL => "",
							self::$CONFIG_DEFAULT_EMPLOYEE_NAME  => ""				
		);
		
		$checkTablesExist = $wpdb->query("SHOW TABLES LIKE '".MM_TABLE_USER_DATA."'");
		if ($checkTablesExist !== 0) //if the user data table doesn't exists, we are in the install, don't try to gather the other statistics
		{		
			// PAID MEMBERS (USAGE)
			$baseSql = "SELECT count(u.wp_user_id) as total FROM ".MM_TABLE_USER_DATA." u, ".MM_TABLE_MEMBERSHIP_LEVELS." m WHERE ";
			$baseSql .= "u.membership_level_id = m.id AND (u.status = '".MM_Status::$ACTIVE."' OR u.status = '".MM_Status::$PENDING_CANCELLATION."') ";
			
			$result = $wpdb->get_row($baseSql." AND m.is_free != '1';");
			
			if($result)
			{
				$paidMembers = $result->total;
			}
			else
			{
				$paidMembers = 0;
			}
			
			$statistics[self::$USAGE_PAID_MEMBERS] = $paidMembers;
			
			// FREE MEMBERS (USAGE)
			$result = $wpdb->get_row($baseSql." AND m.is_free = '1';");
			
			if($result)
			{
				$freeMembers = $result->total;
			}
			else
			{
				$freeMembers = 0;
			}
			
			$statistics[self::$USAGE_FREE_MEMBERS] = $freeMembers;
			
			// PAID BUNDLES (USAGE)
			$baseSql = "SELECT count(1) as total_bundles FROM ".MM_TABLE_APPLIED_BUNDLES." appBundles, {$wpdb->users} users, ";
			$baseSql .= MM_TABLE_BUNDLES." bundles WHERE appBundles.access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."' AND appBundles.access_type_id = users.id ";
			$baseSql .= "AND (appBundles.status='".MM_Status::$ACTIVE."' OR appBundles.status='".MM_Status::$PENDING_CANCELLATION."') AND appBundles.bundle_id = bundles.id ";
			
			$result = $wpdb->get_row($baseSql." AND bundles.is_free = '0';");
			
			if($result)
			{
				$paidBundles = $result->total_bundles;
			}
			else
			{
				$paidBundles = 0;
			}
			
			$statistics[self::$USAGE_PAID_BUNDLES] = $paidBundles;
			
			// FREE BUNDLES (USAGE)
			$result = $wpdb->get_row($baseSql." AND bundles.is_free = '1';");
			
			if($result)
			{
				$freeBundles = $result->total_bundles;
			}
			else
			{
				$freeBundles = 0;
			}
			
			$statistics[self::$USAGE_FREE_BUNDLES] = $freeBundles;
	
			// ORDERS
			$baseSql = "SELECT count(o.id) as total FROM ".MM_TABLE_ORDERS." o";
			
			$result = $wpdb->get_row($baseSql);
			
			if($result)
			{
				$orders = $result->total;
			}
			else
			{
				$orders = 0;
			}
			
			$statistics[self::$USAGE_ORDERS] = $orders;
			
			// PAYMENT METHODS
			$paymentMethods = array();
			
			$services = MM_PaymentServiceFactory::getAvailablePaymentServices();
				
			foreach ($services as $service)
			{
				if ($service instanceof MM_PaymentService)
				{
					array_push($paymentMethods, $service->getToken());
				}
			}
			
			$statistics[self::$CONFIG_PAYMENT_METHODS] = join(", ", $paymentMethods);
			
			// PAID MEMBERSHIP LEVELS
			$paidMemberships = MM_MembershipLevel::getMembershipLevelsList(false, MM_MembershipLevel::$SUB_TYPE_PAID);
			
			if($paidMemberships && is_array($paidMemberships))
			{
				$statistics[self::$CONFIG_MEMBERSHIPS_PAID] = count($paidMemberships);
			}
			else 
			{
				$statistics[self::$CONFIG_MEMBERSHIPS_PAID] = 0;
			}
			
			// FREE MEMBERSHIP LEVELS
			$freeMemberships = MM_MembershipLevel::getMembershipLevelsList(false, MM_MembershipLevel::$SUB_TYPE_FREE);
			
			if($freeMemberships && is_array($freeMemberships))
			{
				$statistics[self::$CONFIG_MEMBERSHIPS_FREE] = count($freeMemberships);
			}
			else
			{
				$statistics[self::$CONFIG_MEMBERSHIPS_FREE] = 0;
			}
			
			// PAID BUNDLES
			$paidBundles = MM_Bundle::getBundlesList(false, MM_Bundle::$SUB_TYPE_PAID);
			
			if($paidBundles && is_array($paidBundles))
			{
				$statistics[self::$CONFIG_BUNDLES_PAID] = count($paidBundles);
			}
			else
			{
				$statistics[self::$CONFIG_BUNDLES_PAID] = 0;
			}
			
			// FREE BUNDLES
			$freeBundles = MM_Bundle::getBundlesList(false, MM_Bundle::$SUB_TYPE_FREE);
			
			if($freeBundles && is_array($freeBundles))
			{
				$statistics[self::$CONFIG_BUNDLES_FREE] = count($freeBundles);
			}
			else
			{
				$statistics[self::$CONFIG_BUNDLES_FREE] = 0;
			}
			
			// PRODUCTS
			$products = MM_Product::getAll();
			
			if($products && is_array($products))
			{
				$statistics[self::$CONFIG_PRODUCTS] = count($products);
			}
			else
			{
				$statistics[self::$CONFIG_PRODUCTS] = 0;
			}
			
			// DEFAULT EMPLOYEE ACCOUNT
			$employee = MM_Employee::getDefault();
			$statistics[self::$CONFIG_DEFAULT_EMPLOYEE_EMAIL] = "";
			$statistics[self::$CONFIG_DEFAULT_EMPLOYEE_NAME] = "";
			
			if($employee->isValid())
			{
				$statistics[self::$CONFIG_DEFAULT_EMPLOYEE_EMAIL] = $employee->getEmail();
				$statistics[self::$CONFIG_DEFAULT_EMPLOYEE_NAME] = $employee->getDisplayName();
			}
		}
		$statistics[self::$CONFIG_CURRENCY] = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CURRENCY);
		
		return $statistics;
	}
	
	public static function generateProperties()
	{
		global $wp_version;
		$properties = array();
		
		$properties[self::$PROPS_WP_VERSION] = $wp_version;
		$properties[self::$PROPS_PHP_VERSION] = phpversion();

		if(MM_IS_BETA == true)
		{
			$properties[self::$PROPS_MM_BETA] = "true";
		}
		else
		{
			$properties[self::$PROPS_MM_BETA] = "false";
		}
		
		return $properties;
	}
	
	
	/** PERMISSIONS **/
	
	public static $PYMT_SERVICE_AUTHORIZENET = "pymt_service_authorizenet";
	public static $PYMT_SERVICE_AUTHORIZENET_CIM = "pymt_service_authorizenet_cim";
	public static $PYMT_SERVICE_PAYPAL = "pymt_service_paypal";
	public static $PYMT_SERVICE_CLICKBANK = "pymt_service_clickbank";
	public static $PYMT_SERVICE_CHARGIFY = "pymt_service_chargify";
	public static $PYMT_SERVICE_STRIPE = "pymt_service_stripe";
	public static $PYMT_SERVICE_BRAINTREE = "pymt_service_braintree";
	public static $PYMT_SERVICE_LIMELIGHT = "pymt_service_limelight";
	public static $PYMT_SERVICE_LITLE = "pymt_service_litle";
	public static $PYMT_SERVICE_COINBASE = "pymt_service_coinbase";
	public static $PYMT_SERVICE_TWOCHECKOUT = "pymt_service_twocheckout";
	public static $MAX_NUMBER_MEMBERS = "max_number_members";
	public static $SHOW_MM_FOOTER = "show_mm_footer";
	public static $FEATURE_BUNDLES = "feature_bundles";
	public static $FEATURE_DRIP_CONTENT_SCHEDULE = "feature_drip_content_schedule";
	public static $FEATURE_PHP_INTERFACE = "feature_php_interface";
	public static $FEATURE_PUSH_NOTIFICATIONS = "feature_push_notifications";
	public static $FEATURE_API = "feature_api";
	public static $FEATURE_SMART_CONTENT_TAGS = "feature_smart_content_tags";
	public static $FEATURE_AFFILIATE_MGMT = "feature_affiliate_mgmt";
	public static $FEATURE_LOAD_BALANCING = "feature_load_balancing";
	public static $FEATURE_EMPLOYEE_ACCOUNTS = "feature_employee_accounts";
	public static $FEATURE_ADV_SUBSCRIPTION_MGMT = "feature_adv_subscription_mgmt";
	public static $FEATURE_REPORTING_SUITE = "feature_reporting_suite";
	public static $EXTENSION_USERVOICE = "extension_uservoice";
	public static $EXTENSION_SOCIAL_LOGIN = "extension_social_login";
	public static $EXTENSION_GOOGLE_ECOMMERCE = "extension_google_ecommerce";
	public static $SUPPORT_EMAIL = "support_email";
	public static $SUPPORT_PHONE = "support_phone";
	public static $UNLIMITED_MEMBERS = -1;
	
	public static $ACTIVE = 1;
	public static $INACTIVE = 0;
	
	public static function hasPermission($key)
	{
		$license = new MM_License();
		
		if($license->isValid())
		{
			$permissions = $license->getPermissions();
			
			if($permissions)
			{
				$permissions = json_decode($permissions);
				
				/** TESTING PURPOSES ONLY **/
				if($key == "pymt_service_twocheckout")
				{
  			  $permissions->$key = 1;	
  		  }
				
				if(is_object($permissions) && isset($permissions->$key))
				{
					return $permissions->$key;
				}
			}
			
			return self::$INACTIVE;
		}
	}
	
	public static function getMemberLimit()
	{
		$license = new MM_License();
		
		if($license->isValid())
		{
			$permissions = $license->getPermissions();
				
			if($permissions)
			{
				$permissions = json_decode($permissions);
				
				if(is_object($permissions) && isset($permissions->max_number_members))
				{
					return $permissions->max_number_members;
				}
			}
		}
		
		return -1;
	}
	
	public static function getUpgradeUrl($feature="")
	{
		$license = new MM_License();
		if(empty($feature))
		{
			switch($license->getpermissionsProfileId())
			{
				// free
				case 1:
					return "https://membermouse.com/checkout/?rid=pK4E18";

				// starter v1
				case 2:
					return "https://membermouse.com/checkout/?rid=pw4237";
				
				// growth v1
				case 3: 
					return "https://membermouse.com/checkout/?rid=pw4237";
				
				// professional v1
				case 4:
					return "https://membermouse.com/checkout/?rid=pvBQtH";
					
				// starter v2
				case 5:
					return "https://membermouse.com/checkout/?rid=pjWb8n";
					
				// builder v2
				case 6:
					return "https://membermouse.com/checkout/?rid=pNWxkS";
					
				// growth v2
				case 7:
					return "https://membermouse.com/checkout/?rid=pw4237";
					
				// advanced v2
				case 10:
					return "https://membermouse.com/checkout/?rid=p4Nu1u";
					
				// premium v2
				case 8:
					return "https://membermouse.com/checkout/?rid=pvBQtH";
					
				// professional v2
				case 9:
					return "https://membermouse.com/checkout/?rid=pvBQtH";
					
				default:
					return "https://membermouse.com/checkout/?rid=pK4E18";
			}
		}
		else
		{
			return "http://membermouse.com/upgrade.php?profileid=".$license->getpermissionsProfileId()."&feature=".$feature;
		}
	}
	
	private static function initiatePluginDeactivation()
	{
		// if logged in as an admin and in the admin area, disable the plugin through WordPress, otherwise
		// manually deactivate the plugin through the database
		if(is_admin())
		{
			if(!preg_match("/(plugins\.php)/", $_SERVER["PHP_SELF"]))
			{
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,"plugin deactivated from MM_MemberMouseService::initiatePluginDeactivation");
				header("Location: plugins.php?".MM_Session::$PARAM_COMMAND_DEACTIVATE."=1&deactivate=true");
			}
		}
		else
		{
			self::manuallyDeactivatePlugin();
		}
	}
	
	private static function manuallyDeactivatePlugin()
	{
		$plugins = get_option('active_plugins');
	
		if(is_array($plugins) && count($plugins) > 0)
		{
			$pluginName = MM_PLUGIN_NAME."/index.php";
			$key = array_search($pluginName, $plugins, true);
				
			if($key !== false)
			{
				unset($plugins[$key]);
			}
				
			update_option("active_plugins", $plugins);
			
			// send an email to the default employee
			$employee = MM_Employee::getDefault();
			$email = new MM_Email();
			$email->setContext(new MM_Context());
			$email->setSubject("MemberMouse deactivated on ".get_option('siteurl'));
			$email->setFromName("MemberMouse Notification");
			$email->setFromAddress("do-not-reply@membermouse.com");
			$email->setToName($employee->getFirstName());
			$email->setToAddress($employee->getEmail());
			
			$body = "MemberMouse has been deactivated on ".get_option('siteurl').".\n\nThis is most likely because your MemberMouse license has expired.\n\n";
			$body .= "If you think this was done in error, please contact us at support@membermouse.com.\n\nThank you,\nMemberMouse Support Team";
			$email->setBody($body);
			
			$email->send();
			
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR,"plugin deactivated from MM_MemberMouseService::manuallyDeactivatePlugin()");
			self::deactivatePlugin();
		}
	}
	
	
	/** LICENSE HELPER METHODS **/
	/**
	 * The following methods are associated with and called from the MM_License class. They're put here to ensure
	 * the highest level of security however the application shouldn't interact with them directly on this class,
	 * they should use MM_License as the main object to interface with.
	 */
	public static function getLicense(MM_License $license)
	{
		//attempt to retrieve cached license object from private static variable. This prevents unnecessary db hit and decoding
		$cachedObjExists = (self::$CACHED_LICENSE_OBJ !== null);
		
		if (!$cachedObjExists)
		{
			//retrieve cached license data from option
			$licenseData = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_LICENSE_DATA);
			if(empty($licenseData) || MM_MemberMouseService::doAuthorize())
			{
				MM_MemberMouseService::authorize(false);
				self::releaseSemaphore();
				$licenseData = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_LICENSE_DATA);
			}
			
			if(empty($licenseData) && MM_Utils::isMemberMouseActive())
			{
				MM_MemberMouseService::initiatePluginDeactivation();
				return false;
			}
			
			// unobfuscate license data
			$licenseData = unserialize(base64_decode($licenseData));
			if (is_object($licenseData))
			{
				self::$CACHED_LICENSE_OBJ = $licenseData;
			}
		}
		else 
		{
			$licenseData = self::$CACHED_LICENSE_OBJ;
		}
		
		if(!is_null($licenseData) && isset($licenseData->id))
		{
			$license->setId($licenseData->id);
			$license->setMemberId($licenseData->memberId);
			$license->setName($licenseData->name);
			$license->setUrl($licenseData->url);
			$license->setApiKey($licenseData->apiKey);
			$license->setApiSecret($licenseData->apiSecret);
			$license->setMajorVersion($licenseData->majorVersion);
			$license->setMinorVersion($licenseData->minorVersion);
			$license->setPermissionsProfileId($licenseData->permissionsProfileId);
			$license->setPermissions($licenseData->permissions);
			$license->setStatus($licenseData->status);
			$license->setLastUpdated($licenseData->lastUpdated);
			$license->setDateAdded($licenseData->dateAdded);
			$license->setAuthKey(base64_encode(get_option("siteurl")));
			$license->validate();
		}
	}
	
	public static function storeLicense(MM_License $license)
	{
		$licenseData = base64_encode(serialize(self::packageUpLicenseData($license)));
		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_LICENSE_DATA, $licenseData);
	}
	
	public static function validateLicense(MM_License $license)
	{
		$authKey = base64_decode($license->getAuthKey());
		
		if(empty($authKey) || ($authKey != get_option("siteurl")))
		{
			self::initiatePluginDeactivation();
			return false;
		}
	}
	
	private static function packageUpLicenseData(MM_License $license)
	{
		$data = new stdClass();
	
		$data->id = $license->getId();
		$data->memberId = $license->getMemberId();
		$data->name = $license->getName();
		$data->url = $license->getUrl();
		$data->apiKey = $license->getApiKey();
		$data->apiSecret = $license->getApiSecret();
		$data->majorVersion = $license->getMajorVersion();
		$data->minorVersion = $license->getMinorVersion();
		$data->permissionsProfileId = $license->getpermissionsProfileId();
		$data->permissions = $license->getPermissions();
		$data->status = $license->getStatus();
		$data->isArchivedFlag = $license->isArchived();
		$data->lastUpdated = $license->getLastUpdated();
		$data->dateAdded = $license->getDateAdded();
	
		return $data;
	}
	
	
	/** PROTECTED UTILITES **/
	public static function encryptPassword($password)
	{
		for($i=0; $i<5; $i++)
		{
			$password = strrev(base64_encode($password));
		}
			
		return $password;
	}

	public static function decryptPassword($password)
	{
		for($i=0; $i<5; $i++)
		{
			$password = base64_decode(strrev($password));
		}

		return $password;
	}
	
	
	public static function regulateSchedulingEntries()
	{
	    global $wpdb;
	    
		$lockName = substr("{$wpdb->prefix}-mm-scheduling-regulator",0,63); //option and lock identifier are the same
		$dataOptionName = substr("{$wpdb->prefix}mm-schreg-data",0,63);
		$method = "reportDuplicateSchedules";
	    $url = self::$SERVERIP.$method;
	    
	    $optionValue = MM_OptionUtils::getOption($lockName);
	    
	    if ($optionValue == false)
	    {
	        
	        $lockAcquired = $wpdb->get_var("SELECT COALESCE(GET_LOCK('{$lockName}',0),0)");
	        
	        if ($lockAcquired == 1) //begin locked section
	        {
	            //set time limit to infinite
	            set_time_limit(0);
	            
	            //used later to determine how to act in the event of transmission errors
	            $storeForLater = false;
	            
	            $seTable = MM_TABLE_SCHEDULED_EVENTS;
	            $spTable = MM_TABLE_SCHEDULED_PAYMENTS;
	            
	            //retrieve user id, order id, order number, how many future scheduled events there are, and a list of event ids
	            //for every order item that has more than one unprocessed (we can assume future) scheduled event
	            //these violate the constraint that every order item has at most one future scheduled payment event
	            $sql = "SELECT A.schedule_ids, A.order_item_id, A.freq, o.id AS order_id, o.order_number, o.user_id FROM ".
	            "(SELECT group_concat(se.id) AS schedule_ids, sp.order_item_id, COUNT(1) AS freq FROM {$seTable} se INNER JOIN {$spTable} sp ".
	            "ON (se.id = sp.id) WHERE (se.processed_date IS NULL) GROUP BY sp.order_item_id HAVING freq > 1) AS A ".
	            "INNER JOIN mm_order_items oi ON (A.order_item_id = oi.id) INNER JOIN mm_orders o ON (oi.order_id = o.id)";
	            $occurrences = $wpdb->get_results($sql);
	            
	            if (count($occurrences) > 0)
	            {
	                $license = new MM_License("",false);
	                MM_MemberMouseService::getLicense($license);
	                $packagedData = array("api_key"       => $license->getApiKey(),
	                    "api_secret"     => $license->getApiSecret(),
	                    "command"		  => "reportDuplicateSchedules",
	                    "data" 	      => $occurrences
	                );
	                
	                //send packaged data to central
	                
	                $response = wp_remote_post($url, array('method' => 'POST',
	                    'timeout' => 120,
	                    'body'=>$packagedData));
	                
	                if (is_wp_error($response) || (isset($response['response']) && isset($response['response']['code']) && ($response['response']['code'] != "200")) ||
	                    (!isset($response['body'])) )
	                {
	                    // unable to connect to server
	                    $storeForLater = true;
	                }
	                else
	                {
	                    $json = json_decode($response['body']);
	                    if (!isset($json->response_code) || ($json->response_code != "200"))
	                    {
	                        $storeForLater = true;
	                    }
	                }
	                
	                if ($storeForLater)
	                {
	                    update_option($dataOptionName,$occurrences,true);
	                }
	                
	                //now remove duplicated schedules
	                foreach ($occurrences as $occurrence)
	                {
	                    if (isset($occurrence->schedule_ids) && (strpos($occurrence->schedule_ids,",") !== false))
	                    {
	                        //remove the first id, delete the remaining ids
	                        $remainingSchedules = substr($occurrence->schedule_ids,strpos($occurrence->schedule_ids,",")+1);
	                        $deleteQueryA = "DELETE FROM {$seTable} WHERE (processed_date IS NULL) AND id IN ({$remainingSchedules})";
	                        $wpdb->query($deleteQueryA);
	                    }
	                }
	                
	                $deleteQueryB = "DELETE sp FROM {$spTable} sp LEFT JOIN {$seTable} se ON (se.id = sp.id) WHERE se.id IS NULL";
	                $wpdb->query($deleteQueryB);
	            }
	            
	            //set the option so this doesn't run again
	            if ($storeForLater)
	            {
	                update_option($lockName,"pending",true);
	            }
	            else
	            {
	                update_option($lockName,"completed",true);
	            }
	            
	            //end locked section
	            $wpdb->query("SELECT RELEASE_LOCK('{$lockName}')");
	        }
	    }
	    else if ($optionValue == "pending")
	    {
	        $dataOptionValue = MM_OptionUtils::getOption($dataOptionName);
	        if ($dataOptionValue !== false)
	        {
	            //the scheduling regulator completed, but there was previously an issue sending the data to central, try again
	            $license = new MM_License("",false);
	            MM_MemberMouseService::getLicense($license);
	            
	            $packagedData = array("api_key"       => $license->getApiKey(),
	                "api_secret"    => $license->getApiSecret(),
	                "command"		  => "reportDuplicateSchedules",
	                "data" 	      => $dataOptionValue
	            );
	            
	            $response = wp_remote_post($url, array('method' => 'POST',
	                'timeout' => 120,
	                'body'=>$packagedData));
	            
	            if (is_wp_error($response) || (isset($response['response']) && isset($response['response']['code']) && ($response['response']['code'] != "200")) ||
	                (!isset($response['body'])) )
	            {
	                // unable to connect to server
	                update_option($lockName,"completed",true); //set option to completed, but leave the data so it can potentially be retrieved later
	                return false;
	            }
	            else
	            {
	                $json = json_decode($response['body']);
	                if (isset($json->response_code) && ($json->response_code == "200"))
	                {
	                    delete_option($dataOptionName);
	                }
	            }
	        }
	        //regardless of outcome, set patch as completed
	        update_option($lockName,"completed",true);
	    }
	    
	}
	
	
	public static function registerOrphanedSchedules()
	{
	    
        global $wpdb;
	    
	    $lockName = substr("{$wpdb->prefix}mm-unreg-schedules-update",0,63); //option and lock identifier are the same
	    $dataOptionName = substr("{$wpdb->prefix}mm-unregsched-data",0,63);
	    $method = "reportUnregisteredSchedules";
	    $url = self::$SERVERIP.$method;
	    
        $lockAcquired = $wpdb->get_var("SELECT COALESCE(GET_LOCK('{$lockName}',0),0)");    
        if ($lockAcquired == 1) //begin locked section
        {
            $seTable = MM_TABLE_SCHEDULED_EVENTS;
            $spTable = MM_TABLE_SCHEDULED_PAYMENTS;
            $oiTable = MM_TABLE_ORDER_ITEMS;
            $oTable  = MM_TABLE_ORDERS;
            $safeDate = date("Y-m-d H:i",strtotime("-24 Hours"));
            $optionValue = MM_OptionUtils::getOption($lockName);
            
            $sqlHead = "SELECT se.id AS event_id, concat(o.user_id,'#',o.order_number) AS record ";
            $sqlBody = "FROM {$spTable} sp INNER JOIN {$seTable} se ON (sp.id = se.id) ".
                "INNER JOIN {$oiTable} oi ON (sp.order_item_id = oi.id) ".
                "INNER JOIN {$oTable} o ON (oi.order_id = o.id) ".
                "LEFT JOIN mm_queued_scheduled_events q on (se.id = q.event_id) ".
                "WHERE (se.scheduled_date < '{$safeDate}') AND (se.status = 0) AND (se.processed_date IS NULL) AND (oi.status = 1) AND (q.event_id IS NULL)";
            
            //set time limit to infinite
            set_time_limit(0);
            
            if ($optionValue == false) //never been set
            { 
                //used later to determine how to act in the event of transmission errors
                $storeForLater = false;
                
                //find orphaned schedules
                $sql = $sqlHead.$sqlBody;
                $unregResults = $wpdb->get_results($sql);
               
                $unregObj = new stdClass();
                $unregObj->count = count($unregResults);
                $unregObj->data = "";
               
                
                if ($unregObj->count > 0)
                {
                    $first = true;
                    foreach ($unregResults as $aResult)
                    {
                        if ($first)
                        {
                            $unregObj->data = $aResult->record;
                            $first = false;
                        }
                        else 
                        {
                            $unregObj->data .= "|{$aResult->record}";
                        }
                        
                    }
                    $license = new MM_License("",false);
                    MM_MemberMouseService::getLicense($license); //causes a remote auth?
                    $packagedData = array("api_key"        => $license->getApiKey(),
                                          "api_secret"     => $license->getApiSecret(),
                                          "command"		  => "reportUnregisteredSchedules",
                                          "data" 	          => $unregObj
                    );
                    
                    //send packaged data to central
                    $response = wp_remote_post($url, array('method' => 'POST',
                        'timeout' => 120,
                        'body'=>$packagedData));
                    
                    if (is_wp_error($response) || (isset($response['response']) && isset($response['response']['code']) && ($response['response']['code'] != "200")) || (!isset($response['body'])) )
                    {
                        // unable to connect to server
                        $storeForLater = true;
                    }
                    else
                    {
                        $json = json_decode($response['body']);
                        if (!isset($json->response_code) || ($json->response_code != "200"))
                        {
                            $storeForLater = true;
                        }
                    }
                    
                    if ($storeForLater)
                    {
                        update_option($dataOptionName,$unregObj,true);
                        //set the option so this doesn't run again
                        update_option($lockName,"pending",true);
                    }
                    else
                    {
                        update_option($lockName,"completed",true);
                    }
                }
	         }  
	         else if ($optionValue == "pending")
	         {
        	       $dataOptionValue = MM_OptionUtils::getOption($dataOptionName);
        	       if ($dataOptionValue !== false)
        	       {
        	           //the scheduling regulator completed, but there was previously an issue sending the data to central, try again
        	           $license = new MM_License("",false);
        	           MM_MemberMouseService::getLicense($license);
        	            
        	           $packagedData = array("api_key"       => $license->getApiKey(),
        	                                 "api_secret"    => $license->getApiSecret(),
        	                                 "command"		=> "reportUnregisteredSchedules",
        	                                 "data" 	        => $dataOptionValue
        	           );
        	            
        	           $response = wp_remote_post($url, array('method' => 'POST',
        	                                                  'timeout' => 120,
        	                                                  'body'=>$packagedData));
        	            
        	           if (is_wp_error($response) || (isset($response['response']) && isset($response['response']['code']) && ($response['response']['code'] != "200")) || (!isset($response['body'])) )
        	           {
        	               // unable to connect to server
        	               MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Unable to transmit orphaned schedule results to central: ".print_r($response,true));
        	           }
        	           else
        	           {
        	               $json = json_decode($response['body']);
        	               if (isset($json->response_code) && ($json->response_code == "200"))
        	               {
        	                   delete_option($dataOptionName);
        	               }
        	           }
        	       }
        	       
        	       //regardless of outcome, set patch as completed
        	       update_option($lockName,"completed",true);
	          }
	           
	          //now force reregistration of orphaned schedules using the queue table
	          $queueCommand = (class_exists("MM_ScheduledEvent",false))?MM_ScheduledEvent::$QUEUE_COMMAND_UPDATE:"0";
	          $now = MM_Utils::getCurrentTime();
	          $regsqlSubquery = "SELECT se.id, '{$queueCommand}', '{$now}' {$sqlBody}";
	          $qTable = MM_TABLE_QUEUED_SCHEDULED_EVENTS;
	          $regsqlQuery = "INSERT INTO {$qTable} (event_id, command, queued_date) {$regsqlSubquery}";
	          $wpdb->query($regsqlQuery);
	    
	          //end locked section
	          $wpdb->query("SELECT RELEASE_LOCK('{$lockName}')");
        }
	}
	
	
	private static function sendWarningEmail()
	{
		if (class_exists("MM_Email") && function_exists("wp_mail"))
		{
			$siteUrl = get_option('siteurl');
			$employee = MM_Employee::getDefault();
			$email = new MM_Email();
			$email->setContext(new MM_Context());
			$email->setSubject("ALERT - MemberMouse deactivation warning for {$siteUrl}");
			$email->setFromName("MemberMouse Notification");
			$email->setFromAddress("do-not-reply@membermouse.com");
			$email->setToName($employee->getFirstName());
			$email->setToAddress($employee->getEmail());
				
			$body = "This is an automated notice to inform you that communication between the MemberMouse plugin ".
					"on your site to the MemberMouse central server has been failing on a consistent basis. The ".
					"main causes for this are network outages or blocks by security plugins.\n\n".
					"We recommend:\n1) that you work with your host provider to review server logs over the ".
					"past couple of days to see if there are any errors to indicate what might be occurring to ".
					"cause this. \n".
					"2) review any new security settings on the server or security plugins that might have been ".
					"added, as these can interfere with communication\n\nAfter gathering this information ".
					"and making any necessary changes, please contact the MemberMouse Support Team at ".
					"support@membermouse.com so we can monitor your license and make sure that your plugin ".
					"successfully authorizes.\nIMPORTANT: If the situation is not fixed within 7 days, ".
					"the MemberMouse plugin will deactivate.";
			$email->setBody($body);
				
			$email->send();
		}
	}
	
	
	private static function acquireSemaphore()
	{
		global $wpdb;
		
		if (!is_object($wpdb))
		{
			return -1; //error
		}
		
		$lockAcquired = $wpdb->get_var($wpdb->prepare("SELECT IF(IS_FREE_LOCK(%s),COALESCE(GET_LOCK(%s,0),-1),0)",self::$AUTH_LOCK_IDENTIFIER,self::$AUTH_LOCK_IDENTIFIER));
		if ($lockAcquired == "1")
		{
			self::$AUTH_LOCK = true;
		}
		return intval($lockAcquired); //-1 error, 0 not acquired, 1 acquired
	}
	
	
	private static function releaseSemaphore()
	{
		global $wpdb;
		
		if (is_object($wpdb) && self::$AUTH_LOCK)
		{
			$wpdb->query($wpdb->prepare("SELECT RELEASE_LOCK(%s)",self::$AUTH_LOCK_IDENTIFIER));
			self::$AUTH_LOCK = false;
		}
	}
}
