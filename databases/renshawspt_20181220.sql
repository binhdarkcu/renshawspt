-- phpMyAdmin SQL Dump
-- version 4.8.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Dec 20, 2018 at 03:13 AM
-- Server version: 10.1.31-MariaDB
-- PHP Version: 5.6.35

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `wordpress`
--

-- --------------------------------------------------------

--
-- Table structure for table `mm_actions`
--

CREATE TABLE `mm_actions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `event_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `action_type` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `action_value` longtext COLLATE utf8_unicode_ci NOT NULL,
  `event_attributes` longtext COLLATE utf8_unicode_ci NOT NULL,
  `status` tinyint(4) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_actions`
--

INSERT INTO `mm_actions` (`id`, `event_type`, `action_type`, `action_value`, `event_attributes`, `status`) VALUES
(1, 'mm_member_status_change', 'action_send_email', 'a:5:{s:9:\"emailToId\";s:2:\"-1\";s:11:\"emailFromId\";i:1;s:7:\"emailCC\";s:0:\"\";s:12:\"emailSubject\";s:24:\"Your Account Is Past Due\";s:9:\"emailBody\";s:315:\"[MM_Member_Data name=\'firstName\'],\n	\nYour recent payment was declined.\n	\nPlease update your billing information to reactivate your account.\nTo update your credit card details, please click the link below:\n			\n[MM_CorePage_Link type=\'myaccount\' autoLogin=\'true\']\n	\nThank you for your prompt attention to this matter.\";}', 'a:1:{s:9:\"status_id\";i:5;}', 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_affiliate_partner_payouts`
--

CREATE TABLE `mm_affiliate_partner_payouts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `affiliate_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `product_id` int(11) NOT NULL,
  `commission_profile_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_affiliate_providers`
--

CREATE TABLE `mm_affiliate_providers` (
  `id` int(11) UNSIGNED NOT NULL,
  `provider_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `provider_token` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `additional_data` text COLLATE utf8_unicode_ci,
  `active` smallint(5) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_affiliate_providers`
--

INSERT INTO `mm_affiliate_providers` (`id`, `provider_name`, `provider_token`, `additional_data`, `active`) VALUES
(1, 'None', 'default', NULL, 1),
(2, 'iDevAffiliate', 'idevaffiliate', NULL, 0);

-- --------------------------------------------------------

--
-- Table structure for table `mm_affiliate_provider_mappings`
--

CREATE TABLE `mm_affiliate_provider_mappings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `affiliate_provider_id` int(11) UNSIGNED NOT NULL,
  `membership_level_id` int(11) UNSIGNED NOT NULL,
  `payout_profile_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `additional_data` text COLLATE utf8_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_affiliate_rebill_commissions`
--

CREATE TABLE `mm_affiliate_rebill_commissions` (
  `affiliate_provider_id` int(11) UNSIGNED NOT NULL,
  `affiliate_id` varchar(150) COLLATE utf8_unicode_ci NOT NULL,
  `order_number` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `transaction_id` bigint(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_api_keys`
--

CREATE TABLE `mm_api_keys` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `api_key` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `api_secret` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` tinyint(4) NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_api_keys`
--

INSERT INTO `mm_api_keys` (`id`, `name`, `api_key`, `api_secret`, `status`, `date_added`) VALUES
(1, 'Default Access', 'kqfkqzkdtg', '0ns52dqinz', 1, '2018-11-20 23:34:41');

-- --------------------------------------------------------

--
-- Table structure for table `mm_applied_bundles`
--

CREATE TABLE `mm_applied_bundles` (
  `access_type` enum('user','membership') COLLATE utf8_unicode_ci NOT NULL DEFAULT 'membership',
  `access_type_id` int(11) UNSIGNED DEFAULT NULL,
  `bundle_id` int(11) UNSIGNED NOT NULL,
  `days_calc_method` enum('join_date','custom_date','fixed') COLLATE utf8_unicode_ci DEFAULT 'join_date',
  `days_calc_value` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  `pending_status` tinyint(4) NOT NULL DEFAULT '0',
  `imported` tinyint(4) NOT NULL DEFAULT '0',
  `status_updated` datetime DEFAULT NULL,
  `subscribed_provider_id` int(11) UNSIGNED DEFAULT NULL,
  `subscribed_list_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cancellation_date` timestamp NULL DEFAULT NULL,
  `expiration_date` timestamp NULL DEFAULT NULL,
  `apply_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_bundles`
--

CREATE TABLE `mm_bundles` (
  `id` int(11) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `is_free` int(11) NOT NULL,
  `status` tinyint(4) NOT NULL,
  `dflt_membership_id` int(11) UNSIGNED NOT NULL DEFAULT '0',
  `expire_amount` int(10) DEFAULT NULL,
  `expire_period` enum('days','weeks','months') COLLATE utf8_unicode_ci DEFAULT 'months',
  `expires` tinyint(4) NOT NULL DEFAULT '0',
  `short_name` varchar(10) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_bundle_categories`
--

CREATE TABLE `mm_bundle_categories` (
  `category_id` bigint(20) UNSIGNED NOT NULL,
  `bundle_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_bundle_products`
--

CREATE TABLE `mm_bundle_products` (
  `bundle_id` int(11) UNSIGNED NOT NULL,
  `product_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_card_on_file`
--

CREATE TABLE `mm_card_on_file` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `payment_service_id` int(11) NOT NULL,
  `payment_service_identifier` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `original_order_id` bigint(20) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_commission_profiles`
--

CREATE TABLE `mm_commission_profiles` (
  `id` int(11) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `is_default` tinyint(4) NOT NULL DEFAULT '0',
  `description` text COLLATE utf8_unicode_ci,
  `initial_commission_enabled` tinyint(4) NOT NULL DEFAULT '1',
  `rebill_commissions_enabled` tinyint(4) NOT NULL DEFAULT '0',
  `rebill_commission_type` enum('default','percent','flatrate') COLLATE utf8_unicode_ci DEFAULT 'default',
  `rebill_commission_value` decimal(20,2) NOT NULL,
  `do_limit_rebill_commissions` tinyint(4) NOT NULL DEFAULT '0',
  `rebill_commission_limit` int(11) UNSIGNED NOT NULL,
  `do_reverse_commissions` tinyint(4) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_commission_profiles`
--

INSERT INTO `mm_commission_profiles` (`id`, `name`, `is_default`, `description`, `initial_commission_enabled`, `rebill_commissions_enabled`, `rebill_commission_type`, `rebill_commission_value`, `do_limit_rebill_commissions`, `rebill_commission_limit`, `do_reverse_commissions`) VALUES
(1, 'Standard Commission Profile', 1, 'This is the default commission profile', 1, 0, 'default', '0.00', 0, 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_container`
--

CREATE TABLE `mm_container` (
  `id` int(11) NOT NULL,
  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `obj` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `is_system` tinyint(4) NOT NULL DEFAULT '0',
  `date_added` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_container`
--

INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(1, 'membermouseservice', '', 1, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(2, 'managetransactionsview', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(3, 'paypalservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(4, 'limelightproductsview', '', 0, '2018-11-21 06:38:53'),
(5, 'smarttagutil', '', 0, '2018-11-21 06:38:53'),
(6, 'smarttaggroup', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fU21hcnRUYWdHcm91cCBleHRlbmRzIE1NX0VudGl0eQp7CQoJcHJpdmF0ZSAkbmFtZSA9ICIiOwoJcHJpdmF0ZSAkcGFyZW50SWQgPSAwOwoJcHJpdmF0ZSAkY2hpbGRyZW4gPSBhcnJheSgpOwoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gZ2V0RGF0YSgpIHsKCQkvLyBkbyBub3RoaW5nCgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBjb21taXREYXRhKCkgewoJCS8vIGRvIG5vdGhpbmcKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCXRyeSAKCQl7CgkJCSR0aGlzLT5pZCA9ICRkYXRhLT5pZDsKCQkJJHRoaXMtPm5hbWUgPSAkZGF0YS0+bmFtZTsKCQkJJHRoaXMtPnBhcmVudElkID0gJGRhdGEtPnBhcmVudF9pZDsKCQkJCgkJCS8vIGdldCBjaGlsZCBncm91cHMKCQkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfU01BUlRUQUdfR1JPVVBTLiIgV0hFUkUgcGFyZW50X2lkPSd7JHRoaXMtPmlkfScgQU5EIHZpc2libGU9JzEnIE9SREVSIEJZIG5hbWUgYXNjIjsKCQkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCQoJCQlpZigkcm93cykgCgkJCXsKCQkJCWZvcmVhY2goJHJvd3MgYXMgJHJvdykKCQkJCXsKCQkJCQkkZ3JvdXAgPSBuZXcgTU1fU21hcnRUYWdHcm91cCgpOwoJCQkJCSRncm91cC0+c2V0RGF0YSgkcm93KTsKCQkJCQkKCQkJCQlpZigkZ3JvdXAtPmlzVmFsaWQoKSkgewoJCQkJCQlhcnJheV9wdXNoKCR0aGlzLT5jaGlsZHJlbiwgJGdyb3VwKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJCgkJCS8vIGdldCBjaGlsZCBTbWFydFRhZ3MKCQkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfU01BUlRUQUdTLiIgV0hFUkUgZ3JvdXBfaWQ9J3skdGhpcy0+aWR9JyBBTkQgdmlzaWJsZT0nMScgT1JERVIgQlkgbmFtZSBhc2MiOwoJCQkkcm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkJCgkJCWlmKCRyb3dzKSAKCQkJewoJCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KQoJCQkJewoJCQkJCSRzbWFydFRhZyA9IG5ldyBNTV9TbWFydFRhZygpOwoJCQkJCSRzbWFydFRhZy0+c2V0RGF0YSgkcm93KTsKCQkJCQkKCQkJCQlpZigkc21hcnRUYWctPmlzVmFsaWQoKSkgewoJCQkJCQlhcnJheV9wdXNoKCR0aGlzLT5jaGlsZHJlbiwgJHNtYXJ0VGFnKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJCgkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpIHsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2VuZXJhdGVIdG1sKCkgCgl7CgkJJGh0bWwgPSAiPGRpdiBpZD1cIm1tLXNtYXJ0dGFnLWdyb3VwIi4kdGhpcy0+aWQuIlwiIHN0eWxlPVwibWFyZ2luLWJvdHRvbTo2cHg7IGZvbnQtc2l6ZTogMTJweDsgY3Vyc29yOnBvaW50ZXI7XCIgb25jbGljaz1cInN0bF9qcy50b2dnbGVTbWFydFRhZ0dyb3VwKCciLiR0aGlzLT5pZC4iJyk7XCI+IjsKCQkkaHRtbCAuPSAiPHNwYW4gaWQ9XCJtbS1zbWFydHRhZy1ncm91cCIuJHRoaXMtPmlkLiItY2xvc2VkLWltZ1wiPiIuTU1fVXRpbHM6OmdldEljb24oJ3BsdXMtc3F1YXJlJywgJ2JsdWUnLCAnMS4yZW0nLCAnMXB4JykuIjwvc3Bhbj4gIjsKCQkkaHRtbCAuPSAiPHNwYW4gaWQ9XCJtbS1zbWFydHRhZy1ncm91cCIuJHRoaXMtPmlkLiItb3Blbi1pbWdcIiBzdHlsZT1cImRpc3BsYXk6bm9uZVwiPiIuTU1fVXRpbHM6OmdldEljb24oJ21pbnVzLXNxdWFyZScsICdibHVlJywgJzEuMmVtJywgJzFweCcpLiI8L3NwYW4+ICI7CgkJJGh0bWwgLj0gJHRoaXMtPm5hbWU7CgkJJGh0bWwgLj0gIjwvZGl2PiI7CgkJCgkJaWYoY291bnQoJHRoaXMtPmNoaWxkcmVuKSA+IDApIAoJCXsKCQkJJGh0bWwgLj0gIjxkaXYgaWQ9XCJtbS1zbWFydHRhZy1ncm91cCIuJHRoaXMtPmlkLiItY2hpbGRyZW5cIiBzdHlsZT1cImRpc3BsYXk6bm9uZTsgbWFyZ2luLWxlZnQ6MTBweDsgbWFyZ2luLWJvdHRvbTo2cHg7XCI+IjsKCQkJCQkKCQkJZm9yZWFjaCgkdGhpcy0+Y2hpbGRyZW4gYXMgJGNoaWxkKQoJCQl7CgkJCQlpZigkY2hpbGQgaW5zdGFuY2VvZiBNTV9TbWFydFRhZ0dyb3VwKSB7CgkJCQkJJGh0bWwgLj0gJGNoaWxkLT5nZW5lcmF0ZUh0bWwoKTsKCQkJCX0KCQkJCWVsc2UgewoJCQkJCSRodG1sIC49ICRjaGlsZC0+Z2VuZXJhdGVIdG1sKCk7CgkJCQl9CgkJCX0JCgkJCQkKCQkJJGh0bWwgLj0gIjwvZGl2PiI7CgkJfQoJCQoJCXJldHVybiAkaHRtbDsKCX0KIAkKCXB1YmxpYyBmdW5jdGlvbiBnZXROYW1lKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm5hbWU7Cgl9CiAJCglwdWJsaWMgZnVuY3Rpb24gZ2V0UGFyZW50SWQoKQoJewoJCXJldHVybiAkdGhpcy0+cGFyZW50SWQ7Cgl9CiAJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q2hpbGRyZW4oKQoJewoJCXJldHVybiAkdGhpcy0+Y2hpbGRyZW47Cgl9CgkKfQo=', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(7, 'myaccountform', '', 0, '2018-11-21 06:38:53'),
(8, 'customfieldtagprocessor', 'Y2xhc3MgTU1fQ3VzdG9tRmllbGRUYWdQcm9jZXNzb3IKewkKCXB1YmxpYyBzdGF0aWMgJFRBR19DVVNUT01fRklFTERfREFUQSA9ICJtbV9jdXN0b21maWVsZF9kYXRhIjsKCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIFNtYXJ0VGFnIGlzIHJlbGF0ZWQgdG8gY3VzdG9tIGZpZWxkcy4KCSAqIAoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcmV0dXJuIEJvb2xlYW4gcmV0dXJucyB0cnVlIGlmIHRoZSBTbWFydFRhZyBwYXNzZWQgaXMgcmVsYXRlZCB0byBjdXN0b20gZmllbGRzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzQ3VzdG9tRmllbGRTbWFydFRhZygkc21hcnRUYWcpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfQ1VTVE9NX0ZJRUxEX0RBVEE6CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgbmFtZSBhbmQgYSBudW1iZXIgb2YgcHJvcGVydGllcyByZWxhdGVkIHRvIHRoZSBTbWFydFRhZyBhbmQgbWFrZXMgYSBjYWxsIHRvIAoJICogdGhlIGFwcHJvcHJpYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBTbWFydFRhZyBuYW1lLgoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IHRvIHByb2Nlc3MKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcHJvY2Vzc1NtYXJ0VGFnKCRzbWFydFRhZywgJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQlzd2l0Y2goJHNtYXJ0VGFnKSAKCQl7CgkJCWNhc2Ugc2VsZjo6JFRBR19DVVNUT01fRklFTERfREFUQToKCQkJCXJldHVybiBzZWxmOjptbV9jdXN0b21maWVsZF9kYXRhKCRjb250ZW50LCAkYXR0cywgJGNvZGUpOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gIkludmFsaWQgQ3VzdG9tIEZpZWxkIFNtYXJ0VGFnIHskc21hcnRUYWd9IGZvdW5kIjsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fQ3VzdG9tRmllbGRfRGF0YSB0YWcuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciAKCSAqIHJldHVybmluZyBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VzdG9tIGZpZWxkIElEIHBhc3NlZC4KCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgU21hcnRUYWcgKGlmIGFueSkKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbW1fY3VzdG9tZmllbGRfZGF0YSgkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCWlmKCFlbXB0eSgkYXR0cykpIAoJCXsKCQkJZm9yZWFjaCgkYXR0cyBhcyAkaz0+JHYpIAoJCQl7CgkJCQkkJGsgPSAkdjsKCQkJfQoJCX0KCQkKCQlpZihpc3NldCgkaWQpICYmIGlzc2V0KCRuYW1lKSkKCQl7CgkJCSRjdXN0b21GaWVsZCA9IG5ldyBNTV9DdXN0b21GaWVsZCgkaWQpOwoJCQkKCQkJaWYoJGN1c3RvbUZpZWxkLT5pc1ZhbGlkKCkpCgkJCXsKCQkJCXN3aXRjaChzdHJ0b2xvd2VyKCRuYW1lKSkKCQkJCXsKCQkJCQljYXNlICJkaXNwbGF5bmFtZSI6CgkJCQkJCXJldHVybiAkY3VzdG9tRmllbGQtPmdldERpc3BsYXlOYW1lKCk7CgkJCQkJCgkJCQkJZGVmYXVsdDoKCQkJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgbmFtZSAneyRuYW1lfScgcGFzc2VkIHRvIFNtYXJ0VGFnIHskY29kZX0iOwoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgY3VzdG9tIGZpZWxkIElEIG9mICd7JGlkfScgcGFzc2VkIHRvIFNtYXJ0VGFnIHskY29kZX0iOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiAnaWQnIGFuZCAnbmFtZScgYXR0cmlidXRlcyBhcmUgcmVxdWlyZWQgZm9yIFNtYXJ0VGFnIHskY29kZX0iOwoJCX0KCX0KfQo=', 0, '2018-11-21 06:38:53'),
(9, 'abstractemailserviceprovider', '', 0, '2018-11-21 06:38:53'),
(10, 'membercontroller', '', 0, '2018-11-21 06:38:53'),
(11, 'curlresponse', 'IyBDdXJsUmVzcG9uc2UKIwojIEF1dGhvciAgU2VhbiBIdWJlciAtIHNodWJlckBodWJlcnJ5LmNvbQojIERhdGUgICAgTWF5IDIwMDgKIwojIEEgYmFzaWMgQ1VSTCB3cmFwcGVyIGZvciBQSFAKIwojIFNlZSB0aGUgUkVBRE1FIGZvciBkb2N1bWVudGF0aW9uL2V4YW1wbGVzIG9yIGh0dHA6Ly9waHAubmV0L2N1cmwgZm9yIG1vcmUgaW5mb3JtYXRpb24KIyBhYm91dCB0aGUgbGliY3VybCBleHRlbnNpb24gZm9yIFBIUCAtLSBodHRwOi8vZ2l0aHViLmNvbS9zaHViZXIvY3VybC90cmVlL21hc3RlcgojCgpjbGFzcyBNTV9DdXJsUmVzcG9uc2UKewogICAgcHVibGljICRib2R5ID0gJyc7CiAgICBwdWJsaWMgJGhlYWRlcnMgPSBhcnJheSgpOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcmVzcG9uc2UpCiAgICB7CiAgICAgICAgIyBFeHRyYWN0IGhlYWRlcnMgZnJvbSByZXNwb25zZQogICAgICAgICRwYXR0ZXJuID0gJyNIVFRQL1xkXC5cZC4qPyQuKj9cclxuXHJcbiNpbXMnOwogICAgICAgIHByZWdfbWF0Y2hfYWxsKCRwYXR0ZXJuLCAkcmVzcG9uc2UsICRtYXRjaGVzKTsKICAgICAgICAkaGVhZGVycyA9IGV4cGxvZGUoIlxyXG4iLCBzdHJfcmVwbGFjZSgiXHJcblxyXG4iLCAnJywgYXJyYXlfcG9wKCRtYXRjaGVzWzBdKSkpOwoKICAgICAgICAjIEV4dHJhY3QgdGhlIHZlcnNpb24gYW5kIHN0YXR1cyBmcm9tIHRoZSBmaXJzdCBoZWFkZXIKICAgICAgICAkdmVyc2lvbl9hbmRfc3RhdHVzID0gYXJyYXlfc2hpZnQoJGhlYWRlcnMpOwogICAgICAgIHByZWdfbWF0Y2goJyNIVFRQLyhcZFwuXGQpXHMoXGRcZFxkKVxzKC4qKSMnLCAkdmVyc2lvbl9hbmRfc3RhdHVzLCAkbWF0Y2hlcyk7CiAgICAgICAgJHRoaXMtPmhlYWRlcnNbJ0h0dHAtVmVyc2lvbiddID0gJG1hdGNoZXNbMV07CiAgICAgICAgJHRoaXMtPmhlYWRlcnNbJ1N0YXR1cy1Db2RlJ10gPSAkbWF0Y2hlc1syXTsKICAgICAgICAkdGhpcy0+aGVhZGVyc1snU3RhdHVzJ10gPSAkbWF0Y2hlc1syXS4nICcuJG1hdGNoZXNbM107CgogICAgICAgICMgQ29udmVydCBoZWFkZXJzIGludG8gYW4gYXNzb2NpYXRpdmUgYXJyYXkKICAgICAgICBmb3JlYWNoICgkaGVhZGVycyBhcyAkaGVhZGVyKSB7CiAgICAgICAgICAgIHByZWdfbWF0Y2goJyMoLio/KVw6XHMoLiopIycsICRoZWFkZXIsICRtYXRjaGVzKTsKICAgICAgICAgICAgJHRoaXMtPmhlYWRlcnNbJG1hdGNoZXNbMV1dID0gJG1hdGNoZXNbMl07CiAgICAgICAgfQoKICAgICAgICAjIFJlbW92ZSB0aGUgaGVhZGVycyBmcm9tIHRoZSByZXNwb25zZSBib2R5CiAgICAgICAgJHRoaXMtPmJvZHkgPSBwcmVnX3JlcGxhY2UoJHBhdHRlcm4sICcnLCAkcmVzcG9uc2UpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX3RvU3RyaW5nKCkKICAgIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmJvZHk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGhlYWRlcnMoKXsKICAgICAgICByZXR1cm4gJHRoaXMtPmhlYWRlcnM7CiAgICB9Cn0K', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(12, 'event', '', 0, '2018-11-21 06:38:53'),
(13, 'aweberoauthadapter', 'aW50ZXJmYWNlIE1NX0FXZWJlck9BdXRoQWRhcHRlciB7CgogICAgcHVibGljIGZ1bmN0aW9uIHJlcXVlc3QoJG1ldGhvZCwgJHVyaSwgJGRhdGEgPSBhcnJheSgpKTsKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRSZXF1ZXN0VG9rZW4oJGNhbGxiYWNrVXJsPWZhbHNlKTsKCn0KCgo=', 0, '2018-11-21 06:38:53'),
(14, 'checkoutview', '', 0, '2018-11-21 06:38:53'),
(15, 'testdatautils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1Rlc3REYXRhVXRpbHMKewoJcHVibGljIHN0YXRpYyAkVU5JUVVFX1RFU1RfRU1BSUxfREVMSU1JVEVSID0gIl9fIjsKCQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gcmV0cmlldmVzIGNoZWNrb3V0IGZvcm0gdGVzdCBkYXRhIGZyb20gdGhlIGRhdGFiYXNlCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGNoZWNrb3V0IGZvcm0gdGVzdCBkYXRhCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0Q2hlY2tvdXRGb3JtVGVzdERhdGEoKQoJewoJCSRkYXRhID0gYXJyYXkoKTsKCQoJCSRyYXdEYXRhID0gTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfQ0hFQ0tPVVRfRk9STV9URVNUX0RBVEEpOwoJCgkJaWYoIWVtcHR5KCRyYXdEYXRhKSkKCQl7CgkJCSRkYXRhID0gJHJhd0RhdGE7CgkJfQoJCgkJcmV0dXJuICRkYXRhOwoJfQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gc2F2ZXMgY2hlY2tvdXQgZm9ybSB0ZXN0IGRhdGEgaW4gdGhlIGRhdGFiYXNlCgkgKiBAcGFyYW0gYXJyYXkgJGRhdGEgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgY2hlY2tvdXQgZm9ybSB0ZXN0IGRhdGEKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzYXZlQ2hlY2tvdXRGb3JtVGVzdERhdGEoJGRhdGEpCgl7CgkJaWYoIWlzX251bGwoJGRhdGEpICYmIGlzX2FycmF5KCRkYXRhKSkKCQl7CgkJCU1NX09wdGlvblV0aWxzOjpzZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0NIRUNLT1VUX0ZPUk1fVEVTVF9EQVRBLCAkZGF0YSk7CgkJfQoJfQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gcmV0cmlldmVzIGEgc2luZ2xlIGNoZWNrb3V0IGZvcm0gdGVzdCBkYXRhIHZhbHVlIGZyb20gdGhlIGRhdGEgcGFzc2VkCgkgKiBAcGFyYW0gYXJyYXkgJGRhdGEgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgY2hlY2tvdXQgZm9ybSB0ZXN0IGRhdGEKCSAqIEBwYXJhbSBhcnJheSAka2V5IHRoZSBrZXkgb2YgdGhlIHRlc3QgZGF0YSB0byBsb29rdXAKCSAqIEByZXR1cm4gYXJyYXkgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgY2hlY2tvdXQgZm9ybSB0ZXN0IGRhdGEKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRUZXN0VmFsdWUoJGRhdGEsICRrZXksICRkb0Zvcm1hdD1mYWxzZSkKCXsKCQlpZighaXNfbnVsbCgkZGF0YSkgJiYgIWVtcHR5KCRrZXkpICYmIGlzc2V0KCRkYXRhWyRrZXldKSAmJiAhZW1wdHkoJGRhdGFbJGtleV0pKQoJCXsKCQkJLy8gbWFrZSBlbWFpbCBhZGRyZXNzIHVuaXF1ZQoJCQlpZigkZG9Gb3JtYXQpCgkJCXsKCQkJCWdsb2JhbCAkd3BkYjsKCQkJCSRzcWwgPSAiU0VMRUNUIE1BWChJRCkgYXMgbWF4aWQgRlJPTSB7JHdwZGItPnVzZXJzfSI7CgkJCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkKCQkJCWlmKCRyZXN1bHQpCgkJCQl7CgkJCQkJJHVuaXF1ZUlkID0gKGludHZhbCgkcmVzdWx0LT5tYXhpZCkgKyAxKTsKCQkJCX0KCQoJCQkJaWYoc3RycG9zKCRrZXksICJlbWFpbCIpICE9PSBmYWxzZSkKCQkJCXsKCQkJCQkkdW5pcXVlRW1haWwgPSBzdWJzdHJfcmVwbGFjZSgkZGF0YVska2V5XSwgc2VsZjo6JFVOSVFVRV9URVNUX0VNQUlMX0RFTElNSVRFUi4kdW5pcXVlSWQsIHN0cnBvcygkZGF0YVska2V5XSwgIkAiKSwgMCk7CgkJCQkJcmV0dXJuICR1bmlxdWVFbWFpbDsKCQkJCX0KCQkJCWVsc2UgaWYoc3RycG9zKCRrZXksICJ1c2VybmFtZSIpICE9PSBmYWxzZSkKCQkJCXsKCQkJCQkkdW5pcXVlVXNlcm5hbWUgPSAkZGF0YVska2V5XS4kdW5pcXVlSWQ7CgkJCQkJcmV0dXJuICR1bmlxdWVVc2VybmFtZTsKCQkJCX0KCQkJCWVsc2UgCgkJCQl7CgkJCQkJcmV0dXJuICRkYXRhWyRrZXldOwoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJcmV0dXJuICRkYXRhWyRrZXldOwoJCQl9CgkJfQoJCXJldHVybiAiIjsKCX0KCQoJLyoqCgkgKiBUaGlzIG1ldGhvZCB0YWtlcyBhbiBlbWFpbCBhZGRyZXNzIGFuZCBpZiB0aGUgc3lzdGVtIGlzIGN1cnJlbnRseSBjb25maWd1cmVkIHRvIHVzZSB0ZXN0IG1vZGUsCgkgKiB3aWxsIHJlcGxhY2UgdGhlIGRlbGltaXRlciAoZGVmaW5lZCBpbiAkVU5JUVVFX1RFU1RfRU1BSUxfREVMSU1JVEVSKSBpbiB0aGUgZW1haWwgYWRkcmVzcyB3aXRoCgkgKiBhICcrJyBzbyB0aGF0IHRoZSBlbWFpbCBhZGRyZXNzIGlzIHZhbGlkIGJ1dCB1bmlxdWUgYW5kIGNhbiByZWNlaXZlIGVtYWlscy4gV2UgY2FuJ3QganVzdCBtYWtlIHRoZQoJICogZGVsaW1pdGVyICcrJyBiZWNhdXNlIFdvcmRQcmVzcyBjb25zaWRlcnMgdGhpcyBhbiBpbGxlZ2FsIGNoYXJhY3RlciB3aGVuIGNyZWF0aW5nIHVzZXJuYW1lcy4KCSAqCgkgKiBAcGFyYW0gU3RyaW5nICRzdWJqZWN0RW1haWwgdGhlIGVtYWlsIHRvIGNvbnZlcnQKCSAqIEByZXR1cm4gU3RyaW5nIHRoZSBvcmlnaW5hbCBlbWFpbCBpZiBub3QgaW4gdGVzdCBtb2RlIG9yIGlmIHRoZSBlbWFpbCBpcyBub3QgYSB2YXJpYW50IG9mIHRoZSB0ZXN0IGVtYWlsIG9yIGEgY29udmVydGVkIGVtYWlsIHRoYXQgcmVwbGFjZWQgdGhlIGRlbGltaXRlciB3aXRoIGEgJysnCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY29udmVydFRlc3RFbWFpbCgkc3ViamVjdEVtYWlsKQoJewoJCSR0ZXN0RGF0YSA9IHNlbGY6OmdldENoZWNrb3V0Rm9ybVRlc3REYXRhKCk7CgkJJHRlc3RFbWFpbCA9IHNlbGY6OmdldFRlc3RWYWx1ZSgkdGVzdERhdGEsICJtbV9maWVsZF9lbWFpbCIpOwoJCgkJaWYoIWVtcHR5KCR0ZXN0RW1haWwpKQoJCXsKCQkJJGRlbGltSW5kZXggPSBzdHJwb3MoJHN1YmplY3RFbWFpbCwgc2VsZjo6JFVOSVFVRV9URVNUX0VNQUlMX0RFTElNSVRFUik7CgkJCSRhdEluZGV4ID0gc3RycG9zKCRzdWJqZWN0RW1haWwsICJAIik7CgkJCQkKCQkJaWYoJGRlbGltSW5kZXggIT09IGZhbHNlICYmICRhdEluZGV4ICE9PSBmYWxzZSkKCQkJewoJCQkJJHBpZWNlcyA9IGV4cGxvZGUoc2VsZjo6JFVOSVFVRV9URVNUX0VNQUlMX0RFTElNSVRFUiwgJHN1YmplY3RFbWFpbCk7CgkKCQkJCWlmKGNvdW50KCRwaWVjZXMpID09IDIpCgkJCQl7CgkJCQkJJGF0SW5kZXggPSBzdHJwb3MoJHBpZWNlc1sxXSwgIkAiKTsKCQkJCQkJCgkJCQkJaWYoJGF0SW5kZXggIT09IGZhbHNlKQoJCQkJCXsKCQkJCQkJJG1vZGlmaWVkRW1haWwgPSAkcGllY2VzWzBdLnN1YnN0cigkcGllY2VzWzFdLCAkYXRJbmRleCk7CgkKCQkJCQkJaWYoJG1vZGlmaWVkRW1haWwgPT0gJHRlc3RFbWFpbCkKCQkJCQkJewoJCQkJCQkJcmV0dXJuIHN0cl9yZXBsYWNlKHNlbGY6OiRVTklRVUVfVEVTVF9FTUFJTF9ERUxJTUlURVIsICIrIiwgJHN1YmplY3RFbWFpbCk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkKCQlyZXR1cm4gJHN1YmplY3RFbWFpbDsKCX0KfQo=', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(16, 'importwizardview', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(17, '1clickpurchaseform', '', 0, '2018-11-21 06:38:53'),
(18, 'view', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmFic3RyYWN0IGNsYXNzIE1NX1ZpZXcKeyAKICAgIHB1YmxpYyBzdGF0aWMgJE1NX05PTkNFX0FDVElPTl9DSEVDS09VVF9GT1JNID0gIm1tLWNoZWNrb3V0IjsKICAgIHB1YmxpYyBzdGF0aWMgJE1NX05PTkNFX05BTUVfQ0hFQ0tPVVRfRk9STSAgID0gIm1tLXNlY3VyaXR5IjsKCQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT04gPSAibW1fYWN0aW9uIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTTU9EVUxFID0gIm1tX21vZHVsZSI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TQVZFID0gInNhdmUiOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fUkVNT1ZFID0gInJlbW92ZSI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TSE9XX0RJQUxPRyA9ICJzaG93RGlhbG9nIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1JFRlJFU0hfVklFVyA9ICJyZWZyZXNoVmlldyI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TSE9XX0JVWV9OT1dfTElOS1MgPSAic2hvd1B1cmNoYXNlTGlua3MiOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fVkFMSURBVEVfSU5QVVQgPSAidmFsaWRhdGVJbnB1dCI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9MT0dJTiA9ICJsb2dpbiI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9SRVNFVF9QQVNTV09SRCA9ICJyZXNldFBhc3N3b3JkIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0xPQURfU1RBVEVTID0gImxvYWRTdGF0ZXMiOwoJCgkvL2ZvciB1c2UgaW4gc3ViY2xhc3NlcyBpbXBsZW1lbnRpbmcgcmJhYy4gYXJyYXkgc3RydWN0dXJlIGhhcyBtZXRob2QgbmFtZXMgYXMga2V5cywgCgkvL2FuZCBhcnJheXMgY29udGFpbmluZyB2YWxpZCByb2xlcyAoZnJvbSBNTV9Sb2xlKSBhcyB0aGUgdmFsdWVzCglwcm90ZWN0ZWQgJHBlcm1pc3Npb25zID0gYXJyYXkoKTsKCQoJZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogCXsKIAkJLy8gZG8gbm90aGluZwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gY2FsbE1ldGhvZCgkcG9zdCkgCiAJewogCQlpZiAoaXNzZXQoJHBvc3RbIm1ldGhvZCJdKSAmJiBtZXRob2RfZXhpc3RzKCR0aGlzLCAkcG9zdFsibWV0aG9kIl0pICYmICR0aGlzLT5jYW5DYWxsTWV0aG9kKCRwb3N0KSkgCgkJewoJCQkkbWV0aG9kID0gJHBvc3RbJ21ldGhvZCddOwoJCQlyZXR1cm4gJHRoaXMtPiRtZXRob2QoJHBvc3QpOwoJCX0JCQoJCXJldHVybiAwOwogCX0KIAkKIAkKIAkvKioKIAkgKiBEZXRlcm1pbmVzIGlmIHRoZSBjYWxsZXIgaGFzIHBlcm1pc3Npb24gdG8gcGVyZm9ybSB0aGUgcmVxdWVzdGVkIGFjdGlvbi4gVGhlIG1ldGhvZCByZXF1ZXN0ZWQgc2hvdWxkIGJlIHN0b3JlZCBpbiAKIAkgKiAkcmVxdWVzdFsnbWV0aG9kJ10sIGFuZCB3aWxsIHVzdWFsbHkgYmUgdGhlIHBlcmZvcm1BY3Rpb24gcm91dGluZyBtZXRob2Qgb2YgdGhlIHZpZXcuIFRoZSBhY3Rpb24gcmVxdWVzdGVkIHNob3VsZCBiZQogCSAqIHN0b3JlZCBpbiAkcmVxdWVzdFsnbW1fYWN0aW9uJ10uIAogCSAqIAogCSAqIEBwYXJhbSBzdHJpbmcgJHJlcXVlc3QKIAkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBhY2Nlc3MgaXMgYWxsb3dlZCwgZmFsc2Ugb3RoZXJ3aXNlCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGNhbkNhbGxNZXRob2QoJHJlcXVlc3QpCiAJewogCQlyZXR1cm4gZmFsc2U7CQogCX0KIAkKCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQlpZihpc3NldCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSkgCgkJewoJCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkgCgkJCXsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFRlJFU0hfVklFVzoKCQkJCQlyZXR1cm4gJHRoaXMtPnJlZnJlc2hWaWV3KCRwb3N0KTsKCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0hPV19ESUFMT0c6CgkJCQkJcmV0dXJuICR0aGlzLT5zaG93RGlhbG9nKCRwb3N0KTsKCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fVkFMSURBVEVfSU5QVVQ6CgkJCQkJcmV0dXJuICR0aGlzLT52YWxpZGF0ZUlucHV0KCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuICIiOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJNTV9WaWV3LnBlcmZvcm1BY3Rpb24oKTogJyIuc2VsZjo6JE1NX0pTQUNUSU9OLiInIGlzIHJlcXVpcmVkIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoKCXByb3RlY3RlZCBmdW5jdGlvbiB2YWxpZGF0ZUlucHV0KCRwb3N0KQogIAl7CgkJZ2xvYmFsICR3cGRiOwoJICAKCQl0cnkKCQl7CSAKCQkJLyoKCQkJICogVE9ETzogVmVyaWZ5IGl0cyBub3QgdXNlZCBhbnl3aGVyZSBlbHNlIGFuZCByZW1vdmUKCQkJICovCgkJCXN3aXRjaCgkcG9zdFsnaW5wdXRfdHlwZSddKQoJCQl7CgkJCQljYXNlICdFTUFJTCc6CgkJCQkJaWYoIU1NX1V0aWxzOjpoYXNWYWxpZEVtYWlsKCRwb3N0WyJpbnB1dF92YWx1ZSJdKSkKCQkJCQl7CgkJCQkJCXRocm93IG5ldyBFeGNlcHRpb24oIlByb3ZpZGVkIGVtYWlsIGFkZHJlc3Mgd2FzIGVtcHR5IG9yIGludmFsaWQuIik7CgkJCQkJfQoJCQkJCWJyZWFrOwoKCQkJCWNhc2UgJ1VSTCc6CgkJCQkJaWYoIWZpbHRlcl92YXIoJHBvc3RbJ2lucHV0X3ZhbHVlJ10sIEZJTFRFUl9WQUxJREFURV9VUkwpIHx8ICFwcmVnX21hdGNoKCIvXmh0dHBzPzpcL1wvLyIsICRwb3N0WydpbnB1dF92YWx1ZSddKSkKCQkJCQl7CgkJCQkJCXRocm93IG5ldyBFeGNlcHRpb24oIkludmFsaWQgVVJMICh7JHBvc3RbJ2lucHV0X3ZhbHVlJ119KSBlbnRlcmVkIGZvciB7JHBvc3RbJ2lucHV0X2xhYmVsJ119Iik7CgkJCQkJfQoJCQkJCWJyZWFrOwoKCQkJCWRlZmF1bHQ6CgkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigiSW52YWxpZCBJbnB1dCBUeXBlIHJlcXVlc3RpbmcgdmFsaWRhdGlvbi4uLiIpOwoJCQkJCWJyZWFrOwoJCQl9CiAgICAJfSAKICAgIAljYXRjaChFeGNlcHRpb24gJGUpCiAgICAJewogICAgICAJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkZS0+Z2V0TWVzc2FnZSgpLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKICAgIAl9CiAgICAKICAgIAlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7Cgl9CiAJCglwcml2YXRlIGZ1bmN0aW9uIHNob3dSZXNwb25zZURpYWxvZygkcG9zdCkKCXsKCQkkaW5mby0+bWVzc2FnZSA9ICghaXNzZXQoJHBvc3RbIm1lc3NhZ2UiXSkpPyJPaCwgc29tZXRoaW5nIGJhZCBoYXBwZW5lZCI6JHBvc3RbIm1lc3NhZ2UiXTsKIAkJJG1zZyA9IE1NX1RFTVBMQVRFOjpnZW5lcmF0ZShNTV9NT0RVTEVTLiIvcmVzcG9uc2UucGhwIiwgJGluZm8pOwogCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRtc2cpOwoJfQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gcmVmcmVzaFZpZXcoJHBvc3QpCgl7CgkJJGNybnRNb2R1bGUgPSAkdGhpcy0+Z2V0TW9kdWxlKCRwb3N0LCAkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKTsKCQkKCQlpZigkY3JudE1vZHVsZSAhPSAiIiAmJiBzdHJwb3MoJGNybnRNb2R1bGUsIi4uIikgPT09IGZhbHNlKSAKCQl7IAoJCQkkX1JFUVVFU1RbIm1vZHVsZSJdID0gJGNybnRNb2R1bGU7CgkJCQoJCQlvYl9zdGFydCgpOwoJCQlpbmNsdWRlKCRtb2R1bGU9TU1fTU9EVUxFUy4iLyIuJGNybnRNb2R1bGUuIi5waHAiKTsKCQkJJGNvbnRlbnRzID0gb2JfZ2V0X2NvbnRlbnRzKCk7CgkJCW9iX2VuZF9jbGVhbigpOwoJCQlyZXR1cm4gJGNvbnRlbnRzOwoJCX0KCQllbHNlIAoJCXsKCQkJJGVycm9yTXNnID0gIk1NX1ZpZXcucmVmcmVzaFZpZXcoKTogcmVxdWVzdGVkIG1vZHVsZSBkb2VzIG5vdCBleGlzdDoiLihpc3NldCgkcG9zdFtzZWxmOjokTU1fSlNNT0RVTEVdKT8kcG9zdFtzZWxmOjokTU1fSlNNT0RVTEVdOiIiKTsKCQkJTU1fRGlhZ25vc3RpY0xvZzo6bG9nKE1NX0RpYWdub3N0aWNMb2c6OiRNTV9FUlJPUiwgJGVycm9yTXNnKTsKCQkJcmV0dXJuIDA7CgkJfQoJfQoJCgkKCS8qKgoJICogVGFrZXMgJHJlcXVlc3QgYXJyYXkgYW5kIHRyYW5zZm9ybXMgaXQgaW50byBhbiBzdGRDbGFzcyBvYmplY3QuIAoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHJlcXVlc3QKCSAqIEByZXR1cm4gc3RkQ2xhc3MgQSB2YWx1ZSBvYmplY3Qgb2YgdHlwZSBzdGRDbGFzcwoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gY3JlYXRlVmFsdWVPYmplY3RGcm9tUmVxdWVzdCgkcmVxdWVzdCkKCXsKCQkkaW5mbyA9IG5ldyBzdGRDbGFzcygpOwoJCWlmICghaXNfYXJyYXkoJHJlcXVlc3QpKQoJCXsKCQkJcmV0dXJuICRpbmZvOwoJCX0KCQlmb3JlYWNoICgkcmVxdWVzdCBhcyAka2V5PT4kdmFsdWUpCgkJewoJCQkkaW5mby0+JGtleSA9ICR2YWx1ZTsKCQl9CgkJCgkJJGluZm8tPmlkID0gaXNzZXQoJGluZm8tPmlkKT8kaW5mby0+aWQ6IiI7CgkJcmV0dXJuICRpbmZvOwoJfQoJCgkKCXByb3RlY3RlZCBmdW5jdGlvbiBzaG93RGlhbG9nKCRwb3N0KQoJewoJCSRpbmZvID0gJHRoaXMtPmNyZWF0ZVZhbHVlT2JqZWN0RnJvbVJlcXVlc3QoJHBvc3QpOwoKCQkkY3JudE1vZHVsZSA9ICR0aGlzLT5nZXRNb2R1bGUoJHBvc3QpOwoJCQoJCWlmKCRjcm50TW9kdWxlICE9ICIiKSAKCQl7CgkJCXJldHVybiBNTV9URU1QTEFURTo6Z2VuZXJhdGUoTU1fTU9EVUxFUy4iLyIuJGNybnRNb2R1bGUuIi5kaWFsb2cucGhwIiwgJGluZm8pOwoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiTU1fVmlldy5zaG93RGlhbG9nKCk6ICIuc2VsZjo6JE1NX0pTTU9EVUxFLiIgcmVxdWVzdGVkIG1vZHVsZSBkb2VzIG5vdCBleGlzdCIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJCglwcml2YXRlIGZ1bmN0aW9uIGdldE1vZHVsZSgkcG9zdCwgJGFjdGlvbj0iIikKCXsJCgkJaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9NZW1iZXJzaGlwTGV2ZWxzVmlldykgCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX01FTUJFUlNISVBfTEVWRUxTOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fQ29tbWlzc2lvblByb2ZpbGVzVmlldykgCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX0NPTU1JU1NJT05fUFJPRklMRVM7CgkJfQoJCWVsc2UgaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9MaW1lTGlnaHRQcm9kdWN0c1ZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9MSU1FTElHSFRfUFJPRFVDVFM7CgkJfQoJCWVsc2UgaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9MaW1lTGlnaHRTaGlwcGluZ01ldGhvZHNWaWV3KSAKCQl7CgkJCXJldHVybiBNTV9NT0RVTEVfTElNRUxJR0hUX1NISVBQSU5HX01FVEhPRFM7CgkJfQoJCWVsc2UgaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9BcGlWaWV3KSAKCQl7CgkJCXJldHVybiBNTV9NT0RVTEVfQVBJOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fUHJvZHVjdFZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9QUk9EVUNUUzsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX0FjdGl2aXR5TG9nVmlldykgCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX0FDVElWSVRZX0xPRzsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX1BheVBhbElQTkxvZ1ZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9QQVlQQUxfSVBOX0xPRzsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX1RyYW5zYWN0aW9uSGlzdG9yeVZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9NRU1CRVJfREVUQUlMU19UUkFOU0FDVElPTl9ISVNUT1JZOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fU3Vic2NyaXB0aW9uc1ZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9NRU1CRVJfREVUQUlMU19TVUJTQ1JJUFRJT05TOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fR2lmdEhpc3RvcnlWaWV3KSAKCQl7CgkJCXJldHVybiBNTV9NT0RVTEVfTUVNQkVSX0RFVEFJTFNfR0lGVF9ISVNUT1JZOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fRHJpcENvbnRlbnRTY2hlZHVsZVZpZXcpCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX0RSSVBfQ09OVEVOVF9TQ0hFRFVMRTsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX0NvdXBvblZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9DT1VQT05TOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fUHVzaE5vdGlmaWNhdGlvblZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9QVVNIX05PVElGSUNBVElPTlM7CgkJfQoJCWVsc2UgaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9DdXN0b21GaWVsZFZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9DVVNUT01fRklFTERTOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fQnVuZGxlc1ZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9CVU5ETEVTOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fRW1wbG95ZWVzVmlldykgCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX0VNUExPWUVFUzsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX01lbWJlcnNWaWV3KSAKCQl7CQoJCQlyZXR1cm4gTU1fTU9EVUxFX0JST1dTRV9NRU1CRVJTOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fTWVtYmVyRGV0YWlsc1ZpZXcgJiYgaW5fYXJyYXkoJGFjdGlvbixhcnJheShNTV9NZW1iZXJEZXRhaWxzVmlldzo6JE1NX0pTQUNUSU9OX1VQREFURV9NRU1CRVIsc2VsZjo6JE1NX0pTQUNUSU9OX1JFRlJFU0hfVklFVykpKQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9NRU1CRVJfREVUQUlMU19HRU5FUkFMOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fQWNjZXNzUmlnaHRzVmlldyB8fCAkdGhpcyBpbnN0YW5jZW9mIE1NX0NvcmVQYWdlc1ZpZXcpIAoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9NRVRBOwoJCX0KCQllbHNlIGlmKCR0aGlzIGluc3RhbmNlb2YgTU1fRGFzaGJvYXJkVmlldykgCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX0RBU0hCT0FSRDsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX0VtYWlsSW50ZWdyYXRpb25WaWV3KSAKCQl7CgkJCXJldHVybiBNTV9NT0RVTEVfRU1BSUxfSU5URUdSQVRJT047CgkJfQoJCWVsc2UgaWYoJHRoaXMgaW5zdGFuY2VvZiBNTV9TaGlwcGluZ01ldGhvZHNWaWV3KQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9TSElQUElORzsKCQl9CgkJZWxzZSBpZigkdGhpcyBpbnN0YW5jZW9mIE1NX0R1cGxpY2F0ZVN1YnNjcmlwdGlvbnNWaWV3KQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9EVVBMSUNBVEVfU1VCU0NSSVBUSU9OX1RPT0w7CgkJfQoJCWVsc2UgaWYgKCR0aGlzIGluc3RhbmNlb2YgTU1fRGlhZ25vc3RpY3NWaWV3KQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9ESUFHTk9TVElDUzsKCQl9CgkJZWxzZSBpZiAoJHRoaXMgaW5zdGFuY2VvZiBNTV9TYWZlTW9kZVZpZXcpCgkJewoJCQlyZXR1cm4gTU1fTU9EVUxFX1NBRkVfTU9ERTsKCQl9CgkJZWxzZSBpZiAoJHRoaXMgaW5zdGFuY2VvZiBNTV9SZXBhaXJDb3JlUGFnZXNWaWV3KQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9SRVBBSVJfQ09SRV9QQUdFUzsKCQl9CgkJZWxzZSBpZiAoJHRoaXMgaW5zdGFuY2VvZiBNTV9Vc2VyRGVmaW5lZFBhZ2VWaWV3KQoJCXsKCQkJcmV0dXJuIE1NX01PRFVMRV9VU0VSX0RFRklORURfUEFHRVM7CgkJfQoJCWVsc2UgaWYgKCR0aGlzIGluc3RhbmNlb2YgTU1fU21hcnRUYWdMaWJyYXJ5VmlldykKCQl7IAoJCQlpZigkcG9zdFtzZWxmOjokTU1fSlNNT0RVTEVdID09IE1NX01PRFVMRV9TTUFSVFRBR19MT09LVVApCgkJCXsKCQkJCXJldHVybiBNTV9NT0RVTEVfU01BUlRUQUdfTE9PS1VQOwoJCQl9CgkJCXJldHVybiBNTV9NT0RVTEVfU01BUlRUQUdfTElCUkFSWTsKCQl9IAoJCWVsc2UgCgkJewoJCQlyZXR1cm4gIiI7CgkJfQoJfQoJCiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoJHRhYmxlTmFtZSwgJGZpZWxkcz1udWxsLCBNTV9EYXRhR3JpZCAkZGc9bnVsbCwgJHdoZXJlID0gIiIsICRnZXRUb3RhbD1mYWxzZSkKIAl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRjb2x1bW5zID0gKGlzX251bGwoJGZpZWxkcykpID8gInRibC4qIiA6IGltcGxvZGUoIiwiLCAkZmllbGRzKTsKCQkKIAkJJHNxbFJlc3VsdENvdW50ID0gIlNFTEVDVCBjb3VudChkaXN0aW5jdCBpZCkgYXMgdG90YWwgRlJPTSAiLiR0YWJsZU5hbWU7CgkJaWYoIWVtcHR5KCR3aGVyZSkpCgkJewoJCQlpZihwcmVnX21hdGNoKCIvXih3aGVyZSkvIiwgc3RydG9sb3dlcih0cmltKCR3aGVyZSkpKSkKCQkJewoJCQkJJHNxbFJlc3VsdENvdW50Lj0gIiB7JHdoZXJlfSAiOwoJCQl9CQoJCQllbHNlCgkJCXsKCQkJCSRzcWxSZXN1bHRDb3VudC49ICIgd2hlcmUgeyR3aGVyZX0gIjsKCQkJfQoJCX0KCQkKCQkkY291bnRSb3cgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsUmVzdWx0Q291bnQpOwoJCQoJCWlmKCRjb3VudFJvdykgCgkJewoJCQkkc3FsID0gIlNFTEVDVCAneyRjb3VudFJvdy0+dG90YWx9JyBhcyB0b3RhbCwgIi4kY29sdW1ucy4iIEZST00gIi4kdGFibGVOYW1lLiIgYXMgdGJsICI7CgkJfQoJCWVsc2UgCgkJewoJCQkkc3FsID0gIlNFTEVDVCAiLiRjb2x1bW5zLiIgRlJPTSAiLiR0YWJsZU5hbWUuIiBhcyB0YmwgIjsKCQl9CgkJCgkJaWYoIWVtcHR5KCR3aGVyZSkpCgkJewoJCQlpZihwcmVnX21hdGNoKCIvXih3aGVyZSkvIiwgc3RydG9sb3dlcih0cmltKCR3aGVyZSkpKSkKCQkJewoJCQkJJHNxbC49ICIgeyR3aGVyZX0gIjsKCQkJfQkKCQkJZWxzZQoJCQl7CgkJCQkkc3FsLj0gIiB3aGVyZSB7JHdoZXJlfSAiOwoJCQl9CgkJfQoJCQoJCWlmKCFpc19udWxsKCRkZykgJiYgIWlzX251bGwoJGRnLT5zb3J0QnkpICYmICFlbXB0eSgkZGctPnNvcnRCeSkpIAoJCXsKCQkJJHNxbC49ICJPUkRFUiBCWSB7JGRnLT5zb3J0Qnl9IHskZGctPnNvcnREaXJ9IjsKCQl9CgkJCgkJaWYoJGdldFRvdGFsKQoJCXsKCQkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkJcmV0dXJuICRyZXN1bHQ7CgkJfQoJCQoJCWlmKCFpc19udWxsKCRkZykpIAoJCXsKCQkJJHNxbCAuPSAkZGctPmdldExpbWl0U3FsKCk7CgkJfQoKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQoJCWlmKCEkcmVzdWx0IHx8IGlzX251bGwoJHJlc3VsdCkpIAoJCXsKCQkJcmV0dXJuIGFycmF5KCk7CgkJfQoJCQoJCXJldHVybiAkcmVzdWx0OwogCX0KIAkKIAlwcm90ZWN0ZWQgZnVuY3Rpb24gY2hlY2tBamF4UmVmZXJlcigkYWN0aW9uLCAkbmFtZSkKCXsKCQkvLyBGb3Igbm93LCB3ZSdyZSBkaXNhYmxpbmcgdGhpcywgYWx3YXlzIHJldHVybiB0cnVlCgkJcmV0dXJuIHRydWU7CiAgCQkvL3JldHVybiBjaGVja19hamF4X3JlZmVyZXIoICRhY3Rpb24sICRuYW1lLCBmYWxzZSApOwoJfQp9Cg==', 0, '2018-11-21 06:38:53'),
(19, 'loginformview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0xvZ2luRm9ybVZpZXcgZXh0ZW5kcyBNTV9WaWV3CnsJCiAgcHVibGljIHN0YXRpYyAkTU1fTk9OQ0VfQUNUSU9OX0xPR0lOX0ZPUk0gPSAibW0tbG9naW4iOwogIHB1YmxpYyBzdGF0aWMgJE1NX05PTkNFX05BTUVfTE9HSU5fRk9STSAgID0gIm1tLXNlY3VyaXR5IjsKCiAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKICB7CiAgCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKICB9CiAgCglwdWJsaWMgZnVuY3Rpb24gcGVyZm9ybUFjdGlvbigkcG9zdCkgCgl7CQoJCSRyZXNwb25zZSA9IHBhcmVudDo6cGVyZm9ybUFjdGlvbigkcG9zdCk7CgkJCgkJaWYoISgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSkpCgkJewoJCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkgCgkJCXsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0xPR0lOOgoJCQkJCXJldHVybiAkdGhpcy0+bG9naW4oJHBvc3QpOwoJCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gbG9naW4oJHBvc3QpCgl7CQogIAl0cnkKICAgIHsgCiAgCSAgJF9QT1NUWydyZW1lbWJlcm1lJ10gPSAoJF9QT1NUWydyZW1lbWJlcm1lJ10gPT0gInRydWUiKTsKCSAgJHVzZXIgICAgICAgID0gd3Bfc2lnbm9uKCk7CiAgICAgICRyZWRpcmVjdF90byA9IGFwcGx5X2ZpbHRlcnMoJ2xvZ2luX3JlZGlyZWN0JywgJycsICcnLCAkdXNlcik7CiAgICAgIAogICAgICBpZihpc193cF9lcnJvcigkdXNlcikpCiAgICAgIHsKICAgICAgICAkRXJyb3JNZXNzYWdlSW5mbyA9IE1NX01lc3NhZ2VzOjpnZXQoTU1fU2Vzc2lvbjo6JEtFWV9FUlJPUlMpOwogICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJEVycm9yTWVzc2FnZUluZm9bY291bnQoJEVycm9yTWVzc2FnZUluZm8pLTFdKTsKICAgICAgfQogICAgICAKICAgICAgJE1NX1Jlc3BvbnNlID0gbmV3IE1NX1Jlc3BvbnNlKCk7CiAgICAgICRNTV9SZXNwb25zZS0+ZGF0YVsncmVkaXJlY3RfdG8nXSA9ICRyZWRpcmVjdF90bzsKICAgICAgCiAgICAgIHJldHVybiAkTU1fUmVzcG9uc2U7CiAgICB9IAogICAgY2F0Y2goRXhjZXB0aW9uICRlKQogICAgewogICAgICAkTU1fUmVzcG9uc2UgPSBuZXcgTU1fUmVzcG9uc2UoJGUtPmdldE1lc3NhZ2UoKSwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CiAgICAgIAogICAgICBpZihNTV9TZXNzaW9uOjp2YWx1ZSgncmVkaXJlY3RfdG8nKSkKICAgICAgewogICAgICAgICRNTV9SZXNwb25zZS0+ZGF0YVsncmVkaXJlY3RfdG8nXSA9IE1NX1Nlc3Npb246OnZhbHVlKCdyZWRpcmVjdF90bycpOwogICAgICAgIE1NX1Nlc3Npb246OmNsZWFyKCdyZWRpcmVjdF90bycpOwogICAgICB9CiAgICAgIAogICAgICByZXR1cm4gJE1NX1Jlc3BvbnNlOwogICAgfQoJfQoJCgkKCS8qKgoJICogT3ZlcnJpZGUgb2YgcGFyZW50IHRvIGFsbG93IHVzZXJzIHdpdGhvdXQgcm9sZXMgdG8gbG9naW4KCSAqIHtAaW5oZXJpdERvY30KCSAqIEBzZWUgTU1fVmlldzo6Y2FuQ2FsbE1ldGhvZCgpCgkgKi8KCQoJcHVibGljIGZ1bmN0aW9uIGNhbkNhbGxNZXRob2QoJHJlcXVlc3QpCgl7CgkJJGFsbG93ZWRBY3Rpb25zID0gYXJyYXkoc2VsZjo6JE1NX0pTQUNUSU9OX0xPR0lOKTsKCQlpZiAoKCRyZXF1ZXN0WydtZXRob2QnXSAhPSAicGVyZm9ybUFjdGlvbiIpIHx8ICghaXNzZXQoJHJlcXVlc3RbJ21tX2FjdGlvbiddKSkgfHwgKCFpbl9hcnJheSgkcmVxdWVzdFsnbW1fYWN0aW9uJ10sJGFsbG93ZWRBY3Rpb25zKSkpCgkJewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiB0cnVlOwoJCX0KCX0KCQp9Cg==', 0, '2018-11-21 06:38:53'),
(20, 'logapi', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fTG9nQXBpIGV4dGVuZHMgTU1fRW50aXR5CnsKCXByaXZhdGUgJG1lc3NhZ2UgPSAiIjsKCXByaXZhdGUgJHJlcXVlc3QgPSAiIjsKCXByaXZhdGUgJGlwYWRkcmVzcyA9ICIiOwoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpIAoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9MT0dfQVBJLiIgV0hFUkUgaWQ9JyIuJHRoaXMtPmlkLiInOyI7CgkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCQoJCWlmKCRyZXN1bHQpIHsKCQkJJHRoaXMtPnNldERhdGEoJHJlc3VsdCk7CgkJfQoJCWVsc2UgewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9nUmVxdWVzdCgkbWVzc2FnZSwgJHJlcXVlc3Q9IiIpCgl7CgkJJGFwaSA9IG5ldyBNTV9Mb2dBcGkoKTsKCQkkYXBpLT5zZXRJcEFkZHJlc3MoJF9TRVJWRVJbIlJFTU9URV9BRERSIl0pOwoJCSRhcGktPnNldE1lc3NhZ2UoJG1lc3NhZ2UpOwoJCSRhcGktPnNldFJlcXVlc3QoJHJlcXVlc3QpOwoJCSRhcGktPmNvbW1pdERhdGEoKTsKCX0KCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHByaW50TG9nKCRkYXRlMSwgJGRhdGUyKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gInNlbGVjdCAqIGZyb20gICIuTU1fVEFCTEVfTE9HX0FQSS4iIHdoZXJlIERBVEUoZGF0ZV9hZGRlZCkgPj0gREFURSgnIi4kZGF0ZTEuIicpIGFuZCBEQVRFKGRhdGVfYWRkZWQpPD1EQVRFKCciLiRkYXRlMi4iJykgb3JkZXIgYnkgaWQgZGVzYyI7CgkJCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJaWYoaXNfYXJyYXkoJHJvd3MpKXsKCQkJcmV0dXJuICRyb3dzOwoJCX0KCQlyZXR1cm4gYXJyYXkoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCgl7CgkJdHJ5IAoJCXsKCQkJJHRoaXMtPm1lc3NhZ2UgPSAkZGF0YS0+bWVzc2FnZTsKCQkJJHRoaXMtPnJlcXVlc3QgPSAkZGF0YS0+cmVxdWVzdDsKCQkJJHRoaXMtPmlwYWRkcmVzcyA9ICRkYXRhLT5pcGFkZHJlc3M7CgkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpIAoJCXsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gY29tbWl0RGF0YSgpCgl7CQoJCWdsb2JhbCAkd3BkYjsKCQlpZihpbnR2YWwoJHRoaXMtPmlkKT4wKXsKCQkJJHNxbCA9ICJ1cGRhdGUgIi5NTV9UQUJMRV9MT0dfQVBJLiIgc2V0IAoJCQkJCQltZXNzYWdlPSclcycsIAoJCQkJCQlyZXF1ZXN0PSclcycsCgkJCQkJCWlwYWRkcmVzcz0nJXMnCgkJCQkJd2hlcmUgCgkJCQkJCWlkPSd7JHRoaXMtPmlkfScKCQkJIjsKCQkJJHdwZGItPnF1ZXJ5KCR3cGRiLT5wcmVwYXJlKCRzcWwsICR0aGlzLT5tZXNzYWdlLCAkdGhpcy0+cmVxdWVzdCwgJHRoaXMtPmlwYWRkcmVzcykpOwoJCX0KCQllbHNlewoJCQkkc3FsID0gImluc2VydCBpbnRvICIuTU1fVEFCTEVfTE9HX0FQSS4iIHNldCAKCQkJCQltZXNzYWdlPSclcycsIAoJCQkJCXJlcXVlc3Q9JyVzJywKCQkJCQlpcGFkZHJlc3M9JyVzJwoJCQkiOwoJCQkkd3BkYi0+cXVlcnkoJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPm1lc3NhZ2UsICR0aGlzLT5yZXF1ZXN0LCAkdGhpcy0+aXBhZGRyZXNzKSk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0TWVzc2FnZSgkbXNnKXsKCQkkdGhpcy0+bWVzc2FnZSA9ICRtc2c7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRNZXNzYWdlKCl7CgkJcmV0dXJuICR0aGlzLT5tZXNzYWdlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0SXBBZGRyZXNzKCRyZXEpewoJCSR0aGlzLT5pcGFkZHJlc3MgPSAkcmVxOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0SXBBZGRyZXNzKCl7CgkJcmV0dXJuICR0aGlzLT5pcGFkZHJlc3M7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRSZXF1ZXN0KCRyZXEpewoJCSR0aGlzLT5yZXF1ZXN0ID0gJHJlcTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFJlcXVlc3QoKXsKCQlyZXR1cm4gJHRoaXMtPnJlcXVlc3Q7Cgl9Cn0=', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(21, 'diagnosticsview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0RpYWdub3N0aWNzVmlldyBleHRlbmRzIE1NX1JCQUNBZG1pblZpZXcKewoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fU0VUX0RJQUdOT1NUSUNTX01PREUgPSAic2V0RGlhZ25vc3RpY3NNb2RlIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0NMRUFSX0xPRyA9ICJjbGVhckxvZyI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TVE9SRV9GSUxURVJfU1RBVEUgPSAic3RvcmVGaWx0ZXJTdGF0ZSI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9SRVNFVF9GT1JNID0gInJlc2V0Rm9ybSI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9GSUxURVIgPSAiZmlsdGVyIjsKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQogCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fUkVTRVRfRk9STToKCQkJCQlyZXR1cm4gJHRoaXMtPmdlbmVyYXRlRmlsdGVyQ3JpdGVyaWFGb3JtKCRwb3N0KTsKCQkJCQlicmVhazsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NFVF9ESUFHTk9TVElDU19NT0RFOgoJCQkJCXJldHVybiAkdGhpcy0+c2V0RGlhZ25vc3RpY3NNb2RlKCRwb3N0KTsKCQkJCQlicmVhazsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0NMRUFSX0xPRzoKCQkJCQlyZXR1cm4gJHRoaXMtPmNsZWFyTG9nKCk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TVE9SRV9GSUxURVJfU1RBVEU6CgkJCQkJcmV0dXJuICR0aGlzLT5zdG9yZUZpbHRlclN0YXRlKCRwb3N0KTsKCQkJCQlicmVhazsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0ZJTFRFUjoKCQkJCQlyZXR1cm4gJHRoaXMtPmdlbmVyYXRlRGF0YUdyaWQoJHBvc3QpOwoJCQkJCWJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSxNTV9SZXNwb25zZTo6JFNVQ0NFU1MsdHJ1ZSk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQogCQoJCiAJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKCRzb3J0Qnk9bnVsbCwgJHNvcnREaXI9bnVsbCkKCXsKCQlyZXR1cm4gcGFyZW50OjpnZXREYXRhKE1NX1RBQkxFX0RJQUdOT1NUSUNfTE9HLCBudWxsLCAkc29ydEJ5LCAkc29ydERpcik7Cgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIHNldERpYWdub3N0aWNzTW9kZSgkcG9zdCkKCXsKCQlpZihpc3NldCgkcG9zdFsibmV3TW9kZSJdKSAmJiAhZW1wdHkoJHBvc3RbIm5ld01vZGUiXSkpIAoJCXsKCQkJTU1fRGlhZ25vc3RpY0xvZzo6c2V0TW9kZSgkcG9zdFsibmV3TW9kZSJdKTsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRGlhZ25vc3RpYyBtb2RlIGNoYW5nZWQiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsKCQl9CgkJCgkgCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkRpYWdub3N0aWMgbW9kZSBzZXR0aW5nIHdhcyB1bmNoYW5nZWQiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsJCSAJCgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGNsZWFyTG9nKCkKCXsKCQlpZiAoTU1fRGlhZ25vc3RpY0xvZzo6Y2xlYXJMb2coKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkRpYWdub3N0aWMgTG9nIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5IixNTV9SZXNwb25zZTo6JFNVQ0NFU1MsdHJ1ZSk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIGNsZWFyaW5nIERpYWdub3N0aWMgTG9nIixNTV9SZXNwb25zZTo6JEVSUk9SLHRydWUpOwoJCX0KCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gc3RvcmVGaWx0ZXJTdGF0ZSgkcG9zdCkKCXsKCQlpZihpc3NldCgkcG9zdFsibW1fc2hvd19maWx0ZXJzIl0pICYmIGlzc2V0KCRwb3N0WyJtbV9hZG1pbl9pZCJdKSkKCQl7CgkJCSRvcHRpb25OYW1lID0gTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NIT1dfRElBR05PU1RJQ1NfTE9HX0ZJTFRFUlMuIi0iLiRwb3N0WyJtbV9hZG1pbl9pZCJdOwoJCQlNTV9PcHRpb25VdGlsczo6c2V0T3B0aW9uKCRvcHRpb25OYW1lLCAkcG9zdFsibW1fc2hvd19maWx0ZXJzIl0pOwoJCX0KCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRmlsdGVyQ3JpdGVyaWFGb3JtKCRwb3N0PW51bGwpCgl7CgkJcmV0dXJuIE1NX1RFTVBMQVRFOjpnZW5lcmF0ZShNTV9NT0RVTEVTLiIvZGlhZ25vc3RpY3MuZm9ybS5waHAiLCAkcG9zdCk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGZpbHRlcigkcG9zdCwgTU1fRGF0YUdyaWQgJGRnKQoJewoJCWdsb2JhbCAkd3BkYjsKCQoJCSR3aGVyZUNvbmRpdGlvbnMgPSBhcnJheSgpOwoJCSR3aGVyZVNxbCA9ICIiOwoJCSRvcmRlckJ5U3FsID0gIiI7CgkKCQlpZighZW1wdHkoJHBvc3RbIm1tX2V2ZW50X3R5cGVzIl0pICYmIGlzX2FycmF5KCRwb3N0WydtbV9ldmVudF90eXBlcyddKSkKCQl7CgkJCSRldmVudFR5cGVzID0gYXJyYXkoKTsKCQkJZm9yZWFjaCAoJHBvc3RbJ21tX2V2ZW50X3R5cGVzJ10gYXMgJHYpCgkJCXsKCQkJCSRldmVudFR5cGVzW10gPSAkd3BkYi0+cHJlcGFyZSgiJyVzJyIsJHYpOwoJCQl9CgkJCSR3aGVyZUNvbmRpdGlvbnNbXSA9ICJ0eXBlIElOICgiLmltcGxvZGUoIiwiLCRldmVudFR5cGVzKS4iKSI7CgkJfQoJCgkJaWYoIWVtcHR5KCRwb3N0WydtbV9mcm9tX2RhdGUnXSkpCgkJewoJCQkkZnJvbURhdGUgPSBkYXRlKCJZLW0tZCBIOmk6cyIsc3RydG90aW1lKCRwb3N0WydtbV9mcm9tX2RhdGUnXSkpOwoJCQkkd2hlcmVDb25kaXRpb25zW10gPSAiZXZlbnRfZGF0ZSA+PSAneyRmcm9tRGF0ZX0nIjsKCQl9CgkKCQlpZighZW1wdHkoJHBvc3RbJ21tX3RvX2RhdGUnXSkpCgkJewoJCQkkdG9EYXRlID0gZGF0ZSgiWS1tLWQgSDppOnMiLHN0cnRvdGltZSgkcG9zdFsnbW1fdG9fZGF0ZSddKSk7CgkJCSR3aGVyZUNvbmRpdGlvbnNbXSA9ICJldmVudF9kYXRlIDw9ICd7JHRvRGF0ZX0nIjsKCQl9CgkKCQlpZighZW1wdHkoJHBvc3RbJ21tX2xpbmVfbnVtYmVyJ10pKQoJCXsKCQkJJHdoZXJlQ29uZGl0aW9uc1tdID0gJHdwZGItPnByZXBhcmUoImxpbmUgPSAlZCIsJHBvc3RbJ21tX2xpbmVfbnVtYmVyJ10pOwoJCX0KCQkKCQkkc3RyaW5nRmlsdGVycyA9IGFycmF5KCJpcF9hZGRyZXNzIiA9PiAibW1faXBfYWRkcmVzcyIsCgkJCQkic2Vzc2lvbiIgICAgPT4gIm1tX2RpYWdub3N0aWNfc2Vzc2lvbl9pZCIsCgkJCQkibG9jYXRpb24iICAgPT4gIm1tX2V2ZW50X2xvY2F0aW9uIiwKCQkJCSJldmVudF9kYXRhIiA9PiAibW1fZXZlbnRfZGF0YSIpOwoJCWZvcmVhY2ggKCRzdHJpbmdGaWx0ZXJzIGFzICRrPT4kdikKCQl7CgkJCWlmKCFlbXB0eSgkcG9zdFskdl0pKQoJCQl7CgkJCQkkd2hlcmVDb25kaXRpb25zW10gPSAkd3BkYi0+cHJlcGFyZSgieyRrfSBMSUtFICclJSVzJSUnIiwkcG9zdFskdl0pOwoJCQl9CgkJfQoJCgkJaWYoaXNzZXQoJGRnLT5zb3J0QnkpICYmICFpc19udWxsKCRkZy0+c29ydEJ5KSAmJiAhZW1wdHkoJGRnLT5zb3J0QnkpKQoJCXsKCQkJJG9yZGVyQnlTcWwgPSAiIE9SREVSIEJZIHskZGctPnNvcnRCeX0geyRkZy0+c29ydERpcn0gIjsKCQl9CgkJCgkJaWYgKGNvdW50KCR3aGVyZUNvbmRpdGlvbnMpKQoJCXsKCQkJJHdoZXJlU3FsID0gIiBXSEVSRSAiLmFycmF5X3NoaWZ0KCR3aGVyZUNvbmRpdGlvbnMpOwoJCQlpZiAoY291bnQoJHdoZXJlQ29uZGl0aW9ucykpCgkJCXsKCQkJCSR3aGVyZVNxbCAuPSAiIEFORCAiLmltcGxvZGUoIiBBTkQgIiwkd2hlcmVDb25kaXRpb25zKTsKCQkJfQoJCX0KCQoJCSRzcWxSZXN1bHRDb3VudCA9ICJTRUxFQ1QgQ09VTlQoKikgQVMgdG90YWwgRlJPTSAiLk1NX1RBQkxFX0RJQUdOT1NUSUNfTE9HOwoJCSRzcWxSZXN1bHRDb3VudCAuPSAkd2hlcmVTcWw7CgkJJGNvdW50Um93ID0gJHdwZGItPmdldF9yb3coJHNxbFJlc3VsdENvdW50KTsKCQlpZigkY291bnRSb3ctPnRvdGFsIDw9IDApCgkJewoJCQlyZXR1cm4gYXJyYXkoKTsKCQl9CgkJCgkJJHNxbCA9ICJzZWxlY3QgKiwgJ3skY291bnRSb3ctPnRvdGFsfScgYXMgdG90YWwgRlJPTSAiLk1NX1RBQkxFX0RJQUdOT1NUSUNfTE9HOwoJCSRzcWwgLj0gJHdoZXJlU3FsOwoJCSRzcWwgLj0gJG9yZGVyQnlTcWw7CgkKCQkkc3FsIC49ICRkZy0+Z2V0TGltaXRTcWwoKTsKCQkkcm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsLCBPQkpFQ1RfSyk7CgkJcmV0dXJuIGFycmF5X3ZhbHVlcygkcm93cyk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YUdyaWQoJHBvc3Q9bnVsbCkKCXsKCQlyZXR1cm4gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9kaWFnbm9zdGljcy5kYXRhZ3JpZC5waHAiLCAkcG9zdCk7Cgl9CgkKfQo=', 0, '2018-11-21 06:38:53'),
(22, 'reportlinechart', '', 0, '2018-11-21 06:38:53'),
(23, 'oauthuser', 'LyoqCiAqIE1NX09BdXRoVXNlcgogKgogKiBTaW1wbGUgZGF0YSBjbGFzcyByZXByZXNlbnRpbmcgdGhlIHVzZXIgaW4gYW4gT0F1dGggYXBwbGljYXRpb24uCiAqIEBwYWNrYWdlCiAqIEB2ZXJzaW9uICRpZCQKICovCmNsYXNzIE1NX09BdXRoVXNlciB7CgoJcHVibGljICRhdXRob3JpemVkVG9rZW4gPSBmYWxzZTsKCXB1YmxpYyAkcmVxdWVzdFRva2VuID0gZmFsc2U7CglwdWJsaWMgJHZlcmlmaWVyID0gZmFsc2U7CglwdWJsaWMgJHRva2VuU2VjcmV0ID0gZmFsc2U7CglwdWJsaWMgJGFjY2Vzc1Rva2VuID0gZmFsc2U7CgoJLyoqCgkgKiBpc0F1dGhvcml6ZWQKCSAqCgkgKiBDaGVja3MgaWYgdGhpcyB1c2VyIGlzIGF1dGhvcml6ZWQuCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHJldHVybiB2b2lkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBpc0F1dGhvcml6ZWQoKSB7CgkJaWYgKGVtcHR5KCR0aGlzLT5hdXRob3JpemVkVG9rZW4pICYmIGVtcHR5KCR0aGlzLT5hY2Nlc3NUb2tlbikpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0KCgoJLyoqCgkgKiBnZXRIaWdoZXN0UHJpb3JpdHlUb2tlbgoJICoKCSAqIFJldHVybnMgaGlnaGVzdCBwcmlvcml0eSB0b2tlbiAtIHVzZWQgdG8gZGVmaW5lIGF1dGhvcml6YXRpb24KCSAqIHN0YXRlIGZvciBhIGdpdmVuIE1NX09BdXRoVXNlcgoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEByZXR1cm4gdm9pZAoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0SGlnaGVzdFByaW9yaXR5VG9rZW4oKSB7CgkJaWYgKCFlbXB0eSgkdGhpcy0+YWNjZXNzVG9rZW4pKSByZXR1cm4gJHRoaXMtPmFjY2Vzc1Rva2VuOwoJCWlmICghZW1wdHkoJHRoaXMtPmF1dGhvcml6ZWRUb2tlbikpIHJldHVybiAkdGhpcy0+YXV0aG9yaXplZFRva2VuOwoJCWlmICghZW1wdHkoJHRoaXMtPnJlcXVlc3RUb2tlbikpIHJldHVybiAkdGhpcy0+cmVxdWVzdFRva2VuOwoKCQkvLyBSZXR1cm4gbm8gdG9rZW4sIG5ldyB1c2VyCgkJcmV0dXJuICcnOwoJfQoKfQo=', 0, '2018-11-21 06:38:53'),
(24, 'oauthserviceprovider', 'LyoqCiAqIE1NX09BdXRoU2VydmljZVByb3ZpZGVyCiAqCiAqIFJlcHJlc2VudHMgdGhlIHNlcnZpY2UgcHJvdmlkZXIgaW4gdGhlIE9BdXRoIGF1dGhlbnRpY2F0aW9uIG1vZGVsLgogKiBUaGUgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHRoZSBzZXJ2aWNlIHByb3ZpZGVyIHdpbGwgY29udGFpbiB0aGUKICogc3BlY2lmaWMga25vd2xlZGdlIGFib3V0IHRoZSBBUEkgd2UgYXJlIGludGVyZmFjaW5nIHdpdGgsIGFuZAogKiBwcm92aWRlIHVzZWZ1bCBtZXRob2RzIGZvciBpbnRlcmZhY2luZyB3aXRoIGl0cyBBUEkuCiAqCiAqIEZvciBleGFtcGxlLCBhbiBNTV9PQXV0aFNlcnZpY2VQcm92aWRlciB3b3VsZCBrbm93IHRoZSBVUkxzIG5lY2Vzc2FyeQogKiB0byBwZXJmb3JtIHNwZWNpZmljIGFjdGlvbnMsIHRoZSB0eXBlIG9mIGRhdGEgdGhhdCB0aGUgQVBJIGNhbGxzCiAqIHdvdWxkIHJldHVybiwgYW5kIHdvdWxkIGJlIHJlc3BvbnNpYmxlIGZvciBtYW5pcHVsYXRpbmcgdGhlIHJlc3VsdHMKICogaW50byBhIHVzZWZ1bCBtYW5uZXIuCiAqCiAqIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IHRoZSBtZXRob2RzIGVuZm9yY2VkIGJ5IHRoZSBNTV9PQXV0aFNlcnZpY2VQcm92aWRlcgogKiBpbnRlcmZhY2UgYXJlIG1hZGUgc28gdGhhdCBpdCBjYW4gaW50ZXJhY3Qgd2l0aCBvdXIgTU1fT0F1dGhBcHBsaWNhdGlvbgogKiBjbGVhbmx5LCByYXRoZXIgdGhhbiBmcm9tIGEgZ2VuZXJhbCB1c2UgcGVyc3BlY3RpdmUsIHRob3VnaCBzb21lCiAqIG1ldGhvZHMgZm9yIHRob3NlIHB1cnBvc2VzIGRvIGV4aXN0cyAoc3VjaCBhcyBnZXRVc2VyRGF0YSkuCiAqCiAqIEBwYWNrYWdlCiAqIEB2ZXJzaW9uICRpZCQKICovCmludGVyZmFjZSBNTV9PQXV0aFNlcnZpY2VQcm92aWRlciB7CgoJcHVibGljIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuVXJsKCk7CglwdWJsaWMgZnVuY3Rpb24gZ2V0QXV0aG9yaXplVXJsKCk7CglwdWJsaWMgZnVuY3Rpb24gZ2V0UmVxdWVzdFRva2VuVXJsKCk7CglwdWJsaWMgZnVuY3Rpb24gZ2V0QXV0aFRva2VuRnJvbVVybCgpOwoJcHVibGljIGZ1bmN0aW9uIGdldEJhc2VVcmkoKTsKCXB1YmxpYyBmdW5jdGlvbiBnZXRVc2VyRGF0YSgpOwoKfQoKCg==', 0, '2018-11-21 06:38:53'),
(25, 'transactionlog', '', 0, '2018-11-21 06:38:53'),
(26, 'userdefinedpageview', 'Y2xhc3MgTU1fVXNlckRlZmluZWRQYWdlVmlldyBleHRlbmRzIE1NX1JCQUNHZW5lcmFsRW1wbG95ZWVWaWV3IAp7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0FWRToKCQkJCQlyZXR1cm4gJHRoaXMtPnNhdmVVc2VyRGVmaW5lZFBhZ2UoJHBvc3QpOwoJCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fUkVNT1ZFOgoJCQkJCXJldHVybiAkdGhpcy0+cmVtb3ZlVXNlckRlZmluZWRQYWdlKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKCRkZykKIAl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRyb3dzID0gcGFyZW50OjpnZXREYXRhKE1NX1RBQkxFX1VTRVJfREVGSU5FRF9QQUdFUywgbnVsbCwgJGRnKTsKCQkKCQlyZXR1cm4gJHJvd3M7CiAJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHJlbW92ZVVzZXJEZWZpbmVkUGFnZSgkcG9zdCkKCXsKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkpCgkJewoJCQkkaWQgPSAoaXNzZXQoJHBvc3RbImlkIl0pKT8kcG9zdFsiaWQiXToiMCI7CgkJCSRwYWdlID0gbmV3IE1NX1VzZXJEZWZpbmVkUGFnZSgkaWQpOwoJCQkkcGFnZS0+ZGVsZXRlKCk7CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBzYXZlVXNlckRlZmluZWRQYWdlKCRwb3N0KXsKCQkKCQkkYmxhbmtGaWVsZHMgPSBhcnJheSgibW1fcGFnZV9uYW1lIiwibW1fcGFnZV91cmwiKTsKCQlmb3JlYWNoKCRibGFua0ZpZWxkcyBhcyAkZmllbGQpCgkJewoJCQlpZigkcG9zdFskZmllbGRdID09ICIiKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJ7JGZpZWxkfSBtdXN0IGJlIGNvbXBsZXRlZCIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CQoJCX0KCQkKCQkkaWQgPSAoaXNzZXQoJHBvc3RbImlkIl0pKT8kcG9zdFsiaWQiXToiMCI7CgkJJHVkUGFnZSA9IG5ldyBNTV9Vc2VyRGVmaW5lZFBhZ2UoJGlkKTsKCQkkdWRQYWdlLT5zZXROYW1lKCRwb3N0WyJtbV9wYWdlX25hbWUiXSk7CgkJJHVkUGFnZS0+c2V0VXJsKCRwb3N0WyJtbV9wYWdlX3VybCJdKTsKCQkkcmV0ID0gJHVkUGFnZS0+Y29tbWl0RGF0YSgpOwoJCWlmKCRyZXQhPT1mYWxzZSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVzZXItZGVmaW5lZCBwYWdlIHNhdmVkIHN1Y2Nlc3NmdWxseSIpOwoJCX0KCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gc2F2ZSB1c2VyLWRlZmluZWQgcGFnZSIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQp9', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(27, 'orderitem', '', 0, '2018-11-21 06:38:53'),
(28, 'connectionutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0Nvbm5lY3Rpb25VdGlscwp7IAkKCQoJLyoqCgkgKiBDbG9zZXMgYSBjb25uZWN0aW9uIGltbWVkaWF0ZWx5IHdpdGhvdXQgdGVybWluYXRpbmcgYSBzY3JpcHQncyBvcGVyYXRpb24uIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSBuZWVkIHRvCgkgKiByZXNwb25kIGltbWVkaWF0ZWx5IHRvIGEgcmVxdWVzdC4KCSAqIAoJICogQHBhcmFtIFN0cmluZyAkY29udGVudCBDb250ZW50IHRoYXQgc2hvdWxkIChpbiB0aGVvcnkpIGJlIG91dHB1dHRlZCBiZWZvcmUgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2VkIAoJICogCgkgKi8KIAlwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNsb3NlQ29ubmVjdGlvbkFuZENvbnRpbnVlUHJvY2Vzc2luZygkY29udGVudD0iIikKCXsKCQlAb2JfZW5kX2NsZWFuKCk7CgkJaGVhZGVyKCJDb25uZWN0aW9uOiBjbG9zZSIpOwoJCWlnbm9yZV91c2VyX2Fib3J0KCk7IC8vIG9wdGlvbmFsCgkJCgkJaWYgKCFlbXB0eSgkY29udGVudCkpCgkJewoJCQlvYl9zdGFydCgpOwoJCQllY2hvICRjb250ZW50OwoJCQkkc2l6ZSA9IG9iX2dldF9sZW5ndGgoKTsKCQkJaGVhZGVyKCJDb250ZW50LUxlbmd0aDogeyRzaXplfSIpOwoJCX0KCQllbHNlIAoJCXsKCQkJaGVhZGVyKCJDb250ZW50LUxlbmd0aDogMCIpOwoJCX0KCQlAb2JfZW5kX2ZsdXNoKCk7IC8vIFN0cmFuZ2UgYmVoYXZpb3VyLCB3aWxsIG5vdCB3b3JrCgkJQGZsdXNoKCk7ICAgICAgICAvLyBVbmxlc3MgYm90aCBhcmUgY2FsbGVkIQoJfQp9Cg==', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(29, 'reportbase', '', 0, '2018-11-21 06:38:53'),
(30, 'dripcontentscheduleview', 'Y2xhc3MgTU1fRHJpcENvbnRlbnRTY2hlZHVsZVZpZXcgZXh0ZW5kcyBNTV9SQkFDUHJvZHVjdE1hbmFnZXJWaWV3CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0FDQ0VTU19SSUdIVFNfQUREID0gImFkZEFjY2Vzc1JpZ2h0cyI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9BQ0NFU1NfUklHSFRTX0RJQUxPRyA9ICJhY2Nlc3NSaWdodHNEaWFsb2ciOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fQUNDRVNTX1JJR0hUU19VUERBVEUgPSAidXBkYXRlQWNjZXNzUmlnaHRzIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0FDQ0VTU19SSUdIVFNfVVBEQVRFX0RJQUxPRyA9ICJ1cGRhdGVBY2Nlc3NSaWdodHNEaWFsb2ciOwoJCgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fQUNDRVNTX1JJR0hUU19BREQ6CgkJCQkJcmV0dXJuICR0aGlzLT5zYXZlQWNjZXNzUmlnaHRzKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0FDQ0VTU19SSUdIVFNfRElBTE9HOgoJCQkJCXJldHVybiAkdGhpcy0+YWNjZXNzUmlnaHRzRGlhbG9nKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0FDQ0VTU19SSUdIVFNfVVBEQVRFX0RJQUxPRzoKCQkJCQlyZXR1cm4gJHRoaXMtPnVwZGF0ZUFjY2Vzc1JpZ2h0c0RpYWxvZygkcG9zdCk7CgkJCQkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9BQ0NFU1NfUklHSFRTX1VQREFURToKCQkJCQlyZXR1cm4gJHRoaXMtPnVwZGF0ZUFjY2Vzc1JpZ2h0cygkcG9zdCk7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gdXBkYXRlQWNjZXNzUmlnaHRzKCRwb3N0KQoJewoJCSRwb3N0WyJlZGl0X2lkIl0gPSAxOwoJCQoJCWlmKCRwb3N0WyJzaG91bGRfcmVtb3ZlIl09PSIxIikKCQl7CgkJCSRkYXRhID0gYXJyYXkoCgkJCQknYWNjZXNzX2lkJz0+JHBvc3RbImFjY2Vzc19pZCJdLAoJCQkJJ2FjY2Vzc190eXBlJz0+JHBvc3RbImFjY2Vzc190eXBlIl0sCgkJCQknZGF5Jz0+JHBvc3RbImRheSJdLAoJCQkJJ3Bvc3RfSUQnPT4kcG9zdFsicG9zdF9pZCJdLAoJCQkpOwoJCQkKCQkJJGFjY2Vzc1JpZ2h0cyA9IG5ldyBNTV9BY2Nlc3NSaWdodHNWaWV3KCk7CgkJCSRyZXNwb25zZSA9ICRhY2Nlc3NSaWdodHMtPnJlbW92ZUFjY2Vzc1JpZ2h0cygkZGF0YSk7CgkJCQoJCQlpZigkcmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVzcG9uc2U6OiRTVUNDRVNTKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJTdWNjZXNzZnVsbHkgcmVtb3ZlZCBhY2Nlc3MgcmlnaHRzIik7CgkJCX0KCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9CgkJcmV0dXJuICR0aGlzLT5zYXZlQWNjZXNzUmlnaHRzKCRwb3N0KTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBzYXZlQWNjZXNzUmlnaHRzKCRwb3N0KQoJewoJCSRwb3N0RWxlbSA9ICJtbV9tZW1iZXJfdHlwZXNfb3B0IjsKCQkKCQlpZigkcG9zdFsiYWNjZXNzX3R5cGUiXSAhPSAibWVtYmVyX3R5cGUiKSAKCQl7CgkJCSRwb3N0RWxlbSA9ICJtbV9hY2Nlc3NfdGFnc19vcHQiOwoJCX0KCgkJJGRhdGEgPSBhcnJheSgKCQkJJ3Bvc3RfSUQnPT4kcG9zdFsicG9zdF9pZCJdLAoJCQkndHlwZSc9PiRwb3N0WyJhY2Nlc3NfdHlwZSJdLAoJCQknZWRpdF9pZCc9PigoaXNzZXQoJHBvc3RbImVkaXRfaWQiXSkpPyRwb3N0WyJlZGl0X2lkIl06MCksCgkJCSdkYXknPT4kcG9zdFsiZGF5Il0sCgkJCSRwb3N0RWxlbT0+JHBvc3RbImFjY2Vzc19pZCJdLAoJCSk7CgkJCgkJJGFjY2Vzc1JpZ2h0cyA9IG5ldyBNTV9BY2Nlc3NSaWdodHNWaWV3KCk7CgkJJHJlc3BvbnNlID0gJGFjY2Vzc1JpZ2h0cy0+c2F2ZUFjY2Vzc1JpZ2h0cygkZGF0YSk7CgkJCgkJaWYoJHJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokU1VDQ0VTUykKCQl7CgkJCWlmKGlzc2V0KCRwb3N0WyJjZWxsX2lkIl0pKXsKCQkJCSRyZXNwb25zZUFyciA9IGFycmF5KAoJCQkJCQknY2VsbF9pZCc9PiRwb3N0WyJjZWxsX2lkIl0sCgkJCQkJCSdwb3N0X2lkJz0+JHBvc3RbInBvc3RfaWQiXSwKCQkJCQkJJ2FjY2Vzc190eXBlJz0+JHBvc3RbImFjY2Vzc190eXBlIl0sCgkJCQkJCSdhY2Nlc3NfaWQnPT4kcG9zdFsiYWNjZXNzX2lkIl0sCgkJCQkJCSdpbWFnZSc9Pk1NX1V0aWxzOjpnZXRDaGVja0ljb24oKQoJCQkJKTsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlQXJyKTsKCQkJfQoJCQllbHNlIHsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkFjY2VzcyByaWdodHMgc2F2ZWQiKTsKCQkJfQoJCX0KCQlyZXR1cm4gJHJlc3BvbnNlOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHVwZGF0ZUFjY2Vzc1JpZ2h0c0RpYWxvZygkcG9zdCkKCXsKCQkkaW5mbyA9IG5ldyBzdGRDbGFzcygpOwoJCQoJCSRyZXEgPSBhcnJheSgiYWNjZXNzX3R5cGUiLCAiYWNjZXNzX2lkIiwgInBvc3RfaWQiLCJkYXkiKTsKCQkKCQlmb3JlYWNoKCRyZXEgYXMgJGtleSl7CgkJCWlmKCFpc3NldCgkcG9zdFska2V5XSkpewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IGZpbmQgeyRrZXl9LiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCSRpbmZvLT4ka2V5ID0gJHBvc3RbJGtleV07CgkJfQoJCQoJCSRvYmogPSBudWxsOwoJCWlmKCRwb3N0WyJhY2Nlc3NfdHlwZSJdPT0ibWVtYmVyX3R5cGUiKQoJCXsKCQkJJG9iaj0gbmV3IE1NX01lbWJlcnNoaXBMZXZlbCgkcG9zdFsiYWNjZXNzX2lkIl0pOwoJCX0KCQllbHNlCgkJewoJCQkkb2JqPSBuZXcgTU1fQnVuZGxlKCRwb3N0WyJhY2Nlc3NfaWQiXSk7CgkJfQoJCQoJCSR0aGlzUG9zdCA9IGdldF9wb3N0KCRwb3N0WyJwb3N0X2lkIl0pOwoJCQoJCSRpbmZvLT5wYWdlX25hbWUgPSAkdGhpc1Bvc3QtPnBvc3RfdGl0bGU7CgkJJGluZm8tPnR5cGVfbmFtZSA9ICRvYmotPmdldE5hbWUoKTsKCQkkaW5mby0+ZGF5ID0gJHBvc3RbImRheSJdOwoJCSRpbmZvLT5kaWFsb2cgPSAidXBkYXRlQWNjZXNzUmlnaHRzIjsKCQkkYWNjZXNzUmlnaHRzRm9ybSA9IE1NX1RFTVBMQVRFOjpnZW5lcmF0ZShNTV9NT0RVTEVTLiIvIi5NTV9NT0RVTEVfRFJJUF9DT05URU5UX1NDSEVEVUxFLiIuZGlhbG9nLnBocCIsICRpbmZvKTsKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRhY2Nlc3NSaWdodHNGb3JtKTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBhY2Nlc3NSaWdodHNEaWFsb2coJHBvc3QpCgl7CgkJJGluZm8gPSBuZXcgc3RkQ2xhc3MoKTsKCQkKCQlpZighaXNzZXQoJHBvc3RbInR5cGUiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDb3VsZCBub3QgZmluZCBhY2Nlc3MgdHlwZS4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJGlkID0gcHJlZ19yZXBsYWNlKCIvW14wLTldKy8iLCAiIiwgJHBvc3RbInR5cGUiXSk7CgkJaWYocHJlZ19tYXRjaCgiLyhtdF8pLyIsICRwb3N0WyJ0eXBlIl0pKQoJCXsKCQkJJG1lbWJlclR5cGUgPSBuZXcgTU1fTWVtYmVyc2hpcExldmVsKCRpZCk7CgkJCWlmKCEkbWVtYmVyVHlwZS0+aXNWYWxpZCgpKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJJbnZhbGlkIG1lbWJlcnNoaXAgbGV2ZWwuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQkJJGluZm8tPmlkID0gJGlkOwoJCQkkaW5mby0+dHlwZT0gIm1lbWJlcl90eXBlIjsKCQl9CgkJZWxzZSBpZihwcmVnX21hdGNoKCIvKGF0XykvIiwgJHBvc3RbInR5cGUiXSkpCgkJewoJCQkkYWNjZXNzVGFnID0gbmV3IE1NX0J1bmRsZSgkaWQpOwoJCQlpZighJGFjY2Vzc1RhZy0+aXNWYWxpZCgpKXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkludmFsaWQgYnVuZGxlLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCSRpbmZvLT5pZCA9ICRpZDsKCQkJJGluZm8tPnR5cGUgPSAiYWNjZXNzX3RhZyI7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkludmFsaWQgYWNjZXNzIHR5cGUuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRwb3N0cyA9IGdldF9wb3N0cyhhcnJheSgicG9zdF90eXBlIj0+InBvc3QiKSk7CgkJJHBhZ2VzID0gZ2V0X3BhZ2VzKGFycmF5KCJwb3N0X3R5cGUiPT4icGFnZSIpKTsKCQkKCQkkcG9zdFNlbGVjdCA9IE1NX1V0aWxzOjpjcmVhdGVPcHRpb25zQXJyYXkoJHBvc3RzLCAiSUQiLCAicG9zdF90aXRsZSIpOwoJCSRwYWdlQXJyID0gTU1fVXRpbHM6OmNyZWF0ZU9wdGlvbnNBcnJheSgkcGFnZXMsICJJRCIsICJwb3N0X3RpdGxlIik7CgkJJHBhZ2VTZWxlY3QgPSBhcnJheSgpOwoJCWZvcmVhY2goJHBhZ2VBcnIgYXMgJGs9PiR2KQoJCXsKCQkJaWYoIU1NX0NvcmVQYWdlRW5naW5lOjppc0NvcmVQYWdlKCRrKSkKCQkJewoJCQkJJHBhZ2VTZWxlY3RbJGtdID0gJHY7CgkJCX0KCQl9CgkJCgkJJGluZm8tPnBvc3RzX3NlbGVjdCA9IE1NX0h0bWxVdGlsczo6Z2VuZXJhdGVTZWxlY3Rpb25zTGlzdCgkcG9zdFNlbGVjdCk7CgkJJGluZm8tPnBhZ2VzX3NlbGVjdCA9IE1NX0h0bWxVdGlsczo6Z2VuZXJhdGVTZWxlY3Rpb25zTGlzdCgkcGFnZVNlbGVjdCk7CgkJJGluZm8tPnR5cGVfbmFtZSA9ICRwb3N0WyJ0eXBlX25hbWUiXTsKCQkkaW5mby0+ZGlhbG9nID0gInNob3dBZGRBY2Nlc3NSaWd0aHMiOwoJCSRhY2Nlc3NSaWdodHNGb3JtID0gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi8iLk1NX01PRFVMRV9EUklQX0NPTlRFTlRfU0NIRURVTEUuIi5kaWFsb2cucGhwIiwgJGluZm8pOwoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGFjY2Vzc1JpZ2h0c0Zvcm0pOwoJfQp9', 0, '2018-11-21 06:38:53'),
(31, 'error', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fRXJyb3IKewoJcHVibGljIHN0YXRpYyAkVVJMX1BBUkFNID0gImNvZGUiOwoJCglwdWJsaWMgc3RhdGljICRHRU5FUkFMID0gMTAwMDEwOwoJcHVibGljIHN0YXRpYyAkQUNDRVNTX0RFTklFRCA9IDEwMDAyMDsKCXB1YmxpYyBzdGF0aWMgJExPR0lOX1JFUVVJUkVEID0gMTAwMDIxOwoJcHVibGljIHN0YXRpYyAkQUNDT1VOVF9DQU5DRUxFRCA9IDEwMDAzMDsKCXB1YmxpYyBzdGF0aWMgJEFDQ09VTlRfTE9DS0VEID0gMTAwMDMxOwoJcHVibGljIHN0YXRpYyAkQUNDT1VOVF9QQVVTRUQgPSAxMDAwMzI7CglwdWJsaWMgc3RhdGljICRBQ0NPVU5UX09WRVJEVUUgPSAxMDAwMzM7CglwdWJsaWMgc3RhdGljICRBQ0NPVU5UX0VYUElSRUQgPSAxMDAwMzQ7CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0TWVzc2FnZSgkZXJyb3JDb2RlPTApCgl7CgkJaWYoaXNzZXQoJF9SRVFVRVNUW01NX1Nlc3Npb246OiRQQVJBTV9NRVNTQUdFX0tFWV0pKQoJCXsKCQkJcmV0dXJuIGh0bWxzcGVjaWFsY2hhcnMoc3RyaXBzbGFzaGVzKHVybGRlY29kZSgkX1JFUVVFU1RbTU1fU2Vzc2lvbjo6JFBBUkFNX01FU1NBR0VfS0VZXSkpLCBFTlRfUVVPVEVTLCAnVVRGLTgnKTsKCQl9CgkJCgkJaWYoaXNzZXQoJF9SRVFVRVNUW3NlbGY6OiRVUkxfUEFSQU1dKSkKCQl7CgkJCSRlcnJvckNvZGUgPSAkX1JFUVVFU1Rbc2VsZjo6JFVSTF9QQVJBTV07CgkJfQoJCQkJCgkJc3dpdGNoKGludHZhbCgkZXJyb3JDb2RlKSkKCQl7CgkJCWNhc2Ugc2VsZjo6JEdFTkVSQUw6CgkJCWNhc2Ugc2VsZjo6JEFDQ0VTU19ERU5JRUQ6CgkJCQlyZXR1cm4gIllvdSBkb24ndCBoYXZlIGFjY2VzcyB0byB2aWV3IHRoaXMgcGFnZSI7CgkJCQkKCQkJY2FzZSBzZWxmOjokTE9HSU5fUkVRVUlSRUQ6CgkJCQlyZXR1cm4gIllvdSBtdXN0IGxvZ2luIGluIG9yZGVyIHRvIGFjY2VzcyB0aGlzIHBhZ2UiOwoJCQkJCgkJCWNhc2Ugc2VsZjo6JEFDQ09VTlRfQ0FOQ0VMRUQ6CgkJCWNhc2Ugc2VsZjo6JEFDQ09VTlRfUEFVU0VEOgoJCQkJcmV0dXJuICJZb3VyIGFjY291bnQgaGFzIGJlZW4gY2FuY2VsZWQiOwoJCQkJCgkJCWNhc2Ugc2VsZjo6JEFDQ09VTlRfTE9DS0VEOgoJCQkJcmV0dXJuICJZb3VyIGFjY291bnQgaGFzIGJlZW4gbG9ja2VkIjsKCQkJCgkJCWNhc2Ugc2VsZjo6JEFDQ09VTlRfT1ZFUkRVRToKCQkJCXJldHVybiAiWW91ciBhY2NvdW50IGlzIG92ZXJkdWUgYW5kIG11c3QgYmUgYnJvdWdodCB1cCB0byBkYXRlIGJlZm9yZSB5b3UgY2FuIGFjY2VzcyBwcm90ZWN0ZWQgY29udGVudCI7CgkJCQkKCQkJY2FzZSBzZWxmOjokQUNDT1VOVF9FWFBJUkVEOgoJCQkJcmV0dXJuICJZb3VyIGFjY291bnQgaGFzIGV4cGlyZWQiOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gIkFuIGVycm9yIGhhcyBvY2N1cnJlZCI7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:53'),
(32, 'resetpasswordform', 'Y2xhc3MgTU1fUmVzZXRQYXNzd29yZEZvcm0gZXh0ZW5kcyBNTV9BYnN0cmFjdEZvcm0KewoJcHVibGljICRzdWNjZXNzID0gIiI7CgkKCS8qKgoJICogRGVmYXVsdCBjb25zdHJ1Y3Rvci4gVGFrZXMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzCgkgKiBAcGFyYW0gQXJyYXkgJHBhcmFtcyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBmb3JtIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycwoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHBhcmFtcz1udWxsKQoJewkKCQlpZighaXNfbnVsbCgkcGFyYW1zKSkKCQl7CgkJCWlmKGlzX2FycmF5KCRwYXJhbXMpICYmIGNvdW50KCRwYXJhbXMpID4gMCkKCQkJewoJCQkJZm9yZWFjaCgkcGFyYW1zIGFzICRrPT4kdikKCQkJCXsKCQkJCQkka2V5ID0gc3RydG9sb3dlcigkayk7CgkJCQkJJCRrZXkgPSAkdjsKCQkJCX0KCQkJfQoJCQkKCQkJJHRoaXMtPmluaXRpYWxpemUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBpbml0aWFsaXplKCkKCXsKICAJCXRyeQogIAkJewogICAgCQkkcmVzdWx0ID0gc2VsZjo6Y2hlY2tJbnB1dCgpOwoJCQoJCQlpZigkcmVzdWx0WydzdWNjZXNzJ10gPT09IGZhbHNlKQoJCQl7CgkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCRyZXN1bHRbJ21lc3NhZ2UnXSk7CgkJCX0KICAgICAgCiAgICAgIAkkdGhpcy0+aXNWYWxpZCA9IHRydWU7CiAgCQl9CiAgCQljYXRjaChFeGNlcHRpb24gJGUpCiAgCQl7CiAgICAJCSR0aGlzLT5lcnJvciA9ICRlLT5nZXRNZXNzYWdlKCk7CiAgICAJCSR0aGlzLT5pc1ZhbGlkID0gZmFsc2U7CiAgCQl9Cgl9CgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBjaGVja3MgdG8gc2VlIGlmIHRoZSBwcm92aWRlZCBpbnB1dCB0byBhY2Nlc3MgdGhpcyBmb3JtL3BhZ2UgYWxsb3dzIGFjY2Vzcy4KCSAqIEByZXR1cm4gQXJyYXkgY29udGFpbmluZyByZXN1bHQgaW5mbwoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNoZWNrSW5wdXQoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcmVzcG9uc2UgPSBhcnJheSgpOwoJCQoJCXRyeQoJCXsKCSAgICAJaWYoIWlzc2V0KCRfUkVRVUVTVFtNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9QQVJBTV9LRVlfS0VZXSkgfHwgIXN0cmxlbih0cmltKCRfUkVRVUVTVFtNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9QQVJBTV9LRVlfS0VZXSkpKQoJICAgIAl7CgkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCJNaXNzaW5nIG9yIGludmFsaWQgdmVyaWZpY2F0aW9uIGtleSIpOwoJICAgIAl9CiAgICAJCgkgICAgCWlmKCFpc3NldCgkX1JFUVVFU1RbTU1fUmVzZXRQYXNzd29yZEZvcm1WaWV3OjokTU1fUEFSQU1fS0VZX0VNQUlMXSkgfHwgIXN0cmxlbih0cmltKCRfUkVRVUVTVFtNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9QQVJBTV9LRVlfRU1BSUxdKSkpCgkgICAgCXsKCQkJCXRocm93IG5ldyBFeGNlcHRpb24oIk1pc3Npbmcgb3IgaW52YWxpZCByZXF1aXJlZCB2ZXJpZmljYXRpb24gZmllbGQiKTsKCSAgICAJfQogICAgCQoJICAgIAkkZm9yZ290UGFzc3dvcmRIYXNoID0gdXJsZGVjb2RlKHRyaW0oJF9SRVFVRVNUW01NX1Jlc2V0UGFzc3dvcmRGb3JtVmlldzo6JE1NX1BBUkFNX0tFWV9LRVldKSk7CgkgICAgCSRlbWFpbCAgICAgICAgICAgICAgPSBNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OmRlY3J5cHRQYXNzd29yZCh1cmxkZWNvZGUodHJpbSgkX1JFUVVFU1RbTU1fUmVzZXRQYXNzd29yZEZvcm1WaWV3OjokTU1fUEFSQU1fS0VZX0VNQUlMXSkpKTsKICAgIAkKCSAgICAJaWYoZmlsdGVyX3ZhcigkZW1haWwsIEZJTFRFUl9WQUxJREFURV9FTUFJTCkgPT09IGZhbHNlKQoJICAgIAl7CgkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCJJbnZhbGlkIHJlcXVpcmVkIHZlcmlmaWNhdGlvbiBmaWVsZCIpOwoJICAgIAl9CiAgICAJCgkgICAgCSRyZXN1bHRzID0gJHdwZGItPmdldF9jb2woIlNFTEVDVCBgSURgIEZST00gYHskd3BkYi0+dXNlcnN9YCBXSEVSRSBgdXNlcl9lbWFpbGAgPSAneyRlbWFpbH0nIEFORCBgdXNlcl9hY3RpdmF0aW9uX2tleWAgPSAneyRmb3Jnb3RQYXNzd29yZEhhc2h9JyIpOwogICAgCQoJICAgIAlpZihjb3VudCgkcmVzdWx0cykgPT09IDApCgkgICAgCXsKCQkJCXRocm93IG5ldyBFeGNlcHRpb24oIkludmFsaWQgdmVyaWZpY2F0aW9uIGRhdGEgcHJvdmlkZWQsIGNhbm5vdCBjb250aW51ZSIpOwoJICAgIAl9CiAgICAJCgkgICAgICAkbWVtYmVyID0gbmV3IE1NX1VzZXIoJHJlc3VsdHNbMF0pOwogICAgICAKCSAgICAgIGlmKCRtZW1iZXItPmlzVmFsaWQoKSA9PT0gZmFsc2UpCgkgICAgICB7CgkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCJJbnZhbGlkIHZlcmlmaWNhdGlvbiBkYXRhIHByb3ZpZGVkLCBjYW5ub3QgY29udGludWUiKTsKCSAgICAgIH0KCQkJCgkJCSRyZXNwb25zZVsnc3VjY2VzcyddID0gdHJ1ZTsKCQkJJHJlc3BvbnNlWydtZW1iZXInXSAgPSAkbWVtYmVyOwoJCX0KCQljYXRjaChFeGNlcHRpb24gJGUpCgkJewoJCQkkcmVzcG9uc2VbJ3N1Y2Nlc3MnXSA9IGZhbHNlOwoJCQkkcmVzcG9uc2VbJ21lc3NhZ2UnXSA9ICRlLT5nZXRNZXNzYWdlKCk7CgkJfQoJCQoJCXJldHVybiAkcmVzcG9uc2U7Cgl9CgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyBhbGwgb2YgdGhlIEhUTUwgdGhhdCBzaG91bGQgc2hvdyB1cCBhdCAKCSAqIHRoZSB0b3Agb2YgdGhlIGZvcm0gYmFzZWQgb24gdGhlIHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24uCgkgKiBAcmV0dXJuIFN0cmluZyBoZWFkZXIgSFRNTCBmb3IgdGhlIGNoZWNrb3V0IGZvcm0KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRm9ybUhlYWRlcigpCgl7CQkKCQkkaHRtbCAgPSAkdGhpcy0+Z2V0SmF2YXNjcmlwdEluY2x1ZGVzKCk7CgkJCgkJJGh0bWwgLj0gIjxmb3JtIG1ldGhvZD1cInBvc3RcIiBpZD1cIm1tLXJlc2V0cGFzc3dvcmQtZm9ybVwiIHRlc3Rpbmc9XCJ0ZXN0aW5nXCI+CiI7CiAgICAkaHRtbCAuPSAiPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBpZD1cImtcIiBuYW1lPVwia1wiIHZhbHVlPVwieyRfUkVRVUVTVFtNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9QQVJBTV9LRVlfS0VZXX1cIiAvPgoiOyAgCiAgICAkaHRtbCAuPSAiPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBpZD1cImVcIiBuYW1lPVwiZVwiIHZhbHVlPVwieyRfUkVRVUVTVFtNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9QQVJBTV9LRVlfRU1BSUxdfVwiIC8+CiI7CiAgCgkJcmV0dXJuICRodG1sOwoJfQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgYWxsIG9mIHRoZSBIVE1MIHRoYXQgc2hvdWxkIHNob3cgdXAgYXQKCSAqIHRoZSBib3R0b20gb2YgdGhlIGZvcm0gYmFzZWQgb24gdGhlIHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24uCgkgKiAKCSAqIEByZXR1cm4gU3RyaW5nIGZvb3RlciBIVE1MIGZvciB0aGUgY2hlY2tvdXQgZm9ybQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2VuZXJhdGVGb3JtRm9vdGVyKCkKCXsKICAJJGh0bWwgID0gd3Bfbm9uY2VfZmllbGQoIE1NX1Jlc2V0UGFzc3dvcmRGb3JtVmlldzo6JE1NX05PTkNFX0FDVElPTl9SRVNFVF9QQVNTV09SRF9GT1JNLCBNTV9SZXNldFBhc3N3b3JkRm9ybVZpZXc6OiRNTV9OT05DRV9OQU1FX1JFU0VUX1BBU1NXT1JEX0ZPUk0sIHRydWUsIGZhbHNlKTsKCQkkaHRtbCAuPSAiPC9mb3JtPgoiOwoJCSRodG1sIC49ICR0aGlzLT5nZXRJbml0SmF2YXNjcmlwdCgpOwoJCXJldHVybiAkaHRtbDsKCX0KCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGluY2x1ZGUgc3RhdGVtZW50cyBmb3IgcmVxdWlyZWQgamF2YXNjcmlwdCBmaWxlcy4KCSAqIEByZXR1cm4gU3RyaW5nIHRoYXQgY29udGFpbnMgdGhlIGphdmFzY3JpcHQgZm9yIGluY2x1ZGluZyByZXF1aXJlZCBqYXZhc2NyaXB0IGZpbGVzLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0SmF2YXNjcmlwdEluY2x1ZGVzKCkKCXsKCQkkdmVyc2lvbiA9IE1lbWJlck1vdXNlOjpnZXRQbHVnaW5WZXJzaW9uKCk7CgkJJHVzZU1NQ1NTID0gKE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1VTRV9NTV9DU1NfUkVTRVRfUEFTU1dPUkQpID09ICIxIikgPyB0cnVlIDogZmFsc2U7CgkJCgkJaWYoJHVzZU1NQ1NTKQoJCXsKCQkJd3BfZW5xdWV1ZV9zdHlsZSgibWVtYmVybW91c2UtcmVzZXQtcGFzc3dvcmQtY3NzIiwgcGx1Z2luc191cmwoTU1fUExVR0lOX05BTUUuIi9yZXNvdXJjZXMvY3NzL3VzZXIvbW0tcmVzZXRwYXNzd29yZC5jc3MiKSwgYXJyYXkoKSwgJHZlcnNpb24pOwoJCX0KCQkKCQl3cF9lbnF1ZXVlX3NjcmlwdCgibWVtYmVybW91c2UtcmVzZXQtcGFzc3dvcmQiLCBwbHVnaW5zX3VybChNTV9QTFVHSU5fTkFNRS4iL3Jlc291cmNlcy9qcy91c2VyL21tLXJlc2V0cGFzc3dvcmQuanMiKSwgYXJyYXkoKSwgJHZlcnNpb24sIHRydWUpOwoJfQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgamF2YXNjcmlwdCB0byBpbml0aWFsaXplIHRoZSBSZXNldCBQYXNzd29yZCBmb3JtLiAKCSAqIEBwYXJhbSBhcnJheSAkZGVmYXVsdERhdGEgdGhpcyBjb250YWlucyB0aGUgZGVmYXVsdCBkYXRhIHVzZWQgdG8gcHJlcG9wdWxhdGUgY2VydGFpbiBmb3JtIGVsZW1lbnRzCgkgKiBAcmV0dXJuIFN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSBqYXZhc2NyaXB0IHRvIGluaXRpYWxpemVzIHRoZSBjaGVja291dCBmb3JtLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0SW5pdEphdmFzY3JpcHQoKQoJewoJCXJldHVybiAiPHNjcmlwdD52YXIgbW1fbm9uY2VfbmFtZV9yZXNldHBhc3N3b3JkX2Zvcm0gPSAnIiAuIE1NX1Jlc2V0UGFzc3dvcmRGb3JtVmlldzo6JE1NX05PTkNFX05BTUVfUkVTRVRfUEFTU1dPUkRfRk9STSAuICInOzwvc2NyaXB0PiI7Cgl9CgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0Zvcm1fU2VjdGlvbiB0YWcuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBjaGVja2luZyBpZiB0aGUgY3VycmVudCB1c2VyIAoJICogc2hvdWxkIHNlZSB0aGUgY29udGVudHMgb2YgdGhpcyBzZWN0aW9uIGJhc2VkIG9uIHRoZSBmb3JtIGNvbmZpZ3VyYXRpb24uCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgZnVuY3Rpb24gbW1fZm9ybV9zZWN0aW9uKCRjb250ZW50LCAkYXR0cywgJGNvZGUpCgl7CgkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IFRoZSAneyRjb2RlfScgU21hcnRUYWcgaXMgbm90IHN1cHBvcnRlZCBmb3IgUmVzZXQgUGFzc3dvcmQgZm9ybXMuIjsKCX0KCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fRm9ybV9GaWVsZCB0YWcuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgdGhlIAoJICogZm9ybSBmaWVsZCBiYXNlZCBvbiB0aGUgdHlwZSBwYXNzZWQgYW5kIHRoZSBmb3JtIGNvbmZpZ3VyYXRpb24uCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgZnVuY3Rpb24gbW1fZm9ybV9maWVsZCgkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCSRvdXRwdXRTdHIgPSAiIjsKCgkJaWYoaXNfYXJyYXkoJGF0dHMpICYmIGNvdW50KCRhdHRzKSA+IDApCgkJewoJCQlmb3JlYWNoKCRhdHRzIGFzICRrPT4kdikKCQkJewoJCQkJJGtleSA9IHN0cnRvbG93ZXIoJGspOwoJCQkJJCRrZXkgPSAkdjsKCQkJfQoJCX0KCQkKCQkkZm9ybSA9IE1NX09iamVjdENhY2hlOjpnZXQoTU1fT2JqZWN0Q2FjaGU6OiRLRVlfTEFTVF9GT1JNKTsKCQkKCQlpZighaXNzZXQoJHR5cGUpKQoJCXsKCQkJJHR5cGUgPSAiaW5wdXQiOwoJCX0KCQkKCQlzd2l0Y2goc3RydG9sb3dlcigkdHlwZSkpCgkJewoJCQljYXNlICJpbnB1dCI6CgkJCQlpZihpc3NldCgkbmFtZSkpCgkJCQl7CgkJCQkJc3dpdGNoKHN0cnRvbG93ZXIoJG5hbWUpKQoJCQkJCXsKCQkJCQkJY2FzZSAicGFzc3dvcmQiOgoJCQkJCQkJJG91dHB1dFN0ciAuPSAiPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc3dvcmRcIiBjbGFzcz1cIm1tLWZpZWxkXCIgIi4oaXNzZXQoJGF0dHNbJ3BsYWNlaG9sZGVyJ10pICYmIHN0cmxlbih0cmltKCRhdHRzWydwbGFjZWhvbGRlciddKSkgPyAiIHBsYWNlaG9sZGVyPVwieyRhdHRzWydwbGFjZWhvbGRlciddfVwiIiA6ICIiKS4iIC8+IjsKCQkJCQkJCWJyZWFrOwoJCQkJCQkJCgkJCQkJCWNhc2UgInBhc3N3b3JkLWNvbmZpcm0iOgoJCQkJCQkJJG91dHB1dFN0ciAuPSAiPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwicGFzc3dvcmRfY29uZmlybVwiIG5hbWU9XCJwYXNzd29yZF9jb25maXJtXCIgY2xhc3M9XCJtbS1maWVsZFwiICIuKGlzc2V0KCRhdHRzWydwbGFjZWhvbGRlciddKSAmJiBzdHJsZW4odHJpbSgkYXR0c1sncGxhY2Vob2xkZXInXSkpID8gIiBwbGFjZWhvbGRlcj1cInskYXR0c1sncGxhY2Vob2xkZXInXX1cIiIgOiAiIikuIiAvPiI7CgkJCQkJCQlicmVhazsKCgkJCQkJCWRlZmF1bHQ6CgkJCQkJCQlyZXR1cm4gIkludmFsaWQgU21hcnRUYWcgQ29uZmlndXJhdGlvbjogSW52YWxpZCBuYW1lIG9mICd7JG5hbWV9JyBwYXNzZWQgdG8gU21hcnRUYWcgeyRjb2RlfSB3aXRoIHR5cGUgeyR0eXBlfS4iOwoJCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQkJZWxzZQoJCQkJewoJCQkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiBUaGUgJ25hbWUnIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCBmb3IgU21hcnRUYWcgeyRjb2RlfSB3aXRoIHR5cGUgeyR0eXBlfS4iOwoJCQkJfQoJCQkJCgkJCQlicmVhazsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgdHlwZSBvZiAneyR0eXBlfScgcGFzc2VkIHRvIFNtYXJ0VGFnIHskY29kZX0iOwoJCQkJYnJlYWs7CgkJfQoJCQkKCQlyZXR1cm4gJG91dHB1dFN0cjsKCX0KCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fRm9ybV9EYXRhIHRhZy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyB0aGUgCgkgKiBkYXRhIGVsZW1lbnQgYmFzZWQgb24gdGhlIHR5cGUgcGFzc2VkIGFuZCB0aGUgZm9ybSBjb25maWd1cmF0aW9uLgoJICogQHBhcmFtIFN0cmluZyAkY29udGVudCB0aGUgY29udGVudCBjb250YWluZWQgd2l0aGluIHRoZSBTbWFydFRhZyAoaWYgYW55KQoJICogQHBhcmFtIEFycmF5ICRhdHRzIGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29kZSB0aGUgcmF3IHZlcnNpb24gb2YgdGhlIFNtYXJ0VGFnIG5hbWUgKGkuZS4gbm90IGNhc2UtaW5zZW50aXZlLCBub3QgYnJva2VuIHVwIGludG8gcGFydHMpCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgJGNvbnRlbnQgcGFzc2VkIHdpdGggYWxsIFNtYXJ0VGFncyBwcm9jZXNzZWQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIG1tX2Zvcm1fZGF0YSgkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiBUaGUgJ3skY29kZX0nIFNtYXJ0VGFnIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIFJlc2V0IFBhc3N3b3JkIGZvcm1zLiI7Cgl9CgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0Zvcm1fTWVzc2FnZSB0YWcuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgdGhlIAoJICogbWVzc2FnZSBlbGVtZW50IGJhc2VkIG9uIHRoZSB0eXBlIHBhc3NlZCBhbmQgdGhlIGZvcm0gY29uZmlndXJhdGlvbi4KCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgU21hcnRUYWcgKGlmIGFueSkKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBtbV9mb3JtX21lc3NhZ2UoJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQkkb3V0cHV0U3RyID0gIiI7CgkKCQlpZihpc19hcnJheSgkYXR0cykgJiYgY291bnQoJGF0dHMpID4gMCkKCQl7CgkJCWZvcmVhY2goJGF0dHMgYXMgJGs9PiR2KQoJCQl7CgkJCQkka2V5ID0gc3RydG9sb3dlcigkayk7CgkJCQkkJGtleSA9ICR2OwoJCQl9CgkJfQoJCQoJCSRmb3JtID0gTU1fT2JqZWN0Q2FjaGU6OmdldChNTV9PYmplY3RDYWNoZTo6JEtFWV9MQVNUX0ZPUk0pOwoJCgkJaWYoaXNzZXQoJHR5cGUpKQoJCXsKCQkJc3dpdGNoKHN0cnRvbG93ZXIoJHR5cGUpKQoJCQl7CgkJCQljYXNlICJlcnJvciI6CgkJCQkJaWYoJGZvcm0tPmVycm9yICE9ICIiKQoJCQkJCXsKCQkJCQkJJG91dHB1dFN0ciAuPSAiPHAgY2xhc3M9XCJtbS1lcnJvclwiPiIuJGZvcm0tPmVycm9yLiI8L3A+IjsKCQkJCQl9CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJzdWNjZXNzIjoKCQkJCQlpZigkZm9ybS0+c3VjY2VzcyAhPSAiIikKCQkJCQl7CgkJCQkJCSRvdXRwdXRTdHIgLj0gIjxwIGNsYXNzPVwibW0tc3VjY2Vzc1wiPiIuJGZvcm0tPnN1Y2Nlc3MuIjwvcD4iOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gIkludmFsaWQgdHlwZSBvZiAneyR0eXBlfScgcGFzc2VkIHRvIHskY29kZX0iOwoJCQkJCWJyZWFrOwoJCQl9CgkJCQoJCQlyZXR1cm4gJG91dHB1dFN0cjsKCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IFRoZSAndHlwZScgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGZvciB7JGNvZGV9IFNtYXJ0VGFnIjsKCQl9Cgl9CgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0Zvcm1fQnV0dG9uIHRhZy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIAoJICogcmV0dXJuaW5nIHRoZSBhcHByb3ByaWF0ZSBqYXZhc2NyaXB0IHRvIHN1Ym1pdCB0aGUgZm9ybSBiYXNlZCBvbiB0aGUgdHlwZSBwYXNzZWQuCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgZnVuY3Rpb24gbW1fZm9ybV9idXR0b24oJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQkkb3V0cHV0U3RyID0gIiI7CgkKCQlpZihpc19hcnJheSgkYXR0cykgJiYgY291bnQoJGF0dHMpID4gMCkKCQl7CgkJCWZvcmVhY2goJGF0dHMgYXMgJGs9PiR2KQoJCQl7CgkJCQkka2V5ID0gc3RydG9sb3dlcigkayk7CgkJCQkkJGtleSA9ICR2OwoJCQl9CgkJfQoJCQoJCSRmb3JtID0gTU1fT2JqZWN0Q2FjaGU6OmdldChNTV9PYmplY3RDYWNoZTo6JEtFWV9MQVNUX0ZPUk0pOwoJCgkJaWYoaXNzZXQoJHR5cGUpKQoJCXsKCQkJc3dpdGNoKHN0cnRvbG93ZXIoJHR5cGUpKQoJCQl7CgkJCQljYXNlICJzdWJtaXQiOgoJCQkJCWlmKCFpc3NldCgkbGFiZWwpKQoJCQkJCXsKCQkJCQkJJGxhYmVsID0gIlN1Ym1pdCI7CgkJCQkJfQoJCQkJCWlmKCFpc3NldCgkY29sb3IpKQoJCQkJCXsKCQkJCQkJJGNvbG9yID0gIiI7CgkJCQkJfQoJCQkJCWlmKCFpc3NldCgkY2xhc3MpKQoJCQkJCXsKCQkJCQkJJGN1c3RvbUNsYXNzID0gIm1tLWJ1dHRvbiB7JGNvbG9yfSI7CgkJCQkJfQoJCQkJCWVsc2UgCgkJCQkJewoJCQkJCQkkY3VzdG9tQ2xhc3MgPSAkY2xhc3M7CgkJCQkJfQoJCQkJCSRvdXRwdXRTdHIgLj0gIjxpbnB1dCB0eXBlPVwic3VibWl0XCIgbmFtZT1cInN1Ym1pdFwiIHZhbHVlPVwieyRsYWJlbH1cIiBpZD1cIm1tLXN1Ym1pdC1idXR0b25cIiBjbGFzcz1cInskY3VzdG9tQ2xhc3N9XCIgLz4iOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gIkludmFsaWQgdHlwZSBvZiAneyR0eXBlfScgcGFzc2VkIHRvIFNtYXJ0VGFnIHskY29kZX0iOwoJCQkJCWJyZWFrOwoJCQl9CgkJCQoJCQlyZXR1cm4gJG91dHB1dFN0cjsKCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IFRoZSAndHlwZScgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGZvciB7JGNvZGV9IFNtYXJ0VGFnIjsKCQl9CgkJCgl9Cn0KCg==', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(33, 'protectedcontentview', '', 0, '2018-11-21 06:38:53'),
(34, 'customeraddress', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogQ3VzdG9tZXJBZGRyZXNzIGlzIGFuIGFic3RyYWN0aW9uIG9mIGFuIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIGEgY3VzdG9tZXIsIGllIGEgYmlsbGluZyBvciBzaGlwcGluZyBhZGRyZXNzCiAqLwogCmNsYXNzIE1NX0N1c3RvbWVyQWRkcmVzcyB7CgkKCXByaXZhdGUgJGZpcnN0TmFtZSA9ICIiOwoJcHJpdmF0ZSAkbGFzdE5hbWUgPSAiIjsKCXByaXZhdGUgJGFkZHJlc3MxID0gIiI7Cglwcml2YXRlICRhZGRyZXNzMiA9ICIiOwoJcHJpdmF0ZSAkY2l0eSA9ICIiOwoJcHJpdmF0ZSAkc3RhdGUgPSAiIjsKCXByaXZhdGUgJHBvc3RhbENvZGUgPSAiIjsKCXByaXZhdGUgJHByb3ZpbmNlID0gIiI7Cglwcml2YXRlICRjb3VudHJ5ID0gIiI7Cglwcml2YXRlICRwaG9uZSA9ICIiOwoKCQoJLyoqCgkgKiBDb25zdHJ1Y3Rvci4gQWxsb3dzIHBvcHVsYXRpb24gb2YgdGhlIGFkZHJlc3Mgb2JqZWN0IG9uIGNyZWF0aW9uCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkZmlyc3ROYW1lPSIiLCAkbGFzdE5hbWU9IiIsICRhZGRyZXNzMT0iIiwgJGFkZHJlc3MyPSIiLCAkY2l0eT0iIiwgJHN0YXRlPSIiLCAkcG9zdGFsQ29kZT0iIiwgJHByb3ZpbmNlPSIiLCAkY291bnRyeT0iIiwgJHBob25lPSIiKQoJewoJCSRmaWVsZHMgPSBhcnJheSgiZmlyc3ROYW1lIiwgImxhc3ROYW1lIiwgImFkZHJlc3MxIiwgImFkZHJlc3MyIiwgImNpdHkiLCAic3RhdGUiLCAicG9zdGFsQ29kZSIsICJwcm92aW5jZSIsICJjb3VudHJ5IiwgInBob25lIik7CgkJZm9yZWFjaCAoJGZpZWxkcyBhcyAkZmllbGQpCgkJewoJCQkkdGhpcy0+JGZpZWxkID0gJCRmaWVsZDsKCQl9Cgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIGZpcnN0IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWRkcmVzcwoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0Rmlyc3ROYW1lKCkgCgl7CgkJcmV0dXJuICR0aGlzLT5maXJzdE5hbWU7Cgl9CgkKCS8qKgoJICogU2V0IHRoZSBmaXJzdCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGFkZHJlc3MKCSAqIAoJICogQHBhcmFtIFN0cmluZyAkbmV3Rmlyc3ROYW1lIFRoZSBuZXcgZmlyc3QgbmFtZQoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0Rmlyc3ROYW1lKCRuZXdGaXJzdE5hbWUpCgl7CgkJJHRoaXMtPmZpcnN0TmFtZSA9ICRuZXdGaXJzdE5hbWU7Cgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIGxhc3QgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhZGRyZXNzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRMYXN0TmFtZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5sYXN0TmFtZTsKCX0KCQoJLyoqCgkgKiBTZXQgdGhlIGxhc3QgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhZGRyZXNzCgkgKgoJICogQHBhcmFtIFN0cmluZyAkbmV3TGFzdE5hbWUgVGhlIG5ldyBsYXN0IG5hbWUKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldExhc3ROYW1lKCRuZXdMYXN0TmFtZSkKCXsKCQkkdGhpcy0+bGFzdE5hbWUgPSAkbmV3TGFzdE5hbWU7Cgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIGFkZHJlc3MgbGluZTEKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEFkZHJlc3NMaW5lMSgpCgl7CgkJcmV0dXJuICR0aGlzLT5hZGRyZXNzMTsKCX0KCQoJLyoqCgkgKiBTZXRzIHRoZSBhZGRyZXNzIGxpbmUxCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRBZGRyZXNzTGluZTEoJG5ld0FkZHJlc3MxKQoJewoJCSR0aGlzLT5hZGRyZXNzMSA9ICRuZXdBZGRyZXNzMTsJCgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIGFkZHJlc3MgbGluZTIKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEFkZHJlc3NMaW5lMigpCgl7CgkJcmV0dXJuICR0aGlzLT5hZGRyZXNzMjsKCX0KCQoJLyoqCgkgKiBTZXRzIHRoZSBhZGRyZXNzIGxpbmUyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRBZGRyZXNzTGluZTIoJG5ld0FkZHJlc3MyKQoJewoJCSR0aGlzLT5hZGRyZXNzMiA9ICRuZXdBZGRyZXNzMjsKCX0KCQoJLyoqCgkgKiBSZXRyaWV2ZSB0aGUgYWRkcmVzcyBjaXR5CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRDaXR5KCkKCXsKCQlyZXR1cm4gJHRoaXMtPmNpdHk7Cgl9CgkKCS8qKgoJICogU2V0cyB0aGUgYWRkcmVzcyBjaXR5CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRDaXR5KCRuZXdDaXR5KQoJewoJCSR0aGlzLT5jaXR5ID0gJG5ld0NpdHk7Cgl9CgkKCQoJLyoqCgkgKiBSZXRyaWV2ZSB0aGUgc3RhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWRkcmVzcwoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0U3RhdGUoKQoJewoJCXJldHVybiAkdGhpcy0+c3RhdGU7Cgl9CgkKCS8qKgoJICogU2V0IHRoZSBzdGF0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBhZGRyZXNzCgkgKgoJICogQHBhcmFtIFN0cmluZyAkbmV3U3RhdGUgVGhlIG5ldyBzdGF0ZQoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0U3RhdGUoJG5ld1N0YXRlKQoJewoJCSR0aGlzLT5zdGF0ZSA9ICRuZXdTdGF0ZTsKCX0KCQoJLyoqCgkgKiBSZXRyaWV2ZSB0aGUgcG9zdGFsIGNvZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWRkcmVzcwoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0UG9zdGFsQ29kZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5wb3N0YWxDb2RlOwoJfQoJCgkvKioKCSAqIFNldCB0aGUgcG9zdGFsIGNvZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYWRkcmVzcwoJICoKCSAqIEBwYXJhbSBTdHJpbmcgJG5ld1Bvc3RhbENvZGUgVGhlIG5ldyBwb3N0YWwgY29kZQoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0UG9zdGFsQ29kZSgkbmV3UG9zdGFsQ29kZSkKCXsKCQkkdGhpcy0+cG9zdGFsQ29kZSA9ICRuZXdQb3N0YWxDb2RlOwoJfQoJCgkvKioKCSAqIFJldHJpZXZlIHRoZSBhZGRyZXNzIHByb3ZpbmNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm92aW5jZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5wcm92aW5jZTsKCX0KCQoJLyoqCgkgKiBTZXRzIHRoZSBhZGRyZXNzIHByb3ZpbmNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRQcm92aW5jZSgkbmV3UHJvdmluY2UpCgl7CgkJJHRoaXMtPnByb3ZpbmNlID0gJG5ld1Byb3ZpbmNlOwoJfQoJCgkvKioKCSAqIFJldHJpZXZlIHRoZSBhZGRyZXNzIGNvdW50cnkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldENvdW50cnkoKQoJewoJCXJldHVybiAkdGhpcy0+Y291bnRyeTsKCX0KCQoJLyoqCgkgKiBTZXRzIHRoZSBhZGRyZXNzIGNvdW50cnkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldENvdW50cnkoJG5ld0NvdW50cnkpCgl7CgkJJHRoaXMtPmNvdW50cnkgPSAkbmV3Q291bnRyeTsKCX0KCQoJLyoqCgkgKiBSZXRyaWV2ZSB0aGUgYWRkcmVzcyBwaG9uZQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0UGhvbmUoKQoJewoJCXJldHVybiAkdGhpcy0+cGhvbmU7Cgl9CgkKCS8qKgoJICogU2V0cyB0aGUgYWRkcmVzcyBwaG9uZQoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0UGhvbmUoJG5ld1Bob25lKQoJewoJCSR0aGlzLT5waG9uZSA9ICRuZXdQaG9uZTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ0FkZHJlc3MoJGRhdGEpCgl7CgkJJHRoaXMtPmZpcnN0TmFtZSA9ICRkYXRhLT5iaWxsaW5nX2ZpcnN0X25hbWU7CgkJJHRoaXMtPmxhc3ROYW1lID0gJGRhdGEtPmJpbGxpbmdfbGFzdF9uYW1lOwoJCSR0aGlzLT5waG9uZSA9ICRkYXRhLT5iaWxsaW5nX3Bob25lOwoJCSR0aGlzLT5hZGRyZXNzMSA9ICRkYXRhLT5iaWxsaW5nX2FkZHJlc3MxOwoJCSR0aGlzLT5hZGRyZXNzMiA9ICRkYXRhLT5iaWxsaW5nX2FkZHJlc3MyOwoJCSR0aGlzLT5jaXR5ID0gJGRhdGEtPmJpbGxpbmdfY2l0eTsKCQkkdGhpcy0+cHJvdmluY2UgPSAkZGF0YS0+YmlsbGluZ19wcm92aW5jZTsKCQkkdGhpcy0+c3RhdGUgPSAkZGF0YS0+YmlsbGluZ19zdGF0ZTsKCQkkdGhpcy0+cG9zdGFsQ29kZSA9ICRkYXRhLT5iaWxsaW5nX3Bvc3RhbF9jb2RlOwoJCSR0aGlzLT5jb3VudHJ5ID0gJGRhdGEtPmJpbGxpbmdfY291bnRyeTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBpbmdBZGRyZXNzKCRkYXRhKQoJewoJCSR0aGlzLT5maXJzdE5hbWUgPSAkZGF0YS0+c2hpcHBpbmdfZmlyc3RfbmFtZTsKCQkkdGhpcy0+bGFzdE5hbWUgPSAkZGF0YS0+c2hpcHBpbmdfbGFzdF9uYW1lOwoJCSR0aGlzLT5waG9uZSA9ICRkYXRhLT5zaGlwcGluZ19waG9uZTsKCQkkdGhpcy0+YWRkcmVzczEgPSAkZGF0YS0+c2hpcHBpbmdfYWRkcmVzczE7CgkJJHRoaXMtPmFkZHJlc3MyID0gJGRhdGEtPnNoaXBwaW5nX2FkZHJlc3MyOwoJCSR0aGlzLT5jaXR5ID0gJGRhdGEtPnNoaXBwaW5nX2NpdHk7CgkJJHRoaXMtPnByb3ZpbmNlID0gJGRhdGEtPnNoaXBwaW5nX3Byb3ZpbmNlOwoJCSR0aGlzLT5zdGF0ZSA9ICRkYXRhLT5zaGlwcGluZ19zdGF0ZTsKCQkkdGhpcy0+cG9zdGFsQ29kZSA9ICRkYXRhLT5zaGlwcGluZ19wb3N0YWxfY29kZTsKCQkkdGhpcy0+Y291bnRyeSA9ICRkYXRhLT5zaGlwcGluZ19jb3VudHJ5OwoJfQp9', 0, '2018-11-21 06:38:53'),
(35, 'cronengine', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQ3JvbkVuZ2luZQp7CglwdWJsaWMgc3RhdGljICRNTV9DUk9OX0hPT0sgPSAibW1fY3Jvbl9ob29rIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0NIRUNLX1NDSEVEVUxFRF9FVkVOVF9RVUVVRSA9ICJtbV9jaGVja19zY2hlZHVsZWRfZXZlbnRfcXVldWUiOwoJcHVibGljIHN0YXRpYyAkTU1fU0VTU0lPTl9SRUFQID0gIm1tX3Nlc3Npb25fcmVhcCI7CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc2V0dXAoKQoJewoJCWlmKCF3cF9uZXh0X3NjaGVkdWxlZChzZWxmOjokTU1fQ1JPTl9IT09LKSkKCQl7CgkJCXdwX3NjaGVkdWxlX2V2ZW50KHRpbWUoKSwgJ3R3aWNlZGFpbHknLCBzZWxmOjokTU1fQ1JPTl9IT09LKTsKCQl9CgkJCgkJaWYoIXdwX25leHRfc2NoZWR1bGVkKHNlbGY6OiRNTV9DSEVDS19TQ0hFRFVMRURfRVZFTlRfUVVFVUUpKQoJCXsKCQkJd3Bfc2NoZWR1bGVfZXZlbnQodGltZSgpLCAncXVldWVfY2hlY2tfaW50ZXJ2YWwnLCBzZWxmOjokTU1fQ0hFQ0tfU0NIRURVTEVEX0VWRU5UX1FVRVVFKTsKCQl9CgkJCgkJaWYoIXdwX25leHRfc2NoZWR1bGVkKHNlbGY6OiRNTV9TRVNTSU9OX1JFQVApKQoJCXsKCQkJd3Bfc2NoZWR1bGVfZXZlbnQodGltZSgpLCAnc2Vzc2lvbl9yZWFwX2ludGVydmFsJywgc2VsZjo6JE1NX1NFU1NJT05fUkVBUCk7CgkJfQoJCQoJCSRjZSA9IG5ldyBNTV9Dcm9uRW5naW5lKCk7CgkJYWRkX2FjdGlvbihzZWxmOjokTU1fQ1JPTl9IT09LLCBhcnJheSgkY2UsICdwZXJmb3JtRGFpbHlUYXNrcycpKTsKCQlhZGRfYWN0aW9uKHNlbGY6OiRNTV9DSEVDS19TQ0hFRFVMRURfRVZFTlRfUVVFVUUsYXJyYXkoJ01NX1NjaGVkdWxlZEV2ZW50JywnY2FsbFN5bmNocm9uaXphdGlvbkhhbmRsZXInKSk7CgkJYWRkX2FjdGlvbihzZWxmOjokTU1fU0VTU0lPTl9SRUFQLGFycmF5KCRjZSwncmVhcFNlc3Npb25zJykpOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNsZWFudXAoKQoJewoJCXdwX2NsZWFyX3NjaGVkdWxlZF9ob29rKCBzZWxmOjokTU1fQ1JPTl9IT09LICk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtRGFpbHlUYXNrcygpCgl7CgkJJHRoaXMtPmNoZWNrRm9yRXhwaXJlZEFjY2VzcygpOwoJCSR0aGlzLT5jaGVja0ZvckNhbmNlbGVkQWNjZXNzKCk7CgkJJHRoaXMtPmNoZWNrRm9yT3ZlcmR1ZUFjY2VzcygpOwoJCU1NX0FjdGl2aXR5TG9nOjpwZXJmb3JtQ2xlYW51cCgpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcmVhcFNlc3Npb25zKCkKCXsKICAJCU1NX1Nlc3Npb246OnNlc3Npb25SZWFwKCk7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gY2hlY2tGb3JFeHBpcmVkQWNjZXNzKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy8gY2hlY2sgbWVtYmVyc2hpcHMKCQkkc3FsID0gIlNFTEVDVCB3cF91c2VyX2lkIEZST00gIi5NTV9UQUJMRV9VU0VSX0RBVEEuIiBXSEVSRSBzdGF0dXMgIT0gIi5NTV9TdGF0dXM6OiRFWFBJUkVEOwoJCSRzcWwgLj0gIiBBTkQgZXhwaXJhdGlvbl9kYXRlIDwgJyIuTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCkuIicgQU5EIGV4cGlyYXRpb25fZGF0ZSAhPSAnMDAwMC0wMC0wMCAwMDowMDowMCciOwoJCQoJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCgkJZm9yZWFjaCgkcmVzdWx0IGFzICRyb3cpCgkJewoJCQkkY3JudFVzZXIgPSBuZXcgTU1fVXNlcigkcm93LT53cF91c2VyX2lkKTsKCQkKCQkJaWYoJGNybnRVc2VyLT5pc1ZhbGlkKCkpCgkJCXsKCQkJCS8vIGdldCBzdGF0dXMgbWV0aG9kIHVwZGF0ZXMgc3RhdHVzIGFwcHJvcHJpcmF0ZWx5CgkJCQkkY3JudFVzZXItPmdldFN0YXR1cygpOwoJCQl9CgkJfQoJCQoJCS8vIGNoZWNrIGJ1bmRsZXMKCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9BUFBMSUVEX0JVTkRMRVMuIiBXSEVSRSAiOwoJCSRzcWwgLj0gImFjY2Vzc190eXBlID0gJyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX1VTRVIuIicgQU5EIHN0YXR1cyAhPSAiLk1NX1N0YXR1czo6JEVYUElSRUQ7CgkJJHNxbCAuPSAiIEFORCBleHBpcmF0aW9uX2RhdGUgPCAnIi5NTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKS4iJyBBTkQgZXhwaXJhdGlvbl9kYXRlICE9ICcwMDAwLTAwLTAwIDAwOjAwOjAwJyI7CgkJCgkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkKCQlmb3JlYWNoKCRyZXN1bHQgYXMgJHJvdykKCQl7CgkJCSRjcm50QnVuZGxlID0gTU1fQXBwbGllZEJ1bmRsZTo6Z2V0QXBwbGllZEJ1bmRsZSgkcm93LT5hY2Nlc3NfdHlwZV9pZCwgJHJvdy0+YnVuZGxlX2lkKTsKCQkKCQkJaWYoJGNybnRCdW5kbGUtPmlzVmFsaWQoKSkKCQkJewoJCQkJLy8gZ2V0IHN0YXR1cyBtZXRob2QgdXBkYXRlcyBzdGF0dXMgYXBwcm9wcmlyYXRlbHkKCQkJCSRjcm50QnVuZGxlLT5nZXRTdGF0dXMoKTsKCQkJfQoJCX0KCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBjaGVja0ZvckNhbmNlbGVkQWNjZXNzKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy8gY2hlY2sgbWVtYmVyc2hpcHMKCQkkc3FsID0gIlNFTEVDVCB3cF91c2VyX2lkIEZST00gIi5NTV9UQUJMRV9VU0VSX0RBVEEuIiBXSEVSRSBzdGF0dXMgPSAiLk1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OOwoJCSRzcWwgLj0gIiBBTkQgY2FuY2VsbGF0aW9uX2RhdGUgPCAnIi5NTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKS4iJyBBTkQgY2FuY2VsbGF0aW9uX2RhdGUgIT0gJzAwMDAtMDAtMDAgMDA6MDA6MDAnIjsKCQkKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQoJCWZvcmVhY2goJHJlc3VsdCBhcyAkcm93KQoJCXsKCQkJJGNybnRVc2VyID0gbmV3IE1NX1VzZXIoJHJvdy0+d3BfdXNlcl9pZCk7CgkJCgkJCWlmKCRjcm50VXNlci0+aXNWYWxpZCgpKQoJCQl7CgkJCQkvLyBnZXQgc3RhdHVzIG1ldGhvZCB1cGRhdGVzIHN0YXR1cyBhcHByb3ByaXJhdGVseQoJCQkJJGNybnRVc2VyLT5nZXRTdGF0dXMoKTsKCQkJfQoJCX0KCQkKCQkvLyBjaGVjayBidW5kbGVzCgkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTLiIgV0hFUkUgIjsKCQkkc3FsIC49ICJhY2Nlc3NfdHlwZSA9ICciLk1NX0FwcGxpZWRCdW5kbGU6OiRBQ0NFU1NfVFlQRV9VU0VSLiInIEFORCBzdGF0dXMgPSAiLk1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OOwoJCSRzcWwgLj0gIiBBTkQgY2FuY2VsbGF0aW9uX2RhdGUgPCAnIi5NTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKS4iJyBBTkQgY2FuY2VsbGF0aW9uX2RhdGUgIT0gJzAwMDAtMDAtMDAgMDA6MDA6MDAnIjsKCQkKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQoJCWZvcmVhY2goJHJlc3VsdCBhcyAkcm93KQoJCXsKCQkJJGNybnRCdW5kbGUgPSBNTV9BcHBsaWVkQnVuZGxlOjpnZXRBcHBsaWVkQnVuZGxlKCRyb3ctPmFjY2Vzc190eXBlX2lkLCAkcm93LT5idW5kbGVfaWQpOwoJCQoJCQlpZigkY3JudEJ1bmRsZS0+aXNWYWxpZCgpKQoJCQl7CgkJCQkvLyBnZXQgc3RhdHVzIG1ldGhvZCB1cGRhdGVzIHN0YXR1cyBhcHByb3ByaXJhdGVseQoJCQkJJGNybnRCdW5kbGUtPmdldFN0YXR1cygpOwoJCQl9CgkJfQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGNoZWNrRm9yT3ZlcmR1ZUFjY2VzcygpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRwZW5kaW5nT3ZlcmR1ZVN1YnNjcmlwdGlvbnNUYWJsZSA9IE1NX1RBQkxFX0FVVEhORVRfUEVORElOR19PVkVSRFVFX1NVQlNDUklQVElPTlM7CgkJLy9ydW4gdGhlIGNoZWNrIG9ubHkgaWYgdGhlIGF1dGhuZXQgcGVuZGluZyBzdWJzY3JpcHRpb24gdGFibGUgd2FzIGdlbmVyYXRlZCBhdCBzb21lIHBvaW50LCBvdGhlcndpc2UgdGhpcyB3aWxsIGdlbmVyYXRlIGFuIGVycm9yCgkJaWYgKCR3cGRiLT5nZXRfdmFyKCJTSE9XIFRBQkxFUyBMSUtFICd7JHBlbmRpbmdPdmVyZHVlU3Vic2NyaXB0aW9uc1RhYmxlfSciKSA9PSAkcGVuZGluZ092ZXJkdWVTdWJzY3JpcHRpb25zVGFibGUpCgkJewoJCQkkc3FsID0gIlNFTEVDVCBpZCwgb3JkZXJfaXRlbV9pZCBGUk9NIHskcGVuZGluZ092ZXJkdWVTdWJzY3JpcHRpb25zVGFibGV9IFdIRVJFIGlzX3Byb2Nlc3NlZCA9IDAgQU5EICI7CgkJCSRzcWwgLj0gIm92ZXJkdWVfZGF0ZSA8ICciLk1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpLiInIEFORCBvdmVyZHVlX2RhdGUgIT0gJzAwMDAtMDAtMDAgMDA6MDA6MDAnIjsKCQkJCgkJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCQoJCQlmb3JlYWNoKCRyZXN1bHQgYXMgJHJvdykKCQkJewoJCQkJJG9yZGVySXRlbSA9IG5ldyBNTV9PcmRlckl0ZW0oJHJvdy0+b3JkZXJfaXRlbV9pZCk7CgkJCQoJCQkJaWYoJG9yZGVySXRlbS0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCSR1c2VySWQgPSBNTV9PcmRlcjo6Z2V0VXNlcklkQnlPcmRlcklkKCRvcmRlckl0ZW0tPmdldE9yZGVySWQoKSk7CgkJCQkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdXNlcklkKTsKCQkJCQkKCQkJCQlpZigkdXNlci0+aXNWYWxpZCgpKQoJCQkJCXsKCQkJCQkJJHVzZXItPnNldFN0YXR1cyhNTV9TdGF0dXM6OiRPVkVSRFVFKTsKCQkJCQkJJHJlc3VsdCA9ICR1c2VyLT5jb21taXRTdGF0dXNPbmx5KCk7CgkJCQkJCQoJCQkJCQlpZihNTV9SZXNwb25zZTo6aXNTdWNjZXNzKCRyZXN1bHQpKQoJCQkJCQl7CgkJCQkJCQlNTV9QYXltZW50VXRpbHM6OmNhbmNlbFN1YnNjcmlwdGlvbkZvck9yZGVySXRlbSgkb3JkZXJJdGVtKTsKCQkJCQkJCQoJCQkJCQkJJHdwZGItPnVwZGF0ZSgkcGVuZGluZ092ZXJkdWVTdWJzY3JpcHRpb25zVGFibGUsCgkJCQkJCQkJYXJyYXkoJ2lzX3Byb2Nlc3NlZCcgPT4gMSksCgkJCQkJCQkJYXJyYXkoICdJRCcgPT4gJHJvdy0+aWQgKSwKCQkJCQkJCQlhcnJheSgnJWQnKSwgYXJyYXkoJyVkJykpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJCQoJCQkvLyBjbGVhbiB1cCBhbnkgcGVuZGluZyBvdmVyZHVlIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgb3ZlciAzIG1vbnRocyBvbGQKCQkJJGRhdGUgPSBkYXRlKCdZLW0tZCcsIHN0cnRvdGltZShNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKS4nIC0zIG1vbnRoJykpOwoJCQkkc3FsID0gImRlbGV0ZSBmcm9tIHskcGVuZGluZ092ZXJkdWVTdWJzY3JpcHRpb25zVGFibGV9IHdoZXJlIG92ZXJkdWVfZGF0ZSA8ICd7JGRhdGV9JyI7CgkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCQl9Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkUXVldWVDaGVja0ludGVydmFsUmVjdXJyZW5jZU9wdGlvbigkc2NoZWR1bGVzKQoJewoJCS8vIEFkZHMgdGhlIHF1ZXVlIGNoZWNrIGludGVydmFsIHNwZWNpZmllZCBiZWxvdyB0byB0aGUgZXhpc3Rpbmcgc2NoZWR1bGVzLgoJCSRzY2hlZHVsZXNbJ3F1ZXVlX2NoZWNrX2ludGVydmFsJ10gPSBhcnJheSgKCQkJJ2ludGVydmFsJyA9PiAxODAwLAoJCQknZGlzcGxheScgPT4gX18oICdFdmVyeSAzMCBtaW5zJyApCgkJKTsKCQkkc2NoZWR1bGVzWydzZXNzaW9uX3JlYXBfaW50ZXJ2YWwnXSA9IGFycmF5KAoJCQknaW50ZXJ2YWwnID0+IDMwMCwKCQkJJ2Rpc3BsYXknID0+IF9fKCAnRXZlcnkgNSBtaW51dGVzJyApCgkJKTsKCQlyZXR1cm4gJHNjaGVkdWxlczsKCX0KfQ==', 0, '2018-11-21 06:38:53'),
(36, 'duplicatesubscriptionsview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0R1cGxpY2F0ZVN1YnNjcmlwdGlvbnNWaWV3IGV4dGVuZHMgTU1fUkJBQ0FkbWluVmlldwp7CQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fU0VBUkNIID0gInNlYXJjaCI7CQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fQ0FOQ0VMX1NVQlNDUklQVElPTiA9ICJjYW5jZWxTdWJzY3JpcHRpb24iOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TRUFSQ0g6CgkJCQkJcmV0dXJuICR0aGlzLT5nZW5lcmF0ZURhdGFHcmlkKCRwb3N0KTsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0NBTkNFTF9TVUJTQ1JJUFRJT046CgkJCQkJcmV0dXJuICR0aGlzLT5jYW5jZWxEdXBsaWNhdGVTdWJzY3JpcHRpb24oJHBvc3QpOwkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQogCXB1YmxpYyBmdW5jdGlvbiBzZWFyY2goJHBvc3QsIE1NX0RhdGFHcmlkICRkZykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJG9pdCA9IE1NX1RBQkxFX09SREVSX0lURU1TOwoJCSRvdCA9IE1NX1RBQkxFX09SREVSUzsKCQkkdXQgPSAkd3BkYi0+dXNlcnM7CgkJJHVkdCA9IE1NX1RBQkxFX1VTRVJfREFUQTsKCQkKCQkkc3FsID0gIlNFTEVDVCBvaS5pZCwgbXUud3BfdXNlcl9pZCBhcyB1c2VyX2lkLCBDT05DQVQobXUuZmlyc3RfbmFtZSwnICcsbXUubGFzdF9uYW1lKSBBUyBtZW1iZXJfbmFtZSwgdS51c2VyX2VtYWlsLCAiLgoJCQkgICAib2kuZGVzY3JpcHRpb24gQVMgcHJvZHVjdCwgby5vcmRlcl9udW1iZXIsIG8uZGF0ZV9hZGRlZCwiOyAKCQkKCQkkc3FsRnJvbSA9ICAiRlJPTSB7JG9pdH0gb2kgTEVGVCBKT0lOIHskb3R9IG8gT04gKG9pLm9yZGVyX2lkID0gby5pZCkgSU5ORVIgSk9JTiAiLgoJCQkJCSIoU0VMRUNUIENPVU5UKGZvLnVzZXJfaWQpIEFTIGZyZXEgLGZvLnVzZXJfaWQsIGZvaS5pdGVtX2lkIEZST00geyRvaXR9IGZvaSBMRUZUIEpPSU4geyRvdH0gZm8gIi4KCQkJCQkiT04gKGZvaS5vcmRlcl9pZCA9IGZvLmlkKSBXSEVSRSBmb2kuaXNfcmVjdXJyaW5nPTEgQU5EIGZvaS5pdGVtX3R5cGU9JXMgQU5EIGZvaS5zdGF0dXM9JXMgIi4KCQkJCQkiR1JPVVAgQlkgZm8udXNlcl9pZCxmb2kuaXRlbV9pZCBoYXZpbmcgZnJlcSA+IDEpIEFTIGZ0IE9OICgob2kuaXRlbV9pZCA9IGZ0Lml0ZW1faWQpIEFORCAiLgoJCQkJCSIoby51c2VyX2lkID0gZnQudXNlcl9pZCkpIExFRlQgSk9JTiB7JHV0fSB1IE9OICh1LmlkID0gby51c2VyX2lkKSAgTEVGVCBKT0lOIHskdWR0fSBtdSBPTiAiLgoJCQkJCSIobXUud3BfdXNlcl9pZCA9IG8udXNlcl9pZCkgV0hFUkUgb2kuaXNfcmVjdXJyaW5nPTEgIi4KCQkJCQkiQU5EIG9pLml0ZW1fdHlwZT0lcyBBTkQgb2kuc3RhdHVzPSVzIE9SREVSIEJZIG8udXNlcl9pZCBkZXNjIjsKCQkKCQkkc3FsRnJvbSA9ICR3cGRiLT5wcmVwYXJlKCRzcWxGcm9tLE1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkcsTU1fT3JkZXJJdGVtOjokT1JERVJfSVRFTV9UWVBFX1BST0RVQ1QsTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklORyxNTV9PcmRlckl0ZW06OiRPUkRFUl9JVEVNX1RZUEVfUFJPRFVDVCk7CgkJCgkJJHNxbFJlc3VsdENvdW50ID0gInNlbGVjdCBjb3VudCgqKSBhcyB0b3RhbCAiOwoJCSRzcWxSZXN1bHRDb3VudCAuPSAkc3FsRnJvbTsKCQkkY291bnRSb3cgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsUmVzdWx0Q291bnQpOwoJCQoJCWlmKCRjb3VudFJvdy0+dG90YWwgPiAwKSAKCQl7CgkJCSRzcWwgLj0gIiB7JGNvdW50Um93LT50b3RhbH0gYXMgdG90YWwgeyRzcWxGcm9tfSI7CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gYXJyYXkoKTsKCQl9CgoJCSRzcWwgLj0gIix7JGRnLT5zb3J0Qnl9IHskZGctPnNvcnREaXJ9ICI7CgkJJHNxbCAuPSAkZGctPmdldExpbWl0U3FsKCk7CgkJCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCwgT0JKRUNUX0spOwkJCgkJcmV0dXJuIGFycmF5X3ZhbHVlcygkcm93cyk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YUdyaWQoJHBvc3Q9bnVsbCkKCXsKCQlyZXR1cm4gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9kdXBsaWNhdGVfc3Vic2NyaXB0aW9ucy5kYXRhZ3JpZC5waHAiLCAkcG9zdCk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGNhbmNlbER1cGxpY2F0ZVN1YnNjcmlwdGlvbigkcG9zdCkKCXsKCQkkb3JkZXJJdGVtID0gbmV3IE1NX09yZGVySXRlbSgkcG9zdFsnb3JkZXJJdGVtSWQnXSk7CgkJaWYgKCRvcmRlckl0ZW0tPmlzVmFsaWQoKSkKCQl7CgkJCSRvcmRlciA9IG5ldyBNTV9PcmRlcigkb3JkZXJJdGVtLT5nZXRPcmRlcklkKCkpOwoJCQlpZiAoJG9yZGVyLT5pc1ZhbGlkKCkpCgkJCXsKCQkJCSRwYXltZW50U2VydmljZSA9ICRvcmRlci0+Z2V0UGF5bWVudE1ldGhvZCgpOwoJCQkJJGNhbmNlbFJlc3VsdCA9ICRwYXltZW50U2VydmljZS0+Y2FuY2VsU3Vic2NyaXB0aW9uKCRvcmRlckl0ZW0pOwoJCQkJaWYgKE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OmlzU3VjY2VzcygkY2FuY2VsUmVzdWx0KSkKCQkJCXsKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGNhbmNlbFJlc3VsdC0+Z2V0TWVzc2FnZSgpLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQkJfQoJCQl9CgkJCWVsc2UgCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBjYW5jZWwgc3Vic2NyaXB0aW9uOiBJbnZhbGlkIE9yZGVyIixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGNhbmNlbCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiBpcyBpbnZhbGlkIixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9Cgl9CiB9Cg==', 0, '2018-11-21 06:38:53'),
(37, 'affiliateintegrationview', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(38, 'pushnotificationengine', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUHVzaE5vdGlmaWNhdGlvbkVuZ2luZQp7Cglwcml2YXRlICRhY3Rpb25zID0gbnVsbDsKCXByaXZhdGUgJHBhcmFtcyA9IGFycmF5KCk7CgkKCXB1YmxpYyBmdW5jdGlvbiBwcm9kdWN0UHVyY2hhc2UoJHBhcmFtcykKCXsKCQkkdGhpcy0+YWN0aW9ucyA9IE1NX0FjdGlvbjo6ZmluZEFjdGlvbnNCeUV2ZW50VHlwZShNTV9FdmVudDo6JFBST0RVQ1RfUFVSQ0hBU0UpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5sb2dBY3Rpdml0eShNTV9FdmVudDo6JFBST0RVQ1RfUFVSQ0hBU0UsICRwYXJhbXMpOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBtZW1iZXJBZGRlZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokTUVNQkVSX0FERCk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokTUVNQkVSX0FERCwgJHBhcmFtcyk7CgkJJHRoaXMtPnBlcmZvcm1BY3Rpb25zKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBtZW1iZXJTdGF0dXNDaGFuZ2VkKCRwYXJhbXMpCgl7CgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRNRU1CRVJfU1RBVFVTX0NIQU5HRSk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokTUVNQkVSX1NUQVRVU19DSEFOR0UsICRwYXJhbXMpOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gbWVtYmVyTWVtYmVyc2hpcENoYW5nZWQoJHBhcmFtcykKCXsKCQkkdGhpcy0+YWN0aW9ucyA9IE1NX0FjdGlvbjo6ZmluZEFjdGlvbnNCeUV2ZW50VHlwZShNTV9FdmVudDo6JE1FTUJFUl9NRU1CRVJTSElQX0NIQU5HRSk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokTUVNQkVSX01FTUJFUlNISVBfQ0hBTkdFLCAkcGFyYW1zKTsKCQkkdGhpcy0+cGVyZm9ybUFjdGlvbnMoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIG1lbWJlckFjY291bnRVcGRhdGVkKCRwYXJhbXMpCgl7CgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRNRU1CRVJfQUNDT1VOVF9VUERBVEUpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gbWVtYmVyRGVsZXRlZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokTUVNQkVSX0RFTEVURSk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPnBlcmZvcm1BY3Rpb25zKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBidW5kbGVBZGRlZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokQlVORExFX0FERCk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokQlVORExFX0FERCwgJHBhcmFtcyk7CgkJJHRoaXMtPnBlcmZvcm1BY3Rpb25zKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBidW5kbGVTdGF0dXNDaGFuZ2VkKCRwYXJhbXMpCgl7CgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRCVU5ETEVfU1RBVFVTX0NIQU5HRSk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokQlVORExFX1NUQVRVU19DSEFOR0UsICRwYXJhbXMpOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcGF5bWVudFJlY2VpdmVkKCRwYXJhbXMpCgl7CgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRQQVlNRU5UX1JFQ0VJVkVEKTsKCQkkdGhpcy0+cGFyYW1zID0gJHBhcmFtczsKCQkkdGhpcy0+bG9nQWN0aXZpdHkoTU1fRXZlbnQ6OiRQQVlNRU5UX1JFQ0VJVkVELCAkcGFyYW1zKTsKCQkkdGhpcy0+cGVyZm9ybUFjdGlvbnMoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlYmlsbFBheW1lbnRSZWNlaXZlZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokUEFZTUVOVF9SRUJJTEwpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5sb2dBY3Rpdml0eShNTV9FdmVudDo6JFBBWU1FTlRfUkVCSUxMLCAkcGFyYW1zKTsKCQkkdGhpcy0+cGVyZm9ybUFjdGlvbnMoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlYmlsbFBheW1lbnREZWNsaW5lZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokUEFZTUVOVF9SRUJJTExfREVDTElORUQpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5sb2dBY3Rpdml0eShNTV9FdmVudDo6JFBBWU1FTlRfUkVCSUxMX0RFQ0xJTkVELCAkcGFyYW1zKTsKCQkkdGhpcy0+cGVyZm9ybUFjdGlvbnMoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGJpbGxpbmdTdWJzY3JpcHRpb25VcGRhdGVkKCRwYXJhbXMpCgl7CgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9VUERBVEVEKTsKCQkkdGhpcy0+cGFyYW1zID0gJHBhcmFtczsKCQkkdGhpcy0+bG9nQWN0aXZpdHkoTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9VUERBVEVELCAkcGFyYW1zKTsKCQkkdGhpcy0+cGVyZm9ybUFjdGlvbnMoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGJpbGxpbmdTdWJzY3JpcHRpb25SZWJpbGxEYXRlQ2hhbmdlZCgkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokQklMTElOR19TVUJTQ1JJUFRJT05fUkVCSUxMX0RBVEVfQ0hBTkdFRCk7CgkJJHRoaXMtPnBhcmFtcyA9ICRwYXJhbXM7CgkJJHRoaXMtPmxvZ0FjdGl2aXR5KE1NX0V2ZW50OjokQklMTElOR19TVUJTQ1JJUFRJT05fUkVCSUxMX0RBVEVfQ0hBTkdFRCwgJHBhcmFtcyk7CgkJJHRoaXMtPnBlcmZvcm1BY3Rpb25zKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBiaWxsaW5nU3Vic2NyaXB0aW9uQ2FuY2VsZWQoJHBhcmFtcykKCXsKCQkkdGhpcy0+YWN0aW9ucyA9IE1NX0FjdGlvbjo6ZmluZEFjdGlvbnNCeUV2ZW50VHlwZShNTV9FdmVudDo6JEJJTExJTkdfU1VCU0NSSVBUSU9OX0NBTkNFTEVEKTsKCQkkdGhpcy0+cGFyYW1zID0gJHBhcmFtczsKCQkkdGhpcy0+bG9nQWN0aXZpdHkoTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9DQU5DRUxFRCwgJHBhcmFtcyk7CgkJJHRoaXMtPnBlcmZvcm1BY3Rpb25zKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiByZWZ1bmRJc3N1ZWQoJHBhcmFtcykKCXsKCQkkdGhpcy0+YWN0aW9ucyA9IE1NX0FjdGlvbjo6ZmluZEFjdGlvbnNCeUV2ZW50VHlwZShNTV9FdmVudDo6JFJFRlVORF9JU1NVRUQpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5sb2dBY3Rpdml0eShNTV9FdmVudDo6JFJFRlVORF9JU1NVRUQsICRwYXJhbXMpOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gYWZmaWxpYXRlSW5mb0NoYW5nZWQoJHBhcmFtcykKCXsKCQkkdGhpcy0+YWN0aW9ucyA9IE1NX0FjdGlvbjo6ZmluZEFjdGlvbnNCeUV2ZW50VHlwZShNTV9FdmVudDo6JEFGRklMSUFURV9JTkZPX0NIQU5HRUQpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5sb2dBY3Rpdml0eShNTV9FdmVudDo6JEFGRklMSUFURV9JTkZPX0NIQU5HRUQsICRwYXJhbXMpOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gaW5pdGlhbENvbW1pc3Npb24oJHBhcmFtcykKCXsJCgkJJHRoaXMtPmFjdGlvbnMgPSBNTV9BY3Rpb246OmZpbmRBY3Rpb25zQnlFdmVudFR5cGUoTU1fRXZlbnQ6OiRDT01NSVNTSU9OX0lOSVRJQUwpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcmViaWxsQ29tbWlzc2lvbigkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokQ09NTUlTU0lPTl9SRUJJTEwpOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gY2FuY2VsQ29tbWlzc2lvbigkcGFyYW1zKQoJewoJCSR0aGlzLT5hY3Rpb25zID0gTU1fQWN0aW9uOjpmaW5kQWN0aW9uc0J5RXZlbnRUeXBlKE1NX0V2ZW50OjokQ0FOQ0VMX0NPTU1JU1NJT04pOwoJCSR0aGlzLT5wYXJhbXMgPSAkcGFyYW1zOwoJCSR0aGlzLT5wZXJmb3JtQWN0aW9ucygpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGxvZ0FjdGl2aXR5KCRldmVudFR5cGUsICRwYXJhbXMpCgl7CgkJaWYoaXNzZXQoJHBhcmFtc1sibWVtYmVyX2lkIl0pKQoJCXsKCQkJJGxvZ1BhcmFtcyA9IGFycmF5KCk7CgkJCQoJCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCRwYXJhbXNbIm1lbWJlcl9pZCJdKTsKCQkJCgkJCWlmKCR1c2VyLT5pc1ZhbGlkKCkpCgkJCXsKCQkJCXN3aXRjaCgkZXZlbnRUeXBlKQoJCQkJewoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRNRU1CRVJfQUREOgoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQUNDRVNTX0VWRU5UXSA9ICRldmVudFR5cGU7CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfSURdID0gJHBhcmFtc1sibWVtYmVyc2hpcF9sZXZlbCJdOwoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQUNDRVNTX0lTX0NPTVBMSU1FTlRBUlldID0gJHBhcmFtc1siaXNfY29tcGxpbWVudGFyeSJdOwoJCQkJCQlNTV9BY3Rpdml0eUxvZzo6bG9nKCR1c2VyLCBNTV9BY3Rpdml0eUxvZzo6JEVWRU5UX1RZUEVfQUNDRVNTX1JJR0hUUywgJGxvZ1BhcmFtcyk7CgkJCQkJCWJyZWFrOwoJCQkJCQkKCQkJCQljYXNlIE1NX0V2ZW50OjokTUVNQkVSX1NUQVRVU19DSEFOR0U6CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfRVZFTlRdID0gJGV2ZW50VHlwZTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19JRF0gPSAkcGFyYW1zWyJtZW1iZXJzaGlwX2xldmVsIl07CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfSVNfQ09NUExJTUVOVEFSWV0gPSAkcGFyYW1zWyJpc19jb21wbGltZW50YXJ5Il07CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfU1RBVFVTXSA9ICRwYXJhbXNbInN0YXR1cyJdOwoJCQkJCQkKCQkJCQkJaWYoJHBhcmFtc1sic3RhdHVzIl0gPT0gTU1fU3RhdHVzOjokRVJST1IpCgkJCQkJCXsKCQkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfU1RBVFVTX01FU1NBR0VdID0gJHVzZXItPmdldFN0YXR1c01lc3NhZ2UoKTsKCQkJCQkJfQoJCQkJCQkKCQkJCQkJTU1fQWN0aXZpdHlMb2c6OmxvZygkdXNlciwgTU1fQWN0aXZpdHlMb2c6OiRFVkVOVF9UWVBFX0FDQ0VTU19SSUdIVFMsICRsb2dQYXJhbXMpOwoJCQkJCQlicmVhazsKCQkJCQkJCgkJCQkJY2FzZSBNTV9FdmVudDo6JE1FTUJFUl9NRU1CRVJTSElQX0NIQU5HRToKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19FVkVOVF0gPSAkZXZlbnRUeXBlOwoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQUNDRVNTX0lEXSA9ICRwYXJhbXNbIm1lbWJlcnNoaXBfbGV2ZWwiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19JU19DT01QTElNRU5UQVJZXSA9ICRwYXJhbXNbImlzX2NvbXBsaW1lbnRhcnkiXTsKCQkJCQkJTU1fQWN0aXZpdHlMb2c6OmxvZygkdXNlciwgTU1fQWN0aXZpdHlMb2c6OiRFVkVOVF9UWVBFX0FDQ0VTU19SSUdIVFMsICRsb2dQYXJhbXMpOwoJCQkJCQlicmVhazsKCQkJCQkJCgkJCQkJY2FzZSBNTV9FdmVudDo6JEJVTkRMRV9BREQ6CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9BQ0NFU1NfRVZFTlRdID0gJGV2ZW50VHlwZTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19JRF0gPSAkcGFyYW1zWyJidW5kbGVfaWQiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19JU19DT01QTElNRU5UQVJZXSA9ICRwYXJhbXNbImJ1bmRsZV9pc19jb21wbGltZW50YXJ5Il07CgkJCQkJCU1NX0FjdGl2aXR5TG9nOjpsb2coJHVzZXIsIE1NX0FjdGl2aXR5TG9nOjokRVZFTlRfVFlQRV9BQ0NFU1NfUklHSFRTLCAkbG9nUGFyYW1zKTsKCQkJCQkJYnJlYWs7CgkJCQkJCQoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRCVU5ETEVfU1RBVFVTX0NIQU5HRToKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19FVkVOVF0gPSAkZXZlbnRUeXBlOwoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQUNDRVNTX0lEXSA9ICRwYXJhbXNbImJ1bmRsZV9pZCJdOwoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQUNDRVNTX0lTX0NPTVBMSU1FTlRBUlldID0gJHBhcmFtc1siYnVuZGxlX2lzX2NvbXBsaW1lbnRhcnkiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FDQ0VTU19TVEFUVVNdID0gJHBhcmFtc1siYnVuZGxlX3N0YXR1cyJdOwoJCQkJCQlNTV9BY3Rpdml0eUxvZzo6bG9nKCR1c2VyLCBNTV9BY3Rpdml0eUxvZzo6JEVWRU5UX1RZUEVfQUNDRVNTX1JJR0hUUywgJGxvZ1BhcmFtcyk7CgkJCQkJCWJyZWFrOwoJCQkJCQkKCQkJCQljYXNlIE1NX0V2ZW50OjokUEFZTUVOVF9SRUNFSVZFRDoKCQkJCQljYXNlIE1NX0V2ZW50OjokUEFZTUVOVF9SRUJJTEw6CgkJCQkJY2FzZSBNTV9FdmVudDo6JFBBWU1FTlRfUkVCSUxMX0RFQ0xJTkVEOgoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRSRUZVTkRfSVNTVUVEOgoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9VUERBVEVEOgoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9SRUJJTExfREFURV9DSEFOR0VEOgoJCQkJCWNhc2UgTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9DQU5DRUxFRDoKCQkJCQljYXNlIE1NX0V2ZW50OjokQUZGSUxJQVRFX0lORk9fQ0hBTkdFRDogCgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9CSUxMSU5HX0VWRU5UXSA9ICRldmVudFR5cGU7CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9CSUxMSU5HX09SREVSX0lEXSA9ICRwYXJhbXNbIm9yZGVyX2lkIl07CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9CSUxMSU5HX09SREVSX05VTUJFUl0gPSAkcGFyYW1zWyJvcmRlcl9udW1iZXIiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfT1JERVJfVE9UQUxdID0gJHBhcmFtc1sib3JkZXJfdG90YWwiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfT1JERVJfRElTQ09VTlRdID0gJHBhcmFtc1sib3JkZXJfZGlzY291bnQiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfT1JERVJfSVBfQUREUkVTU10gPSAkcGFyYW1zWyJvcmRlcl9pcF9hZGRyZXNzIl07CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9CSUxMSU5HX09SREVSX1BST0RVQ1RTXSA9ICRwYXJhbXNbIm9yZGVyX3Byb2R1Y3RzIl07CgkJCQkJCSRsb2dQYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9CSUxMSU5HX09SREVSX0NPVVBPTlNdID0gJHBhcmFtc1sib3JkZXJfY291cG9ucyJdOwoJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQklMTElOR19PUkRFUl9QUk9SQVRJT05TXSA9ICRwYXJhbXNbIm9yZGVyX3Byb3JhdGlvbnMiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfT1JERVJfQUZGRklMSUFURV9JRF0gPSAkcGFyYW1zWyJvcmRlcl9hZmZpbGlhdGVfaWQiXTsKCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfT1JERVJfU1VCQUZGRklMSUFURV9JRF0gPSAkcGFyYW1zWyJvcmRlcl9zdWJhZmZpbGlhdGVfaWQiXTsKCQkJCQkJCgkJCQkJCWdsb2JhbCAkd3BkYjsKCQkJCQkJCQoJCQkJCQkkc3FsID0gJHdwZGItPnByZXBhcmUoIlNFTEVDVCBwYXltZW50X2lkIEZST00gIi5NTV9UQUJMRV9PUkRFUlMuIiBXSEVSRSBpZCA9ICVzIExJTUlUIDEiLCRwYXJhbXNbIm9yZGVyX2lkIl0pOwoJCQkJCQkkcHltdFNlcnZpY2VJZCA9ICR3cGRiLT5nZXRfdmFyKCRzcWwpOwoJCQkJCQkJCgkJCQkJCWlmICgkcHltdFNlcnZpY2VJZCAhPT0gZmFsc2UpCgkJCQkJCXsKCQkJCQkJCSRweW10U2VydmljZSA9IE1NX1BheW1lbnRTZXJ2aWNlRmFjdG9yeTo6Z2V0UGF5bWVudFNlcnZpY2VCeUlkKCRweW10U2VydmljZUlkKTsKCQkJCQkJCQkgCgkJCQkJCQlpZighaXNfbnVsbCgkcHltdFNlcnZpY2UpICYmICEkcHltdFNlcnZpY2UtPnN1cHBvcnRzRmVhdHVyZShNTV9QYXltZW50U2VydmljZUZlYXR1cmVzOjpNT0RJRllfUkVCSUxMX0RBVEUpKQoJCQkJCQkJeyAKCQkJCQkJCQkkbG9nUGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fQklMTElOR19PUkRFUl9UT1RBTF0gPSAiU2VlICIuJHB5bXRTZXJ2aWNlLT5nZXROYW1lKCkuIiBmb3IgZGV0YWlscy4gIjsKCQkJCQkJCX0gIAoJCQkJCQl9CgkJCQkJCQoJCQkJCQkvLyBnZXQgY3VycmVudCByZWJpbGwgZGF0ZSBmb3IgJ3JlYmlsbCBkYXRlIGNoYW5nZWQnIGV2ZW50CgkJCQkJCWlmKCRldmVudFR5cGUgPT0gTU1fRXZlbnQ6OiRCSUxMSU5HX1NVQlNDUklQVElPTl9SRUJJTExfREFURV9DSEFOR0VEICYmICFlbXB0eSgkcGFyYW1zWyJvcmRlcl9pdGVtX2lkIl0pKQoJCQkJCQl7CgkJCQkJCQkkb3JkZXJJdGVtID0gbmV3IE1NX09yZGVySXRlbSgkcGFyYW1zWyJvcmRlcl9pdGVtX2lkIl0pOwoJCQkJCQkJCgkJCQkJCQlpZigkb3JkZXJJdGVtLT5pc1ZhbGlkKCkpCgkJCQkJCQl7CgkJCQkJCQkJJHNjaGVkdWxlZFBheW1lbnRFdmVudCA9IE1NX1NjaGVkdWxlZFBheW1lbnRFdmVudDo6ZmluZE5leHRTY2hlZHVsZWRFdmVudEJ5T3JkZXJJdGVtSWQoJG9yZGVySXRlbS0+Z2V0SWQoKSk7CgkJCQkJCQkJaWYgKCRzY2hlZHVsZWRQYXltZW50RXZlbnQtPmlzVmFsaWQoKSkKCQkJCQkJCQl7CgkJCQkJCQkJCSRjcm50UmViaWxsRGF0ZSA9IGRhdGUoIk0gZCwgWSIsIHN0cnRvdGltZSgkc2NoZWR1bGVkUGF5bWVudEV2ZW50LT5nZXRTY2hlZHVsZWREYXRlKCkpKTsKCQkJCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0JJTExJTkdfTkVYVF9SRUJJTExfREFURV0gPSAkY3JudFJlYmlsbERhdGU7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCQoJCQkJCQlpZigkZXZlbnRUeXBlID09IE1NX0V2ZW50OjokQUZGSUxJQVRFX0lORk9fQ0hBTkdFRCkKCQkJCQkJewoJCQkJCQkJJGxvZ1BhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0FGRklMSUFURV9UUkFDS0lOR19FVkVOVF0gPSAkZXZlbnRUeXBlOwoJCQkJCQkJTU1fQWN0aXZpdHlMb2c6OmxvZygkdXNlciwgTU1fQWN0aXZpdHlMb2c6OiRFVkVOVF9UWVBFX0FGRklMSUFURV9UUkFDS0lORywgJGxvZ1BhcmFtcyk7CgkJCQkJCX0KCQkJCQkJZWxzZSAKCQkJCQkJewoJCQkJCQkJTU1fQWN0aXZpdHlMb2c6OmxvZygkdXNlciwgTU1fQWN0aXZpdHlMb2c6OiRFVkVOVF9UWVBFX0JJTExJTkcsICRsb2dQYXJhbXMpOwoJCQkJCQl9CgkJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJfQoJfSAKCQoJCglwcml2YXRlIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb25zKCkKCXsKCQlpZihpc19hcnJheSgkdGhpcy0+YWN0aW9ucykpCgkJewoJCQlmb3JlYWNoKCR0aGlzLT5hY3Rpb25zIGFzICRhY3Rpb24pCgkJCXsKCQkJCWlmKCRhY3Rpb24tPmlzVmFsaWQoKSAmJiAkYWN0aW9uLT5pc0FjdGl2ZSgpKQoJCQkJewkKCQkJCQkvLyBjaGVjayBhY3Rpb24gYXR0cmlidXRlcwoJCQkJCSRkb0NvbnRpbnVlID0gdHJ1ZTsKCQkJCQkKCQkJCQlzd2l0Y2goJGFjdGlvbi0+Z2V0RXZlbnRUeXBlKCkpCgkJCQkJewoJCQkJCQljYXNlIE1NX0V2ZW50OjokUFJPRFVDVF9QVVJDSEFTRToKCQkJCQkJCSRldmVudEF0dHJpYnV0ZXMgPSAkYWN0aW9uLT5nZXRFdmVudEF0dHJpYnV0ZXMoKTsKCQkJCQkJCWlmKGlzX2FycmF5KCRldmVudEF0dHJpYnV0ZXMpICYmIGlzc2V0KCRldmVudEF0dHJpYnV0ZXNbInByb2R1Y3RfaWQiXSkpCgkJCQkJCQl7CgkJCQkJCQkJaWYoaXNzZXQoJGV2ZW50QXR0cmlidXRlc1sicHJvZHVjdF9pZCJdKSkKCQkJCQkJCQl7CgkJCQkJCQkJCSRwcm9kdWN0SWQgPSAkZXZlbnRBdHRyaWJ1dGVzWyJwcm9kdWN0X2lkIl07ICAKCQkJCQkJCQkJaWYoaW50dmFsKCRwcm9kdWN0SWQpID4gMCAmJiBpbnR2YWwoJHByb2R1Y3RJZCkgIT0gaW50dmFsKCR0aGlzLT5wYXJhbXNbInByb2R1Y3RfaWQiXSkpCgkJCQkJCQkJCXsgCgkJCQkJCQkJCQkkZG9Db250aW51ZSA9IGZhbHNlOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQkJYnJlYWs7CgkJCQkJCQkKCQkJCQkJLy8gZm9yIHRoZSBtZW1iZXIgYWRkZWQgZXZlbnQsIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBtZW1iZXJzaGlwIGxldmVsIG9mIHRoZSBtZW1iZXIKCQkJCQkJLy8gZXF1YWxzIHRoZSBwdXNoIG5vdGlmaWNhdGlvbiBjb25maWd1cmF0aW9uCgkJCQkJCWNhc2UgTU1fRXZlbnQ6OiRNRU1CRVJfQUREOgoJCQkJCQkJJGV2ZW50QXR0cmlidXRlcyA9ICRhY3Rpb24tPmdldEV2ZW50QXR0cmlidXRlcygpOwoJCQkJCQkJaWYoaXNfYXJyYXkoJGV2ZW50QXR0cmlidXRlcykgJiYgaXNzZXQoJGV2ZW50QXR0cmlidXRlc1sibWVtYmVyc2hpcF9sZXZlbF9pZCJdKSkKCQkJCQkJCXsKCQkJCQkJCQkkbWVtYmVyc2hpcExldmVsSWQgPSAkZXZlbnRBdHRyaWJ1dGVzWyJtZW1iZXJzaGlwX2xldmVsX2lkIl07CgkJCQkJCQkJaWYoaW50dmFsKCRtZW1iZXJzaGlwTGV2ZWxJZCkgPiAwICYmIGludHZhbCgkbWVtYmVyc2hpcExldmVsSWQpICE9IGludHZhbCgkdGhpcy0+cGFyYW1zWyJtZW1iZXJzaGlwX2xldmVsIl0pKQoJCQkJCQkJCXsKCQkJCQkJCQkJJGRvQ29udGludWUgPSBmYWxzZTsKCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJCQoJCQkJCQkvLyBmb3IgdGhlIG1lbWJlcnNoaXAgbGV2ZWwgc3RhdHVzIGNoYW5nZSBldmVudCwgY2hlY2sgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIG1lbWJlcnNoaXAgbGV2ZWwgCgkJCQkJCS8vIGFuZCB0aGUgc3RhdHVzIG9mIHRoZSBtZW1iZXJzaGlwIGxldmVsIGVxdWFscyB0aGUgcHVzaCBub3RpZmljYXRpb24gY29uZmlndXJhdGlvbgoJCQkJCQljYXNlIE1NX0V2ZW50OjokTUVNQkVSX1NUQVRVU19DSEFOR0U6CgkJCQkJCQkkZXZlbnRBdHRyaWJ1dGVzID0gJGFjdGlvbi0+Z2V0RXZlbnRBdHRyaWJ1dGVzKCk7CgkJCQkJCQlpZihpc19hcnJheSgkZXZlbnRBdHRyaWJ1dGVzKSkKCQkJCQkJCXsKCQkJCQkJCQlpZihpc3NldCgkZXZlbnRBdHRyaWJ1dGVzWyJtZW1iZXJzaGlwX2xldmVsX2lkIl0pIHx8IGlzc2V0KCRldmVudEF0dHJpYnV0ZXNbInN0YXR1c19pZCJdKSkKCQkJCQkJCQl7CgkJCQkJCQkJCWlmKGlzc2V0KCRldmVudEF0dHJpYnV0ZXNbIm1lbWJlcnNoaXBfbGV2ZWxfaWQiXSkpCgkJCQkJCQkJCXsKCQkJCQkJCQkJCSRtZW1iZXJzaGlwTGV2ZWxJZCA9ICRldmVudEF0dHJpYnV0ZXNbIm1lbWJlcnNoaXBfbGV2ZWxfaWQiXTsKCQkJCQkJCQkJCWlmKGludHZhbCgkbWVtYmVyc2hpcExldmVsSWQpID4gMCAmJiBpbnR2YWwoJG1lbWJlcnNoaXBMZXZlbElkKSAhPSBpbnR2YWwoJHRoaXMtPnBhcmFtc1sibWVtYmVyc2hpcF9sZXZlbCJdKSkKCQkJCQkJCQkJCXsKCQkJCQkJCQkJCQkkZG9Db250aW51ZSA9IGZhbHNlOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQl9CgkJCQkJCQkJCQkKCQkJCQkJCQkJaWYoaXNzZXQoJGV2ZW50QXR0cmlidXRlc1sic3RhdHVzX2lkIl0pKQoJCQkJCQkJCQl7CgkJCQkJCQkJCQkkc3RhdHVzSWQgPSAkZXZlbnRBdHRyaWJ1dGVzWyJzdGF0dXNfaWQiXTsKCQkJCQkJCQkJCWlmKGludHZhbCgkc3RhdHVzSWQpID4gMCAmJiBpbnR2YWwoJHN0YXR1c0lkKSAhPSBpbnR2YWwoJHRoaXMtPnBhcmFtc1sic3RhdHVzIl0pKQoJCQkJCQkJCQkJewoJCQkJCQkJCQkJCSRkb0NvbnRpbnVlID0gZmFsc2U7CgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJCQoJCQkJCQkvLyBmb3IgdGhlIGJ1bmRsZSBhZGRlZCBldmVudCwgY2hlY2sgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1bmRsZSBiZWluZyBhZGRlZCAKCQkJCQkJLy8gZXF1YWxzIHRoZSBwdXNoIG5vdGlmaWNhdGlvbiBjb25maWd1cmF0aW9uCgkJCQkJCWNhc2UgTU1fRXZlbnQ6OiRCVU5ETEVfQUREOgoJCQkJCQkJJGV2ZW50QXR0cmlidXRlcyA9ICRhY3Rpb24tPmdldEV2ZW50QXR0cmlidXRlcygpOwoJCQkJCQkJaWYoaXNfYXJyYXkoJGV2ZW50QXR0cmlidXRlcykgJiYgaXNzZXQoJGV2ZW50QXR0cmlidXRlc1siYnVuZGxlX2lkIl0pKQoJCQkJCQkJewoJCQkJCQkJCSRidW5kbGVJZCA9ICRldmVudEF0dHJpYnV0ZXNbImJ1bmRsZV9pZCJdOwoJCQkJCQkJCWlmKGludHZhbCgkYnVuZGxlSWQpID4gMCAmJiBpbnR2YWwoJGJ1bmRsZUlkKSAhPSBpbnR2YWwoJHRoaXMtPnBhcmFtc1siYnVuZGxlX2lkIl0pKQoJCQkJCQkJCXsKCQkJCQkJCQkJJGRvQ29udGludWUgPSBmYWxzZTsKCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQkJCQkKCQkJCQkJLy8gZm9yIHRoZSBidW5kbGUgc3RhdHVzIGNoYW5nZSBldmVudCwgY2hlY2sgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1bmRsZSBhbmQgdGhlIHN0YXR1cyAKCQkJCQkJLy8gb2YgdGhlIGJ1bmRsZSBlcXVhbHMgdGhlIHB1c2ggbm90aWZpY2F0aW9uIGNvbmZpZ3VyYXRpb24KCQkJCQkJY2FzZSBNTV9FdmVudDo6JEJVTkRMRV9TVEFUVVNfQ0hBTkdFOgoJCQkJCQkJJGV2ZW50QXR0cmlidXRlcyA9ICRhY3Rpb24tPmdldEV2ZW50QXR0cmlidXRlcygpOwoJCQkJCQkJaWYoaXNfYXJyYXkoJGV2ZW50QXR0cmlidXRlcykpCgkJCQkJCQl7CgkJCQkJCQkJaWYoaXNzZXQoJGV2ZW50QXR0cmlidXRlc1siYnVuZGxlX2lkIl0pIHx8IGlzc2V0KCRldmVudEF0dHJpYnV0ZXNbInN0YXR1c19pZCJdKSkKCQkJCQkJCQl7CgkJCQkJCQkJCWlmKGlzc2V0KCRldmVudEF0dHJpYnV0ZXNbImJ1bmRsZV9pZCJdKSkKCQkJCQkJCQkJewoJCQkJCQkJCQkJJGJ1bmRsZUlkID0gJGV2ZW50QXR0cmlidXRlc1siYnVuZGxlX2lkIl07CgkJCQkJCQkJCQlpZihpbnR2YWwoJGJ1bmRsZUlkKSA+IDAgJiYgaW50dmFsKCRidW5kbGVJZCkgIT0gaW50dmFsKCR0aGlzLT5wYXJhbXNbImJ1bmRsZV9pZCJdKSkKCQkJCQkJCQkJCXsKCQkJCQkJCQkJCQkkZG9Db250aW51ZSA9IGZhbHNlOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQl9CgkJCQkJCQkJCQoJCQkJCQkJCQlpZihpc3NldCgkZXZlbnRBdHRyaWJ1dGVzWyJzdGF0dXNfaWQiXSkpCgkJCQkJCQkJCXsKCQkJCQkJCQkJCSRzdGF0dXNJZCA9ICRldmVudEF0dHJpYnV0ZXNbInN0YXR1c19pZCJdOwoJCQkJCQkJCQkJaWYoaW50dmFsKCRzdGF0dXNJZCkgPiAwICYmIGludHZhbCgkc3RhdHVzSWQpICE9IGludHZhbCgkdGhpcy0+cGFyYW1zWyJidW5kbGVfc3RhdHVzIl0pKQoJCQkJCQkJCQkJewoJCQkJCQkJCQkJCSRkb0NvbnRpbnVlID0gZmFsc2U7CgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCQlicmVhazsKCQkJCQl9CgkJCQkJCgkJCQkJaWYoJGRvQ29udGludWUpCgkJCQkJewoJCQkJCQlzd2l0Y2goJGFjdGlvbi0+Z2V0QWN0aW9uVHlwZSgpKQoJCQkJCQl7CgkJCQkJCQljYXNlIE1NX0FjdGlvbjo6JE1NX0FDVElPTl9TRU5EX0VNQUlMOgoJCQkJCQkJCSR0aGlzLT5hY3Rpb25fc2VuZEVtYWlsKCRhY3Rpb24pOwoJCQkJCQkJCWJyZWFrOwoJCQkJCQkJCQoJCQkJCQkJY2FzZSBNTV9BY3Rpb246OiRNTV9BQ1RJT05fTk9USUZZX1pBUElFUjoKCQkJCQkJCQkkdGhpcy0+YWN0aW9uX25vdGlmeVphcGllcigkYWN0aW9uKTsKCQkJCQkJCQlicmVhazsKCQkJCQoJCQkJCQkJY2FzZSBNTV9BY3Rpb246OiRNTV9BQ1RJT05fQ0FMTF9TQ1JJUFQ6CgkJCQkJCQkJJHRoaXMtPmFjdGlvbl9jYWxsU2NyaXB0VXJsKCRhY3Rpb24pOwoJCQkJCQkJCWJyZWFrOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGFjdGlvbl9zZW5kRW1haWwoJGFjdGlvbikKCXsKCQkkZG9TZW5kRW1haWwgPSBmYWxzZTsKCQkKCQlzd2l0Y2goJGFjdGlvbi0+Z2V0RXZlbnRUeXBlKCkpCgkJewoJCQljYXNlIE1NX0V2ZW50OjokUFJPRFVDVF9QVVJDSEFTRTogIAoJCQkJJGFjdGlvblZhbHVlID0gJGFjdGlvbi0+Z2V0QWN0aW9uVmFsdWUoKTsgIAoJCQkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdGhpcy0+cGFyYW1zWyJtZW1iZXJfaWQiXSk7CgkJCQkkZnJvbUVtcGxveWVlID0gbmV3IE1NX0VtcGxveWVlKCRhY3Rpb25WYWx1ZVsiZW1haWxGcm9tSWQiXSk7CgkJCQkkY29udGV4dCA9IG5ldyBNTV9Db250ZXh0KCR1c2VyLCAkZnJvbUVtcGxveWVlKTsKCQkJCSRjb250ZXh0LT5zZXRQcm9kdWN0KG5ldyBNTV9Qcm9kdWN0KCR0aGlzLT5wYXJhbXNbInByb2R1Y3RfaWQiXSkpOwoJCQkJJGNvbnRleHQtPnNldE9yZGVyKG5ldyBNTV9PcmRlcigkdGhpcy0+cGFyYW1zWyJvcmRlcl9pZCJdKSk7CgkJCQkkZG9TZW5kRW1haWwgPSB0cnVlOwoJCQkJYnJlYWs7CgkJCWNhc2UgTU1fRXZlbnQ6OiRNRU1CRVJfQUREOgoJCQljYXNlIE1NX0V2ZW50OjokTUVNQkVSX0FDQ09VTlRfVVBEQVRFOgoJCQljYXNlIE1NX0V2ZW50OjokTUVNQkVSX0RFTEVURToKCQkJY2FzZSBNTV9FdmVudDo6JE1FTUJFUl9NRU1CRVJTSElQX0NIQU5HRToKCQkJY2FzZSBNTV9FdmVudDo6JE1FTUJFUl9TVEFUVVNfQ0hBTkdFOgoJCQljYXNlIE1NX0V2ZW50OjokQlVORExFX0FERDoKCQkJY2FzZSBNTV9FdmVudDo6JEJVTkRMRV9TVEFUVVNfQ0hBTkdFOgoJCQkJJGFjdGlvblZhbHVlID0gJGFjdGlvbi0+Z2V0QWN0aW9uVmFsdWUoKTsKCQkJCSR1c2VyID0gbmV3IE1NX1VzZXIoJHRoaXMtPnBhcmFtc1sibWVtYmVyX2lkIl0pOwoJCQkJJGZyb21FbXBsb3llZSA9IG5ldyBNTV9FbXBsb3llZSgkYWN0aW9uVmFsdWVbImVtYWlsRnJvbUlkIl0pOwoJCQkJJGNvbnRleHQgPSBuZXcgTU1fQ29udGV4dCgkdXNlciwgJGZyb21FbXBsb3llZSk7CgkJCQkkZG9TZW5kRW1haWwgPSB0cnVlOwoJCQkJYnJlYWs7CgkJCQkKCQkJY2FzZSBNTV9FdmVudDo6JFBBWU1FTlRfUkVDRUlWRUQ6CgkJCWNhc2UgTU1fRXZlbnQ6OiRQQVlNRU5UX1JFQklMTDoKCQkJY2FzZSBNTV9FdmVudDo6JFBBWU1FTlRfUkVCSUxMX0RFQ0xJTkVEOgoJCQljYXNlIE1NX0V2ZW50OjokUkVGVU5EX0lTU1VFRDoKCQkJY2FzZSBNTV9FdmVudDo6JENPTU1JU1NJT05fSU5JVElBTDoKCQkJY2FzZSBNTV9FdmVudDo6JENPTU1JU1NJT05fUkVCSUxMOgoJCQljYXNlIE1NX0V2ZW50OjokQ0FOQ0VMX0NPTU1JU1NJT046CgkJCQkkYWN0aW9uVmFsdWUgPSAkYWN0aW9uLT5nZXRBY3Rpb25WYWx1ZSgpOwoJCQkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdGhpcy0+cGFyYW1zWyJtZW1iZXJfaWQiXSk7CgkJCQkkb3JkZXIgPSBuZXcgTU1fT3JkZXIoJHRoaXMtPnBhcmFtc1sib3JkZXJfaWQiXSk7CgkJCQkkZnJvbUVtcGxveWVlID0gbmV3IE1NX0VtcGxveWVlKCRhY3Rpb25WYWx1ZVsiZW1haWxGcm9tSWQiXSk7CgkJCQkkY29udGV4dCA9IG5ldyBNTV9Db250ZXh0KCR1c2VyLCAkZnJvbUVtcGxveWVlLCAkb3JkZXIpOwoJCQkJCgkJCQlpZigkYWN0aW9uLT5nZXRFdmVudFR5cGUoKSA9PSBNTV9FdmVudDo6JFBBWU1FTlRfUkVCSUxMIHx8ICRhY3Rpb24tPmdldEV2ZW50VHlwZSgpID09IE1NX0V2ZW50OjokUEFZTUVOVF9SRUJJTExfREVDTElORUQpCgkJCQl7CgkJCQkJJG9yZGVyQXR0cmlidXRlcyA9IGFycmF5KCJpc19yZWJpbGwiPT50cnVlKTsKCQkJCX0KCQkJCWVsc2UgCgkJCQl7CgkJCQkJJG9yZGVyQXR0cmlidXRlcyA9IGFycmF5KCJpc19yZWJpbGwiPT5mYWxzZSk7CgkJCQl9CgkJCQkKCQkJCS8vIElmIGEgdHJhbnNhY3Rpb24gaWQgZXhpc3RzIGluIHRoZSBwYXJhbWV0ZXIgbGlzdCwgdGhlbiBzdHVmZiBpdCBpbnRvIHRoZSBvcmRlciBhdHRyaWJ1dGVzLgoJCQkJLy8gVGhpcyB3YXkgd2hlbiB3ZSBkbyB0aGUgc21hcnQgdGFnIHByb2Nlc3NpbmcsIHdlIGFyZSBzdXJlIHRvIHBvaW50IHRvIHRoZSBjb3JyZWN0CgkJCQkvLyBhbW91bnQgZm9yICd0b3RhbCcuCgkJCQlpZihpc3NldCgkdGhpcy0+cGFyYW1zWyJvcmRlcl90cmFuc2FjdGlvbl9pZCJdKSkKCQkJCXsKCQkJCQlpZihpc3NldCgkb3JkZXJBdHRyaWJ1dGVzKSAmJiBpc19hcnJheSgkb3JkZXJBdHRyaWJ1dGVzKSkKCQkJCQl7CgkJCQkJCSRvcmRlckF0dHJpYnV0ZXNbInRyYW5zYWN0aW9uX2lkIl0gPSAkdGhpcy0+cGFyYW1zWyJvcmRlcl90cmFuc2FjdGlvbl9pZCJdOwoJCQkJCX0KCQkJCQllbHNlCgkJCQkJewoJCQkJCQkkb3JkZXJBdHRyaWJ1dGVzID0gYXJyYXkoInRyYW5zYWN0aW9uX2lkIj0+JHRoaXMtPnBhcmFtc1sib3JkZXJfdHJhbnNhY3Rpb25faWQiXSk7CgkJCQkJfQoJCQkJfQoJCQkJCgkJCQkkY29udGV4dC0+c2V0T3JkZXJBdHRyaWJ1dGVzKCRvcmRlckF0dHJpYnV0ZXMpOwoJCQkJCgkJCQkkZG9TZW5kRW1haWwgPSB0cnVlOwoJCQkJYnJlYWs7CgkJfQoJCQoJCWlmKCRkb1NlbmRFbWFpbCkKCQl7IAoJCQkkZW1haWwgPSBuZXcgTU1fRW1haWwoKTsKCQkJJGVtYWlsLT5zZXRDb250ZXh0KCRjb250ZXh0KTsKCQkJJGVtYWlsLT5zZXRTdWJqZWN0KCRhY3Rpb25WYWx1ZVsiZW1haWxTdWJqZWN0Il0pOwoJCQkkZW1haWwtPnNldEJvZHkoJGFjdGlvblZhbHVlWyJlbWFpbEJvZHkiXSk7CgkJCSRlbWFpbC0+c2V0RnJvbU5hbWUoJGZyb21FbXBsb3llZS0+Z2V0RGlzcGxheU5hbWUoKSk7CgkJCSRlbWFpbC0+c2V0RnJvbUFkZHJlc3MoJGZyb21FbXBsb3llZS0+Z2V0RW1haWwoKSk7IAoJCQkKCQkJaWYoaXNzZXQoJGFjdGlvblZhbHVlWyJlbWFpbENDIl0pICYmICFlbXB0eSgkYWN0aW9uVmFsdWVbImVtYWlsQ0MiXSkpCgkJCXsKCQkJCSRjY0VtYWlscyA9IGV4cGxvZGUoIiwiLCAkYWN0aW9uVmFsdWVbImVtYWlsQ0MiXSk7CgkJCQkKCQkJCWZvcmVhY2goJGNjRW1haWxzIGFzICRjY0VtYWlsKQoJCQkJewoJCQkJCSRlbWFpbC0+YWRkQ0ModHJpbSgkY2NFbWFpbCkpOwoJCQkJfQoJCQl9CgkJCQoJCQlpZigkYWN0aW9uVmFsdWVbImVtYWlsVG9JZCJdID09IE1NX0FjdGlvbjo6JENVUlJFTlRfTUVNQkVSX1BMQUNFSE9MREVSKQoJCQl7CgkJCQkkZW1haWwtPnNldFRvTmFtZSgkdXNlci0+Z2V0Rmlyc3ROYW1lKCkpOwoJCQkJJGVtYWlsLT5zZXRUb0FkZHJlc3MoJHVzZXItPmdldEVtYWlsKCkpOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJHRvRW1wbG95ZWUgPSBuZXcgTU1fRW1wbG95ZWUoJGFjdGlvblZhbHVlWyJlbWFpbFRvSWQiXSk7CgkJCQkkZW1haWwtPnNldFRvTmFtZSgkdG9FbXBsb3llZS0+Z2V0RGlzcGxheU5hbWUoKSk7CgkJCQkkZW1haWwtPnNldFRvQWRkcmVzcygkdG9FbXBsb3llZS0+Z2V0RW1haWwoKSk7CgkJCX0KCQkJCgkJCSRlbWFpbC0+c2VuZCgpOwoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIHNlbmRpbmcgcHVzaCBub3RpZmljYXRpb24gZW1haWwuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGFjdGlvbl9ub3RpZnlaYXBpZXIoJGFjdGlvbikKCXsKCQkkZXZlbnRUeXBlTmFtZSA9IE1NX0V2ZW50OjpnZXROYW1lKCRhY3Rpb24tPmdldEV2ZW50VHlwZSgpKTsKCQkkYWN0aW9uVmFsdWUgPSAkYWN0aW9uLT5nZXRBY3Rpb25WYWx1ZSgpOwoJCSR1c2VyID0gbmV3IE1NX1VzZXIoJHRoaXMtPnBhcmFtc1sibWVtYmVyX2lkIl0pOwoJCSRmcm9tRW1wbG95ZWUgPSBuZXcgTU1fRW1wbG95ZWUoJGFjdGlvblZhbHVlWyJlbWFpbEZyb21JZCJdKTsKCQkkY29udGV4dCA9IG5ldyBNTV9Db250ZXh0KCR1c2VyLCAkZnJvbUVtcGxveWVlKTsKCQkKCQkkYm9keSA9ICIiOwoJCQoJCS8vIFRPRE8gcmV2aWV3IHRoaXMgbWVjaGFuaXNtIGZvciBlZmZlY3RpdmVuZXNzIGluIHBhcnNpbmcgY29udGVudAoJCS8vIHRoZSBjb250ZW50cyBvZiAkdGhpcy0+cGFyYW1zIGlzIGdlbmVyYXRlZCBieSBvbmUgb2YgdGhlIHBhY2thZ2UuLi4oKSBmdW5jdGlvbnMgaW4gdGhlIE1NX0V2ZW50IGNsYXNzCgkJZm9yZWFjaCgkdGhpcy0+cGFyYW1zIGFzICRrZXk9PiR2YWx1ZSkKCQl7CQoJCQlpZighZW1wdHkoJHZhbHVlKSkKCQkJewoJCQkJJGRlY29kZWRWYWx1ZSA9IGpzb25fZGVjb2RlKCR2YWx1ZSk7CgkJCQkKCQkJCWlmKCFpc19hcnJheSgkZGVjb2RlZFZhbHVlKSkKCQkJCXsKCQkJCQkkYm9keSAuPSAieyRrZXl9OiB7JHZhbHVlfSI7CgkJCQl9CgkJCQllbHNlIGlmKCFlbXB0eSgkZGVjb2RlZFZhbHVlKSkKCQkJCXsJCgkJCQkJZm9yZWFjaCgkZGVjb2RlZFZhbHVlIGFzICRhcnJJbmRleD0+JGFyclZhbHVlKQoJCQkJCXsKCQkJCQkJJGJvZHkgLj0gInska2V5fVt7JGFyckluZGV4fV06ICI7CgkJCQkJCgkJCQkJCWlmKGlzX29iamVjdCgkYXJyVmFsdWUpKQoJCQkJCQl7CgkJCQkJCQkkYm9keSAuPSAiXG4iOwoJCQkJCQkJCgkJCQkJCQlmb3JlYWNoKCRhcnJWYWx1ZSBhcyAkb2JqS2V5PT4kb2JqVmFsdWUpCgkJCQkJCQl7CgkJCQkJCQkJJGJvZHkgLj0gIi17JGFyckluZGV4fS0geyRvYmpLZXl9OiB7JG9ialZhbHVlfVxuIjsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQllbHNlCgkJCQkJCXsKCQkJCQkJCSRib2R5IC49ICJ7JGFyclZhbHVlfVxuIjsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRib2R5IC49ICJ7JGtleX06IjsKCQkJfQoJCQkJCQoJCQkkYm9keSAuPSAiXG4iOwoJCX0KCQkKCQlpZighZW1wdHkoJGFjdGlvblZhbHVlWyJ6YXBpZXJBZGRpdGlvbmFsSW5mbyJdKSkKCQl7CgkJCSRib2R5IC49ICJcbj09PT09PT09PT09PT09PT09IEFERElUSU9OQUwgSU5GTyA9PT09PT09PT09PT09PT09PVxuIjsKCQkJJGJvZHkgLj0gJGFjdGlvblZhbHVlWyJ6YXBpZXJBZGRpdGlvbmFsSW5mbyJdOwoJCX0KCQkKCQkkZW1haWwgPSBuZXcgTU1fRW1haWwoKTsKCQkkZW1haWwtPnNldENvbnRleHQoJGNvbnRleHQpOwoJCSRlbWFpbC0+c2V0U3ViamVjdCgiWmFwaWVyIE5vdGlmaWNhdGlvbiAoeyRldmVudFR5cGVOYW1lfSkiKTsKCQkkZW1haWwtPnNldEJvZHkoJGJvZHkpOwoJCSRlbWFpbC0+c2V0RnJvbU5hbWUoJGZyb21FbXBsb3llZS0+Z2V0RGlzcGxheU5hbWUoKSk7CgkJJGVtYWlsLT5zZXRGcm9tQWRkcmVzcygkZnJvbUVtcGxveWVlLT5nZXRFbWFpbCgpKTsKCQkJCgkJJGVtYWlsLT5zZXRUb05hbWUoIlphcGllciIpOwoJCSRlbWFpbC0+c2V0VG9BZGRyZXNzKCRhY3Rpb25WYWx1ZVsiemFwaWVyTWFpbGJveCJdKTsKCQkJCgkJJGVtYWlsLT5zZW5kKCk7CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGFjdGlvbl9jYWxsU2NyaXB0VXJsKCRhY3Rpb24pCgl7CgkJJGFjdGlvblZhbHVlID0gJGFjdGlvbi0+Z2V0QWN0aW9uVmFsdWUoKTsKIAoJCSR1cmwgPSAiIjsKCQkKCQlpZihpc19hcnJheSgkYWN0aW9uVmFsdWUpICYmIGlzc2V0KCRhY3Rpb25WYWx1ZVsic2NyaXB0VXJsIl0pKQoJCXsKCQkJJHVybCA9ICRhY3Rpb25WYWx1ZVsic2NyaXB0VXJsIl07CgkJfQoJCQoJCWlmKCFlbXB0eSgkdXJsKSkKCQl7CQoJCQkkcG9zdHZhcnMgPSAiZXZlbnRfdHlwZT17JGFjdGlvbi0+Z2V0RXZlbnRUeXBlKCl9JiI7CgkJCSRwb3N0dmFycyAuPSAkdGhpcy0+YXJyYXlUb1F1ZXJ5c3RyaW5nKCR0aGlzLT5wYXJhbXMpOwoJCQkKCQkJaWYocHJlZ19tYXRjaCgiLyhcPykvIiwgJHVybCkpCgkJCXsKCQkJCSR1cmwgPSAkdXJsLiImIi4kcG9zdHZhcnM7CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkdXJsID0gJHVybC4iPyIuJHBvc3R2YXJzOwoJCQl9CgkJCQoJCQkkY2ggPSBjdXJsX2luaXQoJHVybCk7CgkJCWN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9QT1NULCAwKTsKCQkJY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hFQURFUiwgMCk7CgkJCWN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7ICAKCQkJJGNvbnRlbnRzID0gY3VybF9leGVjKCRjaCk7CgkJCWN1cmxfY2xvc2UoJGNoKTsKCQl9Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gYXJyYXlUb1F1ZXJ5c3RyaW5nKCRwYXJhbXMpCgl7CQoJCSRxdWVyeXN0cmluZyA9ICIiOwoJCWZvcmVhY2goJHBhcmFtcyBhcyAka2V5PT4kdmFsdWUpCgkJewoJCQlpZighaXNfYXJyYXkoJHZhbHVlKSkKCQkJewoJCQkJJHF1ZXJ5c3RyaW5nIC49ICRrZXkuIj0iLnVybGVuY29kZSgkdmFsdWUpLiImIjsKCQkJfQoJCX0KCQlyZXR1cm4gJHF1ZXJ5c3RyaW5nOwoJfQp9', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(39, 'authorizenetservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(40, 'limelightservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(41, 'affiliatevo', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0FmZmlsaWF0ZVZPIGV4dGVuZHMgTU1fRW50aXR5CnsKCXByaXZhdGUgJHVzZXJuYW1lID0gIiI7Cglwcml2YXRlICRwYXNzd29yZCA9ICIiOwoJcHJpdmF0ZSAkdXJsID0gIiI7CgoJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoKQoJewoJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRkYXRhKQoJewoJCSR0aGlzLT51c2VybmFtZSA9ICRkYXRhWyJ1c2VybmFtZSJdOwoJCSR0aGlzLT5wYXNzd29yZCA9ICRkYXRhWyJwYXNzd29yZCJdOwoJCXBhcmVudDo6dmFsaWRhdGUoKTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gY29tbWl0RGF0YSgpCgl7CgkJcmV0dXJuIGZhbHNlOwoJfQoKCQoJLyoqIEdFVFRFUlMvU0VUVEVSUyAqKi8KCQoJcHVibGljIGZ1bmN0aW9uIGdldFVzZXJuYW1lKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnVzZXJuYW1lOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRVc2VybmFtZSgkdmFsKQoJewoJCSR0aGlzLT51c2VybmFtZSA9ICR2YWw7Cgl9CgkKCglwdWJsaWMgZnVuY3Rpb24gZ2V0UGFzc3dvcmQoKQoJewoJCXJldHVybiAkdGhpcy0+cGFzc3dvcmQ7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRQYXNzd29yZCgkdmFsKQoJewoJCSR0aGlzLT5wYXNzd29yZCA9ICR2YWw7Cgl9CgkKCglwdWJsaWMgZnVuY3Rpb24gZ2V0VXJsKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnVybDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldFVybCgkdmFsKQoJewoJCSR0aGlzLT51cmwgPSAkdmFsOwoJfQp9Cg==', 0, '2018-11-21 06:38:53'),
(42, 'rbacanalystview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCgphYnN0cmFjdCBjbGFzcyBNTV9SQkFDQW5hbHlzdFZpZXcgZXh0ZW5kcyBNTV9SQkFDQmFzZVZpZXcKewoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCQkkdGhpcy0+cGVybWlzc2lvbnMgPSBhcnJheSgKCQkJCSIqIiAgPT4gIGFycmF5KE1NX1JvbGU6OiRST0xFX0FETUlOSVNUUkFUT1IsIE1NX1JvbGU6OiRST0xFX0FOQUxZU1QpCgkJCQkpOwoJfQoKfQ==', 0, '2018-11-21 06:38:53'),
(43, 'socialloginrequest', 'LyoqCiAqIAogKgogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICoKICogTU1fU29jaWFsTG9naW5SZXF1ZXN0IGlzIHJlc3BvbnNpYmxlIGZvciBwcm9jZXNzaW5nIHNvY2lhbCBuZXR3b3JrIHByb3ZpZGVyIHNpZ251cHMuCiAqLwoKY2xhc3MgTU1fU29jaWFsTG9naW5SZXF1ZXN0IGV4dGVuZHMgTU1fRnJlZU1lbWJlcldlYmZvcm1SZXF1ZXN0CnsJCQoJCglwcml2YXRlICRzdG9yZWRSZXN1bHQgPSAiIjsKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGhhbmRsZVJlc3VsdCgkcmVzdWx0KQoJewoJCS8vb3ZlcnJpZGVuIHRvIGtpbGwgdGhlIGRlZmF1bHQgcmVkaXJlY3QsIHNvIHRoYXQgdGhlIHNvY2lhbCBsb2dpbiBhdXRoIHByb2Nlc3MgaGFzIGEgY2hhbmNlIHRvIGxpbmsgdGhlIGFjY291bnRzCgkJJHRoaXMtPnN0b3JlZFJlc3VsdCA9ICRyZXN1bHQ7Cgl9CgkKCS8qKgoJICogVGhpcyBtZXRob2QgcmVkaXJlY3RzIHRvIHRoZSBwcm9wZXIgY29uZmlybWF0aW9uIHBhZ2UuIEl0IGlzIG1lYW50IHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgc29jaWFsIGxvZ2luIGF1dGggcHJvY2VzcyBoYXMgbGlua2VkIHRoZQoJICogbmV3bHkgY3JlYXRlZCBhY2NvdW50IHRvIHRoZSB1bmlxdWUgc29jaWFsIG5ldHdvcmsgaWQgc3VwcGxpZWQgYnkgdGhlIHNvY2lhbCBwcm92aWRlcgoJICovCglwdWJsaWMgZnVuY3Rpb24gY29tcGxldGVTaWdudXAoKQoJewoJCXJldHVybiBwYXJlbnQ6OmhhbmRsZVJlc3VsdCgkdGhpcy0+c3RvcmVkUmVzdWx0KTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldE5ld1VzZXIoKQoJewoJCXJldHVybiAkdGhpcy0+bmV3VXNlcjsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc3VibWl0UmVxdWVzdCgpCgl7CgkJcGFyZW50OjpzdWJtaXRSZXF1ZXN0KCk7CgkJcmV0dXJuICR0aGlzLT5zdG9yZWRSZXN1bHQ7Cgl9Cn0K', 0, '2018-11-21 06:38:53'),
(44, 'reportingdashboard', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(45, 'coupon', '', 0, '2018-11-21 06:38:53'),
(46, 'bbpressextension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmNsYXNzIE1NX0JCUHJlc3NFeHRlbnNpb24gZXh0ZW5kcyBNTV9FeHRlbnNpb24KewkKCXByb3RlY3RlZCBzdGF0aWMgJE9QVElPTl9BQ1RJVkUgPSAiYWN0aXZlIjsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRhdXRvbG9hZERlcGVuZGVuY2llcz10cnVlLCRjb25maWdEYXRhPSIiKSAKCXsgCgkJcGFyZW50OjpfX2NvbnN0cnVjdCgkYXV0b2xvYWREZXBlbmRlbmNpZXMsJGNvbmZpZ0RhdGEpOwoJCSR0aGlzLT50b2tlbiA9IE1NX0V4dGVuc2lvbjo6JEJCUFJFU1NfVE9LRU47Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBkb0luaXRIb29rKCkgCgl7CgkJaWYoJHRoaXMtPmlzQWN0aXZlKCkgJiYgJHRoaXMtPmhhc1Blcm1pc3Npb24oKSkKCQl7CgkJCQoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGlzQWN0aXZlKCkKCXsKCQkvLyBjaGVjayBpZiBMaW1pdCBMb2dpbiBBdHRlbXB0cyBwbHVnaW4gaXMgYWN0aXZlCgkJJHBsdWdpbnMgPSBnZXRfb3B0aW9uKCdhY3RpdmVfcGx1Z2lucycpOwoJCSRyZXF1aXJlZF9wbHVnaW4gPSAiTWVtYmVyTW91c2ViYlByZXNzL2luZGV4LnBocCI7CgkJJGlzQWN0aXZlID0gZmFsc2U7CgkJCgkJaWYoaW5fYXJyYXkoJHJlcXVpcmVkX3BsdWdpbiwgJHBsdWdpbnMpKQoJCXsKCQkJJGlzQWN0aXZlID0gdHJ1ZTsKCQl9CgkJCgkJcmV0dXJuICRpc0FjdGl2ZSAmJiAkdGhpcy0+aGFzUGVybWlzc2lvbigpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gaGFzUGVybWlzc2lvbigpCgl7CgkJcmV0dXJuIHRydWU7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGRpc3BsYXlMaXN0aW5nSXRlbSgpIAoJewoJCSRjcm50UGFnZSA9IE1NX01vZHVsZVV0aWxzOjpnZXRQYWdlKCk7CgkJJGV4dFVybCA9IE1NX01vZHVsZVV0aWxzOjpnZXRVcmwoJGNybnRQYWdlLCBNTV9NT0RVTEVfRVhURU5TSU9OUykuIiYiLk1NX3Nlc3Npb246OiRQQVJBTV9TVUJNT0RVTEUuIj0iLk1NX0V4dGVuc2lvbjo6JEJCUFJFU1NfVE9LRU47CgkJPz4KCQk8ZGl2IGNsYXNzPSJtbS1leHRlbnNpb24gPD9waHAgZWNobyAkdGhpcy0+aXNBY3RpdmUoKSA/ICdtbS1leHRlbnNpb24tYWN0aXZlJyA6ICcnOyA/PiI+CgkJPGEgaHJlZj0iPD9waHAgZWNobyAkZXh0VXJsOyA/PiI+PGltZyBzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9wbHVnaW5faW1hZ2VzL2xvZ29zL2V4dGVuc2lvbnMtYmJwcmVzcy5qcGciIC8+PC9hPgoJCTwvZGl2PgoJCTw/cGhwCgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBkaXNwbGF5Q29uZmlnU2NyZWVuKCkgCgl7IAoJPz4KCQkKCQk8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNGRkY7IHBhZGRpbmc6MTBweDsgd2lkdGg6MjYwcHg7Ij4KCQkJPGltZyBzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9wbHVnaW5faW1hZ2VzL2xvZ29zL2V4dGVuc2lvbnMtYmJwcmVzcy5qcGciIHN0eWxlPSJ3aWR0aDoyNjBweDsiIC8+CgkJPC9kaXY+CgkJCgkJPGRpdiBzdHlsZT0ibWFyZ2luLWJvdHRvbToxNXB4OyI+CgkJCTxhIGhyZWY9Imh0dHA6Ly9zdXBwb3J0Lm1lbWJlcm1vdXNlLmNvbS9zdXBwb3J0L3NvbHV0aW9ucy9hcnRpY2xlcy85MDAwMDIwMTg2LWJicHJlc3MtZXh0ZW5zaW9uIiB0YXJnZXQ9Il9ibGFuayI+TmVlZCBoZWxwIGNvbmZpZ3VyaW5nIHRoZSBiYlByZXNzIGV4dGVuc2lvbj88L2E+CgkJPC9kaXY+CgkJCgkJPHAgc3R5bGU9IndpZHRoOjYwMHB4OyBmb250LXNpemU6MTJweDsiPgoJCWJiUHJlc3Mgd2FzIGJ1aWx0IGJ5IHRoZSBjcmVhdG9ycyBvZiBXb3JkUHJlc3MgYW5kIGVuYWJsZXMgZm9ydW0gZnVuY3Rpb25hbGl0eSBvbiB5b3VyIFdvcmRQcmVzcyBzaXRlLiBVc2luZyB0aGlzIAoJCWV4dGVuc2lvbiB5b3UnbGwgYmUgYWJsZSB0byBwcm90ZWN0IGJiUHJlc3MgZm9ydW1zIGJhc2VkIG9uIGEgbWVtYmVyJ3MgYWNjZXNzIHJpZ2h0cyBpbiBNZW1iZXJNb3VzZS4gSW4gb3JkZXIgCgkJdG8gdXNlIHRoaXMgZXh0ZW5zaW9uLCB0aGUgYmJQcmVzcyBwbHVnaW4gbXVzdCBiZSBpbnN0YWxsZWQgYW5kIGFjdGl2YXRlZC4KCQk8L3A+CgkJCgkJPHA+CgkJCTw/cGhwIGlmKCEkdGhpcy0+aXNBY3RpdmUoKSkgeyA/PgoJCQk8YSBocmVmPSJodHRwczovL21lbWJlcm1vdXNlLmNvbS9hc3NldHMvZXh0ZW5zaW9ucy9NZW1iZXJNb3VzZWJiUHJlc3MuemlwIiBjbGFzcz0ibW0tdWktYnV0dG9uIGdyZWVuIj48P3BocCBlY2hvIE1NX1V0aWxzOjpnZXRJY29uKCdkb3dubG9hZCcsICcnLCAnMS4zZW0nLCAnMnB4Jyk7ID8+IERvd25sb2FkIGJiUHJlc3MgRXh0ZW5zaW9uPC9hPgoJCQk8P3BocCB9IGVsc2UgeyA/PgoJCQk8P3BocCBlY2hvIE1NX1V0aWxzOjpnZXRDaGVja0ljb24oKTsgPz4gYmJQcmVzcyBFeHRlbnNpb24gQWN0aXZhdGVkCgkJCTw/cGhwIH0gPz4KCQkJCgkJCTw/cGhwIAoJCQkkcGx1Z2lucyA9IGdldF9vcHRpb24oJ2FjdGl2ZV9wbHVnaW5zJyk7CgkJCSRyZXF1aXJlZF9wbHVnaW4gPSAiYmJwcmVzcy9iYnByZXNzLnBocCI7CgkJCQoJCQlpZighaW5fYXJyYXkoJHJlcXVpcmVkX3BsdWdpbiwgJHBsdWdpbnMpKQoJCQl7CgkJCT8+CgkJCTxhIGhyZWY9Imh0dHA6Ly9iYnByZXNzLm9yZyIgY2xhc3M9Im1tLXVpLWJ1dHRvbiBibHVlIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MTBweDsiPjw/cGhwIGVjaG8gTU1fVXRpbHM6OmdldEljb24oJ2Rvd25sb2FkJywgJycsICcxLjNlbScsICcycHgnKTsgPz4gRG93bmxvYWQgYmJQcmVzczwvYT4KCQkJPD9waHAgfSBlbHNlIHsgPz4KCQkJPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OjEwcHg7Ij48P3BocCBlY2hvIE1NX1V0aWxzOjpnZXRDaGVja0ljb24oKTsgPz4gYmJQcmVzcyBBY3RpdmF0ZWQ8L3NwYW4+CgkJCTw/cGhwIH0gPz4KCQk8L3A+Cgk8P3BocAoJfQp9', 0, '2018-11-21 06:38:53'),
(47, 'paymentutils', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(48, 'decisiontagprocessor_v1', '', 0, '2018-11-21 06:38:53'),
(49, 'cancellationmethod', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQ2FuY2VsbGF0aW9uTWV0aG9kCnsKCXB1YmxpYyBzdGF0aWMgJE9WRVJEVUVfQ0hBTkdFID0gImNoYW5nZV90b19vdmVyZHVlIjsgLy8gVE9ETyByZW1vdmUgYnkgY3JlYXRlIE1NIGFjdGlvbiB0byBoYW5kbGUgb3ZlcmR1ZSBwYXltZW50cwoJcHVibGljIHN0YXRpYyAkT1ZFUkRVRV9FTUFJTCA9ICJzZW5kX2VtYWlsX3JlbWluZGVyIjsgLy8gVE9ETyByZW1vdmUKCXB1YmxpYyBzdGF0aWMgJENBTkNFTF9IQVJEID0gImhhcmQiOwoJcHVibGljIHN0YXRpYyAkQ0FOQ0VMX1BBVVNFID0gInBhdXNlIjsKfQo=', 0, '2018-11-21 06:38:53'),
(50, 'abstractaffiliateprovider', 'YWJzdHJhY3QgY2xhc3MgTU1fQWJzdHJhY3RBZmZpbGlhdGVQcm92aWRlciB7CgkKCXByaXZhdGUgJG5hbWU7Cglwcml2YXRlICR0b2tlbjsKCQoJcHVibGljIGZ1bmN0aW9uIGhhbmRsZU9wdGlvbnNEaWFsb2coJG9wdGlvbkRhdGEpIHt9CglwdWJsaWMgZnVuY3Rpb24gY29uZmlndXJlRnJvbU9wdGlvbnMoJG9wdGlvbkRhdGEpIHsgcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOyB9CglwdWJsaWMgZnVuY3Rpb24gcmVuZGVyQWRkaXRpb25hbE9wdGlvbnMoKSB7IHJldHVybiAiIjsgfQoJcHVibGljIGZ1bmN0aW9uIGdldEFmZmlsaWF0ZVRyYWNraW5nSWQoKSB7IHJldHVybiAiIjsgfQoJcHVibGljIGZ1bmN0aW9uIGdldFN1YmFmZmlsaWF0ZVRyYWNraW5nSWQoKSB7IHJldHVybiAiIjsgfQoJcHVibGljIGZ1bmN0aW9uIGdldFBheW91dFByb2ZpbGVzKCkge30KCXB1YmxpYyBmdW5jdGlvbiBjcmVhdGVBZmZpbGlhdGVBY2NvdW50KCR1c2VyRGF0YSkgeyByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7IH0KCXB1YmxpYyBmdW5jdGlvbiB0cmFja0NvbW1pc3Npb24oTU1fQ29tbWlzc2lvblByb2ZpbGUgJGNvbW1pc3Npb25Qcm9maWxlLCAkYWZmaWxpYXRlSWQsICRvcmRlck51bWJlciwgJG9yZGVyRGF0YSwgJG9yZGVyVG90YWwsICRpc1JlYmlsbCkgeyByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7IH0KCXB1YmxpYyBmdW5jdGlvbiByZXZlcnNlQ29tbWlzc2lvbigkYWZmaWxpYXRlSWQsICRvcmRlck51bWJlcikgeyByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7IH0KCXB1YmxpYyBmdW5jdGlvbiBzdXBwb3J0c0ZlYXR1cmUoJGZlYXR1cmVDb25zdCkgeyByZXR1cm4gZmFsc2U7IH0KCQoJLyoqCgkgKiAKCSAqIERlZmF1bHQgY29uc3RydWN0b3IgZm9yIGFsbCBwcm92aWRlcnMuIAoJICogQHBhcmFtIFN0cmluZyAkcHJvdmlkZXJfaW5mbyBBbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBwcm92aWRlciBpbmZvcm1hdGlvbiBmcm9tIHRoZSBkYXRhIHN0b3JlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcHJvdmlkZXJfaW5mbykgCgl7CgkJJHRoaXMtPm5hbWUgPSAkcHJvdmlkZXJfaW5mby0+cHJvdmlkZXJfbmFtZTsKCQkkdGhpcy0+dG9rZW4gPSAkcHJvdmlkZXJfaW5mby0+cHJvdmlkZXJfdG9rZW47Cgl9CgkKCS8qKgoJICogUmV0dXJucyBhbiBvYmplY3QgY2FwYWJsZSBvZiByZW5kZXJpbmcgdGhlIGRlZmF1bHQgb3B0aW9ucyBkaWFsb2cKCSAqIEBwYXJhbSBBcnJheSAkcG9zdCBBbnkgZGF0YSBwb3N0ZWQgbmVjZXNzYXJ5IHRvIGRyYXcgdGhlIG9wdGlvbnMgZGlhbG9nCgkgKiBAcmV0dXJuIE9iamVjdCBvZiB0eXBlIE1NX0FmZmlsaWF0ZVByb3ZpZGVyRGlhbG9nIHJlcHJlc2VudGluZyB0aGUgZGlhbG9nIHRvIGRyYXcKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHJlbmRlck9wdGlvbnNEaWFsb2coJHBvc3QpIAoJewoJCSRmb3JtID0gbmV3IE1NX0FmZmlsaWF0ZVByb3ZpZGVyRGlhbG9nKCk7CgkJcmV0dXJuICRmb3JtOwoJfQoJCgkvKioKCSAqIFJldHVybnMgdGhlIGRpc3BsYXlhYmxlIG5hbWUgb2YgdGhlIHByb3ZpZGVyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXROYW1lKCkgCgl7CgkJcmV0dXJuICR0aGlzLT5uYW1lOwoJfQoJCgkvKioKCSAqIFNldHMgdGhlIGRpc3BsYXlhYmxlIG5hbWUgb2YgdGhlIHByb3ZpZGVyCgkgKiBAcGFyYW0gU3RyaW5nICRuZXdOYW1lCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXROYW1lKCRuZXdOYW1lKSAKCXsKCQkkdGhpcy0+bmFtZSA9ICRuZXdOYW1lOwoJfQoJCgkvKioKCSAqIFJldHVybnMgdGhlIHByb3ZpZGVyIHRva2VuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRUb2tlbigpIAoJewoJCXJldHVybiAkdGhpcy0+dG9rZW47Cgl9CgkKCS8qKgoJICogU2V0cyB0aGUgcHJvdmlkZXIgdG9la24KCSAqIEBwYXJhbSBTdHJpbmcgJG5ld1Rva2VuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRUb2tlbigkbmV3VG9rZW4pIAoJewoJCSR0aGlzLT50b2tlbiA9ICRuZXdUb2tlbjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcnNpc3RQcm9maWxlTWFwcGluZ3MoJHByb3ZpZGVyX2lkLCAkbWFwKSAKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJTU1fVHJhbnNhY3Rpb246OmJlZ2luKCk7CgkJdHJ5IAoJCXsKCQkJJHJlc3VsdCA9ICR3cGRiLT5xdWVyeSggJHdwZGItPnByZXBhcmUoIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfQUZGSUxJQVRFX1BST1ZJREVSX01BUFBJTkdTLiIgV0hFUkUgYWZmaWxpYXRlX3Byb3ZpZGVyX2lkID0gJWQiLCAkcHJvdmlkZXJfaWQpKTsKCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJIAl7CgkJIAkJTU1fVHJhbnNhY3Rpb246OnJvbGxiYWNrKCk7CgkJIAkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRVJST1I6IHVuYWJsZSB0byByZW1vdmUgdGhlIGV4aXN0aW5nIG1lbWJlcnNoaXAgbGV2ZWwgZnJvbSBsaXN0IG1hcHBpbmdzIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJIAl9CgkJCWZvcmVhY2goJG1hcCBhcyAkbWVtYmVyc2hpcF9pZD0+JHByb2ZpbGVfaWQpIAoJCQl7CgkJCQkkcHJvZmlsZV9pZCA9IGh0bWxfZW50aXR5X2RlY29kZSgkcHJvZmlsZV9pZCxFTlRfQ09NUEFUIHwgRU5UX0hUTUw0MDEsICJVVEYtOCIpOwoJCQkJJHNxbCA9ICJJTlNFUlQgSU5UTyAiLk1NX1RBQkxFX0FGRklMSUFURV9QUk9WSURFUl9NQVBQSU5HUy4iIFNFVCAiLgoJCQkJCSAgICJtZW1iZXJzaGlwX2xldmVsX2lkID0gJWQsIi4KCQkJCQkgICAicGF5b3V0X3Byb2ZpbGVfaWQgPSAlcywiLgoJCQkJCSAgICJhZmZpbGlhdGVfcHJvdmlkZXJfaWQgPSAlZCI7CgkJCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCAkd3BkYi0+cHJlcGFyZSgkc3FsLCAkbWVtYmVyc2hpcF9pZCwgaHRtbF9lbnRpdHlfZGVjb2RlKCRwcm9maWxlX2lkLEVOVF9DT01QQVQgfCBFTlRfSFRNTDQwMSwgIlVURi04IiksICRwcm92aWRlcl9pZCkpOwoJCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCSAJewoJCQkgCQlNTV9UcmFuc2FjdGlvbjo6cm9sbGJhY2soKTsKCQkJIAkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRVJST1I6IHVuYWJsZSB0byBhZGQgbmV3IG1lbWJlcnNoaXAgbGV2ZWwgdG8gcGF5b3V0IHByb2ZpbGUgbWFwcGluZyAoIi4kc3FsLiIpIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCSAJfQoJCQkJCgkJCX0KCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpIAoJCXsKCQkJTU1fVHJhbnNhY3Rpb246OnJvbGxiYWNrKCk7CgkgCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFUlJPUjogdW5hYmxlIHRvIG1hcCBtZW1iZXJzaGlwIGxldmVscyB0byBhZmZpbGlhdGUgcHJvdmlkZXIgcGF5b3V0IHByb2ZpbGVzIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCU1NX1RyYW5zYWN0aW9uOjpjb21taXQoKTsKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9maWxlSWRGb3JNZW1iZXJzaGlwTGV2ZWwoJG1lbWJlcnNoaXBJZCkgCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRwcm92aWRlcl9lbnRpdHkgPSBuZXcgTU1fQWZmaWxpYXRlUHJvdmlkZXIoKTsKCQkkcHJvdmlkZXJfZW50aXR5LT5zZXRUb2tlbigkdGhpcy0+Z2V0VG9rZW4oKSk7CgkJJHByb3ZpZGVyX2VudGl0eS0+Z2V0RGF0YSgpOwoJCWlmICgkcHJvdmlkZXJfZW50aXR5LT5pc1ZhbGlkKCkpCgkJewoJCQkkcmVzdWx0ID0gJHdwZGItPmdldF92YXIoJHdwZGItPnByZXBhcmUoIlNFTEVDVCBwYXlvdXRfcHJvZmlsZV9pZCBGUk9NICIuTU1fVEFCTEVfQUZGSUxJQVRFX1BST1ZJREVSX01BUFBJTkdTLiIgV0hFUkUgbWVtYmVyc2hpcF9sZXZlbF9pZCA9ICVkIGFuZCBhZmZpbGlhdGVfcHJvdmlkZXJfaWQgPSAlZCIsICRtZW1iZXJzaGlwSWQsICRwcm92aWRlcl9lbnRpdHktPmdldElkKCkpKTsKCQkJJHByb2ZpbGVJZCA9ICgkcmVzdWx0ICE9IG51bGwpPyRyZXN1bHQ6IiI7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHByb2ZpbGVJZCwgTU1fUmVzcG9uc2U6OiRTVUNDRVNTKTsKCQl9CgkJZWxzZSAKCQl7CgkJCS8vc2hvdWxkIG5ldmVyIGhhcHBlbgoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFUlJPUjogdW5hYmxlIHRvIHJldHJpZXZlIGluZm9ybWF0aW9uIGZvciB0aGUgYWZmaWxpYXRlIHByb3ZpZGVyIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCgkvKioKCSAqIE1ha2VzIGFuIEhUVFAgY29ubmVjdGlvbiB0byBhIHJlbW90ZSBVUkwgYW5kIHJldHVybnMgdGhlIHJlc3BvbnNlCgkgKgoJICogQHBhcmFtIFN0cmluZyAkcmVtb3RlVXJsIFRoZSByZW1vdGUgVVJMIHRvIGNvbm5lY3QgdG8KCSAqIEBwYXJhbSBTdHJpbmcgJG1ldGhvZCBUaGUgdHlwZSBvZiBjb25uZWN0aW9uIHRvIG1ha2UuIE9ubHkgUE9TVCBvciBHRVQgaHR0cCB2ZXJicyBjdXJyZW50bHkgc3VwcG9ydGVkLCB2YWx1ZSBpcyBQT1NUIGJ5IGRlZmF1bHQKCSAqIEBwYXJhbSBhcnJheS9TdHJpbmcgJGRhdGEgKG9wdGlvbmFsKSBBbiBhcnJheSBvZiBrZXkvdmFsdWUgcGFpcnMsIG9yIGEgc3RyaW5nLCB0byBQT1NUIHRvIHRoZSByZW1vdGUgVVJMIHdoZW4gdGhlIGNvbm5lY3Rpb25NZXRob2QgaXMgc2V0IHRvIFBPU1QuIElmIHRoaXMgcGFyYW1ldGVyIGlzIGFuIGFycmF5LCBpdCBpcyBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcgc3VpdGFibGUgZm9yIFBPU1RpbmcgYW5kIHVybCBlbmNvZGVkCgkgKiBAcGFyYW0gYXJyYXkgJG9wdGlvbnMgKG9wdGlvbmFsKSBBbiBhcnJheSBvZiBjdXJsb3B0aW9ucyB0byBwYXNzIGRpcmVjdGx5IHRvIHRoZSB1bmRlcmx5aW5nIGN1cmwgaW1wbGVtZW50YXRpb24KCSAqCgkgKiBAcmV0dXJuIE1NX1Jlc3BvbnNlIFdyYXBwZXIgYXJvdW5kIHRoZSByZW1vdGUgcmVzcG9uc2UsIHdpdGggdGhlIHJhdyByZXNwb25zZSBpbiB0aGUgTU1fUmVzcG9uc2UgbWVzc2FnZSBvbiBzdWNjZXNzLCBhbmQgYSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlIGluIHRoZSByZXNwb25zZSBtZXNzYWdlIG90aGVyd2lzZS4KCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIGRvSFRUUFJlcXVlc3QoJHJlbW90ZVVybCwgJG1ldGhvZD0iUE9TVCIsICRkYXRhPSIiLCAkb3B0aW9ucz1hcnJheSgpKQoJewoJCSRwb3N0X3N0cmluZyA9ICIiOwoJCWlmIChpc19hcnJheSgkZGF0YSkpCgkJewoJCQlmb3JlYWNoKCAkZGF0YSBhcyAka2V5ID0+ICR2YWx1ZSApCgkJCXsKCQkJCSRwb3N0X3N0cmluZyAuPSAiJGtleT0iIC4gdXJsZW5jb2RlKCR2YWx1ZSkgLiAiJiI7CgkJCX0KCQkJJHBvc3Rfc3RyaW5nID0gcnRyaW0oICRwb3N0X3N0cmluZywgIiYgIiApOwoJCX0KCQllbHNlCgkJewoJCQkkcG9zdF9zdHJpbmcgPSAkZGF0YTsKCQl9CgkJCgkJJHJlcXVlc3QgPSBjdXJsX2luaXQoJHJlbW90ZVVybCk7IC8vIGluaXRpYXRlIGN1cmwgb2JqZWN0CgkKCQkkZGVmYXVsdE9wdGlvbnMgPSBhcnJheShDVVJMT1BUX0hFQURFUj0+RkFMU0UsCgkJCQlDVVJMT1BUX1JFVFVSTlRSQU5TRkVSPT4xLAoJCQkJQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUj0+MAoJCSk7CgkJJG9wdGlvbnMgKz0gJGRlZmF1bHRPcHRpb25zOyAvL21lcmdlIGluIHRoZSBkZWZhdWx0cywgYnV0IGRvbid0IG92ZXJyaWRlIGV4cGxpY2l0bHkgc2V0IG9wdGlvbnMKCQoJCSRtZXRob2QgPSBzdHJ0b3VwcGVyKCRtZXRob2QpOwoJCWlmKCRtZXRob2QgPT0gJ1BPU1QnKQoJCXsKCQkJJHBvc3RPcHRpb25zID0gYXJyYXkoQ1VSTE9QVF9DVVNUT01SRVFVRVNUICA9PiAiUE9TVCIsCgkJCQkJCQkJIENVUkxPUFRfUE9TVEZJRUxEUyAgICAgPT4gJHBvc3Rfc3RyaW5nKTsKCQkJLy9UT0RPOiBQSFAgNS4yIHdvcmthcm91bmQgLSByZW1vdmUgb25jZSBzdXBwb3J0IGlzIGRyb3BwZWQKCQkJaWYgKHZlcnNpb25fY29tcGFyZShQSFBfVkVSU0lPTiwgJzUuMy4yJykgPj0gMCkKCQkJewoJCQkJJHBvc3RPcHRpb25zW0NVUkxPUFRfUE9TVFJFRElSXSA9IDc7CgkJCX0KCQkJaWYgKCFpbmlfZ2V0KCdzYWZlX21vZGUnKSAmJiAhaW5pX2dldCgnb3Blbl9iYXNlZGlyJykpCgkJCXsKCQkJCSRwb3N0T3B0aW9uc1tDVVJMT1BUX0ZPTExPV0xPQ0FUSU9OXSA9IHRydWU7CgkJCX0KCQkJZm9yZWFjaCAoJHBvc3RPcHRpb25zIGFzICRjdXJsT3B0aW9uPT4kY3VybE9wdGlvblZhbHVlKQoJCQl7CgkJCQlpZiAoIWlzc2V0KCRvcHRpb25zWyRjdXJsT3B0aW9uXSkpCgkJCQl7CgkJCQkJJG9wdGlvbnNbJGN1cmxPcHRpb25dID0gJGN1cmxPcHRpb25WYWx1ZTsKCQkJCX0KCQkJfQoJCX0KCQllbHNlIGlmICgkbWV0aG9kICE9ICdHRVQnKQoJCXsKCQkJaWYgKCFpc3NldCgkb3B0aW9uc1tDVVJMT1BUX0NVU1RPTVJFUVVFU1RdKSkKCQkJewoJCQkJJG9wdGlvbnNbQ1VSTE9QVF9DVVNUT01SRVFVRVNUXSA9ICRwb3N0X3N0cmluZzsKCQkJfQoJCX0KCQoJCWN1cmxfc2V0b3B0X2FycmF5KCRyZXF1ZXN0LCAkb3B0aW9ucyk7CgkKCQkkcmF3X3Jlc3BvbnNlID0gY3VybF9leGVjKCRyZXF1ZXN0KTsgLy8gZXhlY3V0ZSBjdXJsIHBvc3QgYW5kIHN0b3JlIHJlc3VsdHMgaW4gJHJhd19yZXNwb25zZQoJCgkJJGN1cmxfZXJyb3IgPSBjdXJsX2Vycm9yKCRyZXF1ZXN0KTsKCQoJCSRyZXNwb25zZU9iaiA9IG5ldyBNTV9SZXNwb25zZSgpOwoJCSRyZXNwb25zZU9iai0+YWRkRGF0YSgiaHR0cF9jb2RlIixjdXJsX2dldGluZm8oJHJlcXVlc3QsQ1VSTElORk9fSFRUUF9DT0RFKSk7CgkKCQljdXJsX2Nsb3NlKCRyZXF1ZXN0KTsgLy8gY2xvc2UgY3VybCBvYmplY3QKCQoJCWlmICgkY3VybF9lcnJvciA9PSAiIikKCQl7CgkJCSRyZXNwb25zZU9iai0+bWVzc2FnZSA9ICRyYXdfcmVzcG9uc2U7CgkJCSRyZXNwb25zZU9iai0+YWRkRGF0YSgidXJsIiwgJHJlbW90ZVVybC4iPyIuJHBvc3Rfc3RyaW5nKTsKCQkJcmV0dXJuICRyZXNwb25zZU9iajsKCQl9CgkJZWxzZQoJCXsKCQkJJHJlc3BvbnNlT2JqLT5tZXNzYWdlID0gJGN1cmxfZXJyb3I7CgkJCSRyZXNwb25zZU9iai0+dHlwZSA9IE1NX1Jlc3BvbnNlOjokRVJST1I7CgkJCXJldHVybiAkcmVzcG9uc2VPYmo7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:53'),
(51, 'reportdynamiccontent', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVwb3J0RHluYW1pY0NvbnRlbnQgZXh0ZW5kcyBNTV9SZXBvcnRWaXN1YWxFbGVtZW50CnsKCQoJcHJvdGVjdGVkICRhbmltYXRlID0gdHJ1ZTsKCXByb3RlY3RlZCAkY29udGVudElzQ3VycmVuY3kgPSBmYWxzZTsKCXByb3RlY3RlZCAkc2hvd0N1cnJlbmN5RnJhY3Rpb25hbENvbXBvbmVudCA9IHRydWU7Cglwcm90ZWN0ZWQgJHBvc3RmaXhJc28gPSBmYWxzZTsKCQoJcHJvdGVjdGVkICR1bml0U3BlY2lmaWVyQ2xhc3MgPSAiIjsKCQoJLy9tb2RlbCBpcyBleHBlY3RlZCB0byBjb250YWluIHNvbWUgY29tYmluYXRpb24gb2YgYW4gaWQsIGNsYXNzLCBhbmQgY29udGVudAkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRKYXZhc2NyaXB0RGVwZW5kZW5jaWVzKCkKCXsKCQlyZXR1cm4gYXJyYXkoTU1fUExVR0lOX1VSTC4iL3Jlc291cmNlcy9qcy9hZG1pbi9qcXVlcnkuYW5pbWF0ZU51bWJlci5taW4uanMiKTsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNyZWF0ZUN1cnJlbmN5RHluYW1pY0NvbnRlbnQoJGVsZW1lbnRJZGVudGlmaWVyLCAkY3VycmVuY3lWYWx1ZSwkY3VycmVuY3lDb2RlLCAkdW5pdFNwZWNpZmllcj0iIiwkdW5pdFNwZWNpZmllckNsYXNzPSIiKQoJewoJCSRkeW5hbWljQ29udGVudCA9IG5ldyBNTV9SZXBvcnREeW5hbWljQ29udGVudCgkZWxlbWVudElkZW50aWZpZXIpOwoJCSRkeW5hbWljQ29udGVudC0+Y29udGVudElzQ3VycmVuY3kgPSB0cnVlOwoJCSRkeW5hbWljQ29udGVudC0+bW9kZWwgPSBhcnJheSgpOwoJCSRkeW5hbWljQ29udGVudC0+bW9kZWxbJ2N1cnJlbmN5Q29kZSddICA9ICRjdXJyZW5jeUNvZGU7CgkJJGR5bmFtaWNDb250ZW50LT5tb2RlbFsnY29udGVudCddID0gJGN1cnJlbmN5VmFsdWU7CgkJJGR5bmFtaWNDb250ZW50LT5tb2RlbFsndW5pdFNwZWNpZmllciddID0gJHVuaXRTcGVjaWZpZXI7CgkJJGR5bmFtaWNDb250ZW50LT5tb2RlbFsndW5pdFNwZWNpZmllckNsYXNzJ10gPSAkdW5pdFNwZWNpZmllckNsYXNzOwoJCXJldHVybiAkZHluYW1pY0NvbnRlbnQ7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVOdW1lcmljRHluYW1pY0NvbnRlbnQoJGVsZW1lbnRJZGVudGlmaWVyLCAkbnVtZXJpY1ZhbHVlLCR1bml0U3BlY2lmaWVyPSIiLCR1bml0U3BlY2lmaWVyQ2xhc3M9IiIpCgl7CgkJJGR5bmFtaWNDb250ZW50ID0gbmV3IE1NX1JlcG9ydER5bmFtaWNDb250ZW50KCRlbGVtZW50SWRlbnRpZmllcik7CgkJJGR5bmFtaWNDb250ZW50LT5jb250ZW50SXNDdXJyZW5jeSA9IGZhbHNlOwoJCSRkeW5hbWljQ29udGVudC0+bW9kZWwgPSBhcnJheSgpOwoJCSRkeW5hbWljQ29udGVudC0+bW9kZWxbJ2NvbnRlbnQnXSA9ICRudW1lcmljVmFsdWU7CgkJJGR5bmFtaWNDb250ZW50LT5tb2RlbFsndW5pdFNwZWNpZmllciddID0gJHVuaXRTcGVjaWZpZXI7CgkJJGR5bmFtaWNDb250ZW50LT5tb2RlbFsndW5pdFNwZWNpZmllckNsYXNzJ10gPSAkdW5pdFNwZWNpZmllckNsYXNzOwoJCXJldHVybiAkZHluYW1pY0NvbnRlbnQ7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVGcm9tQ29udGVudCgkZWxlbWVudElkZW50aWZpZXIsICRjb250ZW50KQoJewoJCSRkeW5hbWljQ29udGVudCA9IG5ldyBNTV9SZXBvcnREeW5hbWljQ29udGVudCgkZWxlbWVudElkZW50aWZpZXIpOwoJCSRkeW5hbWljQ29udGVudC0+Y29udGVudElzQ3VycmVuY3kgPSBmYWxzZTsKCQkkZHluYW1pY0NvbnRlbnQtPmFuaW1hdGUgPSBmYWxzZTsKCQkkZHluYW1pY0NvbnRlbnQtPm1vZGVsID0gYXJyYXkoKTsKCQkkZHluYW1pY0NvbnRlbnQtPm1vZGVsWydjb250ZW50J10gPSAkY29udGVudDsKCQlyZXR1cm4gJGR5bmFtaWNDb250ZW50OwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiByZW5kZXIoKQoJewoJCSRvdXRwdXQgPSAiIjsKCQkkY29udGVudCA9ICR0aGlzLT5tb2RlbFsnY29udGVudCddOwoJCSRwcmVmaXggPSBpc3NldCgkdGhpcy0+bW9kZWxbJ3ByZWZpeCddKT8kdGhpcy0+bW9kZWxbJ3ByZWZpeCddOiIiOwoJCSRwb3N0Zml4ID0gaXNzZXQoJHRoaXMtPm1vZGVsWydwb3N0Zml4J10pPyR0aGlzLT5tb2RlbFsncG9zdGZpeCddOiIiOwoJCQoJCWlmICgkdGhpcy0+YW5pbWF0ZSAmJiBpc19udW1lcmljKCRjb250ZW50KSkKCQl7CgkJCWlmICgkdGhpcy0+Y29udGVudElzQ3VycmVuY3kgJiYgaXNzZXQoJHRoaXMtPm1vZGVsWydjdXJyZW5jeUNvZGUnXSkgJiYgTU1fQ3VycmVuY3lVdGlsOjppc1N1cHBvcnRlZEN1cnJlbmN5KCR0aGlzLT5tb2RlbFsnY3VycmVuY3lDb2RlJ10pKQoJCQl7CgkJCQkvL3dlIGtub3cgdGhlIG51bWJlciwgc28gd2UgY2FuIHVzZSBNQUdJQyB0byBzcGxpdCB0aGUgbnVtYmVyIG91dCBmcm9tIHRoZSByZXN0IG9mIHRoZSBmb3JtYXR0aW5nCgkJCQkkY3VycmVuY3lNZXRhZGF0YSA9IE1NX0N1cnJlbmN5VXRpbDo6Z2V0Q3VycmVuY3lNZXRhZGF0YSgkdGhpcy0+bW9kZWxbJ2N1cnJlbmN5Q29kZSddKTsKCQkJCSR0cyA9ICRjdXJyZW5jeU1ldGFkYXRhWydtb25fdGhvdXNhbmRzX3NlcCddOwoJCQkJJGRwID0gJGN1cnJlbmN5TWV0YWRhdGFbJ21vbl9kZWNpbWFsX3BvaW50J107CgkJCQkkZHBzID0gJGN1cnJlbmN5TWV0YWRhdGFbJ2ludF9mcmFjX2RpZ2l0cyddOwoJCQkJJHplcm8gPSAwLjAwOwoJCQkJCgkJCQkkbWV0YU92ZXJyaWRlID0gYXJyYXkoImludF9mcmFjX2RpZ2l0cyI9PigkdGhpcy0+c2hvd0N1cnJlbmN5RnJhY3Rpb25hbENvbXBvbmVudCA9PSBmYWxzZSk/MDokY3VycmVuY3lNZXRhZGF0YVsnaW50X2ZyYWNfZGlnaXRzJ10sJ3Bvc3RmaXhfaXNvJz0+JHRoaXMtPnBvc3RmaXhJc28pOwkJCQkKCQkJCSRmb3JtYXR0ZWRWYWx1ZSA9IF9tbW9mKCRjb250ZW50LCR0aGlzLT5tb2RlbFsnY3VycmVuY3lDb2RlJ10sJG1ldGFPdmVycmlkZSk7CgkJCQkKCQkJCSRjb21wb25lbnRzID0gcHJlZ19zcGxpdCgiL1swLTl7JHRzfV0rW3skZHB9XSpbMC05XSovIiwgJGZvcm1hdHRlZFZhbHVlKTsKCQkJCWlmIChpc19hcnJheSgkY29tcG9uZW50cykgJiYgKGNvdW50KCRjb21wb25lbnRzKSA9PSAyKSAmJiAoJGRwID09ICIuIikpCgkJCQl7CgkJCQkJJHByZWZpeC49ICRjb21wb25lbnRzWzBdOwoJCQkJCSRwb3N0Zml4ID0gJGNvbXBvbmVudHNbMV0uJHBvc3RmaXg7CgkJCQkJJGNvbnRlbnQgPSBudW1iZXJfZm9ybWF0KCRjb250ZW50LCRkcHMsIi4iLCIiKTsKCQkJCX0KCQkJCWVsc2UgCgkJCQl7CgkJCQkJcmV0dXJuICR0aGlzLT5yZW5kZXJOb25BbmltYXRlZCgkY29udGVudCwkcHJlZml4LCRwb3N0Zml4KTsKCQkJCX0KCQkJfQoJCQllbHNlIAoJCQl7CgkJCQkkaXNGbG9hdCA9IGlzX2Zsb2F0KDArJGNvbnRlbnQpOwoJCQkJaWYgKCgkY29udGVudCA9PSAwKSAmJiAoKHN0cmluZykkY29udGVudCAhPT0gIjAuMDAiKSkKCQkJCXsKCQkJCQkkaXNGbG9hdCA9IGZhbHNlOwoJCQkJfQkJCQoJCQkJJHRzID0gIiwiOwoJCQkJJGRwcyA9ICRpc0Zsb2F0PzI6MDsKCQkJCSR6ZXJvID0gJGlzRmxvYXQ/IjAuMDAiOiIwIjsKCQkJfQoJCQkKCQkJJG91dHB1dCAuPSAieyRwcmVmaXh9PHNwYW4gY2xhc3M9J21tLXJlcG9ydC1hbmltYXRlZCcgZGF0YS1hbmltLXRhcmdldD0neyRjb250ZW50fScgZGF0YS1hbmltLXNlcD0neyR0c30nIGRhdGEtYW5pbS1kcHM9J3skZHBzfSc+eyR6ZXJvfTwvc3Bhbj57JHBvc3RmaXh9IjsKCQkJaWYgKCFlbXB0eSgkdGhpcy0+bW9kZWxbJ3VuaXRTcGVjaWZpZXInXSkpCgkJCXsKCQkJCSRjbG9zZVNwYW4gPSBmYWxzZTsKCQkJCWlmICghZW1wdHkoJHRoaXMtPm1vZGVsWyd1bml0U3BlY2lmaWVyQ2xhc3MnXSkpCgkJCQl7CgkJCQkJJG91dHB1dC49ICI8c3BhbiBjbGFzcz0neyR0aGlzLT5tb2RlbFsndW5pdFNwZWNpZmllckNsYXNzJ119Jz4iOwoJCQkJCSRjbG9zZVNwYW4gPSB0cnVlOwoJCQkJfQoJCQkJJG91dHB1dCAuPSAiIHskdGhpcy0+bW9kZWxbJ3VuaXRTcGVjaWZpZXInXX0iOwoJCQkJJG91dHB1dCAuPSAoJGNsb3NlU3Bhbik/Ijwvc3Bhbj4iOiIiOwoJCQl9CgkJCSRvdXRwdXQgLj0gIjxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz5tbWpzLmFuaW1hdGUoJ3skdGhpcy0+Y29udGFpbmVyfScpOzwvc2NyaXB0PiI7CgkJCXJldHVybiAkb3V0cHV0OwoJCX0JCgkJZWxzZSAKCQl7CgkJCXJldHVybiAkdGhpcy0+cmVuZGVyTm9uQW5pbWF0ZWQoJGNvbnRlbnQsJHByZWZpeCwkcG9zdGZpeCk7CgkJfQkKCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gcmVuZGVyTm9uQW5pbWF0ZWQoJGNvbnRlbnQsICRwcmVmaXg9IiIsICRwb3N0Zml4PSIiKQoJewoJCSRvdXRwdXQgPSAieyRwcmVmaXh9eyRjb250ZW50fXskcG9zdGZpeH0iOwoJCWlmICghZW1wdHkoJHRoaXMtPm1vZGVsWyd1bml0U3BlY2lmaWVyJ10pKQoJCXsKCQkJJGNsb3NlU3BhbiA9IGZhbHNlOwoJCQlpZiAoIWVtcHR5KCR0aGlzLT5tb2RlbFsndW5pdFNwZWNpZmllckNsYXNzJ10pKQoJCQl7CgkJCQkkb3V0cHV0Lj0gIjxzcGFuIGNsYXNzPSd7JHRoaXMtPm1vZGVsWyd1bml0U3BlY2lmaWVyQ2xhc3MnXX0nPiI7CgkJCQkkY2xvc2VTcGFuID0gdHJ1ZTsKCQkJfQoJCQkkb3V0cHV0IC49ICIgeyR0aGlzLT5tb2RlbFsndW5pdFNwZWNpZmllciddfSI7CgkJCSRvdXRwdXQgLj0gKCRjbG9zZVNwYW4pPyI8L3NwYW4+IjoiIjsKCQl9CgkJcmV0dXJuICRvdXRwdXQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRBbmltYXRlKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmFuaW1hdGU7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRBbmltYXRlKCRhbmltYXRlKQoJewoJCSR0aGlzLT5hbmltYXRlID0gJGFuaW1hdGU7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRTaG93Q3VycmVuY3lGcmFjdGlvbmFsQ29tcG9uZW50KCkKCXsKCQlyZXR1cm4gJHRoaXMtPnNob3dDdXJyZW5jeUZyYWN0aW9uYWxDb21wb25lbnQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRTaG93Q3VycmVuY3lGcmFjdGlvbmFsQ29tcG9uZW50KCRzaG93Q3VycmVuY3lGcmFjdGlvbmFsQ29tcG9uZW50KQoJewoJCSR0aGlzLT5zaG93Q3VycmVuY3lGcmFjdGlvbmFsQ29tcG9uZW50ID0gJHNob3dDdXJyZW5jeUZyYWN0aW9uYWxDb21wb25lbnQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRQb3N0Zml4SXNvKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnBvc3RmaXhJc287Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRQb3N0Zml4SXNvKCRwb3N0Zml4SXNvKQoJewoJCSR0aGlzLT5wb3N0Zml4SXNvID0gJHBvc3RmaXhJc287Cgl9CgkKfQoK', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(52, 'getresponseemailserviceprovider', '', 0, '2018-11-21 06:38:53'),
(53, 'sync', 'YWJzdHJhY3QgY2xhc3MgTU1fU3luY3sKCXB1YmxpYyAkdGFibGVOYW1lUHJlZml4ID0gIlRhYmxlc19pbl8iOwoJcHJvdGVjdGVkICRkYiA9IG51bGw7Cglwcm90ZWN0ZWQgJGRiTmFtZSA9ICIiOwoJcHJvdGVjdGVkICRERUJVRyA9IGZhbHNlOwoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGRiUmVmLCAkZGJOYW1lKXsKCQkkdGhpcy0+ZGIgPSAkZGJSZWY7CgkJJHRoaXMtPmRiTmFtZSA9ICRkYk5hbWU7Cgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBpc1ZhbGlkQ29sdW1uT2JqZWN0KCRjb2x1bW4pewoJCWlmKCFpc3NldCgkY29sdW1uLT5GaWVsZCkpewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJDb2x1bW5zIGFycmF5IG11c3QgY29udGFpbiBhbiBpbmRleCBvZiBGaWVsZCIpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCWlmKCFpc3NldCgkY29sdW1uLT5UeXBlKSl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkNvbHVtbnMgYXJyYXkgbXVzdCBjb250YWluIGFuIGluZGV4IG9mIFR5cGUiKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlpZighaXNzZXQoJGNvbHVtbi0+TnVsbCkpewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJDb2x1bW5zIGFycmF5IG11c3QgY29udGFpbiBhbiBpbmRleCBvZiBOdWxsIik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaWYoIWlzc2V0KCRjb2x1bW4tPktleSkpewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJDb2x1bW5zIGFycmF5IG11c3QgY29udGFpbiBhbiBpbmRleCBvZiBLZXkiKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlpZighaXNzZXQoJGNvbHVtbi0+RGVmYXVsdCkgJiYgIWlzX251bGwoJGNvbHVtbi0+RGVmYXVsdCkpewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJDb2x1bW5zIGFycmF5IG11c3QgY29udGFpbiBhbiBpbmRleCBvZiBEZWZhdWx0Iik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJaWYoIWlzc2V0KCRjb2x1bW4tPkV4dHJhKSl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkNvbHVtbnMgYXJyYXkgbXVzdCBjb250YWluIGFuIGluZGV4IG9mIEV4dHJhIik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuIHRydWU7Cgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBhbHRlclRhYmxlU3FsKCR0YWJsZU5hbWUsICRjb2x1bW4sICRhZnRlclNxbD0iIil7CgkJaWYoIWlzX29iamVjdCgkY29sdW1uKSl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkNvbHVtbnMgbXVzdCBiZSBhbiBvYmplY3Qgb2YgY29sdW1uIik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJaWYoISR0aGlzLT5pc1ZhbGlkQ29sdW1uT2JqZWN0KCRjb2x1bW4pKXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkkZmllbGQgPSAkY29sdW1uLT5GaWVsZDsKCQkkdHlwZSA9ICRjb2x1bW4tPlR5cGU7CgkJJGlzTnVsbCA9ICgkY29sdW1uLT5OdWxsID09ICJOTyIpPyJOT1QgTlVMTCI6Ik5VTEwiOwoJCSRrZXkgPSAkY29sdW1uLT5LZXk7CgkJJGRlZmF1bHRTdHIgPSAoaXNfbnVsbCgkY29sdW1uLT5EZWZhdWx0KSB8fCBwcmVnX21hdGNoKCIvKFRJTUVTVEFNUCkvIiwgJGNvbHVtbi0+RGVmYXVsdCkpPyRjb2x1bW4tPkRlZmF1bHQ6Iid7JGNvbHVtbi0+RGVmYXVsdH0nIjsKCQkkZGVmYXVsdFZhbHVlID0gKCFlbXB0eSgkY29sdW1uLT5EZWZhdWx0KSk/IiBERUZBVUxUICIuJGRlZmF1bHRTdHIuIiI6IiI7CgkJJGV4dHJhID0gKCRjb2x1bW4tPkV4dHJhPT0iYXV0b19pbmNyZW1lbnQiKT8kY29sdW1uLT5FeHRyYToiIjsKCQoJCSRwcmltYXJ5S2V5ID0gIiI7CgkJJGluZGV4ZXMgPSAiIjsKCQkKCQlpZigka2V5ID09ICJQUkkiKXsKCQkJJHByaW1hcnlLZXkgPSAiLCBhZGQgcHJpbWFyeSBrZXkoIi4kZmllbGQuIikiOwoJCX0KCQllbHNlIGlmKCRrZXkgPT0gIk1VTCIpewoJCQkkaW5kZXhlcyA9ICIsIGFkZCBpbmRleCgiLiRmaWVsZC4iKSI7CgkJfQoJCQoJCSRzcWwgPSAiYWx0ZXIgdGFibGUgYHskdGFibGVOYW1lfWAgYWRkIGAiLiRmaWVsZC4iYCAiLiR0eXBlLiIgIi4kaXNOdWxsLiIgIi4kZGVmYXVsdFZhbHVlLiIgIi4kZXh0cmEuIiAiLiRhZnRlclNxbC4kaW5kZXhlcy4kcHJpbWFyeUtleTsKCQkKCQlyZXR1cm4gJHNxbDsKCX0KCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGNyZWF0ZVRhYmxlU3FsKCR0YWJsZU5hbWUsICRjb2x1bW5zKXsKCQlpZighaXNfYXJyYXkoJGNvbHVtbnMpKXsKCQkJJHRoaXMtPnNob3dEZWJ1ZygiQ29sdW1ucyBtdXN0IGJlIGFuIGFycmF5IG9mIGNvbHVtbnMiKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkkcHJpbWFyeUtleSA9ICIiOwoJCSRpbmRleGVzID0gIiI7CgkJJHNxbCA9ICJjcmVhdGUgdGFibGUgaWYgbm90IGV4aXN0cyBgeyR0YWJsZU5hbWV9YCAoIjsKCQlmb3JlYWNoKCRjb2x1bW5zIGFzICRmaWVsZE5hbWU9PiRhdHRyKXsKCQkJaWYoISR0aGlzLT5pc1ZhbGlkQ29sdW1uT2JqZWN0KCRhdHRyKSl7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJCgkJCSRmaWVsZCA9ICRhdHRyLT5GaWVsZDsKCQkJJHR5cGUgPSAkYXR0ci0+VHlwZTsKCQkJJGlzTnVsbCA9ICgkYXR0ci0+TnVsbCA9PSAiTk8iKT8iTk9UIE5VTEwiOiJOVUxMIjsKCQkJJGtleSA9ICRhdHRyLT5LZXk7CgkJCSRkZWZhdWx0U3RyID0gKGlzX251bGwoJGF0dHItPkRlZmF1bHQpIHx8IHByZWdfbWF0Y2goIi8oVElNRVNUQU1QKS8iLCAkYXR0ci0+RGVmYXVsdCkpPyRhdHRyLT5EZWZhdWx0OiIneyRhdHRyLT5EZWZhdWx0fSciOwoJCQkkZGVmYXVsdFZhbHVlID0gKCFlbXB0eSgkYXR0ci0+RGVmYXVsdCkpPyIgREVGQVVMVCAiLiRkZWZhdWx0U3RyLiIiOiIiOwoJCQkkZXh0cmEgPSAoJGF0dHItPkV4dHJhPT0iYXV0b19pbmNyZW1lbnQiKT8kYXR0ci0+RXh0cmE6IiI7CgkJCQoJCQlpZigka2V5ID09ICJQUkkiKXsKCQkJCSRwcmltYXJ5S2V5ID0gIlBSSU1BUlkgS0VZKCIuJGZpZWxkTmFtZS4iKSI7CgkJCX0KCQkJCgkJCWlmKCRrZXkgPT0gIk1VTCIpewoJCQkJJGluZGV4ZXMuPSAiSU5ERVgoIi4kZmllbGROYW1lLiIpLCI7CgkJCX0KCQkJCgkJCSRzcWwuPSAiYHskZmllbGROYW1lfWAgIi4kdHlwZS4iICIuJGlzTnVsbC4iICIuJGRlZmF1bHRWYWx1ZS4iICIuJGV4dHJhLiIsIjsKCQl9CgkJJHNxbC49ICRpbmRleGVzOwoJCSRzcWwuPSRwcmltYXJ5S2V5OwoJCSRzcWwuPSAiKTsiOwoJCQoJCXJldHVybiAkc3FsOwoJfQoKCXByb3RlY3RlZCBmdW5jdGlvbiB0YWJsZUV4aXN0cygkdGFibGVOYW1lKQoJewoJCSRzcWwgPSAic2hvdyB0YWJsZXMgbGlrZSAneyR0YWJsZU5hbWV9JyI7CgkJJHJvd3MgPSAkdGhpcy0+ZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCWlmKGlzX2FycmF5KCRyb3dzKSAmJiBjb3VudCgkcm93cyk+PTEpewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gZmllbGRFeGlzdHMoJGNvbHVtbiwgJHRhYmxlKQoJewoJCSRzcWwgPSAiZGVzY3JpYmUgeyR0YWJsZX0iOwoJCSRyb3dzID0gJHRoaXMtPmRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQoJCWZvcigkaT0wOyAkaTxjb3VudCgkcm93cyk7ICRpKyspCgkJewoJCQlpZigkY29sdW1uID09ICRyb3dzWyRpXS0+RmllbGQpCgkJCXsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIHNob3dEZWJ1Zygkc3RyKXsKCQlpZigkdGhpcy0+REVCVUcpewoJCQllY2hvIGdldF9jbGFzcygkdGhpcykuIiA6ICIuJHN0ci4iPGJyIC8+IjsKCQl9Cgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiB2YWxpZGF0ZURiUmVmKCl7CgkJaWYoIW1ldGhvZF9leGlzdHMoJHRoaXMtPmRiLCAiZ2V0X3Jlc3VsdHMiKSl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkRCIEFkYXB0ZXIgZG9lcyBub3QgaGF2ZSBhIGdldF9yZXN1bHRzIGZ1bmN0aW9uIik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuIHRydWU7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gZ2V0Q29sdW1ucygkdGFibGVOYW1lKXsKCQkkc3FsID0gImRlc2NyaWJlICIuJHRhYmxlTmFtZS4iOyI7CgkJJHJvd3MgPSAkdGhpcy0+ZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCWlmKCFpc19hcnJheSgkcm93cykpewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJnZXRfcmVzdWx0cyBkaWQgbm90IHJldHVybiBhbiBhcnJheSA6ICIuanNvbl9lbmNvZGUoJHJvd3MpKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkkY29sdW1ucyA9IGFycmF5KCk7CgkJZm9yZWFjaCgkcm93cyBhcyAkcm93KXsKCQkJLyoKCQkJICogb2JqZWN0KHN0ZENsYXNzKSM1ICg2KSB7IFsiRmllbGQiXT0+IHN0cmluZygyKSAiaWQiIFsiVHlwZSJdPT4gc3RyaW5nKDcpICJpbnQoMTEpIiBbIk51bGwiXT0+IHN0cmluZygyKSAiTk8iIAoJCQkgKiBbIktleSJdPT4gc3RyaW5nKDMpICJQUkkiIFsiRGVmYXVsdCJdPT4gTlVMTCBbIkV4dHJhIl09PiBzdHJpbmcoMTQpICJhdXRvX2luY3JlbWVudCIgfQoJCQkgKi8KCQkJJGNvbHVtbnNbJHJvdy0+RmllbGRdID0gJHJvdzsKCQl9CgkJCgkJcmV0dXJuICRjb2x1bW5zOwoJfQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gZ2V0VGFibGVzKCl7CgkJJHNxbCA9ICJzaG93IHRhYmxlczsiOwoJCSRyb3dzID0gJHRoaXMtPmRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQlpZighaXNfYXJyYXkoJHJvd3MpKXsKCQkJJHRoaXMtPnNob3dEZWJ1ZygiZ2V0X3Jlc3VsdHMgZGlkIG5vdCByZXR1cm4gYW4gYXJyYXkgOiAiLmpzb25fZW5jb2RlKCRyb3dzKSk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJZm9yZWFjaCgkcm93cyBhcyAkcm93KXsKCQkJJGtleSA9ICR0aGlzLT50YWJsZU5hbWVQcmVmaXguJHRoaXMtPmRiTmFtZTsKCQkJaWYoJHJvdy0+JGtleSA9PSAibW1fY291cG9uX3ZpZXciKXsKCQkJCWNvbnRpbnVlOwoJCQl9CgkJCSR0YWJsZXNbJHJvdy0+JGtleV0gPSAkdGhpcy0+Z2V0Q29sdW1ucygkcm93LT4ka2V5KTsKCQl9CgkJcmV0dXJuICR0YWJsZXM7Cgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBpc1NhZmUoJGRpck5hbWUpewoJCWlmKCFpc19kaXIoJGRpck5hbWUpKXsKCQkJJHRoaXMtPnNob3dEZWJ1ZygiRGlyZWN0b3J5IGlzIG5vdCBmb3VuZCA6IHskZGlyTmFtZX0iKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQlpZighaXNfd3JpdGVhYmxlKCRkaXJOYW1lKSl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkRpcmVjdG9yeSBpcyBub3Qgd3JpdGVhYmxlIDogeyRkaXJOYW1lfSIpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCWlmKCEkdGhpcy0+dmFsaWRhdGVEYlJlZigpKXsKCQkJJHRoaXMtPnNob3dEZWJ1ZygiREIgQWRhcHRlciBkb2VzIG5vdCBoYXZlIHRoZSBwcm9wZXIgZnVuY3Rpb25zIik7CgkJCXJldHVybiBmYWxzZTsJCgkJfQoJCQoJCXJldHVybiB0cnVlOwoJfQoJCglhYnN0cmFjdCBmdW5jdGlvbiBleHBvcnRGaWxlKCRkaXIpOwoJYWJzdHJhY3QgZnVuY3Rpb24gZXhwb3J0U2NyZWVuKCk7Cn0=', 0, '2018-11-21 06:38:53'),
(54, 'objectcache', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogVGhlIG9iamVjdCBjYWNoZSBpcyBtZWFudCB0byBiZSBhIHdyYXBwZXIgYXJvdW5kIGFuIGluLW1lbW9yeSBwZXItcHJvY2VzcyBjYWNoZSAKICogCiAqLwpjbGFzcyBNTV9PYmplY3RDYWNoZQp7CglwdWJsaWMgc3RhdGljICRLRVlfTEFTVF9GT1JNID0gImxhc3QtZm9ybSI7CgkKCXByb3RlY3RlZCBzdGF0aWMgJFdQX0NBQ0hFX0dST1VQID0gIm1lbWJlcm1vdXNlLWNhY2hlIjsKCQoJcHJvdGVjdGVkIHN0YXRpYyAkY2FjaGVEYXRhID0gYXJyYXkoKTsKCQoJCgkvKioKCSAqIFJldHJpZXZlIGEgdmFsdWUgZm9yIHRoZSBzdXBwbGllZCBrZXkKCSAqIAoJICogQHBhcmFtIHN0cmluZyAka2V5IFRoZSBrZXkgdG8gcmV0cmlldmUKCSAqIEBwYXJhbSBib29sZWFuICRleGlzdHMgSWYgdGhlIGtleSBleGlzdHMgaW4gdGhlIGNhY2hlOyB1c2VkIHRvIGRpc2FtYmlndWF0ZSBudWxsIHJldHVybiB2YWx1ZXMuIFZhcmlhYmxlIGlzIHBhc3NlZCBpbiBieSByZWZlcmVuY2UKCSAqIAoJICogQHJldHVybiBtaXhlZCBUaGUgc3RvcmVkIHZhbHVlLCBudWxsIGlmIG5vdCBmb3VuZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldCgka2V5LCAmJGV4aXN0cz1udWxsKQoJewoJCWlmIChpc3NldChzZWxmOjokY2FjaGVEYXRhWyRrZXldKSkKCQl7CgkJCSRleGlzdHMgPSB0cnVlOwoJCQlyZXR1cm4gc2VsZjo6JGNhY2hlRGF0YVska2V5XTsKCQl9CgkJZWxzZSAKCQl7CgkJCSRleGlzdHMgPSBmYWxzZTsKCQkJcmV0dXJuIG51bGw7CgkJfQoJfQoJCgkKCS8qKgoJICogU3RvcmUgYSB2YWx1ZSBmb3IgdGhlIHN1cHBsaWVkIGtleQoJICogCgkgKiBAcGFyYW0gc3RyaW5nICRrZXkKCSAqIEBwYXJhbSBtaXhlZCAkdmFsdWUKCSAqIAoJICogQHJldHVybiBib29sZWFuIHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZS4gZmFsc2UgbW9zdCBsaWtlbHkgaW5kaWNhdGVzIGEgZmFpbHVyZSBvZiB0aGUgdW5kZXJseWluZyBjYWNoaW5nIG1lY2hhbmlzbQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNldCgka2V5LCAkdmFsdWUpCgl7CgkJc2VsZjo6JGNhY2hlRGF0YVska2V5XSA9ICR2YWx1ZTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCQoJCgkvKioKCSAqIERlbGV0ZSBhIHZhbHVlIHdpdGggdGhlIGFzc29jaWF0ZWQga2V5IGZyb20gdGhlIGNhY2hlCgkgKiAKCSAqIEBwYXJhbSBzdHJpbmcgJGtleQoJICogCgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlLiBmYWxzZSBtb3N0IGxpa2VseSBpbmRpY2F0ZXMgYSBmYWlsdXJlIG9mIHRoZSB1bmRlcmx5aW5nIGNhY2hpbmcgbWVjaGFuaXNtCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZGVsZXRlKCRrZXk9IiIpCgl7CgkJdW5zZXQoc2VsZjo6JGNhY2hlRGF0YVska2V5XSk7CgkJcmV0dXJuIHRydWU7Cgl9CgkKCQoJLyoqCgkgKiBEZWxldGUgYWxsIGNhY2hlZCB2YWx1ZXMgZnJvbSB0aGUgY2FjaGUKCSAqIAoJICogQHJldHVybiBib29sZWFuIHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZS4gZmFsc2UgbW9zdCBsaWtlbHkgaW5kaWNhdGVzIGEgZmFpbHVyZSBvZiB0aGUgdW5kZXJseWluZyBjYWNoaW5nIG1lY2hhbmlzbQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGZsdXNoKCkKCXsKCQlzZWxmOjokY2FjaGVEYXRhID0gYXJyYXkoKTsKCX0KfQ==', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(55, 'flatrateshippingmethod', '', 0, '2018-11-21 06:38:53'),
(56, 'mailchimpemailserviceprovider', '', 0, '2018-11-21 06:38:53'),
(57, 'twitterloginextension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmNsYXNzIE1NX1R3aXR0ZXJMb2dpbkV4dGVuc2lvbiBleHRlbmRzIE1NX0Fic3RyYWN0U29jaWFsTG9naW5FeHRlbnNpb24KewkKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRhdXRvbG9hZERlcGVuZGVuY2llcz10cnVlLCRjb25maWdEYXRhPSIiKSAKCXsgCgkJLy90d2l0dGVyIHNwZWNpZmljIHNldHRpbmdzCgkJJHRoaXMtPnRva2VuID0gTU1fRXh0ZW5zaW9uOjokVFdJVFRFUl9MT0dJTl9UT0tFTjsKCQkkdGhpcy0+bGlzdGluZ0ltYWdlICA9ICJodHRwczovL21lbWJlcm1vdXNlLmNvbS9hc3NldHMvcGx1Z2luX2ltYWdlcy9sb2dvcy9leHRlbnNpb25zLXR3aXR0ZXIuanBnIjsKCQkkdGhpcy0+ZXh0ZW5zaW9uTmFtZSA9ICJMb2dpbiB3aXRoIFR3aXR0ZXIiOwoJCSR0aGlzLT5wcm92aWRlck5hbWUgID0gIlR3aXR0ZXIiOwoJCSR0aGlzLT5rZXlOYW1lICAgICAgID0gIkFQSSBLZXkiOwoJCSR0aGlzLT5zZWNyZXROYW1lICAgID0gIkFQSSBTZWNyZXQiOwoJCSR0aGlzLT5wcm92aWRlc0VtYWlsID0gZmFsc2U7CgkgCSR0aGlzLT5zdXBwb3J0QXJ0aWNsZVVybCA9ICJodHRwOi8vc3VwcG9ydC5tZW1iZXJtb3VzZS5jb20vc3VwcG9ydC9zb2x1dGlvbnMvYXJ0aWNsZXMvOTAwMDAyMDMwOS1jb25maWd1cmluZy10d2l0dGVyLWxvZ2luIjsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCRhdXRvbG9hZERlcGVuZGVuY2llcywkY29uZmlnRGF0YSk7Cgl9CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBnZXRIeWJyaWRBdXRoQ29uZmlnKCkKCXsKCQkkY29uZmlnID0gcGFyZW50OjpnZXRIeWJyaWRBdXRoQ29uZmlnKCk7CgkJJGNvbmZpZ1sicHJvdmlkZXJzIl0gPSBhcnJheSAoCgkJCQkkdGhpcy0+dG9rZW4gPT4gYXJyYXkgKAoJCQkJCQkiZW5hYmxlZCIgPT4gdHJ1ZSwKCQkJCQkJImtleXMiICAgID0+IGFycmF5ICggImtleSIgPT4gJHRoaXMtPmFwaUtleSwgInNlY3JldCIgPT4gJHRoaXMtPmFwaVNlY3JldCApCQkJCQkJCQoJCQkJKQoJCSk7CgkJcmV0dXJuICRjb25maWc7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGRpc3BsYXlDb25maWdTY3JlZW4oKQoJewoJCSRjYWxsYmFja1VybCA9ICR0aGlzLT5saWJyYXJ5VXJsLiIvaW5kZXgucGhwP2hhdXRoLmRvbmU9VHdpdHRlciI7CgkJJHRoaXMtPmFkZGl0aW9uYWxJbmZvID0gIjx0cj4KCQkJCTx0ZCBOT1dSQVA+Q2FsbGJhY2sgVVJMPC90ZD4KCQkJCTx0ZCBOT1dSQVA+CgkJCQkJPHNwYW4gc3R5bGU9J2ZvbnQtZmFtaWx5OmNvdXJpZXI7IGZvbnQtc2l6ZToxMXB4Oyc+CgkJCQkJPGlucHV0IGlkPSdtbS10d2l0dGVyLWNhbGxiYWNrLXVybCcgdHlwZT0ndGV4dCcgcmVhZG9ubHkgdmFsdWU9J3skY2FsbGJhY2tVcmx9JyBzdHlsZT0nd2lkdGg6NjAwcHgnIG9uY2xpY2s9XCJqUXVlcnkoJyNtbS1nb29nbGUtY2FsbGJhY2stdXJsJykuZm9jdXMoKTsgalF1ZXJ5KCcjbW0tZ29vZ2xlLWNhbGxiYWNrLXVybCcpLnNlbGVjdCgpO1wiIC8+CgkJCQkJPC9zcGFuPgoJCQkJPC90ZD4KCQkJPC90cj5cbiI7CgkJcmV0dXJuIHBhcmVudDo6ZGlzcGxheUNvbmZpZ1NjcmVlbigpOwkKCX0KfQ==', 0, '2018-11-21 06:38:53'),
(58, 'affiliateproviderdialog', 'Y2xhc3MgTU1fQWZmaWxpYXRlUHJvdmlkZXJEaWFsb2cgewoJCglwdWJsaWMgJGRpYWxvZyA9ICIiOwoJcHVibGljICRjb250cm9scyA9ICIiOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJJHRoaXMtPmNvbnRyb2xzID0gPDw8Q29udHJvbHMKCQkJPGJ1dHRvbiBpZD0iYWZmaWxpYXRlLXByb3ZpZGVyLWNvbmZpZ3VyZSIgY2xhc3M9Im1tLXVpLWJ1dHRvbiBibHVlIiBvbkNsaWNrPSJtbWpzLnNob3dBZGRpdGlvbmFsT3B0aW9uc0RpYWxvZyhqUXVlcnkoJyNwcm92aWRlci1jb25maWctZm9ybSA6aW5wdXQnKS5zZXJpYWxpemVBcnJheSgpKTsgcmV0dXJuIGZhbHNlOyIgc3R5bGU9ImN1cnNvcjpwb2ludGVyIj5Db25maWd1cmU8L2J1dHRvbj4KCQkJPGJ1dHRvbiBpZD0icmVzZXQiIGNsYXNzPSJtbS11aS1idXR0b24iIHN0eWxlPSJkaXNwbGF5Om5vbmUiIG9uQ2xpY2s9Im1tanMucHJvdmlkZXJPcHRpb25zUmVzZXQoKTsgcmV0dXJuIGZhbHNlOyIgc3R5bGU9ImN1cnNvcjpwb2ludGVyIj5SZXNldDwvYnV0dG9uPgpDb250cm9sczsKCX0KCQkKfQoK', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(59, 'limelightproduct', '', 0, '2018-11-21 06:38:53'),
(60, 'twocheckoutservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(61, 'corepageengine', '', 0, '2018-11-21 06:38:53'),
(62, 'paymentservicemediator', 'LyoqCiAqCiAqTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwoKLyoqCiAqIE1NX1BheW1lbnRTZXJ2aWNlTWVkaWF0b3IgaXMgYSBjbGFzcyB0aGF0IHNlcnZlcyBhcyBhIG1lZGlhdG9yIGJldHdlZW4gTWVtYmVyTW91c2UgYW5kIHRoZSBhY3RpdmUgcGF5bWVudCBzZXJ2aWNlcwogKiBJdCBub3RpZmllcyB0aGUgcGF5bWVudCBzZXJ2aWNlcyB0aGF0IHRoZXkgbmVlZCB0byBwZXJmb3JtIG5vbi1wYXltZW50IHNwZWNpZmljIHRhc2tzIHN1Y2ggYXMgdXBkYXRpbmcgcHJvZHVjdCBpbmZvcm1hdGlvbi4KICogVGhlIG1lZGlhdG9yIG1heSB1cGRhdGUgbXVsdGlwbGUgcGF5bWVudCBzZXJ2aWNlcyBhcyBhIHJlc3VsdCBvZiBvbmUgY2FsbCwgZGVwZW5kaW5nIG9uIGNvbmZpZ3VyYXRpb24KICovCgpjbGFzcyBNTV9QYXltZW50U2VydmljZU1lZGlhdG9yIHsKCQoJcHJpdmF0ZSAkYXN5bmMgICAgICA9IGZhbHNlOyAvL2NvbWluZyBzb29uCglwcml2YXRlICRhY3RpdmVPbmx5ID0gdHJ1ZTsgIC8vZGV0ZXJtaW5lcyB3aGV0aGVyIGluYWN0aXZlIHNlcnZpY2VzIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBhbHNvCgkKCQoJLyoqCgkgKiBOb3RpZmllcyBwYXltZW50IHNlcnZpY2VzIGEgbmV3IHByb2R1Y3Qgd2FzIGFkZGVkCgkgKiAKCSAqIEBwYXJhbSBNTV9Qcm9kdWN0ICRwcm9kdWN0IFRoZSBuZXdseSBhZGRlZCBwcm9kdWN0CgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBhbGwgdGhlIG5vdGlmaWVkIHNlcnZpY2VzIGhhbmRsZWQgdGhlIG5vdGlmaWNhdGlvbiB3aXRob3V0IGVycm9yLCBmYWxzZSBvdGhlcndpc2UKCSAqLwoJcHVibGljIGZ1bmN0aW9uIG5vdGlmeVByb2R1Y3RBZGRlZChNTV9Qcm9kdWN0ICRwcm9kdWN0KQoJewoJCXJldHVybiAkdGhpcy0+bm90aWZ5U2VydmljZXNPZkV2ZW50KE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcjo6UFJPRFVDVF9BRERFRCwgJHByb2R1Y3QpOwoJfQoJCgoJLyoqCgkgKiBOb3RpZmllcyBwYXltZW50IHNlcnZpY2VzIGEgcHJvZHVjdCB3YXMgdXBkYXRlZAoJICoKCSAqIEBwYXJhbSBNTV9Qcm9kdWN0ICRwcm9kdWN0IFRoZSB1cGRhdGVkIHByb2R1Y3QKCSAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIGlmIGFsbCB0aGUgbm90aWZpZWQgc2VydmljZXMgaGFuZGxlZCB0aGUgbm90aWZpY2F0aW9uIHdpdGhvdXQgZXJyb3IsIGZhbHNlIG90aGVyd2lzZQoJICovCglwdWJsaWMgZnVuY3Rpb24gbm90aWZ5UHJvZHVjdFVwZGF0ZWQoTU1fUHJvZHVjdCAkcHJvZHVjdCkKCXsKCQlyZXR1cm4gJHRoaXMtPm5vdGlmeVNlcnZpY2VzT2ZFdmVudChNTV9NZW1iZXJNb3VzZUV2ZW50TGlzdGVuZXI6OlBST0RVQ1RfVVBEQVRFRCwkcHJvZHVjdCk7Cgl9CgkKCgkvKioKCSAqIE5vdGlmaWVzIHBheW1lbnQgc2VydmljZXMgYSBwcm9kdWN0IHdhcyByZW1vdmVkCgkgKgoJICogQHBhcmFtIE1NX1Byb2R1Y3QgJHByb2R1Y3QgVGhlIHJlbW92ZWQgcHJvZHVjdAoJICogQHJldHVybiBib29sZWFuIHRydWUgaWYgYWxsIHRoZSBub3RpZmllZCBzZXJ2aWNlcyBoYW5kbGVkIHRoZSBub3RpZmljYXRpb24gd2l0aG91dCBlcnJvciwgZmFsc2Ugb3RoZXJ3aXNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBub3RpZnlQcm9kdWN0UmVtb3ZlZChNTV9Qcm9kdWN0ICRwcm9kdWN0KQoJewoJCXJldHVybiAkdGhpcy0+bm90aWZ5U2VydmljZXNPZkV2ZW50KE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcjo6UFJPRFVDVF9SRU1PVkVELCRwcm9kdWN0KTsKCX0KCQoJCgkvKioKCSAqIE5vdGlmaWVzIHBheW1lbnQgc2VydmljZXMgYSBuZXcgY291cG9uIHdhcyBhZGRlZAoJICoKCSAqIEBwYXJhbSBNTV9Db3VwbiAkY291cG9uIFRoZSBuZXdseSBhZGRlZCBjb3Vwb24KCSAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIGlmIGFsbCB0aGUgbm90aWZpZWQgc2VydmljZXMgaGFuZGxlZCB0aGUgbm90aWZpY2F0aW9uIHdpdGhvdXQgZXJyb3IsIGZhbHNlIG90aGVyd2lzZQoJICovCglwdWJsaWMgZnVuY3Rpb24gbm90aWZ5Q291cG9uQWRkZWQoTU1fQ291cG9uICRjb3Vwb24pCgl7CgkJcmV0dXJuICR0aGlzLT5ub3RpZnlTZXJ2aWNlc09mRXZlbnQoTU1fTWVtYmVyTW91c2VFdmVudExpc3RlbmVyOjpDT1VQT05fQURERUQsICRjb3Vwb24pOwoJfQoJCgkKCS8qKgoJICogTm90aWZpZXMgcGF5bWVudCBzZXJ2aWNlcyBhIGNvdXBvbiB3YXMgdXBkYXRlZAoJICoKCSAqIEBwYXJhbSBNTV9Db3VwbiAkY291cG9uIFRoZSB1cGRhdGVkIGNvdXBvbgoJICogQHJldHVybiBib29sZWFuIHRydWUgaWYgYWxsIHRoZSBub3RpZmllZCBzZXJ2aWNlcyBoYW5kbGVkIHRoZSBub3RpZmljYXRpb24gd2l0aG91dCBlcnJvciwgZmFsc2Ugb3RoZXJ3aXNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBub3RpZnlDb3Vwb25VcGRhdGVkKE1NX0NvdXBvbiAkY291cG9uKQoJewoJCXJldHVybiAkdGhpcy0+bm90aWZ5U2VydmljZXNPZkV2ZW50KE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcjo6Q09VUE9OX1VQREFURUQsICRjb3Vwb24pOwoJfQoJCgkKCS8qKgoJICogTm90aWZpZXMgcGF5bWVudCBzZXJ2aWNlcyBhIGNvdXBvbiB3YXMgcmVtb3ZlZAoJICoKCSAqIEBwYXJhbSBNTV9Db3VwbiAkY291cG9uIFRoZSByZW1vdmVkIGNvdXBvbgoJICogQHJldHVybiBib29sZWFuIHRydWUgaWYgYWxsIHRoZSBub3RpZmllZCBzZXJ2aWNlcyBoYW5kbGVkIHRoZSBub3RpZmljYXRpb24gd2l0aG91dCBlcnJvciwgZmFsc2Ugb3RoZXJ3aXNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBub3RpZnlDb3Vwb25SZW1vdmVkKE1NX0NvdXBvbiAkY291cG9uKQoJewoJCXJldHVybiAkdGhpcy0+bm90aWZ5U2VydmljZXNPZkV2ZW50KE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcjo6Q09VUE9OX1JFTU9WRUQsICRjb3Vwb24pOwoJfQoKCQoJLyoqCgkgKiBOb3RpZmllcyBzZXJ2aWNlcyB0aGF0IGFuIGV2ZW50IHdhcyByZWNlaXZlZCwgYW5kIHBhc3NlcyB0aHJvdWdoIHRoZSBldmVudCB0eXBlIGFuZCBhc3NvY2lhdGVkIGRhdGEKCSAqIAoJICogQHBhcmFtIGludGVnZXIgJGV2ZW50VHlwZSBPbmUgb2YgdGhlIGNvbnN0YW50cyBkZWZpbmVkIGluIE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcgoJICogQHBhcmFtIHZhcmllcyAkZXZlbnREYXRhIFRoZSBkYXRhIGF0dGFjaGVkIHRvIHRoZSBldmVudAoJICogQHJldHVybiBib29sZWFuIGJvb2xlYW4gdHJ1ZSBpZiBhbGwgdGhlIG5vdGlmaWVkIHNlcnZpY2VzIGhhbmRsZWQgdGhlIG5vdGlmaWNhdGlvbiB3aXRob3V0IGVycm9yLCBmYWxzZSBvdGhlcndpc2UuIFRoaXMgaXMgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGNhbGxlcgoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gbm90aWZ5U2VydmljZXNPZkV2ZW50KCRldmVudFR5cGUsICRldmVudERhdGEpCgl7CgkJJHBvdGVudGlhbFNlcnZpY2VzID0gKCR0aGlzLT5hY3RpdmVPbmx5KT9NTV9QYXltZW50U2VydmljZUZhY3Rvcnk6OmdldEF2YWlsYWJsZVBheW1lbnRTZXJ2aWNlcygpOk1NX1BheW1lbnRTZXJ2aWNlRmFjdG9yeTo6Z2V0UGF5bWVudFNlcnZpY2VzQXJyYXkoKTsKCQkkb3ZlcmFsbFN0YXR1cyA9IG5ldyBNTV9SZXNwb25zZSgpOwoJCS8vVE9ETzogUkVGQUNUT1I6IGltcGxlbWVudCBhc3luY2ggZnVuY3Rpb25hbGl0eQoJCWZvcmVhY2ggKCRwb3RlbnRpYWxTZXJ2aWNlcyBhcyAkcG90ZW50aWFsU2VydmljZSkKCQl7CgkJCWlmICgkcG90ZW50aWFsU2VydmljZSBpbnN0YW5jZW9mIE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcikKCQkJewoJCQkJLy9vbmx5IHNlbmQgZXZlbnRzIHRvIHNlcnZpY2VzIHRoYXQgaW1wbGVtZW50IHRoZSBsaXN0ZW5lciBpbnRlcmZhY2UKCQkJCSRvdmVyYWxsU3RhdHVzID0gKCRvdmVyYWxsU3RhdHVzLT50eXBlID09IE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyk/KCRwb3RlbnRpYWxTZXJ2aWNlLT5ldmVudFJlY2VpdmVkKCRldmVudFR5cGUsICRldmVudERhdGEpKTokb3ZlcmFsbFN0YXR1czsKCQkJfQoJCX0KCQlyZXR1cm4gJG92ZXJhbGxTdGF0dXM7Cgl9Cn0K', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(63, 'customform', '', 0, '2018-11-21 06:38:53'),
(64, 'accessrightsview', '', 0, '2018-11-21 06:38:53'),
(65, 'totalvaluereport', '', 0, '2018-11-21 06:38:53'),
(66, 'userdefinedpage', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fVXNlckRlZmluZWRQYWdlIGV4dGVuZHMgTU1fRW50aXR5CnsKCXB1YmxpYyBzdGF0aWMgJElDT05fVFlQRV9QQUdFID0gMTsKCXB1YmxpYyBzdGF0aWMgJElDT05fVFlQRV9SRVBPUlQgPSAyOwoJCglwcml2YXRlICRuYW1lID0gIiI7Cglwcml2YXRlICR1cmwgPSAiIjsKCXByaXZhdGUgJGljb25UeXBlID0gMTsKCQoJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoKSAKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfVVNFUl9ERUZJTkVEX1BBR0VTLiIgV0hFUkUgaWQ9JyIuJHRoaXMtPmlkLiInOyI7CgkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCQoJCWlmKCRyZXN1bHQpIAoJCXsKCQkJJHRoaXMtPnNldERhdGEoJHJlc3VsdCk7CgkJfQoJCWVsc2UgCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgoJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCgl7CgkJdHJ5IAoJCXsKCQkJJHRoaXMtPm5hbWUgPSAkZGF0YS0+bmFtZTsKCQkJJHRoaXMtPnVybCA9ICRkYXRhLT51cmw7CgkJCSR0aGlzLT5pY29uVHlwZSA9ICRkYXRhLT5pY29uX3R5cGU7CgkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpIHsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZGVsZXRlKCkKCXsKCQkKCQlnbG9iYWwgJHdwZGI7CgkJaWYoaW50dmFsKCR0aGlzLT5pZCk+MCl7CgkJCSRzcWwgPSAiZGVsZXRlIGZyb20gIi5NTV9UQUJMRV9VU0VSX0RFRklORURfUEFHRVMuIiB3aGVyZSBpZD0neyR0aGlzLT5pZH0nIGxpbWl0IDEiOwoJCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCRzcWwpOwoJCQlpZigkcmVzdWx0PT09ZmFsc2UpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCByZW1vdmUgdXNlci1kZWZpbmVkIHBhZ2UgZHVlIHRvIFNRTCBlcnJvci4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCByZW1vdmUgaW52YWxpZCB1c2VyLWRlZmluZWQgcGFnZS4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGNvbW1pdERhdGEoKQoJewkKCQlnbG9iYWwgJHdwZGI7CgkJaWYoaW50dmFsKCR0aGlzLT5pZCk+MCkKCQl7CgkJCSRzcWwgPSAidXBkYXRlICIuTU1fVEFCTEVfVVNFUl9ERUZJTkVEX1BBR0VTLiIgc2V0IAoJCQkJCQluYW1lPSclcycsIAoJCQkJCQl1cmw9JyVzJywKCQkJCQkJaWNvbl90eXBlPSclcycKCQkJCQl3aGVyZSAKCQkJCQkJaWQ9J3skdGhpcy0+aWR9JwoJCQkiOwoJCQkkcHJlcGFyZWRTcWwgPSAkd3BkYi0+cHJlcGFyZSgkc3FsLCAkdGhpcy0+bmFtZSwgJHRoaXMtPnVybCwgJHRoaXMtPmljb25UeXBlKTsKCQkJJHJldCA9ICR3cGRiLT5xdWVyeSgkcHJlcGFyZWRTcWwpOwoJCQlpZigkcmV0PT09ZmFsc2UpewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IHNhdmUgcXVlcnkgeyRwcmVwYXJlZFNxbH0uIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJJHNxbCA9ICJpbnNlcnQgaW50byAiLk1NX1RBQkxFX1VTRVJfREVGSU5FRF9QQUdFUy4iIHNldCAKCQkJCQkJbmFtZT0nJXMnLCAKCQkJCQkJdXJsPSclcycsCgkJCQkJCWljb25fdHlwZT0nJXMnCgkJCSI7CgkJCSRwcmVwYXJlZFNxbCA9ICR3cGRiLT5wcmVwYXJlKCRzcWwsICR0aGlzLT5uYW1lLCAkdGhpcy0+dXJsLCAkdGhpcy0+aWNvblR5cGUpOwoJCQkkcmV0ID0gJHdwZGItPnF1ZXJ5KCRwcmVwYXJlZFNxbCk7CgkJCWlmKCRyZXQ9PT1mYWxzZSl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDb3VsZCBub3Qgc2F2ZSBxdWVyeSB7JHByZXBhcmVkU3FsfS4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0UGFnZUxpc3QoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkkcGFnZXMgPSBhcnJheSgpOwoJCSRzcWwgPSAic2VsZWN0ICogZnJvbSAiLk1NX1RBQkxFX1VTRVJfREVGSU5FRF9QQUdFUy4iICI7CgkJCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJaWYoaXNfYXJyYXkoJHJvd3MpKQoJCXsKCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KQoJCQl7CgkJCQkkY3JudFBhZ2UgPSBuZXcgTU1fVXNlckRlZmluZWRQYWdlKCRyb3ctPmlkKTsKCQkJCQoJCQkJaWYoJGNybnRQYWdlLT5pc1ZhbGlkKCkpCgkJCQl7CgkJCQkJJHBhZ2VzW10gPSAkY3JudFBhZ2U7CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuICRwYWdlczsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEljb25MaXN0KCkKCXsKCQkkYXJyID0gIGFycmF5KAoJCQlzZWxmOjokSUNPTl9UWVBFX1BBR0U9PidQYWdlJywKCQkJc2VsZjo6JElDT05fVFlQRV9SRVBPUlQ9PidSZXBvcnQnLAoJCSk7CgkJcmV0dXJuICRhcnI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXROYW1lKCRzdHIpCgl7CgkJJHRoaXMtPm5hbWUgPSAkc3RyOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TmFtZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5uYW1lOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0VXJsKCR2YWwpCgl7CgkJJHRoaXMtPnVybCA9ICR2YWw7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRVcmwoKQoJewoJCXJldHVybiAkdGhpcy0+dXJsOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0SWNvblR5cGUoJHZhbCkKCXsKCQkkdGhpcy0+aWNvblR5cGUgPSAkdmFsOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0SWNvblR5cGUoKQoJewoJCXJldHVybiAkdGhpcy0+aWNvblR5cGU7Cgl9Cn0=', 0, '2018-11-21 06:38:53'),
(67, 'contenttagprocessor', 'Y2xhc3MgTU1fQ29udGVudFRhZ1Byb2Nlc3Nvcgp7CQoJcHVibGljIHN0YXRpYyAkVEFHX0NPTlRFTlRfREFUQSA9ICJtbV9jb250ZW50X2RhdGEiOwoJcHVibGljIHN0YXRpYyAkVEFHX0NPTlRFTlRfTElOSyA9ICJtbV9jb250ZW50X2xpbmsiOwoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgaXMgcmVsYXRlZCB0byBjb250ZW50LgoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRzbWFydFRhZyB0aGUgbmFtZSBvZiB0aGUgU21hcnRUYWcKCSAqIEByZXR1cm4gQm9vbGVhbiByZXR1cm5zIHRydWUgaWYgdGhlIFNtYXJ0VGFnIHBhc3NlZCBpcyByZWxhdGVkIHRvIGNvbnRlbnQuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNDb250ZW50U21hcnRUYWcoJHNtYXJ0VGFnKQoJewoJCXN3aXRjaCgkc21hcnRUYWcpIAoJCXsKCQkJY2FzZSBzZWxmOjokVEFHX0NPTlRFTlRfREFUQToKCQkJY2FzZSBzZWxmOjokVEFHX0NPTlRFTlRfTElOSzoKCQkJCXJldHVybiB0cnVlOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBuYW1lIGFuZCBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIHJlbGF0ZWQgdG8gdGhlIFNtYXJ0VGFnIGFuZCBtYWtlcyBhIGNhbGwgdG8gCgkgKiB0aGUgYXBwcm9wcmlhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIFNtYXJ0VGFnIG5hbWUuCgkgKiBAcGFyYW0gU3RyaW5nICRzbWFydFRhZyB0aGUgbmFtZSBvZiB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgdG8gcHJvY2VzcwoJICogQHBhcmFtIEFycmF5ICRhdHRzIGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29kZSB0aGUgcmF3IHZlcnNpb24gb2YgdGhlIFNtYXJ0VGFnIG5hbWUgKGkuZS4gbm90IGNhc2UtaW5zZW50aXZlLCBub3QgYnJva2VuIHVwIGludG8gcGFydHMpCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgJGNvbnRlbnQgcGFzc2VkIHdpdGggYWxsIFNtYXJ0VGFncyBwcm9jZXNzZWQKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwcm9jZXNzU21hcnRUYWcoJHNtYXJ0VGFnLCAkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCXN3aXRjaCgkc21hcnRUYWcpIAoJCXsKCQkJY2FzZSBzZWxmOjokVEFHX0NPTlRFTlRfREFUQToKCQkJCXJldHVybiBzZWxmOjptbV9jb250ZW50X2RhdGEoJGNvbnRlbnQsICRhdHRzLCAkY29kZSk7CgkJCQkKCQkJY2FzZSBzZWxmOjokVEFHX0NPTlRFTlRfTElOSzoKCQkJCXJldHVybiBzZWxmOjptbV9jb250ZW50X2xpbmsoJGNvbnRlbnQsICRhdHRzLCAkY29kZSk7CgkJCQkKCQkJZGVmYXVsdDoKCQkJCXJldHVybiAiSW52YWxpZCBDb250ZW50IFNtYXJ0VGFnIHskc21hcnRUYWd9IGZvdW5kIjsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fQ29udGVudF9EYXRhIHRhZy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIAoJICogcmV0dXJuaW5nIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb250ZW50IElEIHBhc3NlZCBvciBncmFiYmVkIGZyb20gdGhlIGN1cnJlbnQgcGFnZS4KCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgU21hcnRUYWcgKGlmIGFueSkKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbW1fY29udGVudF9kYXRhKCRjb250ZW50LCAkYXR0cywgJGNvZGUpCgl7CgkJaWYoaXNfYXJyYXkoJGF0dHMpICYmIGNvdW50KCRhdHRzKT4wKQoJCXsKCQkJZm9yZWFjaCgkYXR0cyBhcyAkaz0+JHYpCgkJCXsKCQkJCSRrZXkgPSBzdHJ0b2xvd2VyKCRrKTsKCQkJCSQka2V5PSR2OwoJCQl9CgkJfQoJCQoJCS8vIGdldCBjdXJyZW50IHBhZ2UgSUQKCQlpZighaXNzZXQoJGlkKSkKCQl7CgkJCWdsb2JhbCAkcG9zdDsKCQkJJGlkID0gJHBvc3QtPklEOwoJCX0KCQkKCQkvLyBlbnN1cmUgdGhhdCB0aGUgaWQgYXR0cmlidXRlIGlzIHNldAkJCgkJaWYoaXNzZXQoJGlkKSAmJiBpc3NldCgkbmFtZSkpCgkJewoJCQlzd2l0Y2goc3RydG9sb3dlcigkbmFtZSkpCgkJCXsJCQoJCQkJY2FzZSAidGl0bGUiOgoJCQkJCSR3cFBvc3QgPSBnZXRfcG9zdCgkaWQpOwoJCQkJCQkKCQkJCQlpZigkd3BQb3N0KQoJCQkJCXsKCQkJCQkJcmV0dXJuICR3cFBvc3QtPnBvc3RfdGl0bGU7CgkJCQkJfQoJCQkJCWVsc2UKCQkJCQl7CgkJCQkJCXJldHVybiAiIyI7CgkJCQkJfQoJCQkJCQoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAiZGF0ZWF2YWlsYWJsZSI6CgkJCQkJJHVzZXIgPSBNTV9TbWFydFRhZ1V0aWw6OmdldEN1cnJlbnRVc2VyKCk7CgkJCQkJJHByb3RlY3RlZENvbnRlbnQgPSBuZXcgTU1fUHJvdGVjdGVkQ29udGVudEVuZ2luZSgpOwoJCQkJCSRkYXRlT2Zmc2V0ID0gJHByb3RlY3RlZENvbnRlbnQtPmRheXNUb0FjY2VzcygkaWQsICR1c2VyLT5nZXRJZCgpKTsKCQkJCQkJCgkJCQkJaWYoJGRhdGVPZmZzZXQgIT09IGZhbHNlKQoJCQkJCXsKCQkJCQkJJHBvc3REYXRlID0gbWt0aW1lKDAsIDAsIDAsIGRhdGUoIm0iKSwgZGF0ZSgiZCIpLSRkYXRlT2Zmc2V0LCBkYXRlKCJ5IikpOwoJCQkJCQoJCQkJCQkkd3BQb3N0ID0gZ2V0X3Bvc3QoJGlkKTsKCQkJCQkJCgkJCQkJCWlmKCR3cFBvc3QgJiYgKCR3cFBvc3QtPnBvc3Rfc3RhdHVzID09ICJwdWJsaXNoIiB8fCAkd3BQb3N0LT5wb3N0X3N0YXR1cyA9PSAiaW5oZXJpdCIpCgkJCQkJCQkJJiYgKCR3cFBvc3QtPnBvc3RfdHlwZSA9PSAicG9zdCIgfHwgJHdwUG9zdC0+cG9zdF90eXBlID09ICJwYWdlIikgCgkJCQkJCQkJfHwgTU1fVXRpbHM6OmlzQ3VzdG9tUG9zdFR5cGUoJHdwUG9zdC0+cG9zdF90eXBlKSkKCQkJCQkJewoJCQkJCQkJJGZvcm1hdFN0ciA9ICJNIGosIFkiOwoJCQkJCQoJCQkJCQkJaWYoaXNzZXQoJGRhdGVmb3JtYXQpKQoJCQkJCQkJewoJCQkJCQkJCSRmb3JtYXRTdHIgPSAkZGF0ZWZvcm1hdDsKCQkJCQkJCX0KCQkJCQkJCQoJCQkJCQkJJGZvcm1hdHRlZERhdGUgPSBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoZGF0ZSgiTSBqLCBZIEg6aSIsICRwb3N0RGF0ZSksICRmb3JtYXRTdHIpOwoJCQkJCQoJCQkJCQkJcmV0dXJuICRmb3JtYXR0ZWREYXRlOwoJCQkJCQl9CgkJCQkJfQoJCQkJCQoJCQkJCWlmKGlzc2V0KCRub2FjY2Vzc21lc3NhZ2UpKQoJCQkJCXsKCQkJCQkJcmV0dXJuICRub2FjY2Vzc21lc3NhZ2U7CgkJCQkJfQoJCQkJCWVsc2UKCQkJCQl7CgkJCQkJCXJldHVybiAiIjsKCQkJCQl9CgkJCQkJCgkJCQkJYnJlYWs7CgkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgbmFtZSBhdHRyaWJ1dGUgJ3skbmFtZX0nIHBhc3NlZCB0byBTbWFydFRhZyB7JGNvZGV9IjsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gIkludmFsaWQgU21hcnRUYWcgQ29uZmlndXJhdGlvbjogJ2lkJyBhbmQgJ25hbWUnIGF0dHJpYnV0ZXMgYXJlIHJlcXVpcmVkIGZvciBTbWFydFRhZyB7JGNvZGV9IjsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fQ29udGVudF9MaW5rIHRhZy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIAoJICogcmV0dXJuaW5nIHRoZSBwZXJtYWxpbmsgYXNzb2NpYXRlZCB3aXRoIHRoZSBjb250ZW50IElEIHBhc3NlZCBvciB0aGUgY3VycmVudCBwYWdlL3Bvc3QuCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG1tX2NvbnRlbnRfbGluaygkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCWlmKGlzX2FycmF5KCRhdHRzKSAmJiBjb3VudCgkYXR0cyk+MCkKCQl7CgkJCWZvcmVhY2goJGF0dHMgYXMgJGs9PiR2KQoJCQl7CgkJCQkka2V5ID0gc3RydG9sb3dlcigkayk7CgkJCQkkJGtleT0kdjsKCQkJfQoJCX0KCQkKCQkvLyBnZXQgY3VycmVudCBwYWdlIElECgkJaWYoIWlzc2V0KCRpZCkpCgkJewoJCQlnbG9iYWwgJHBvc3Q7CgkJCSRpZCA9ICRwb3N0LT5JRDsKCQl9CgkJCgkJLy8gZW5zdXJlIHRoYXQgdGhlIGlkIGF0dHJpYnV0ZSBpcyBzZXQJCQoJCWlmKGlzc2V0KCRpZCkpCgkJewoJCQkkdXJsID0gZ2V0X3Blcm1hbGluaygkaWQpOwoJCQkKCQkJaWYoaXNzZXQoJGF1dG9sb2dpbikgJiYgJGF1dG9sb2dpbiA9PSAidHJ1ZSIpCgkJCXsKCQkJCS8vIGdlbmVyYXRlIGEgbG9naW4gdG9rZW4KCQkJCSRjdXJyZW50VXNlciA9IE1NX1NtYXJ0VGFnVXRpbDo6Z2V0Q3VycmVudFVzZXIoKTsKCQkJCWlmKCRjdXJyZW50VXNlci0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCSRsb2dpblRva2VuUmVzcG9uc2UgPSBNTV9Mb2dpblRva2VuOjpnZW5lcmF0ZVRva2VuKCRjdXJyZW50VXNlci0+Z2V0SWQoKSk7CgkJCQoJCQkJCWlmIChNTV9SZXNwb25zZTo6aXNTdWNjZXNzKCRsb2dpblRva2VuUmVzcG9uc2UpKQoJCQkJCXsKCQkJCQkJJGxvZ2luVG9rZW4gPSAkbG9naW5Ub2tlblJlc3BvbnNlLT5tZXNzYWdlOwoJCQkJCQkkdXJsID0gTU1fVXRpbHM6OmFwcGVuZFVybFBhcmFtKCR1cmwsIE1NX1Nlc3Npb246OiRQQVJBTV9MT0dJTl9UT0tFTiwgJGxvZ2luVG9rZW4pOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQkKCQkJcmV0dXJuICR1cmw7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiAnaWQnIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCBmb3IgU21hcnRUYWcgeyRjb2RlfSI7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(68, 'shippingmethod', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(69, 'authorizenetcimservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(70, 'dayscalculationtypes', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0RheXNDYWxjdWxhdGlvblR5cGVzCnsKCXB1YmxpYyBzdGF0aWMgJEZJWEVEID0gJ2ZpeGVkJzsKCXB1YmxpYyBzdGF0aWMgJENVU1RPTV9EQVRFID0gJ2N1c3RvbV9kYXRlJzsKCXB1YmxpYyBzdGF0aWMgJEpPSU5fREFURSA9ICdqb2luX2RhdGUnOwp9', 0, '2018-11-21 06:38:53'),
(71, 'decisiontagprocessor_v2', '', 0, '2018-11-21 06:38:53'),
(72, 'reportpiechart', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVwb3J0UGllQ2hhcnQgZXh0ZW5kcyBNTV9SZXBvcnRWaXN1YWxFbGVtZW50CnsKCQoJcHJvdGVjdGVkICRjYXRlZ29yeUZpZWxkID0gImNhdGVnb3J5IjsKCQoJcHJvdGVjdGVkICR2YWx1ZUZpZWxkID0gInZhbHVlIjsKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRKYXZhc2NyaXB0RGVwZW5kZW5jaWVzKCkKCXsKCQlyZXR1cm4gYXJyYXkoTU1fUExVR0lOX1VSTC4iL3Jlc291cmNlcy9qcy9hbWNoYXJ0cy9hbWNoYXJ0cy9hbWNoYXJ0cy5qcyIsCgkJCQkJIE1NX1BMVUdJTl9VUkwuIi9yZXNvdXJjZXMvanMvYW1jaGFydHMvYW1jaGFydHMvcGllLmpzIik7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbmRlcihNTV9SZXBvcnRDYXRlZ29yeVZhbHVlTW9kZWwgJG1vZGVsID0gbnVsbCkKCXsKCQkKCQlpZiAoIWlzX251bGwoJG1vZGVsKSkKCQl7CgkJCSR0aGlzLT5zZXRNb2RlbCgkbW9kZWwpOwoJCX0KCQkKCQkkb3V0cHV0ID0gIiI7CgkJaWYgKCFlbXB0eSgkdGhpcy0+Y29udGFpbmVyKSAmJiAoJHRoaXMtPm1vZGVsIGluc3RhbmNlb2YgTU1fUmVwb3J0Q2F0ZWdvcnlWYWx1ZU1vZGVsKSkKCQl7CgkJCSRqc29uRGF0YSA9IGpzb25fZW5jb2RlKCR0aGlzLT5tb2RlbC0+Z2V0VmFsdWVzKCkpOwoJCQkvKgoJCQkkb3V0cHV0IC49ICI8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+XG4iOwoJCQkkb3V0cHV0IC49ICJqUXVlcnkoZnVuY3Rpb24oKSB7XG4iOwoJCQkkb3V0cHV0IC49ICJ2YXIgeyR0aGlzLT5jb250YWluZXJ9X2RhdGEgPSB7JGpzb25EYXRhfTtcbiI7CgkJCSRvdXRwdXQgLj0gInZhciB7JHRoaXMtPmNvbnRhaW5lcn1fY2hhcnQgPSBuZXcgQW1DaGFydHMuQW1QaWVDaGFydCgpO1xuIjsKCQkJJG91dHB1dCAuPSAieyR0aGlzLT5jb250YWluZXJ9X2NoYXJ0LnRpdGxlRmllbGQgPSAneyR0aGlzLT5jYXRlZ29yeUZpZWxkfSc7XG4iOwoJCQkkb3V0cHV0IC49ICJ7JHRoaXMtPmNvbnRhaW5lcn1fY2hhcnQudmFsdWVGaWVsZCA9ICd7JHRoaXMtPnZhbHVlRmllbGR9JztcbiI7CgkJCSRvdXRwdXQgLj0gInskdGhpcy0+Y29udGFpbmVyfV9jaGFydC5kYXRhUHJvdmlkZXIgPSB7JHRoaXMtPmNvbnRhaW5lcn1fZGF0YTtcbiI7CgkJCSRvdXRwdXQgLj0gInskdGhpcy0+Y29udGFpbmVyfV9jaGFydC5vdXRsaW5lQ29sb3IgPSAnI0ZGRkZGRic7XG4iOwoJCQkkb3V0cHV0IC49ICJ7JHRoaXMtPmNvbnRhaW5lcn1fY2hhcnQub3V0bGluZUFscGhhID0gMC44O1xuIjsKCQkJJG91dHB1dCAuPSAieyR0aGlzLT5jb250YWluZXJ9X2NoYXJ0Lm91dGxpbmVUaGlja25lc3MgPSAyO1xuIjsKCQkJJG91dHB1dCAuPSAieyR0aGlzLT5jb250YWluZXJ9X2NoYXJ0LmRlcHRoM0QgPSAxNTtcbiI7CgkJCSRvdXRwdXQgLj0gInskdGhpcy0+Y29udGFpbmVyfV9jaGFydC5hbmdsZSA9IDMwO1xuIjsKCQkJJG91dHB1dCAuPSAieyR0aGlzLT5jb250YWluZXJ9X2NoYXJ0LndyaXRlKCd7JHRoaXMtPmNvbnRhaW5lcn0nKTtcbiI7CgkJCSRvdXRwdXQgLj0gIn0pOyI7CgkJCSRvdXRwdXQgLj0gIjwvc2NyaXB0PlxuIjsKCQkJKi8KCQkJJG91dHB1dCAuPSAiPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPlxuIjsKCQkJJG91dHB1dCAuPSAialF1ZXJ5KGZ1bmN0aW9uKCkge1xuIjsKCQkJJG91dHB1dCAuPSAidmFyIHskdGhpcy0+Y29udGFpbmVyfV9jaGFydCA9IEFtQ2hhcnRzLm1ha2VDaGFydCgneyR0aGlzLT5jb250YWluZXJ9Jywge1xuIjsKCQkJJG91dHB1dCAuPSAiJ3R5cGUnOiAncGllJyxcbiI7CgkJCSRvdXRwdXQgLj0gIidwYXRoVG9JbWFnZXMnOiAnIi5NTV9QTFVHSU5fVVJMLiIvcmVzb3VyY2VzL2pzL2FtY2hhcnRzL2FtY2hhcnRzL2ltYWdlcy8nLFxuIjsKCQkJJG91dHB1dCAuPSAiJ2FuZ2xlJzogMTIsXG4iOwoJCQkvLyRvdXRwdXQgLj0gIidiYWxsb29uVGV4dCc6ICdbW3RpdGxlXV08YnI+PHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZToxNHB4Jz48Yj5bW3ZhbHVlXV08L2I+IChbW3BlcmNlbnRzXV0lKTwvc3Bhbj4nLFxuIjsKCQkJJG91dHB1dCAuPSAiJ2RlcHRoM0QnOiAxNSxcbiI7CgkJCSRvdXRwdXQgLj0gIid0aXRsZUZpZWxkJzogJ3skdGhpcy0+Y2F0ZWdvcnlGaWVsZH0nLFxuIjsKCQkJJG91dHB1dCAuPSAiJ3ZhbHVlRmllbGQnOiAneyR0aGlzLT52YWx1ZUZpZWxkfScsXG4iOwoJCQkkb3V0cHV0IC49ICInYWxsTGFiZWxzJzogW10sXG4iOwoJCQkkb3V0cHV0IC49ICInYmFsbG9vbic6IHt9LFxuIjsKCQkJJG91dHB1dCAuPSAiJ2xlZ2VuZCc6IHtcbiI7CgkJCSRvdXRwdXQgLj0gIidhbGlnbic6ICdjZW50ZXInLFxuIjsKCQkJJG91dHB1dCAuPSAiJ21hcmtlclR5cGUnOiAnY2lyY2xlJ1xuIjsKCQkJJG91dHB1dCAuPSAifSxcbiI7CgkJCSRvdXRwdXQgLj0gIid0aXRsZXMnOiBbXSxcbiI7CgkJCSRvdXRwdXQgLj0gIidkYXRhUHJvdmlkZXInOiB7JGpzb25EYXRhfVxuIjsKCQkJJG91dHB1dCAuPSAifSk7XG4iOwoJCQkkb3V0cHV0IC49ICJ9KTtcbiI7CgkJCSRvdXRwdXQgLj0gIjwvc2NyaXB0PlxuIjsKCQl9CgkJcmV0dXJuICRvdXRwdXQ7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVGcm9tVG9wUmVzdWx0cygkZWxlbWVudElkZW50aWZpZXIsICRjYXRlZ29yeUZpZWxkLCAkdmFsdWVGaWVsZCwgJG51bVJlY29yZHMsIE1NX1JlcG9ydFJlc3BvbnNlICRyZXN1bHRPYmplY3QsICRkaXJlY3RpdmVzPWFycmF5KCkpCgl7CgkJaWYgKCFNTV9SZXBvcnRSZXNwb25zZTo6aXNTdWNjZXNzKCRyZXN1bHRPYmplY3QpKQoJCXsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCSRwaWUgPSBuZXcgTU1fUmVwb3J0UGllQ2hhcnQoJGVsZW1lbnRJZGVudGlmaWVyLCRkaXJlY3RpdmVzKTsKCQoJCS8vY3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIGRhdGEgbW9kZWwKCQkkbW9kZWwgPSBNTV9SZXBvcnRDYXRlZ29yeVZhbHVlTW9kZWw6OmNyZWF0ZUZyb21Ub3BSZXN1bHRzKCRyZXN1bHRPYmplY3QtPm1lc3NhZ2UsICRjYXRlZ29yeUZpZWxkLCAkdmFsdWVGaWVsZCwgJG51bVJlY29yZHMpOwoJCSRwaWUtPnNldE1vZGVsKCRtb2RlbCk7CgkJcmV0dXJuICRwaWU7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldENhdGVnb3J5RmllbGQoKSAKCXsKCQlyZXR1cm4gJHRoaXMtPmNhdGVnb3J5RmllbGQ7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldENhdGVnb3J5RmllbGQoJGNhdGVnb3J5RmllbGQpIAoJewoJCSR0aGlzLT5jYXRlZ29yeUZpZWxkID0gJGNhdGVnb3J5RmllbGQ7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFZhbHVlRmllbGQoKSAKCXsKCQlyZXR1cm4gJHRoaXMtPnZhbHVlRmllbGQ7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFZhbHVlRmllbGQoJHZhbHVlRmllbGQpIAoJewoJCSR0aGlzLT52YWx1ZUZpZWxkID0gJHZhbHVlRmllbGQ7Cgl9CgkKCQp9Cg==', 0, '2018-11-21 06:38:53'),
(73, 'export_members', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KCnJlcXVpcmVfb25jZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vd3AtY29uZmlnLnBocCIpOwoKZ2xvYmFsICRjdXJyZW50X3VzZXI7CgokdXNlckhvb2tzID0gbmV3IE1NX1VzZXJIb29rcygpOwppZiAoJHVzZXJIb29rcy0+Y2hlY2tFbXBsb3llZUFjY2VzcygpID09PSBmYWxzZSkKewoJJHVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokRVJST1IsIE1NX0Vycm9yOjokQUNDRVNTX0RFTklFRCk7Cgl3cF9yZWRpcmVjdCgkdXJsKTsKCWV4aXQ7Cn0KCiRleHBvcnRfdHlwZSA9IChpc3NldCgkX0dFVFsnZXhwb3J0X3R5cGUnXSkpID8gJF9HRVRbJ2V4cG9ydF90eXBlJ10gOiAic3RhbmRhcmQiOwokaW5jbHVkZUJ1bmRsZUluZm8gPSBmYWxzZTsKCmlmICgkZXhwb3J0X3R5cGUgPT0gJ3N0YW5kYXJkJyB8fCAkZXhwb3J0X3R5cGUgPT0gJ2NhbmNlbGVkX2J1bmRsZXMnKQp7CglpZiAoKCFpc3NldCgkX0dFVFsnbWVtYmVyc2hpcF9pZCddKSB8fCAhaXNfbnVtZXJpYygkX0dFVFsnbWVtYmVyc2hpcF9pZCddKSkgJiYgKCFpc3NldCgkX0dFVFsnYnVuZGxlX2lkJ10pIHx8ICFpc19udW1lcmljKCRfR0VUWydidW5kbGVfaWQnXSkpKQoJewoJCWV4aXQ7IC8vbXVzdCBoYXZlIG1lbWJlcnNoaXAgSUQgb3IgYnVuZGxlIElECgl9CgkKCWlmKGlzc2V0KCRfR0VUWydtZW1iZXJzaGlwX2lkJ10pKQoJewoJCSRpbmNsdWRlQnVuZGxlSW5mbyA9IHRydWU7CgkJJG1lbWJlcnNoaXAgPSBuZXcgTU1fTWVtYmVyc2hpcExldmVsKCk7CgkJJG1lbWJlcnNoaXAtPnNldElkKCRfR0VUWydtZW1iZXJzaGlwX2lkJ10pOwoJCSRtZW1iZXJzaGlwLT5nZXREYXRhKCk7CgkJCgkJaWYgKCEkbWVtYmVyc2hpcC0+aXNWYWxpZCgpKQoJCXsKCQkJZXhpdDsKCQl9CgkJJGZpbGVuYW1lID0gcHJlZ19yZXBsYWNlKCIvKFteQS16YS16MC05XHNdKS8iLCIiLHN0cnRvbG93ZXIoJG1lbWJlcnNoaXAtPmdldE5hbWUoKSkpOwoJCSRmaWxlbmFtZSA9IHByZWdfcmVwbGFjZSgiL1xzLyIsIl8iLCRmaWxlbmFtZSkuIl9leHBvcnQuY3N2IjsKCX0KCWVsc2UgaWYoaXNzZXQoJF9HRVRbJ2J1bmRsZV9pZCddKSkKCXsKCQkkaW5jbHVkZUJ1bmRsZUluZm8gPSBmYWxzZTsKCQkkYnVuZGxlID0gbmV3IE1NX0J1bmRsZSgkX0dFVFsnYnVuZGxlX2lkJ10pOwoJCQoJCWlmICghJGJ1bmRsZS0+aXNWYWxpZCgpKQoJCXsKCQkJZXhpdDsKCQl9CgkJJGZpbGVuYW1lID0gcHJlZ19yZXBsYWNlKCIvKFteQS16YS16MC05XHNdKS8iLCIiLHN0cnRvbG93ZXIoJGJ1bmRsZS0+Z2V0TmFtZSgpKSk7CgkJCgkJJHByZWZpeCA9ICIiOwoJCWlmICgkZXhwb3J0X3R5cGUgPT0gJ2NhbmNlbGVkX2J1bmRsZXMnKQoJCXsKCQkJJHByZWZpeCA9ICJjYW5jZWxlZF8iOwoJCX0KCQkKCQkkZmlsZW5hbWUgPSAkcHJlZml4LnByZWdfcmVwbGFjZSgiL1xzLyIsIl8iLCRmaWxlbmFtZSkuIl9leHBvcnQuY3N2IjsKCX0KCWVsc2UKCXsKCQlleGl0OwoJfQp9CmVsc2UgaWYgKCRleHBvcnRfdHlwZSA9PSAnY2FuY2VsbGF0aW9uJykKewoJJGluY2x1ZGVCdW5kbGVJbmZvID0gdHJ1ZTsKCSRmaWxlbmFtZSA9ICJjYW5jZWxsZWRfbWVtYmVyc19leHBvcnQuY3N2IjsKfQplbHNlIAp7CgkkaW5jbHVkZUJ1bmRsZUluZm8gPSB0cnVlOwoJJGZpbGVuYW1lID0gIm1lbWJlcl9leHBvcnQuY3N2IjsKfQoKaGVhZGVyKCJDb250ZW50LXR5cGU6IHRleHQvY3N2Iik7CmhlYWRlcigiQ29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9XCIkZmlsZW5hbWVcIiIpOwoKJG91dHN0cmVhbSA9IGZvcGVuKCJwaHA6Ly9vdXRwdXQiLCd3Jyk7CgokdXNlcl9maWVsZHMgPSBhcnJheSgidXNlcl9lbWFpbCI9PiJFbWFpbCIsICJmaXJzdF9uYW1lIj0+IkZpcnN0IE5hbWUiLCAibGFzdF9uYW1lIj0+Ikxhc3QgTmFtZSIpOwokYnVuZGxlcyA9IGFycmF5KCk7CgppZigkaW5jbHVkZUJ1bmRsZUluZm8pCnsKCSRzcWwgPSAic2VsZWN0IGlkLCBzaG9ydF9uYW1lIGZyb20gIi5NTV9UQUJMRV9CVU5ETEVTOwoJJGJ1bmRsZV9yZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwsIEFSUkFZX0EpOwoJCglmb3JlYWNoICgkYnVuZGxlX3Jlc3VsdHMgYXMgJHJvd251bT0+JGFjY2Vzc190YWcpCgl7CgkJJGJ1bmRsZXNbJGFjY2Vzc190YWdbJ3Nob3J0X25hbWUnXV0gPSAkYWNjZXNzX3RhZ1snc2hvcnRfbmFtZSddOwoJfQp9CgovL291dHB1dCBoZWFkZXIgcm93CiRoZWFkZXJfcm93ID0gYXJyYXlfbWVyZ2UoJHVzZXJfZmllbGRzLCAkYnVuZGxlcyk7CmZwdXRjc3YoJG91dHN0cmVhbSwgJGhlYWRlcl9yb3csICcsJywgJyInKTsKCmlmKGlzc2V0KCRfR0VUWyJtZW1iZXJzaGlwX2lkIl0pIHx8ICRleHBvcnRfdHlwZSA9PSAiY2FuY2VsbGF0aW9uIikKewoJJHNxbCA9ICJTRUxFQ1QgdS5pZCwgdS51c2VyX2VtYWlsLCBtbXUuc3RhdHVzLCBtbXUuZmlyc3RfbmFtZSwgbW11Lmxhc3RfbmFtZSAiOwoJJHNxbCAuPSAiRlJPTSAiLiR3cGRiLT51c2Vycy4iIHUsICIuTU1fVEFCTEVfVVNFUl9EQVRBLiIgbW11IFdIRVJFIChtbXUud3BfdXNlcl9pZCA9IHUuSUQpICI7CgkKCWlmICgkZXhwb3J0X3R5cGUgPT0gJ2NhbmNlbGxhdGlvbicpCgl7CgkJJHNxbCAuPSAiIEFORCAoKG1tdS5zdGF0dXMgPSAlZCkgT1IgKG1tdS5zdGF0dXMgPSAlZCkpIjsKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkd3BkYi0+cHJlcGFyZSgkc3FsLCBNTV9TdGF0dXM6OiRQQVVTRUQsIE1NX1N0YXR1czo6JENBTkNFTEVEKSwgQVJSQVlfQSk7Cgl9CgllbHNlIAoJewoJCSRzcWwgLj0gIiBBTkQgKG1tdS5tZW1iZXJzaGlwX2xldmVsX2lkID0gJWQpIEFORCAoKG1tdS5zdGF0dXMgPSAlZCkgT1IgKG1tdS5zdGF0dXMgPSAlZCkgT1IgKG1tdS5zdGF0dXMgPSAlZCkgT1IgKG1tdS5zdGF0dXMgPSAlZCkpIjsKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkd3BkYi0+cHJlcGFyZSgkc3FsLCAkbWVtYmVyc2hpcC0+Z2V0SWQoKSwgTU1fU3RhdHVzOjokQUNUSVZFLCBNTV9TdGF0dXM6OiRQRU5ESU5HX0NBTkNFTExBVElPTiwgTU1fU3RhdHVzOjokTE9DS0VELCBNTV9TdGF0dXM6OiRPVkVSRFVFKSwgQVJSQVlfQSk7Cgl9Cn0KZWxzZSBpZihpc3NldCgkX0dFVFsiYnVuZGxlX2lkIl0pKQp7Cgkkc3FsID0gIlNFTEVDVCB1LmlkLCB1LnVzZXJfZW1haWwsIG1tdS5zdGF0dXMsIG1tdS5maXJzdF9uYW1lLCBtbXUubGFzdF9uYW1lICIuCgkiRlJPTSB7JHdwZGItPnVzZXJzfSB1IExFRlQgSk9JTiAiLk1NX1RBQkxFX1VTRVJfREFUQS4iIG1tdSBPTiAobW11LndwX3VzZXJfaWQgPSB1LklEKSAiLgoJIkxFRlQgSk9JTiAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUy4iIGFwYiBPTiAoKGFwYi5hY2Nlc3NfdHlwZT0nIi5NTV9BcHBsaWVkQnVuZGxlOjokQUNDRVNTX1RZUEVfVVNFUi4iJykgQU5EIChhcGIuYWNjZXNzX3R5cGVfaWQgPSB1LklEKSkgIi4KCSJXSEVSRSAoYXBiLmJ1bmRsZV9pZCA9ICVkKSAiOwoJCglpZiAoJGV4cG9ydF90eXBlID09ICdjYW5jZWxlZF9idW5kbGVzJykKCXsKCQkkc3FsIC49ICIgQU5EICgoYXBiLnN0YXR1cyA9ICVkKSBPUiAoYXBiLnN0YXR1cyA9ICVkKSkiOwoJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCR3cGRiLT5wcmVwYXJlKCRzcWwsICRfR0VUWyJidW5kbGVfaWQiXSwgTU1fU3RhdHVzOjokUEFVU0VELCBNTV9TdGF0dXM6OiRDQU5DRUxFRCksIEFSUkFZX0EpOwoJfQoJZWxzZQoJewoJCSRzcWwgLj0gIiBBTkQgKChtbXUuc3RhdHVzID0gJWQpIE9SIChtbXUuc3RhdHVzID0gJWQpIE9SIChtbXUuc3RhdHVzID0gJWQpIE9SIChtbXUuc3RhdHVzID0gJWQpKSI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHdwZGItPnByZXBhcmUoJHNxbCwgJF9HRVRbImJ1bmRsZV9pZCJdLCBNTV9TdGF0dXM6OiRBQ1RJVkUsIE1NX1N0YXR1czo6JExPQ0tFRCwgTU1fU3RhdHVzOjokUEVORElOR19DQU5DRUxMQVRJT04sIE1NX1N0YXR1czo6JE9WRVJEVUUpLCBBUlJBWV9BKTsKCX0KfQplbHNlIAp7CglleGl0Owp9Cgpmb3JlYWNoICgkcmVzdWx0cyBhcyAkcm93bnVtPT4kbWVtYmVyX3JvdykgCnsKCSRjdXJyZW50X3Jvd19vdXRwdXQgPSBhcnJheSgpOwoJZm9yZWFjaCAoJHVzZXJfZmllbGRzIGFzICRmaWVsZF9rZXk9PiR2KQoJewoJCSRjdXJyZW50X3Jvd19vdXRwdXRbXSA9ICRtZW1iZXJfcm93WyRmaWVsZF9rZXldOwoJfQoJJG1lbWJlciA9IE1NX3VzZXI6OmZpbmRCeUVtYWlsKCRtZW1iZXJfcm93Wyd1c2VyX2VtYWlsJ10pOwoJCglpZiAoISRtZW1iZXItPmlzVmFsaWQoKSkKCXsKCQkvLyBzaG91bGRuJ3QgZXZlciBoYXBwZW4KCQljb250aW51ZTsKCX0KCQoJaWYoJGluY2x1ZGVCdW5kbGVJbmZvKQoJewoJCSRhcHBsaWVkQnVuZGxlcyA9ICRtZW1iZXItPmdldEFwcGxpZWRCdW5kbGVzKCk7CgkJJGN1cnJlbnRfbWVtYmVyX2J1bmRsZXMgPSBhcnJheSgpOwoJCWZvcmVhY2ggKCRhcHBsaWVkQnVuZGxlcyBhcyAkYXBwbGllZEJ1bmRsZSkKCQl7CgkJCSRidW5kbGUgPSAkYXBwbGllZEJ1bmRsZS0+Z2V0QnVuZGxlKCk7CgkJCQoJCQlpZigkYnVuZGxlLT5pc1ZhbGlkKCkpCgkJCXsKCQkJCSRzaG9ydE5hbWUgPSBzdHJ0b3VwcGVyKCRidW5kbGUtPmdldFNob3J0TmFtZSgpKTsKCQkJCSRjdXJyZW50X21lbWJlcl9idW5kbGVzWyRzaG9ydE5hbWVdID0gdHJ1ZTsKCQkJfQoJCX0KCQkKCQlmb3JlYWNoICgkYnVuZGxlcyBhcyAkc2hvcnRfbmFtZSkKCQl7CgkJCSRjdXJyZW50X3Jvd19vdXRwdXRbXSAgPSAoaXNzZXQoJGN1cnJlbnRfbWVtYmVyX2J1bmRsZXNbJHNob3J0X25hbWVdKSAmJiAoJGN1cnJlbnRfbWVtYmVyX2J1bmRsZXNbJHNob3J0X25hbWVdID09PSB0cnVlKSk/IlRSVUUiOiJGQUxTRSI7CgkJfQoJfQoJCglmcHV0Y3N2KCRvdXRzdHJlYW0sICRjdXJyZW50X3Jvd19vdXRwdXQsICcsJywgJyInKTsKfQoKZmNsb3NlKCRvdXRzdHJlYW0pOwo=', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(74, 'awebercollection', 'Y2xhc3MgTU1fQVdlYmVyQ29sbGVjdGlvbiBleHRlbmRzIE1NX0FXZWJlclJlc3BvbnNlIGltcGxlbWVudHMgQXJyYXlBY2Nlc3MsIEl0ZXJhdG9yLCBDb3VudGFibGUgewoKICAgIHByb3RlY3RlZCAkcGFnZVNpemUgPSAxMDA7CiAgICBwcm90ZWN0ZWQgJF9lbnRyaWVzID0gYXJyYXkoKTsKCiAgICAvKioKICAgICAqIEB2YXIgYXJyYXkgSG9sZHMgbGlzdCBvZiBrZXlzIHRoYXQgYXJlIG5vdCBwdWJsaWNseSBhY2Nlc3NpYmxlCiAgICAgKi8KICAgIHByb3RlY3RlZCAkX3ByaXZhdGVEYXRhID0gYXJyYXkoCiAgICAgICAgJ2VudHJpZXMnLAogICAgICAgICdzdGFydCcsCiAgICAgICAgJ25leHRfY29sbGVjdGlvbl9saW5rJywKICAgICk7CgogICAgLyoqCiAgICAgKiBnZXRCeUlkCiAgICAgKgogICAgICogR2V0cyBhbiBlbnRyeSBvYmplY3Qgb2YgdGhpcyBjb2xsZWN0aW9uIHR5cGUgd2l0aCB0aGUgZ2l2ZW4gaWQKICAgICAqIEBwYXJhbSBtaXhlZCAkaWQgICAgIElEIG9mIHRoZSBlbnRyeSB5b3UgYXJlIHJlcXVlc3RpbmcKICAgICAqIEBhY2Nlc3MgcHVibGljCiAgICAgKiBAcmV0dXJuIE1NX0FXZWJlckVudHJ5CiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRCeUlkKCRpZCkgewogICAgICAgICRkYXRhID0gJHRoaXMtPmFkYXB0ZXItPnJlcXVlc3QoJ0dFVCcsICJ7JHRoaXMtPnVybH0veyRpZH0iKTsKICAgICAgICByZXR1cm4gJHRoaXMtPl9tYWtlRW50cnkoJGRhdGEsICRpZCwgInskdGhpcy0+dXJsfS97JGlkfSIpOwogICAgfQoKCiAgICAvKioKICAgICAqIGNyZWF0ZQogICAgICoKICAgICAqIEludm9rZSB0aGUgQVBJIG1ldGhvZCB0byBDUkVBVEUgYSBuZXcgZW50cnkgcmVzb3VyY2UuCiAgICAgKgogICAgICogTm90ZTogTm90IGFsbCBlbnRyeSByZXNvdXJjZXMgYXJlIGVsaWdpYmxlIHRvIGJlIGNyZWF0ZWQsIHBsZWFzZQogICAgICogICAgICAgcmVmZXIgdG8gdGhlIEFXZWJlciBBUEkgUmVmZXJlbmNlIERvY3VtZW50YXRpb24gYXQKICAgICAqICAgICAgIGh0dHBzOi8vbGFicy5hd2ViZXIuY29tL2RvY3MvcmVmZXJlbmNlLzEuMCBmb3IgbW9yZQogICAgICogICAgICAgZGV0YWlscyBvbiB3aGljaCBlbnRyeSByZXNvdXJjZXMgbWF5IGJlIGNyZWF0ZWQgYW5kIHdoYXQKICAgICAqICAgICAgIGF0dHJpYnV0ZXMgYXJlIHJlcXVpcmVkIGZvciBjcmVhdGluZyByZXNvdXJjZXMuCiAgICAgKgogICAgICogQGFjY2VzcyBwdWJsaWMKICAgICAqIEBwYXJhbSBwYXJhbXMgbWl4ZWQgIGFzc29jaXRhdGl2ZSBhcnJheSBvZiBrZXkvdmFsdWUgcGFpcnMuCiAgICAgKiBAcmV0dXJuIE1NX0FXZWJlckVudHJ5KFJlc291cmNlKSBUaGUgbmV3IHJlc291cmNlIGNyZWF0ZWQKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSgka3ZfcGFpcnMpIHsKICAgICAgICAjIENyZWF0ZSBSZXNvdXJjZQogICAgICAgICRwYXJhbXMgPSBhcnJheV9tZXJnZShhcnJheSgnd3Mub3AnID0+ICdjcmVhdGUnKSwgJGt2X3BhaXJzKTsKICAgICAgICAkZGF0YSA9ICR0aGlzLT5hZGFwdGVyLT5yZXF1ZXN0KCdQT1NUJywgJHRoaXMtPnVybCwgJHBhcmFtcywgYXJyYXkoJ3JldHVybicgPT4gJ2hlYWRlcnMnKSk7CiAgICAgICAgJHRoaXMtPl9lbnRyaWVzID0gYXJyYXkoKTsKCiAgICAgICAgIyBSZXR1cm4gbmV3IFJlc291cmNlCiAgICAgICAgJHVybCA9ICRkYXRhWydMb2NhdGlvbiddOwogICAgICAgICRyZXNvdXJjZV9kYXRhID0gJHRoaXMtPmFkYXB0ZXItPnJlcXVlc3QoJ0dFVCcsICR1cmwpOwogICAgICAgIHJldHVybiBuZXcgTU1fQVdlYmVyRW50cnkoJHJlc291cmNlX2RhdGEsICR1cmwsICR0aGlzLT5hZGFwdGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIGZpbmQKICAgICAqCiAgICAgKiBJbnZva2UgdGhlIEFQSSAnZmluZCcgb3BlcmF0aW9uIG9uIGEgY29sbGVjdGlvbiB0byByZXR1cm4gYSBzdWJzZXQKICAgICAqIG9mIHRoYXQgY29sbGVjdGlvbi4gIE5vdCBhbGwgY29sbGVjdGlvbnMgc3VwcG9ydCB0aGUgJ2ZpbmQnIG9wZXJhdGlvbi4KICAgICAqIHJlZmVyIHRvIGh0dHBzOi8vbGFicy5hd2ViZXIuY29tL2RvY3MvcmVmZXJlbmNlLzEuMCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHNlYXJjaF9kYXRhICAgQXNzb2NpYXRpdmUgYXJyYXkgb2Yga2V5L3ZhbHVlIHBhaXJzIHVzZWQgYXMgc2VhcmNoIGZpbHRlcnMKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHJlZmVyIHRvIGh0dHBzOi8vbGFicy5hd2ViZXIuY29tL2RvY3MvcmVmZXJlbmNlLzEuMCBmb3IgYQogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgbGlzdCBvZiB2YWxpZCBzZWFyY2ggZmlsdGVycy4KICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGZpbHRlcmluZyBvbiBhdHRyaWJ1dGVzIHRoYXQgcmVxdWlyZSBhZGRpdGlvbmFsIHBlcm1pc3Npb25zIHRvCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5IHJlcXVpcmVzIGFuIGFwcCBhdXRob3JpemVkIHdpdGggdGhvc2UgYWRkaXRpb25hbCBwZXJtaXNzaW9ucy4KICAgICAqIEBhY2Nlc3MgcHVibGljCiAgICAgKiBAcmV0dXJuIE1NX0FXZWJlckNvbGxlY3Rpb24gCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBmaW5kKCRzZWFyY2hfZGF0YSkgewogICAgICAgICMgaW52b2tlIGZpbmQgb3BlcmF0aW9uCiAgICAgICAgJHBhcmFtcyA9IGFycmF5X21lcmdlKCRzZWFyY2hfZGF0YSwgYXJyYXkoJ3dzLm9wJyA9PiAnZmluZCcpKTsKICAgICAgICAkZGF0YSA9ICR0aGlzLT5hZGFwdGVyLT5yZXF1ZXN0KCdHRVQnLCAkdGhpcy0+dXJsLCAkcGFyYW1zKTsKCiAgICAgICAgIyBnZXQgdG90YWwgc2l6ZQogICAgICAgICR0c19wYXJhbXMgPSBhcnJheV9tZXJnZSgkcGFyYW1zLCBhcnJheSgnd3Muc2hvdycgPT4gJ3RvdGFsX3NpemUnKSk7CiAgICAgICAgJHRvdGFsX3NpemUgPSAkdGhpcy0+YWRhcHRlci0+cmVxdWVzdCgnR0VUJywgJHRoaXMtPnVybCwgJHRzX3BhcmFtcywgYXJyYXkoJ3JldHVybicgPT4gJ2ludGVnZXInKSk7CiAgICAgICAgJGRhdGFbJ3RvdGFsX3NpemUnXSA9ICR0b3RhbF9zaXplOwoKICAgICAgICAjIHJldHVybiBjb2xsZWN0aW9uCiAgICAgICAgcmV0dXJuICR0aGlzLT5yZWFkUmVzcG9uc2UoJGRhdGEsICR0aGlzLT51cmwpOwogICAgfQoKICAgIC8qKiBnZXRQYXJlbnRFbnRyeQogICAgICoKICAgICAqIEdldHMgYW4gZW50cnkncyBwYXJlbnQgZW50cnkKICAgICAqIFJldHVybnMgTlVMTCBpZiBubyBwYXJlbnQgZW50cnkKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGdldFBhcmVudEVudHJ5KCl7CiAgICAgICAgJHVybF9wYXJ0cyA9IGV4cGxvZGUoJy8nLCAkdGhpcy0+dXJsKTsKICAgICAgICAkc2l6ZSA9IGNvdW50KCR1cmxfcGFydHMpOwoKICAgICAgICAjUmVtb3ZlIGNvbGxlY3Rpb24gaWQgYW5kIHNsYXNoIGZyb20gZW5kIG9mIHVybAogICAgICAgICR1cmwgPSBzdWJzdHIoJHRoaXMtPnVybCwgMCwgLXN0cmxlbigkdXJsX3BhcnRzWyRzaXplLTFdKS0xKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJGRhdGEgPSAkdGhpcy0+YWRhcHRlci0+cmVxdWVzdCgnR0VUJywgJHVybCk7CiAgICAgICAgICAgIHJldHVybiBuZXcgTU1fQVdlYmVyRW50cnkoJGRhdGEsICR1cmwsICR0aGlzLT5hZGFwdGVyKTsKICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICAgICAgcmV0dXJuIE5VTEw7CiAgICAgICAgfQogICAgfQoKICAgIC8qKgogICAgICogX2dldFBhZ2VQYXJhbXMKICAgICAqCiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIEdFVCBwYXJhbXMgdXNlZCB0byBzZXQgdGhlIHBhZ2Ugb2YgYSBjb2xsZWN0aW9uCiAgICAgKiByZXF1ZXN0CiAgICAgKiBAcGFyYW0gaW50ICRzdGFydCAgICBXaGljaCBlbnRyeSBvZmZzZXQgc2hvdWxkIHRoaXMgcGFnZSBzdGFydCBvbj8KICAgICAqIEBwYXJhbSBpbnQgJHNpemUgICAgIEhvdyBtYW55IGVudHJpZXMgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoaXMgcGFnZT8KICAgICAqIEBhY2Nlc3MgcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJuIHZvaWQKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIF9nZXRQYWdlUGFyYW1zKCRzdGFydD0wLCAkc2l6ZT0yMCkgewogICAgICAgIGlmICgkc3RhcnQgPiAwKSB7CiAgICAgICAgICAgICRwYXJhbXMgPSBhcnJheSgKICAgICAgICAgICAgICAgICd3cy5zdGFydCcgPT4gJHN0YXJ0LAogICAgICAgICAgICAgICAgJ3dzLnNpemUnICA9PiAkc2l6ZSwKICAgICAgICAgICAgKTsKICAgICAgICAgICAga3NvcnQoJHBhcmFtcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHBhcmFtcyA9IGFycmF5KCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkcGFyYW1zOwogICAgfQoKICAgIC8qKgogICAgICogX3R5cGUKICAgICAqCiAgICAgKiBJbnRlcnByZXQgd2hhdCB0eXBlIG9mIHJlc291cmNlcyBhcmUgaGVsZCBpbiB0aGlzIGNvbGxlY3Rpb24gYnkgCiAgICAgKiBhbmFseXppbmcgdGhlIFVSTAogICAgICoKICAgICAqIEBhY2Nlc3MgcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJuIHZvaWQKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIF90eXBlKCkgewogICAgICAgICR1cmxQYXJ0cyA9IGV4cGxvZGUoJy8nLCAkdGhpcy0+dXJsKTsKICAgICAgICAkdHlwZSA9IGFycmF5X3BvcCgkdXJsUGFydHMpOwogICAgICAgIHJldHVybiAkdHlwZTsKICAgIH0KCiAgICAvKioKICAgICAqIF9jYWxjdWxhdGVQYWdlU2l6ZQogICAgICoKICAgICAqIENhbGN1bGF0ZXMgdGhlIHBhZ2Ugc2l6ZSBvZiB0aGlzIGNvbGxlY3Rpb24gYmFzZWQgb24gdGhlIGRhdGEgaW4gdGhlIAogICAgICogbmV4dCBhbmQgcHJldiBsaW5rcy4KICAgICAqCiAgICAgKiBAYWNjZXNzIHByb3RlY3RlZAogICAgICogQHJldHVybiBpbnRlZ2VyCiAgICAgKi8KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBfY2FsY3VsYXRlUGFnZVNpemUoKSB7CiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5kYXRhWyduZXh0X2NvbGxlY3Rpb25fbGluayddKSkgewogICAgICAgICAgICAkdXJsID0gJHRoaXMtPmRhdGFbJ25leHRfY29sbGVjdGlvbl9saW5rJ107CiAgICAgICAgICAgICR1cmxQYXJ0cyA9IHBhcnNlX3VybCgkdXJsKTsKICAgICAgICAgICAgaWYgKGVtcHR5KCR1cmxQYXJ0c1sncXVlcnknXSkpIHJldHVybiAkdGhpcy0+cGFnZVNpemU7CiAgICAgICAgICAgICRxdWVyeSA9IGFycmF5KCk7CiAgICAgICAgICAgIHBhcnNlX3N0cigkdXJsUGFydHNbJ3F1ZXJ5J10sICRxdWVyeSk7CiAgICAgICAgICAgIGlmIChlbXB0eSgkcXVlcnlbJ3dzX3NpemUnXSkpIHJldHVybiAkdGhpcy0+cGFnZVNpemU7CiAgICAgICAgICAgICR0aGlzLT5wYWdlU2l6ZSA9ICRxdWVyeVsnd3Nfc2l6ZSddOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJHRoaXMtPnBhZ2VTaXplOwogICAgfQoKICAgIC8qKgogICAgICogX2xvYWRQYWdlRm9yT2Zmc2V0CiAgICAgKiAKICAgICAqIE1ha2VzIGEgcmVxdWVzdCBmb3IgYW4gYWRkaXRpb25hbCBwYWdlIG9mIGVudHJpZXMsIGJhc2VkIG9uIHRoZSBnaXZlbiAKICAgICAqIG9mZnNldC4gIENhbGN1bGF0ZXMgdGhlIHN0YXJ0IC8gc2l6ZSBvZiB0aGUgcGFnZSBuZWVkZWQgdG8gZ2V0IHRoYXQgCiAgICAgKiBvZmZzZXQsIHJlcXVlc3RzIGZvciBpdCwgYW5kIHRoZW4gbWVyZ2VzIHRoZSBkYXRhIGludG8gaXQgaW50ZXJuYWwgCiAgICAgKiBjb2xsZWN0aW9uIG9mIGVudHJ5IGRhdGEuCiAgICAgKgogICAgICogQHBhcmFtIG1peGVkICRvZmZzZXQgICAgIFRoZSBvZmZzZXQgcmVxdWVzdGVkLCAwIHRvIHRvdGFsX3NpemUtMQogICAgICogQGFjY2VzcyBwcm90ZWN0ZWQKICAgICAqIEByZXR1cm4gdm9pZAogICAgICovCiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gX2xvYWRQYWdlRm9yT2Zmc2V0KCRvZmZzZXQpIHsKICAgICAgICAkdGhpcy0+X2NhbGN1bGF0ZVBhZ2VTaXplKCk7CiAgICAgICAgJHN0YXJ0ID0gcm91bmQoJG9mZnNldCAvICR0aGlzLT5wYWdlU2l6ZSkgKiAkdGhpcy0+cGFnZVNpemU7CiAgICAgICAgJHBhcmFtcyA9ICR0aGlzLT5fZ2V0UGFnZVBhcmFtcygkc3RhcnQsICR0aGlzLT5wYWdlU2l6ZSk7CgogICAgICAgIC8vIExvYWRpbmcgcGFnZQogICAgICAgICRkYXRhID0gJHRoaXMtPmFkYXB0ZXItPnJlcXVlc3QoJ0dFVCcsICR0aGlzLT51cmwsICRwYXJhbXMpOwogICAgICAgICR0aGlzLT5hZGFwdGVyLT5kZWJ1ZyA9IGZhbHNlOwoKICAgICAgICAkcmVrZXllZCA9IGFycmF5KCk7CiAgICAgICAgZm9yZWFjaCAoJGRhdGFbJ2VudHJpZXMnXSBhcyAka2V5ID0+ICRlbnRyeSkgewogICAgICAgICAgICAkcmVrZXllZFska2V5KyRkYXRhWydzdGFydCddXSA9ICRlbnRyeTsKICAgICAgICB9CiAgICAgICAgJHRoaXMtPmRhdGFbJ2VudHJpZXMnXSA9IGFycmF5X21lcmdlKCR0aGlzLT5kYXRhWydlbnRyaWVzJ10sICRyZWtleWVkKTsKICAgIH0KCiAgICAvKioKICAgICAqIF9nZXRFbnRyeQogICAgICoKICAgICAqIE1ha2VzIHN1cmUgdGhhdCBlbnRyeSBvZmZzZXQncyBwYWdlIGlzIGxvYWRlZCwgdGhlbiByZXR1cm5zIGl0LiBSZXR1cm5zCiAgICAgKiBudWxsIGlmIHRoZSBlbnRyeSBjYW4ndCBiZSBsb2FkZWQsIGV2ZW4gYWZ0ZXIgcmVxdWVzdGluZyB0aGUgbmVlZGVkIAogICAgICogcGFnZS4KICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgJG9mZnNldCAgICAgT2Zmc2V0IGJlaW5nIHJlcXVlc3RlZC4KICAgICAqIEBhY2Nlc3MgcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJuIHZvaWQKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIF9nZXRFbnRyeSgkb2Zmc2V0KSB7CiAgICAgICAgaWYgKGVtcHR5KCR0aGlzLT5kYXRhWydlbnRyaWVzJ11bJG9mZnNldF0pKSB7CiAgICAgICAgICAgICR0aGlzLT5fbG9hZFBhZ2VGb3JPZmZzZXQoJG9mZnNldCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAoZW1wdHkoJHRoaXMtPmRhdGFbJ2VudHJpZXMnXVskb2Zmc2V0XSkpPyBudWxsIDoKICAgICAgICAgICAgJHRoaXMtPmRhdGFbJ2VudHJpZXMnXVskb2Zmc2V0XTsKICAgIH0KCiAgICAvKioKICAgICAqIF9tYWtlRW50cnkKICAgICAqCiAgICAgKiBDcmVhdGVzIGFuIGVudHJ5IG9iamVjdCBmcm9tIHRoZSBnaXZlbiBlbnRyeSBkYXRhLiAgT3B0aW9uYWxseSBjYW4gdGFrZSAKICAgICAqIHRoZSBpZCBBTkQgVVJMIG9mIHRoZSBlbnRyeSwgdGhvdWdoIHRoYXQgZGF0YSBjYW4gYmUgaW5mZXJlZCBmcm9tIHRoZQogICAgICogY29udGV4dCBpbiB3aGljaCBfbWFrZUVudHJ5IGlzIGJlaW5nIGNhbGxlZC4KICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGRhdGEgICBBcnJheSBvZiBkYXRhIHJldHVybmVkIGZyb20gYW4gQVBJIHJlcXVlc3QgZm9yIAogICAgICogICAgICBlbnRyeSwgb3IgYXMgcGFydCBvZiB0aGUgZW50cmllcyBhcnJheSBpbiB0aGlzIGNvbGxlY3Rpb24uCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGlkICAgICBJRCBvZiB0aGUgZW50cnkuIChPcHRpb25hbCkKICAgICAqIEBwYXJhbSBtaXhlZCAkdXJsICAgIFVSTCB1c2VkIHRvIHJldHJpZXZlIHRoaXMgZW50cnkgKE9wdGlvbmFsKSAKICAgICAqIEBhY2Nlc3MgcHJvdGVjdGVkCiAgICAgKiBAcmV0dXJuIHZvaWQKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIF9tYWtlRW50cnkoJGRhdGEsICRpZCA9IGZhbHNlLCAkdXJsID0gZmFsc2UpIHsKICAgICAgICBpZiAoKCEkdXJsKSBvciAoISRpZCkpIHsKICAgICAgICAgICAgLy8gaWYgZWl0aGVyIHRoZSB1cmwgb3IgaWQgaXMgb21pdHRlZCwgZ3JhYiB0aGUgdXJsIGZyb20gdGhlCiAgICAgICAgICAgIC8vIHNlbGZfbGluayBvZiB0aGUgcmVzb3VyY2UKICAgICAgICAgICAgJHVybCA9ICR0aGlzLT5hZGFwdGVyLT5hcHAtPnJlbW92ZUJhc2VVcmkoJGRhdGFbJ3NlbGZfbGluayddKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkdXJsID0gInskdGhpcy0+dXJsfS97JGlkfSI7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgTU1fQVdlYmVyRW50cnkoJGRhdGEsICR1cmwsICR0aGlzLT5hZGFwdGVyKTsKICAgIH0KCiAgICAvKioKICAgICAqIEFycmF5QWNjZXNzIGludGVyZmFjZSBtZXRob2RzCiAgICAgKgogICAgICogQWxsb3dzIHRoaXMgb2JqZWN0IHRvIGJlIGFjY2Vzc2VkIHZpYSBicmFja2V0IG5vdGF0aW9uIChpZSAkb2JqWyR4XSkKICAgICAqIGh0dHA6Ly9waHAubmV0L21hbnVhbC9lbi9jbGFzcy5hcnJheWFjY2Vzcy5waHAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIG9mZnNldFNldCgkb2Zmc2V0LCAkdmFsdWUpIHsgfQogICAgcHVibGljIGZ1bmN0aW9uIG9mZnNldFVuc2V0KCRvZmZzZXQpIHt9CiAgICBwdWJsaWMgZnVuY3Rpb24gb2Zmc2V0RXhpc3RzKCRvZmZzZXQpIHsKICAgICAgICBpZiAoJG9mZnNldCA+PTAgJiYgJG9mZnNldCA8ICR0aGlzLT50b3RhbF9zaXplKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gb2Zmc2V0R2V0KCRvZmZzZXQpIHsKICAgICAgICBpZiAoISR0aGlzLT5vZmZzZXRFeGlzdHMoJG9mZnNldCkpICAgIHJldHVybiBudWxsOwogICAgICAgIGlmICghZW1wdHkoJHRoaXMtPl9lbnRyaWVzWyRvZmZzZXRdKSkgcmV0dXJuICR0aGlzLT5fZW50cmllc1skb2Zmc2V0XTsKCiAgICAgICAgJHRoaXMtPl9lbnRyaWVzWyRvZmZzZXRdID0gJHRoaXMtPl9tYWtlRW50cnkoJHRoaXMtPl9nZXRFbnRyeSgkb2Zmc2V0KSk7CiAgICAgICAgcmV0dXJuICR0aGlzLT5fZW50cmllc1skb2Zmc2V0XTsKICAgIH0KCiAgICAvKioKICAgICAqIEl0ZXJhdG9yIGludGVyZmFjZSBtZXRob2RzCiAgICAgKiAKICAgICAqIFByb3ZpZGVzIGl0ZXJhdG9yIGZ1bmN0aW9uYWxpdHkuCiAgICAgKiBodHRwOi8vcGhwLm5ldC9tYW51YWwvZW4vY2xhc3MuaXRlcmF0b3IucGhwCiAgICAgKi8KICAgIHByb3RlY3RlZCAkX2l0ZXJhdGlvbktleSA9IDA7CiAgICBwdWJsaWMgZnVuY3Rpb24gY3VycmVudCgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPm9mZnNldEdldCgkdGhpcy0+X2l0ZXJhdGlvbktleSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGtleSgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPl9pdGVyYXRpb25LZXk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgJHRoaXMtPl9pdGVyYXRpb25LZXkrKzsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gcmV3aW5kKCkgewogICAgICAgICR0aGlzLT5faXRlcmF0aW9uS2V5ID0gMDsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gdmFsaWQoKSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5vZmZzZXRFeGlzdHMoJHRoaXMtPmtleSgpKTsKICAgIH0KCiAgICAvKioKICAgICAqIENvdW50YWJsZSBpbnRlcmZhY2UgbWV0aG9kcwogICAgICoKICAgICAqIEFsbG93cyBQSFAncyBjb3VudCgpIGFuZCBzaXplT2YoKSBmdW5jdGlvbnMgdG8gYWN0IG9uIHRoaXMgb2JqZWN0CiAgICAgKiBodHRwOi8vd3d3LnBocC5uZXQvbWFudWFsL2VuL2NsYXNzLmNvdW50YWJsZS5waHAKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGNvdW50KCkgewogICAgICAgIHJldHVybiAkdGhpcy0+dG90YWxfc2l6ZTsKICAgIH0KCn0=', 0, '2018-11-21 06:38:53'),
(75, 'versionrelease', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1ZlcnNpb25SZWxlYXNlIGV4dGVuZHMgTU1fRW50aXR5CnsKCXByaXZhdGUgJHZlcnNpb24gPSAiIjsKCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpCgl7CgkJcGFyZW50OjppbnZhbGlkYXRlKCk7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCgl7CgkJdHJ5IAoJCXsKCQkJJHRoaXMtPnZlcnNpb24gPSAkZGF0YS0+dmVyc2lvbjsKCQkJcGFyZW50Ojp2YWxpZGF0ZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkgCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGNvbW1pdERhdGEoKQoJewoJCWdsb2JhbCAkd3BkYjsKCgkJJHZlcnNpb25SZWxlYXNlRGF0YSA9IGFycmF5KAoJCQkJInZlcnNpb24iCQkgPT4gJHRoaXMtPnZlcnNpb24sCgkJCQkiZGF0ZV9tb2RpZmllZCIJID0+IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpCgkJKTsKCQkKCQlpZihpbnR2YWwoJHRoaXMtPmlkKSA+IDApCgkJewoJCQkkd2hlcmVDbGF1c2UgPSBhcnJheSgiaWQiPT4kdGhpcy0+aWQpOwoJCQkkd3BkYi0+dXBkYXRlKE1NX1RBQkxFX1ZFUlNJT05fUkVMRUFTRVMsJHZlcnNpb25SZWxlYXNlRGF0YSwkd2hlcmVDbGF1c2UpOwoJCQlyZXR1cm4gJHRoaXMtPmlkOwoJCX0KCQllbHNlCgkJewoJCQkkd3BkYi0+aW5zZXJ0KE1NX1RBQkxFX1ZFUlNJT05fUkVMRUFTRVMsJHZlcnNpb25SZWxlYXNlRGF0YSk7CgkJCSR0aGlzLT5pZCA9ICR3cGRiLT5pbnNlcnRfaWQ7CgkJCXJldHVybiAkdGhpcy0+aWQ7CgkJfQoKCQlyZXR1cm4gZmFsc2U7Cgl9CgoJCgkvKiogR0VUVEVSUy9TRVRURVJTICoqLwoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VmVyc2lvbigpCgl7CgkJcmV0dXJuICR0aGlzLT52ZXJzaW9uOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRWZXJzaW9uKCR2YWwpCgl7CgkJJHRoaXMtPnZlcnNpb24gPSAkdmFsOwoJfQoJCgkKCS8qKiBVVElMSVRJRVMgKiovCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZmluZEJ5VmVyc2lvbigkdmVyc2lvbikKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHZlcnNpb25SZWxlYXNlID0gbmV3IE1NX1ZlcnNpb25SZWxlYXNlKCk7CgkJCgkJJHNxbCA9ICR3cGRiLT5wcmVwYXJlKCJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfVkVSU0lPTl9SRUxFQVNFUy4iIFdIRVJFIHZlcnNpb249JXMgbGltaXQgMSIsJHZlcnNpb24pOwoJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQoJCWlmKCRyZXN1bHQpCgkJewoJCQkkdmVyc2lvblJlbGVhc2UtPnNldElkKCRyZXN1bHQtPmlkKTsKCQkJJHZlcnNpb25SZWxlYXNlLT5zZXREYXRhKCRyZXN1bHQpOwoJCX0KCQoJCXJldHVybiAkdmVyc2lvblJlbGVhc2U7Cgl9Cn0K', 0, '2018-11-21 06:38:53'),
(76, 'oauthapplication', '', 0, '2018-11-21 06:38:53'),
(77, 'smarttag', 'Y2xhc3MgTU1fU21hcnRUYWcgZXh0ZW5kcyBNTV9FbnRpdHkKewoJcHJpdmF0ZSAkbmFtZTsKCXByaXZhdGUgJGdyb3VwSWQ7CgkKCXByb3RlY3RlZCBmdW5jdGlvbiBnZXREYXRhKCkgewoJCS8vIGRvIG5vdGhpbmcKCX0KCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGNvbW1pdERhdGEoKSB7CgkJLy8gZG8gbm90aGluZwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCiAJewogCQl0cnkgCiAJCXsKCSAJCSR0aGlzLT5uYW1lID0gJGRhdGEtPm5hbWU7CgkgCQkkdGhpcy0+Z3JvdXBJZCA9ICRkYXRhLT5ncm91cF9pZDsKCSAJCQoJIAkJcGFyZW50Ojp2YWxpZGF0ZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkgewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZUh0bWwoKQogCXsKIAkJJGZpbGVOYW1lID0gTU1fVEVNUExBVEVTX1VSTC4ic21hcnR0YWdzLyI7CiAJCQogCQkkYXJyID0gZXhwbG9kZSgiXyIsICR0aGlzLT5uYW1lKTsKIAkJCiAJCWZvcigkaSA9IDE7ICRpIDwgY291bnQoJGFycik7ICRpKyspIAogCQl7CiAJCQkkZmlsZU5hbWUgLj0gc3RydG9sb3dlcigkYXJyWyRpXSk7CiAJCQkKIAkJCWlmKCRpID09IGNvdW50KCRhcnIpIC0gMSkgewogCQkJCSRmaWxlTmFtZSAuPSAiLnBocD9xPSIuTU1fVXRpbHM6OmNyZWF0ZVJhbmRvbVN0cmluZygxMCk7CiAJCQl9CiAJCQllbHNlIHsKIAkJCQkkZmlsZU5hbWUgLj0gIi8iOwogCQkJfQogCQl9CiAJCQogCQkkaHRtbCA9ICI8ZGl2IGlkPVwibW0tc21hcnR0YWciLiR0aGlzLT5pZC4iXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOjZweDsgZm9udC1zaXplOiAxMXB4OyBjdXJzb3I6cG9pbnRlcjtcIiBvbmNsaWNrPVwic3RsX2pzLnNtYXJ0VGFnQ2xpY2tIYW5kbGVyKCciLiRmaWxlTmFtZS4iJyk7XCI+IjsKIAkJJGh0bWwgLj0gIlsiLiR0aGlzLT5uYW1lLiJdIjsKIAkJJGh0bWwgLj0gIjwvZGl2PiI7CgkJCiAJCXJldHVybiAkaHRtbDsKIAl9CiAJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TmFtZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5uYW1lOwoJfQogCQoJcHVibGljIGZ1bmN0aW9uIGdldEdyb3VwSWQoKQoJewoJCXJldHVybiAkdGhpcy0+Z3JvdXBJZDsKCX0KIAkKfQo=', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(78, 'scheduledpaymentservice', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(79, 'icontactemailserviceprovider', '', 0, '2018-11-21 06:38:53');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(80, 'htmlutils', '', 0, '2018-11-21 06:38:54'),
(81, 'employeesview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0VtcGxveWVlc1ZpZXcgZXh0ZW5kcyBNTV9SQkFDQWRtaW5WaWV3CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1NFVF9ERUZBVUxUID0gInNldERlZmF1bHQiOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TQVZFOgoJCQkJCXJldHVybiAkdGhpcy0+c2F2ZUVtcGxveWVlKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUVtcGxveWVlKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NFVF9ERUZBVUxUOgoJCQkJCXJldHVybiAkdGhpcy0+c2V0QXNEZWZhdWx0KCRwb3N0KTsKCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YSgkc29ydEJ5PW51bGwsICRzb3J0RGlyPW51bGwpCgl7CgkJcmV0dXJuIHBhcmVudDo6Z2V0RGF0YShNTV9UQUJMRV9FTVBMT1lFRV9BQ0NPVU5UUywgbnVsbCwgJHNvcnRCeSwgJHNvcnREaXIpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHNhdmVFbXBsb3llZSgkcG9zdCkKCXsKCQkkZW1wbG95ZWUgPSBuZXcgTU1fRW1wbG95ZWUoKTsKCQkKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJpZCJdKSA+IDApIAoJCXsKCQkJJGVtcGxveWVlLT5zZXRJZCgkcG9zdFsiaWQiXSk7CgkJCSRlbXBsb3llZS0+Z2V0RGF0YSgpOwoJCX0KCQkKCSAJJGVtcGxveWVlLT5zZXREaXNwbGF5TmFtZSgkcG9zdFsibW1fZGlzcGxheV9uYW1lIl0pOwoJIAkkZW1wbG95ZWUtPnNldEZpcnN0TmFtZSgkcG9zdFsibW1fZmlyc3RfbmFtZSJdKTsKCSAJJGVtcGxveWVlLT5zZXRMYXN0TmFtZSgkcG9zdFsibW1fbGFzdF9uYW1lIl0pOwoJIAkKCSAJaWYoaXNzZXQoJHBvc3RbIm1tX3Bhc3N3b3JkIl0pKQoJIAl7CgkgCQkkZW1wbG95ZWUtPnNldFBhc3N3b3JkKCRwb3N0WyJtbV9wYXNzd29yZCJdKTsKCSAJfQoJIAkKCSAJJGVtcGxveWVlLT5zZXRSb2xlSWQoJHBvc3RbIm1tX3JvbGVfaWQiXSk7CgkgCSRlbXBsb3llZS0+c2V0UGhvbmUoJHBvc3RbIm1tX3Bob25lIl0pOwoJIAkkZW1wbG95ZWUtPnNldEVtYWlsKCRwb3N0WyJtbV9lbWFpbCJdKTsKCSAJJGVtcGxveWVlLT5zZXRBbGxvd0V4cG9ydCgkcG9zdFsibW1fYWxsb3dfZXhwb3J0X3ZhbCJdKTsKCSAJJGVtcGxveWVlLT5zZXRJc0RlZmF1bHQoJHBvc3RbIm1tX2lzX2RlZmF1bHQiXSk7CgkJCgkgCWlmKE1NX01lbWJlck1vdXNlU2VydmljZTo6aGFzUGVybWlzc2lvbihNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OiRGRUFUVVJFX0VNUExPWUVFX0FDQ09VTlRTKSAmJiAhZW1wdHkoJHBvc3RbJ21tX21lbWJlcnNoaXBzJ10pKQoJIAl7CgkgCQkkZW1wbG95ZWUtPnNldEFjY2Vzc1Jlc3RyaWN0aW9ucyhNTV9FbXBsb3llZTo6JEFDQ0VTU19UWVBFX01FTUJFUlNISVAsICRwb3N0WyJtbV9tZW1iZXJzaGlwcyJdKTsKCSAJfQoJIAllbHNlCgkgCXsKCSAJCSRlbXBsb3llZS0+c2V0QWNjZXNzUmVzdHJpY3Rpb25zKE1NX0VtcGxveWVlOjokQUNDRVNTX1RZUEVfTUVNQkVSU0hJUCwgYXJyYXkoKSk7CgkgCX0KCSAJCgkgCSRyZXN1bHQgPSAkZW1wbG95ZWUtPmNvbW1pdERhdGEoKTsKCSAJCgkgCWlmIChNTV9SZXNwb25zZTo6aXNFcnJvcigkcmVzdWx0KSkgCgkgCXsKCQkJcmV0dXJuICRyZXN1bHQ7CgkgCX0KCSAJCgkgCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsJCgkgCQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHJlbW92ZUVtcGxveWVlKCRwb3N0KQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJpZCJdKSA+IDApCgkJewoJCQkkcmVtb3ZlTGlua2VkID0gKGlzc2V0KCRwb3N0WydyZW1vdmVfbGlua2VkJ10pICYmICgkcG9zdFsncmVtb3ZlX2xpbmtlZCddID09ICJ0cnVlIikpP3RydWU6ZmFsc2U7CgkJCSRlbXBsb3llZSA9IG5ldyBNTV9FbXBsb3llZSgkcG9zdFsiaWQiXSk7CgkJCSRyZXN1bHQgPSAkZW1wbG95ZWUtPmRlbGV0ZSgkcmVtb3ZlTGlua2VkKTsKCQkJCgkJCWlmKCRyZXN1bHQpIAoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCX0gCgkJCWVsc2UgCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlRoaXMgZW1wbG95ZWUgaGFzIGV4aXN0aW5nIGFzc29jaWF0aW9ucyBhbmQgY2FuJ3QgYmUgcmVtb3ZlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gZGVsZXRlIGVtcGxveWVlLiBObyBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKIAlwcml2YXRlIGZ1bmN0aW9uIHNldEFzRGVmYXVsdCgkcG9zdCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYoaXNzZXQoJHBvc3RbImlkIl0pICYmIGludHZhbCgkcG9zdFsiaWQiXSkgPiAwKQoJCXsKCQkJLy8gY2xlYXIgY3VycmVudCBkZWZhdWx0IGFjY291bnQKCQkJJHNxbCA9ICJ1cGRhdGUgIi5NTV9UQUJMRV9FTVBMT1lFRV9BQ0NPVU5UUy4iIHNldCBpc19kZWZhdWx0PScwJyB3aGVyZSBpc19kZWZhdWx0PScxJyI7CgkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCQkJCgkJCS8vIHNldCBuZXcgZGVmYXVsdCBhY2NvdW50CgkJCSRzcWwgPSAidXBkYXRlICIuTU1fVEFCTEVfRU1QTE9ZRUVfQUNDT1VOVFMuIiBzZXQgaXNfZGVmYXVsdD0nMScgd2hlcmUgaWQ9JyVkJyBsaW1pdCAxIjsKCQkJJHJlc3VsdHMgPSAkd3BkYi0+cXVlcnkoJHdwZGItPnByZXBhcmUoJHNxbCwgJHBvc3RbImlkIl0pKTsKCQkJCgkJCWlmKCRyZXN1bHRzKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCX0KCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHNldCBlbXBsb3llZSBhcyBkZWZhdWx0LiBObyBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9Cn0K', 0, '2018-11-21 06:38:54'),
(82, 'idevaffiliateprovider', '', 0, '2018-11-21 06:38:54'),
(83, 'aweberexception', 'Y2xhc3MgTU1fQVdlYmVyRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0aW9uIHsgfQoKCg==', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(84, 'api', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQXBpIGV4dGVuZHMgTU1fRW50aXR5CnsKCXB1YmxpYyBzdGF0aWMgJFNUQVRVU19BQ1RJVkUgPSAnMSc7CglwdWJsaWMgc3RhdGljICRTVEFUVVNfSU5BQ1RJVkUgPSAnMCc7CgkKCXByaXZhdGUgJG5hbWUgPSAiIjsKCXByaXZhdGUgJGFwaV9rZXkgPSAiIjsKCXByaXZhdGUgJGFwaV9zZWNyZXQgPSAiIjsKCXByaXZhdGUgJHN0YXR1cyA9ICIiOwoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpIAoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9BUElfS0VZUy4iIFdIRVJFIGlkPSciLiR0aGlzLT5pZC4iJzsiOwoJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkKCQlpZigkcmVzdWx0KSB7CgkJCSR0aGlzLT5zZXREYXRhKCRyZXN1bHQpOwoJCX0KCQllbHNlIHsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRkYXRhKQoJewoJCXRyeSAKCQl7CgkJCSR0aGlzLT5uYW1lID0gJGRhdGEtPm5hbWU7CgkJCSR0aGlzLT5hcGlfa2V5ID0gJGRhdGEtPmFwaV9rZXk7CgkJCSR0aGlzLT5hcGlfc2VjcmV0ID0gJGRhdGEtPmFwaV9zZWNyZXQ7CgkJCSR0aGlzLT5zdGF0dXMgPSAkZGF0YS0+c3RhdHVzOwoJCQlwYXJlbnQ6OnZhbGlkYXRlKCk7CgkJfQoJCWNhdGNoIChFeGNlcHRpb24gJGV4KSB7CgkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRlbGV0ZSgpewoJCQoJCWdsb2JhbCAkd3BkYjsKCQlpZihpbnR2YWwoJHRoaXMtPmlkKT4wKXsKCQkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX0FQSV9LRVlTLiIgd2hlcmUgaWQ9J3skdGhpcy0+aWR9JyBsaW1pdCAxIjsKCQkJJHJlc3VsdCA9ICR3cGRiLT5xdWVyeSgkc3FsKTsKCQkJaWYoJHJlc3VsdD09PWZhbHNlKXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCByZW1vdmUgYXBpIHNldCBkdWUgdG8gc3FsIGVycm9yLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCQl9CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IHJlbW92ZSBpbnZhbGlkIGFwaSBzZXQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBjb21taXREYXRhKCkKCXsJCgkJZ2xvYmFsICR3cGRiOwoJCWlmKGludHZhbCgkdGhpcy0+aWQpPjApewoJCQkkc3FsID0gInVwZGF0ZSAiLk1NX1RBQkxFX0FQSV9LRVlTLiIgc2V0IAoJCQkJCQluYW1lPSclcycsIAoJCQkJCQlhcGlfa2V5PSclcycsCgkJCQkJCWFwaV9zZWNyZXQ9JyVzJywKCQkJCQkJc3RhdHVzPSclcycKCQkJCQl3aGVyZSAKCQkJCQkJaWQ9J3skdGhpcy0+aWR9JwoJCQkiOwoJCQkkcHJlcGFyZWRTcWwgPSAkd3BkYi0+cHJlcGFyZSgkc3FsLCAkdGhpcy0+bmFtZSwgJHRoaXMtPmFwaV9rZXksICR0aGlzLT5hcGlfc2VjcmV0LCAkdGhpcy0+c3RhdHVzKTsKCQkJJHJldCA9ICR3cGRiLT5xdWVyeSgkcHJlcGFyZWRTcWwpOwoJCQlpZigkcmV0PT09ZmFsc2UpewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IHNhdmUgcXVlcnkgeyRwcmVwYXJlZFNxbH0uIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJZWxzZXsKCQkJJHNxbCA9ICJpbnNlcnQgaW50byAiLk1NX1RBQkxFX0FQSV9LRVlTLiIgc2V0IAoJCQkJCQluYW1lPSclcycsIAoJCQkJCQlhcGlfa2V5PSclcycsCgkJCQkJCWFwaV9zZWNyZXQ9JyVzJywKCQkJCQkJc3RhdHVzPSclcycKCQkJIjsKCQkJJHByZXBhcmVkU3FsID0gJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPm5hbWUsICR0aGlzLT5hcGlfa2V5LCAkdGhpcy0+YXBpX3NlY3JldCwgJHRoaXMtPnN0YXR1cyk7CgkJCSRyZXQgPSAkd3BkYi0+cXVlcnkoJHByZXBhcmVkU3FsKTsKCQkJaWYoJHJldD09PWZhbHNlKXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBzYXZlIHF1ZXJ5IHskcHJlcGFyZWRTcWx9LiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRLZXlMaXN0KCR1c2VBY3RpdmVPbmx5PWZhbHNlKXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfQVBJX0tFWVMuIiAiOwoJCWlmKCR1c2VBY3RpdmVPbmx5KXsKCQkJJHNxbC49ICIgd2hlcmUgc3RhdHVzPSciLnNlbGY6OiRTVEFUVVNfQUNUSVZFLiInIjsKCQl9CgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJaWYoaXNfYXJyYXkoJHJvd3MpKXsKCQkJcmV0dXJuICRyb3dzOwoJCX0KCQlyZXR1cm4gYXJyYXkoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFN0YXR1c0xpc3QoKXsKCQkkYXJyID0gIGFycmF5KAoJCQlzZWxmOjokU1RBVFVTX0FDVElWRT0+J0FjdGl2ZScsCgkJCXNlbGY6OiRTVEFUVVNfSU5BQ1RJVkU9PidJbmFjdGl2ZScsCgkJKTsKCQlyZXR1cm4gJGFycjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldE5hbWUoJG1zZyl7CgkJJHRoaXMtPm5hbWUgPSAkbXNnOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TmFtZSgpewoJCXJldHVybiAkdGhpcy0+bmFtZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEFwaUtleSgkdmFsKXsKCQkkdGhpcy0+YXBpX2tleSA9ICR2YWw7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRBcGlLZXkoKXsKCQlyZXR1cm4gJHRoaXMtPmFwaV9rZXk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRBcGlTZWNyZXQoJHZhbCl7CgkJJHRoaXMtPmFwaV9zZWNyZXQgPSAkdmFsOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0QXBpU2VjcmV0KCl7CgkJcmV0dXJuICR0aGlzLT5hcGlfc2VjcmV0OwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U3RhdHVzKCR2YWwpewoJCSR0aGlzLT5zdGF0dXMgPSAkdmFsOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0U3RhdHVzKCl7CgkJcmV0dXJuICR0aGlzLT5zdGF0dXM7Cgl9Cn0=', 0, '2018-11-21 06:38:54'),
(85, 'rbacbaseview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCgphYnN0cmFjdCBjbGFzcyBNTV9SQkFDQmFzZVZpZXcgZXh0ZW5kcyBNTV9Mb2dnZWRJblVzZXJWaWV3CnsKCS8qKgoJICogRGV0ZXJtaW5lcyBpZiB0aGUgY2FsbGVyIGhhcyBwZXJtaXNzaW9uIHRvIHBlcmZvcm0gdGhlIHJlcXVlc3RlZCBhY3Rpb24KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRyZXF1ZXN0CgkgKiBAcmV0dXJuIGJvb2xlYW4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGNhbkNhbGxNZXRob2QoJHJlcXVlc3QpCgl7CgkJZ2xvYmFsICR1c2VyLCAkY3VycmVudF91c2VyOwoJCQoJCWlmICgoJHJlcXVlc3RbJ21ldGhvZCddICE9ICJwZXJmb3JtQWN0aW9uIikgfHwgKCFpc3NldCgkcmVxdWVzdFsnbW1fYWN0aW9uJ10pKSkKCQl7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJJHJlcXVlc3RlZEFjdGlvbiA9ICAkcmVxdWVzdFsnbW1fYWN0aW9uJ107CgkJCgkJaWYgKHBhcmVudDo6Y2FuQ2FsbE1ldGhvZCgkcmVxdWVzdGVkQWN0aW9uKSkKCQl7CgkJCSRhY3Rpb25Ub1Rlc3QgPSAoaXNzZXQoJHRoaXMtPnBlcm1pc3Npb25zWyRyZXF1ZXN0ZWRBY3Rpb25dKSk/JHJlcXVlc3RlZEFjdGlvbjoiKiI7CgkJCSR1c2VySWQgPSAwOwoJCQlpZiAoaXNzZXQoJHVzZXIpICYmIGlzc2V0KCR1c2VyLT5JRCkgJiYgKCR1c2VyLT5JRCAhPSAiMCIpKQoJCQl7CgkJCQkkdXNlcklkID0gJHVzZXItPklEOwoJCQl9CgkJCWVsc2UgaWYgKGlzc2V0KCRjdXJyZW50X3VzZXIpICYmIGlzc2V0KCRjdXJyZW50X3VzZXItPklEKSAmJiAoJGN1cnJlbnRfdXNlci0+SUQgIT0gIjAiKSkKCQkJewoJCQkJJHVzZXJJZCA9ICRjdXJyZW50X3VzZXItPklEOwoJCQl9CgkJCSRlbXBsb3llZSA9IE1NX0VtcGxveWVlOjpmaW5kQnlVc2VySWQoJHVzZXJJZCk7CgkJCSRyb2xlID0gJGVtcGxveWVlLT5pc1ZhbGlkKCk/JGVtcGxveWVlLT5nZXRSb2xlSWQoKTpNTV9Sb2xlOjokUk9MRV9JR05PUkU7CgkJCWlmICgoJHJvbGUgIT09IE1NX1JvbGU6OiRST0xFX0FETUlOSVNUUkFUT1IpICYmIChNTV9VdGlsczo6aXNTaXRlQWRtaW4oKSkpCgkJCXsKCQkJCS8vdHJlYXQgbm9uLWVtcGxveWVlIHNpdGUgYWRtaW5zLCBvciBzaXRlIGFkbWlucyB3aXRoIGEgbG93ZXIgbW0gcm9sZSwgYXMgaWYgdGhleSBoYXZlIHRoZSBtbSBhZG1pbmlzdHJhdG9yIHJvbGUKCQkJCSRyb2xlID0gTU1fUm9sZTo6JFJPTEVfQURNSU5JU1RSQVRPUjsKCQkJfQoJCQllbHNlewoJCQkJLy8gQWxsb3cgV1AgdXNlcnMgd2l0aCBjYXBhYmlsaXRpZXMgb2YgcHVibGlzaGluZyB0byB1c3VycCBhbiBhZG1pbiByb2xlIHdoZW4gYXBwbGllZCB0byBhY2Nlc3MgcmlnaHRzLgoJCQkJLy8gVGhpcyB3aWxsIGNvbWUgaW50byBwbGF5IHdoZW4geW91IG1vZGlmeSBwb3N0L3BhZ2VzIHRoYXQgdGhleSBhbHJlYWR5IGhhdmUgYWNjZXNzIHRvIG1vZGlmeS9jcmVhdGUuCgkJCQlpZigoY3VycmVudF91c2VyX2NhbigncHVibGlzaF9wb3N0cycpIHx8IGN1cnJlbnRfdXNlcl9jYW4oJ3B1Ymxpc2hfcGFnZXMnKSkgJiYgKCR0aGlzIGluc3RhbmNlb2YgTU1fQWNjZXNzUmlnaHRzVmlldykpCgkJCQl7IAoJCQkJCSRyb2xlID0gTU1fUm9sZTo6JFJPTEVfQURNSU5JU1RSQVRPUjsKCQkJCX0KCQkJfSAKCQkJcmV0dXJuIChpc3NldCgkdGhpcy0+cGVybWlzc2lvbnNbJGFjdGlvblRvVGVzdF0pICYmIGlzX2FycmF5KCR0aGlzLT5wZXJtaXNzaW9uc1skYWN0aW9uVG9UZXN0XSkgJiYgaW5fYXJyYXkoJHJvbGUsJHRoaXMtPnBlcm1pc3Npb25zWyRhY3Rpb25Ub1Rlc3RdKSk7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KfQ==', 0, '2018-11-21 06:38:54'),
(86, 'repairmembermouseview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBUaGUgTU1fUmVwYWlyTWVtYmVyTW91c2VWaWV3IGNsYXNzIGhhbmRsZXMgdGhlIGFqYXggcmVxdWVzdHMgZnJvbSB0aGUgIlJlcGFpciBNZW1iZXJtb3VzZSIgcGFnZS4gVGhpcyBvcGVyYXRpb24gZXNzZW50aWFsbHkgY29uc2lzdHMgb2YgdGhlIG9yaWdpbmFsCiAqIHNvdXJjZSBhcmNoaXZlIGZvciB0aGUgcnVubmluZyB2ZXJzaW9uIG9mIHRoZSBwbHVnaW4gYmVpbmcgZG93bmxvYWRlZCBpbnRvIHRoZSBjYWNoZSBkaXJlY3RvcnksIGV4dHJhY3RlZCwgYW5kIHRoZW4gdXNlZCB0byBvdmVyd3JpdGUKICogbG9jYWwgZmlsZXMgd2hpY2ggbWF5IGhhdmUgYmVlbiBjb3JydXB0ZWQgb3IgbW9kaWZpZWQKICovCmNsYXNzIE1NX1JlcGFpck1lbWJlck1vdXNlVmlldyBleHRlbmRzIE1NX1JCQUNBZG1pblZpZXcgewoJCglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9GRVRDSF9TT1VSQ0VfQVJDSElWRSA9ICJmZXRjaFNvdXJjZUFyY2hpdmUiOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fUkVQQUlSX0ZST01fQVJDSElWRSA9ICJyZXBhaXJGcm9tQXJjaGl2ZSI7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KQoJewoJCSRyZXNwb25zZSA9IHBhcmVudDo6cGVyZm9ybUFjdGlvbigkcG9zdCk7CgkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKQoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9GRVRDSF9TT1VSQ0VfQVJDSElWRToKCQkJCQlyZXR1cm4gJHRoaXMtPmZldGNoU291cmNlQXJjaGl2ZSgkcG9zdCk7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9SRVBBSVJfRlJPTV9BUkNISVZFOgoJCQkJCXJldHVybiAkdGhpcy0+cmVwYWlyRnJvbUFyY2hpdmUoJHBvc3QpOwoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCS8qKgoJICogUmV0cmlldmVzIHRoZSBzb3VyY2UgYXJjaGl2ZSBmcm9tIE1lbWJlck1vdXNlIENlbnRyYWwgZm9yIHRoZSBjdXJyZW50bHkgcnVubmluZyB2ZXJzaW9uIG9mIHRoZSBwbHVnaW4KCSAqIAoJICogQHBhcmFtIEFycmF5ICRwb3N0IERhdGEgUE9TVGVkIGFzIHBhcnQgb2YgdGhlIHJlcXVlc3QKCSAqIEByZXR1cm4gaW5zdGFuY2Ugb2YgTU1fUmVzcG9uc2UgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmUuIE9uIGVycm9yLCB0aGUgbWVzc2FnZSB2YXJpYWJsZSBvZiB0aGUgTU1fUmVzcG9uc2UgaXMgYW4gCgkgKiAJCSAgIGFycmF5IGNvbnRhaW5pbmcgbW9yZSBkZXRhaWxzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBmZXRjaFNvdXJjZUFyY2hpdmUoJHBvc3QpCgl7CgkJLy9tYWtlIHN1cmUgY2FjaGUgaXMgc3RpbGwgd3JpdGVhYmxlCgkJaWYgKCFNTV9VdGlsczo6Y2FjaGVJc1dyaXRlYWJsZSgpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZShhcnJheSgic3RhdHVzIj0+ImNhY2hlX25vdF93cml0ZWFibGUiKSxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJGNhY2hlRGlyID0gTU1fVXRpbHM6OmdldENhY2hlRGlyKCk7CgkJJHJlcGFpcl9hcmNoaXZlID0gInskY2FjaGVEaXJ9L3JlcGFpcl9hcmNoaXZlLnppcCI7CgkJCgkJaWYgKCFmaWxlX2V4aXN0cygkcmVwYWlyX2FyY2hpdmUpKQoJCXsJCgkJCS8vdXNlIGN1cmwgdG8gcmV0cmlldmUgdGhlIHNvdXJjZSBhcmNoaXZlCgkJCSR2ZXJzaW9uID0gTWVtYmVyTW91c2U6OmdldFBsdWdpblZlcnNpb24oKTsKCQkJJHVybCAgPSAiaHR0cDovL2h1Yi5tZW1iZXJtb3VzZS5jb20vbWFqb3ItdmVyc2lvbnMveyR2ZXJzaW9ufS56aXAiOwkJCgkJCQoJCQlpZiAoISR0aGlzLT51cmxFeGlzdHMoJHVybCkpCgkJCXsKCQkJCSRzdGF0dXMgPSBhcnJheSgic3RhdHVzIj0+InJlbW90ZV9hcmNoaXZlX2RvZXNudF9leGlzdCIsInVybCI9PiR1cmwpOwoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkc3RhdHVzLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCQoJCQkkZnAgPSBmb3BlbigkcmVwYWlyX2FyY2hpdmUsICd3Jyk7CgkJCQoJCQkkY2ggPSBjdXJsX2luaXQoJHVybCk7CgkJCWN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9GSUxFLCAkZnApOwoJCQkkZGF0YSA9IGN1cmxfZXhlYygkY2gpOwoJCQkKCQkJY3VybF9jbG9zZSgkY2gpOwoJCQlmY2xvc2UoJGZwKTsKCQkJLy9UT0RPOiBlcnJvci1jaGVjayB0aGUgY3VybCBvcAoJCX0KCQkKCQlyZXR1cm4gZmlsZV9leGlzdHMoJHJlcGFpcl9hcmNoaXZlKT8obmV3IE1NX1Jlc3BvbnNlKCkpOihuZXcgTU1fUmVzcG9uc2UoYXJyYXkoImVycm9yIj0+ImVycm9yX3JldHJpZXZpbmdfcmVwYWlyX2FyY2hpdmUiKSxNTV9SZXNwb25zZTo6JEVSUk9SKSk7CQkJCQoJfQkKCQoJLyoqCgkgKiBBdHRlbXB0cyB0byByZXBhaXIgbG9jYWwgcGx1Z2luIGZpbGVzIHVzaW5nIHRoZSBjbGVhbiBhcmNoaXZlIGRvd25sb2FkZWQgcHJldmlvdXNseSBmcm9tIE1lbWJlck1vdXNlIGNlbnRyYWwKCSAqIFRoaXMgd2lsbCBmYWlsIGlmIHRoZSBhcmNoaXZlIGRvZXMgbm90IGV4aXN0IGluIHRoZSBjYWNoZSBkaXJlY3RvcnksIG9yIHRoZSB3ZWJzZXJ2ZXIgZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9ucyAKCSAqIHRvIG92ZXJ3cml0ZS9jcmVhdGUgcGx1Z2luIGZpbGVzCgkgKiAKCSAqIEBwYXJhbSBBcnJheSAkcG9zdCBBbiBhcnJheSBjb250YWluaW5nIGRhdGEgUE9TVGVkIGFzIHBhcnQgb2YgdGhlIHJlcXVlc3QKCSAqIEByZXR1cm4gaW5zdGFuY2Ugb2YgTU1fUmVzcG9uc2UgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmUuIE9uIGVycm9yLCB0aGUgbWVzc2FnZSB2YXJpYWJsZSBvZiB0aGUgTU1fUmVzcG9uc2UgaXMgYW4gCgkgKiAJCSAgIGFycmF5IGNvbnRhaW5pbmcgbW9yZSBkZXRhaWxzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiByZXBhaXJGcm9tQXJjaGl2ZSgkcG9zdCkKCXsKCQkkY2FjaGVEaXIgPSBNTV9VdGlsczo6Z2V0Q2FjaGVEaXIoKTsKCQkkcmVwYWlyRGlyID0gInskY2FjaGVEaXJ9L3JlcGFpciI7CgkJJHJlcGFpcl9hcmNoaXZlID0gInskY2FjaGVEaXJ9L3JlcGFpcl9hcmNoaXZlLnppcCI7CgkJCgkJaWYgKCFmaWxlX2V4aXN0cygkcmVwYWlyX2FyY2hpdmUpKSB7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoYXJyYXkoInN0YXR1cyI9PiJhcmNoaXZlX2RvZXNudF9leGlzdCIpLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlnbG9iYWwgJHdwX2ZpbGVzeXN0ZW07CgkJaWYgKCFpc3NldCgkd3BfZmlsZXN5c3RlbSkgfHwgKCR3cF9maWxlc3lzdGVtID09IG51bGwpKQoJCXsKCQkJV1BfRmlsZXN5c3RlbSgpOwoJCX0KCQl1bnppcF9maWxlKCRyZXBhaXJfYXJjaGl2ZSwkcmVwYWlyRGlyKTsKCQkKCQlpZiAoIWlzX2RpcigkcmVwYWlyRGlyKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoYXJyYXkoInN0YXR1cyI9PiJlcnJvcl9leHRyYWN0aW5nX2FyY2hpdmUiKSxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJHNvdXJjZV9kaXIgPSAieyRyZXBhaXJEaXJ9L21lbWJlcm1vdXNlIjsKCQkkZGVzdF9kaXIgPSBNTV9QTFVHSU5fQUJTUEFUSDsKCQkKCQkkaXRlcmF0b3IgPSBuZXcgUmVjdXJzaXZlSXRlcmF0b3JJdGVyYXRvcihuZXcgUmVjdXJzaXZlRGlyZWN0b3J5SXRlcmF0b3IoJHJlcGFpckRpciksIFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3I6OlNFTEZfRklSU1QpOwoJICAgICRvcGVyYXRpb25fc3RhdHVzID0gdHJ1ZTsKCSAgICBmb3JlYWNoICgkaXRlcmF0b3IgYXMgJHBhdGgpIAoJICAgIHsKCSAgICAgICRjdXJfZGVzdCA9IHN0cl9yZXBsYWNlKCIkc291cmNlX2RpciIsIiRkZXN0X2RpciIsJHBhdGgtPl9fdG9TdHJpbmcoKSk7CgkgICAgICBpZiAoJHBhdGgtPmlzRGlyKCkpIAoJICAgICAgewoJICAgICAgICAgaWYgKCFpc19kaXIoJGN1cl9kZXN0KSkKCSAgICAgICAgIHsKCSAgICAgICAgIAkkb3BlcmF0aW9uX3N0YXR1cyA9ICRvcGVyYXRpb25fc3RhdHVzICYmIG1rZGlyKCRjdXJfZGVzdCwiIix0cnVlKTsKCSAgICAgICAgIH0KCSAgICAgIH0gCgkgICAgICBlbHNlIAoJICAgICAgewoJICAgICAgCS8vbXVzdCBiZSBhIGZpbGUsIGNvcHkKCSAgICAgIAkkb3BlcmF0aW9uX3N0YXR1cyA9ICRvcGVyYXRpb25fc3RhdHVzICYmIGNvcHkoJHBhdGgtPl9fdG9TdHJpbmcoKSwkY3VyX2Rlc3QpOwoJICAgICAgfQoJICAgIH0KCSAgICAKCSAgICBpZiAoJG9wZXJhdGlvbl9zdGF0dXMgPT0gdHJ1ZSkKCSAgICB7CgkgICAgCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCSAgICB9CgkgICAgZWxzZQoJICAgIHsKCSAgICAJcmV0dXJuIG5ldyBNTV9SZXNwb25zZShhcnJheSgic3RhdHVzIj0+ImVycm9yX3VwZGF0aW5nX2ZpbGVzIiksTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkgICAgfQoJfQoJCgkvKioKCSAqIE1ldGhvZCB0YWtlbiBmcm9tIHRoZSBleGFtcGxlcyBvbiBwaHAubmV0IHRvIGRldGVjdCBpZiBhIHVybCBleGlzdHMKCSAqIAoJICogQHBhcmFtIFN0cmluZyAkdXJsIFRoZSB1cmwgdG8gdGVzdC4gQXNzdW1lZCB0byBiZSBhIHZhbGlkIFVSSQoJICogQHJldHVybiBib29sZWFuIHRydWUgb3IgZmFsc2UgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHVybCBleGlzdHMKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiB1cmxFeGlzdHMoJHVybCkgCgl7CgkgICAgJGhhbmRsZSA9IGN1cmxfaW5pdCgkdXJsKTsKCSAgICBpZiAoZmFsc2UgPT09ICRoYW5kbGUpCgkgICAgewoJICAgICAgICByZXR1cm4gZmFsc2U7CgkgICAgfQoJICAgIGN1cmxfc2V0b3B0KCRoYW5kbGUsIENVUkxPUFRfSEVBREVSLCBmYWxzZSk7CgkgICAgY3VybF9zZXRvcHQoJGhhbmRsZSwgQ1VSTE9QVF9GQUlMT05FUlJPUiwgdHJ1ZSk7ICAKCSAgICBjdXJsX3NldG9wdCgkaGFuZGxlLCBDVVJMT1BUX0hUVFBIRUFERVIsIEFycmF5KCJVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93czsgVTsgV2luZG93cyBOVCA1LjE7IGVuLVVTOyBydjoxLjguMS4xNSkgR2Vja28vMjAwODA2MjMgRmlyZWZveC8yLjAuMC4xNSIpICk7IC8vIHJlcXVlc3QgYXMgaWYgRmlyZWZveCAgICAKCSAgICBjdXJsX3NldG9wdCgkaGFuZGxlLCBDVVJMT1BUX05PQk9EWSwgdHJ1ZSk7CgkgICAgY3VybF9zZXRvcHQoJGhhbmRsZSwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgZmFsc2UpOwoJICAgICRjb25uZWN0YWJsZSA9IGN1cmxfZXhlYygkaGFuZGxlKTsKCSAgICBjdXJsX2Nsb3NlKCRoYW5kbGUpOyAgIAoJICAgIHJldHVybiAkY29ubmVjdGFibGU7Cgl9CgkKfQo=', 0, '2018-11-21 06:38:54'),
(87, 'freememberwebformrequest', 'LyoqCiAqIAogKgogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICoKICogTU1fRnJlZU1lbWJlcldlYmZvcm1SZXF1ZXN0IGlzIHJlc3BvbnNpYmxlIGZvciBwcm9jZXNzaW5nIGZyZWUgbWVtYmVyIHdlYmZvcm0gZGF0YS4KICovCgpjbGFzcyBNTV9GcmVlTWVtYmVyV2ViZm9ybVJlcXVlc3QgZXh0ZW5kcyBNTV9PcmRlclJlcXVlc3QKewkKCXByb3RlY3RlZCAkbmV3VXNlciA9IG51bGw7Cglwcm90ZWN0ZWQgJG1lbWJlcnNoaXAgPSBudWxsOwoJCgkKCS8qKgoJICogVGhpcyBtZXRob2QgdmFsaWRhdGVzIHRoZSB3ZWJmb3JtIGRhdGEgYnkgZW5zdXJpbmcgdGhhdCByZXF1aXJlZCBmaWVsZHMgYXJlIHByZXNlbnQgYW5kIAoJICogdGhhdCB0aGUgbWVtYmVyc2hpcCBsZXZlbCBwYXNzZWQgaXMgdmFsaWQuIEl0IHRoZW4gY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBNTV9Vc2VyIGFuZCAKCSAqIHBvcHVsdGVzIGl0IHdpdGggdGhlIHdlYmZvcm0gZGF0YS4KCSAqCgkgKiBAc2VlIE1NX09yZGVyUmVxdWVzdDo6cHJvY2Vzc1JlcXVlc3QoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJvY2Vzc1JlcXVlc3QoKQoJewoJCWlmKCFpc3NldCgkdGhpcy0+cmVxdWVzdERhdGFbImVtYWlsIl0pIHx8IHRyaW0oJHRoaXMtPnJlcXVlc3REYXRhWyJlbWFpbCJdKSA9PSAiIikKCQl7CgkJCSR0aGlzLT5zdGF0ZS0+dHlwZSA9IE1NX1Jlc3BvbnNlOjokRVJST1I7CgkJCSR0aGlzLT5zdGF0ZS0+bWVzc2FnZSA9ICJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkOiBlbWFpbCBhZGRyZXNzIGlzIHJlcXVpcmVkIjsKCQkJcmV0dXJuOwoJCX0KCQllbHNlIGlmKCFNTV9VdGlsczo6dmFsaWRhdGVFbWFpbCgkdGhpcy0+cmVxdWVzdERhdGFbImVtYWlsIl0pKQoJCXsKCQkJJHRoaXMtPnN0YXRlLT50eXBlID0gTU1fUmVzcG9uc2U6OiRFUlJPUjsKCQkJJHRoaXMtPnN0YXRlLT5tZXNzYWdlID0gIid7JHRoaXMtPnJlcXVlc3REYXRhWyJlbWFpbCJdfScgaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzcyI7CgkJCXJldHVybjsKCQl9CgkJCgkJaWYoIWlzc2V0KCR0aGlzLT5yZXF1ZXN0RGF0YVsibWVtYmVyX3R5cGUiXSkgJiYgIWlzc2V0KCR0aGlzLT5yZXF1ZXN0RGF0YVsibWVtYmVyc2hpcF9sZXZlbCJdKSkKCQl7CgkJCSR0aGlzLT5zdGF0ZS0+dHlwZSA9IE1NX1Jlc3BvbnNlOjokRVJST1I7CgkJCSR0aGlzLT5zdGF0ZS0+bWVzc2FnZSA9ICJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkOiBtZW1iZXJzaGlwIGxldmVsIGlzIHJlcXVpcmVkIjsKCQkJcmV0dXJuOwoJCX0KCQkKCQkkbWVtYmVyc2hpcExldmVsSWQgPSAoaXNzZXQoJHRoaXMtPnJlcXVlc3REYXRhWyJtZW1iZXJzaGlwX2xldmVsIl0pKSA/ICR0aGlzLT5yZXF1ZXN0RGF0YVsibWVtYmVyc2hpcF9sZXZlbCJdIDogJHRoaXMtPnJlcXVlc3REYXRhWyJtZW1iZXJfdHlwZSJdOwoJCQoJCSR0aGlzLT5yZXF1ZXN0ZWRNZW1iZXJzaGlwID0gbmV3IE1NX01lbWJlcnNoaXBMZXZlbCgkbWVtYmVyc2hpcExldmVsSWQpOwoJCQoJCWlmKCR0aGlzLT5yZXF1ZXN0ZWRNZW1iZXJzaGlwLT5pc1ZhbGlkKCkgJiYgJHRoaXMtPnJlcXVlc3RlZE1lbWJlcnNoaXAtPmlzRnJlZSgpKQoJCXsKCQkJJHRoaXMtPm5ld1VzZXIgPSBuZXcgTU1fVXNlcigpOwoJCQkkdGhpcy0+bmV3VXNlci0+c2V0RW1haWwoJHRoaXMtPnJlcXVlc3REYXRhWyJlbWFpbCJdKTsKCQkJCgkJCWlmKGlzc2V0KCR0aGlzLT5yZXF1ZXN0RGF0YVsidXNlcm5hbWUiXSkgJiYgJHRoaXMtPnJlcXVlc3REYXRhWyJ1c2VybmFtZSJdICE9ICIiKQoJCQl7CgkJCQkkdGhpcy0+bmV3VXNlci0+c2V0VXNlcm5hbWUoJHRoaXMtPnJlcXVlc3REYXRhWyJ1c2VybmFtZSJdKTsKCQkJfQoJCQkKCQkJaWYoaXNzZXQoJHRoaXMtPnJlcXVlc3REYXRhWyJwYXNzd29yZCJdKSAmJiAkdGhpcy0+cmVxdWVzdERhdGFbInBhc3N3b3JkIl0gIT0gIiIpCgkJCXsKCQkJCSR0aGlzLT5uZXdVc2VyLT5zZXRQYXNzd29yZCgkdGhpcy0+cmVxdWVzdERhdGFbInBhc3N3b3JkIl0pOwoJCQl9CgkJCWVsc2UgCgkJCXsKCQkJCSR0aGlzLT5uZXdVc2VyLT5zZXRQYXNzd29yZChNTV9VdGlsczo6Y3JlYXRlUmFuZG9tU3RyaW5nKDcpKTsKCQkJfQoJCQkKCQkJaWYoaXNzZXQoJHRoaXMtPnJlcXVlc3REYXRhWyJmaXJzdF9uYW1lIl0pICYmICR0aGlzLT5yZXF1ZXN0RGF0YVsiZmlyc3RfbmFtZSJdICE9ICIiKQoJCQl7CgkJCQkkdGhpcy0+bmV3VXNlci0+c2V0Rmlyc3ROYW1lKCR0aGlzLT5yZXF1ZXN0RGF0YVsiZmlyc3RfbmFtZSJdKTsKCQkJfQoJCQkKCQkJaWYoaXNzZXQoJHRoaXMtPnJlcXVlc3REYXRhWyJsYXN0X25hbWUiXSkgJiYgJHRoaXMtPnJlcXVlc3REYXRhWyJsYXN0X25hbWUiXSAhPSAiIikKCQkJewoJCQkJJHRoaXMtPm5ld1VzZXItPnNldExhc3ROYW1lKCR0aGlzLT5yZXF1ZXN0RGF0YVsibGFzdF9uYW1lIl0pOwoJCQl9CgkJCQoJCQlpZihpc3NldCgkdGhpcy0+cmVxdWVzdERhdGFbInBob25lIl0pICYmICR0aGlzLT5yZXF1ZXN0RGF0YVsicGhvbmUiXSAhPSAiIikKCQkJewoJCQkJJHRoaXMtPm5ld1VzZXItPnNldFBob25lKCR0aGlzLT5yZXF1ZXN0RGF0YVsicGhvbmUiXSk7CgkJCX0KCQkJCgkJCSR0aGlzLT5uZXdVc2VyLT52YWxpZGF0ZSgpOwoJCX0KCQllbHNlCgkJewoJCQkkdGhpcy0+c3RhdGUtPnR5cGUgPSBNTV9SZXNwb25zZTo6JEVSUk9SOwoJCQkkdGhpcy0+c3RhdGUtPm1lc3NhZ2UgPSAiSW52YWxpZCBtZW1iZXJzaGlwIGxldmVsIElEICciLiRtZW1iZXJzaGlwTGV2ZWxJZC4iJyI7CgkJCXJldHVybjsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBUaGlzIG1ldGhvZCBhdHRlbXB0cyB0byBjcmVhdGUgdGhlIG5ldyB1c2VyIGFjY291bnQgYW5kIGFzc2lnbiB0aGUgcmVxdWVzdGVkIG1lbWJlcnNoaXAgbGV2ZWwgdGhlbS4KCSAqIAoJICogQHNlZSBNTV9PcmRlclJlcXVlc3Q6OnN1Ym1pdFJlcXVlc3QoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gc3VibWl0UmVxdWVzdCgpCgl7CgkJJHJlc3VsdCA9ICR0aGlzLT5zdGF0ZTsKCQoJCWlmKE1NX1Jlc3BvbnNlOjppc1N1Y2Nlc3MoJHJlc3VsdCkpCgkJewoJCQkkcmVzdWx0ID0gTU1fQWNjZXNzQ29udHJvbEVuZ2luZTo6YXNzaWduTWVtYmVyc2hpcFRvVXNlcigkdGhpcy0+bmV3VXNlciwgJHRoaXMtPnJlcXVlc3RlZE1lbWJlcnNoaXApOwoJCQkKCQkJaWYoTU1fUmVzcG9uc2U6OmlzU3VjY2VzcygkcmVzdWx0KSkKCQkJewoJCQkJJHRoaXMtPm5ld1VzZXIgPSBNTV9Vc2VyOjpmaW5kQnlFbWFpbCgkdGhpcy0+cmVxdWVzdERhdGFbImVtYWlsIl0pOwoJCQkJCgkJCQlpZigkdGhpcy0+bmV3VXNlci0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCS8vIGFkZCBjdXN0b20gZmllbGQgZGF0YQoJCQkJCWZvcmVhY2goJHRoaXMtPnJlcXVlc3REYXRhIGFzICRrPT4kdikKCQkJCQl7CgkJCQkJCWlmKHByZWdfbWF0Y2goIi8oY3VzdG9tXykvIiwgJGspKQoJCQkJCQl7CgkJCQkJCQkkZmllbGRJZCA9IHByZWdfcmVwbGFjZSgiL1teMC05XSsvIiwgIiIsICRrKTsKCQkJCQkJCSRyZXN1bHQgPSAkdGhpcy0+bmV3VXNlci0+c2V0Q3VzdG9tRGF0YSgkZmllbGRJZCwgJHYpOwoJCQkJCQoJCQkJCQkJaWYoTU1fUmVzcG9uc2U6OmlzRXJyb3IoJHJlc3VsdCkpCgkJCQkJCQl7CgkJCQkJCQkJYnJlYWs7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJCgkJJHRoaXMtPmhhbmRsZVJlc3VsdCgkcmVzdWx0KTsKCX0KCQoJCgkvKioKCSAqIFRoaXMgbWV0aG9kIGhhbmRsZXMgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdCB0byBjcmVhdGUgdGhlIGZyZWUgbWVtYmVyIGFjY291bnQuIElmIHRoZSByZXN1bHQgaXMgc3VjY2Vzc2Z1bCwKCSAqIHRoZSBjdXN0b21lciB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gdGhlIGFwcHJvcHJpYXRlIGNvbmZpcm1hdGlvbiBwYWdlLiBJZiB0aGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgd2ViZm9ybQoJICogb3IgY3JlYXRpbmcgdGhlIGFjY291bnQsIHRoZSBjdXN0b21lciB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gdGhlIGRlZmF1bHQgZXJyb3IgcGFnZSB3aXRoIGFuIGVycm9yIG1lc3NhZ2UgcGFzc2VkLgoJICoKCSAqIEBwYXJhbSBNTV9SZXNwb25zZSAkcmVzdWx0IGFuIGluc3RhbmNlIG9mIGEgcmVzcG9uc2Ugb2JqZWN0IHRoYXQgY29udGFpbnMgZGV0YWlscyBhYm91dCB0aGUgcmVzdWx0IGZyb20gdGhlIGF0dGVtcHQgdG8gY3JlYXRlIHRoZSBmcmVlIG1lbWJlciBhY2NvdW50CgkgKgoJICogQHNlZSBNTV9PcmRlclJlcXVlc3Q6OmhhbmRsZVJlc3VsdCgpCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoJHJlc3VsdCkKCXsKCQlpZigkcmVzdWx0LT50eXBlID09IE1NX1Jlc3BvbnNlOjokU1VDQ0VTUykKCQl7CgkJCSRwYXJhbXMgPSBhcnJheSgpOwoJCQkkcGFyYW1zWyJpc0ZyZWUiXSA9IDE7CgkJCSRwYXJhbXNbInJlZlR5cGUiXSA9IE1NX1RZUEVfTUVNQkVSU0hJUF9MRVZFTDsKCQkJJHBhcmFtc1sicmVmSWQiXSA9ICR0aGlzLT5yZXF1ZXN0ZWRNZW1iZXJzaGlwLT5nZXRJZCgpOwoJCQkKCQkJJHVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokRlJFRV9DT05GSVJNQVRJT04sICRwYXJhbXMpOwoJCX0KCQllbHNlCgkJewoJCQkkdXJsID0gTU1fQ29yZVBhZ2VFbmdpbmU6OmdldFVybChNTV9Db3JlUGFnZVR5cGU6OiRFUlJPUik7CgkJCSR1cmwgPSBNTV9VdGlsczo6YXBwZW5kVXJsUGFyYW0oJHVybCwgTU1fU2Vzc2lvbjo6JFBBUkFNX01FU1NBR0VfS0VZLCAkcmVzdWx0LT5tZXNzYWdlLCB0cnVlKTsKCQl9CgkJCgkJd3BfcmVkaXJlY3QoJHVybCk7CgkJZXhpdDsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(88, 'activitylog', '', 0, '2018-11-21 06:38:54'),
(89, 'aweberresponse', 'LyoqCiAqIE1NX0FXZWJlclJlc3BvbnNlCiAqCiAqIEJhc2UgY2xhc3MgZm9yIG9iamVjdHMgdGhhdCByZXByZXNlbnQgYSByZXNwb25zZSBmcm9tIHRoZSBNTV9BV2ViZXJBUEkuIAogKiBSZXNwb25zZXMgd2lsbCBleGlzdCBhcyBvbmUgb2YgdGhlIHR3byBNTV9BV2ViZXJSZXNwb25zZSBzdWJjbGFzc2VzOgogKiAgLSBNTV9BV2ViZXJFbnRyeSAtIGEgc2luZ2xlIGluc3RhbmNlIG9mIGFuIEFXZWJlciByZXNvdXJjZQogKiAgLSBNTV9BV2ViZXJDb2xsZWN0aW9uIC0gYSBjb2xsZWN0aW9uIG9mIEFXZWJlciByZXNvdXJjZXMKICogQHVzZXMgTU1fQVdlYmVyQVBJQmFzZQogKiBAcGFja2FnZSAKICogQHZlcnNpb24gJGlkJAogKi8KY2xhc3MgTU1fQVdlYmVyUmVzcG9uc2UgZXh0ZW5kcyBNTV9BV2ViZXJBUElCYXNlIHsKCiAgICBwdWJsaWMgJGFkYXB0ZXIgPSBmYWxzZTsKICAgIHB1YmxpYyAkZGF0YSA9IGFycmF5KCk7CiAgICBwdWJsaWMgJF9keW5hbWljRGF0YSA9IGFycmF5KCk7CgogICAgLyoqCiAgICAgKiBfX2NvbnN0cnVjdAogICAgICoKICAgICAqIENyZWF0ZXMgYSBuZXcgQVdlYmVyUmVzcG9uZXMKICAgICAqCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHJlc3BvbnNlICAgICAgIERhdGEgcmV0dXJuZWQgYnkgdGhlIEFQSSBzZXJ2ZXJzCiAgICAgKiBAcGFyYW0gbWl4ZWQgJHVybCAgICAgICAgICAgIFVSTCB3ZSBoaXQgdG8gZ2V0IHRoZSBkYXRhCiAgICAgKiBAcGFyYW0gbWl4ZWQgJGFkYXB0ZXIgICAgICAgIE9BdXRoIGFkYXB0ZXIgdXNlZCBmb3IgZnV0dXJlIGludGVyYWN0aW9ucwogICAgICogQGFjY2VzcyBwdWJsaWMKICAgICAqIEByZXR1cm4gdm9pZAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHJlc3BvbnNlLCAkdXJsLCAkYWRhcHRlcikgewogICAgICAgICR0aGlzLT5hZGFwdGVyID0gJGFkYXB0ZXI7CiAgICAgICAgJHRoaXMtPnVybCAgICAgPSAkdXJsOwogICAgICAgICR0aGlzLT5kYXRhICAgID0gJHJlc3BvbnNlOwogICAgfQoKICAgIC8qKgogICAgICogX19zZXQKICAgICAqIAogICAgICogTWFudWFsIHJlLWltcGxlbWVudGF0aW9uIG9mIF9fc2V0LCBhbGxvd3Mgc3ViIGNsYXNzZXMgdG8gYWNjZXNzCiAgICAgKiB0aGUgZGVmYXVsdCBiZWhhdmlvciBieSB1c2luZyB0aGUgcGFyZW50OjogZm9ybWF0LgogICAgICoKICAgICAqIEBwYXJhbSBtaXhlZCAka2V5ICAgICAgICBLZXkgb2YgdGhlIGF0dHIgYmVpbmcgc2V0CiAgICAgKiBAcGFyYW0gbWl4ZWQgJHZhbHVlICAgICAgVmFsdWUgYmVpbmcgc2V0IHRvIHRoZSBhdHRyCiAgICAgKiBAYWNjZXNzIHB1YmxpYwogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19zZXQoJGtleSwgJHZhbHVlKSB7CiAgICAgICAgJHRoaXMtPnska2V5fSA9ICR2YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIF9fZ2V0CiAgICAgKgogICAgICogUEhQICJNYWdpY01ldGhvZCIgdG8gYWxsb3cgZm9yIGR5bmFtaWMgb2JqZWN0cy4gIERlZmVycyBmaXJzdCB0byB0aGUgCiAgICAgKiBkYXRhIGluICR0aGlzLT5kYXRhLgogICAgICoKICAgICAqIEBwYXJhbSBTdHJpbmcgJHZhbHVlICBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgcmVxdWVzdGVkCiAgICAgKiBAYWNjZXNzIHB1YmxpYwogICAgICogQHJldHVybiBtaXhlZAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJHZhbHVlKSB7CiAgICAgICAgaWYgKGluX2FycmF5KCR2YWx1ZSwgJHRoaXMtPl9wcml2YXRlRGF0YSkpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+ZGF0YVskdmFsdWVdKSkgewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPmRhdGFbJHZhbHVlXTsKICAgICAgICB9CiAgICAgICAgaWYgKCR2YWx1ZSA9PSAndHlwZScpIHJldHVybiAkdGhpcy0+X3R5cGUoKTsKICAgIH0KCn0=', 0, '2018-11-21 06:38:54'),
(90, 'rbacgeneralemployeeview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCgphYnN0cmFjdCBjbGFzcyBNTV9SQkFDR2VuZXJhbEVtcGxveWVlVmlldyBleHRlbmRzIE1NX1JCQUNCYXNlVmlldwp7CgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJCSR0aGlzLT5wZXJtaXNzaW9ucyA9IGFycmF5KAoJCQkJIioiICA9PiAgYXJyYXkoTU1fUm9sZTo6JFJPTEVfQURNSU5JU1RSQVRPUiwgTU1fUm9sZTo6JFJPTEVfQ1VTVE9NRVJfU1VQUE9SVCwgTU1fUm9sZTo6JFJPTEVfU0FMRVMsIE1NX1JvbGU6OiRST0xFX1BST0RVQ1RfTUFOQUdFUikKCQkJCSk7Cgl9Cgp9', 0, '2018-11-21 06:38:54'),
(91, 'gifthistoryview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0dpZnRIaXN0b3J5VmlldyBleHRlbmRzIE1NX1JCQUNHZW5lcmFsRW1wbG95ZWVWaWV3CnsJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQogCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YSgkdXNlcklkLE1NX0RhdGFHcmlkICRkZz1udWxsLCRzdGFydERhdGU9bnVsbCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy90YWJsZXMgdXNlZCBpbiB0aGUgbWFzdGVyIHF1ZXJ5LiBQbGFjaW5nIHRoZSBjb25zdGFudHMgaW50byB2YXJpYWJsZXMgYWxsb3dzIHRoZW0gdG8gYmUgZW1iZWRkZWQgaW50byB0aGUgc3RyaW5nLCBhaWRpbmcgaW4gcmVhZGFiaWxpdHkKCQkkY291cG9uc1RhYmxlID0gTU1fVEFCTEVfQ09VUE9OUzsKCQkkb3JkZXJJdGVtc1RhYmxlID0gTU1fVEFCTEVfT1JERVJfSVRFTVM7CgkJJGNvdXBvblVzYWdlVGFibGUgPSBNTV9UQUJMRV9DT1VQT05fVVNBR0U7CgkJJHByb2R1Y3RzVGFibGUgPSBNTV9UQUJMRV9QUk9EVUNUUzsKCQkKCQkkZnJvbVdoZXJlU1FMID0gIkZST00geyRjb3Vwb25zVGFibGV9IGMgTEVGVCBKT0lOIHskb3JkZXJJdGVtc1RhYmxlfSBvaSBPTiAoYy5naWZ0X29yZGVyX2l0ZW1faWQgPSBvaS5pZCkgIi4KCQkJCQkJIkxFRlQgSk9JTiB7JGNvdXBvblVzYWdlVGFibGV9IGN1IG9uIChjLmlkID0gY3UuY291cG9uX2lkKSBsZWZ0IGpvaW4geyRwcm9kdWN0c1RhYmxlfSBwIG9uIChvaS5pdGVtX2lkID0gcC5pZCkgIi4KCQkJCQkJIldIRVJFIGMuZ2lmdF91c2VyX2lkID0gJXMiOwoJCQoJCSRjb3VudFF1ZXJ5ID0gInNlbGVjdCBjb3VudCgqKSBhcyB0b3RhbCB7JGZyb21XaGVyZVNRTH0gIjsKCQkkY291bnRRdWVyeSA9ICR3cGRiLT5wcmVwYXJlKCRjb3VudFF1ZXJ5LCR1c2VySWQpOwoJCSRjb3VudFJlc3VsdCA9ICR3cGRiLT5nZXRfcm93KCRjb3VudFF1ZXJ5KTsKCQkKCQkkbWFzdGVyUXVlcnkgPSAiU0VMRUNUIHskY291bnRSZXN1bHQtPnRvdGFsfSBhcyAndG90YWwnLGMuZGF0ZV9hZGRlZCBhcyBkYXRlX2dpZnRlZCwgYy5naWZ0X29yZGVyX2l0ZW1faWQgYXMgb3JkZXJfaXRlbV9pZCwgcC5uYW1lLCBjdS5kYXRlX2FkZGVkIGFzIHVzYWdlX2RhdGUsICIuCgkJCQkJCSJjdS51c2VyX2lkIGFzIHVzYWdlX3VzZXJfaWQgeyRmcm9tV2hlcmVTUUx9IjsgCgkJJG1hc3RlclF1ZXJ5ID0gJHdwZGItPnByZXBhcmUoJG1hc3RlclF1ZXJ5LCR1c2VySWQpOyAKCQkKCQlpZighaXNfbnVsbCgkZGcpICYmICFpc19udWxsKCRkZy0+c29ydEJ5KSAmJiAhZW1wdHkoJGRnLT5zb3J0QnkpKSAvL2hhbmRsZSB0aGUgc29ydGluZwoJCXsKCQkJJG1hc3RlclF1ZXJ5Lj0gIiBPUkRFUiBCWSB7JGRnLT5zb3J0Qnl9IHskZGctPnNvcnREaXJ9IjsKCQl9IAoJCQoJCSRtYXN0ZXJRdWVyeS49ICIgIi4kZGctPmdldExpbWl0U3FsKCk7IC8vZm9yIHBhZ2luYXRpb24KCQkgCgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJG1hc3RlclF1ZXJ5KTsKCQlyZXR1cm4gJHJlc3VsdHM7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZVJvd3MoJGRhdGEsICRyZW5kZXJGb3JBZG1pbj10cnVlKQoJewoJCSRyb3dzID0gYXJyYXkoKTsKCQkKCQlpZigkcmVuZGVyRm9yQWRtaW4pCgkJewoJCQkkZGF0ZUZvcm1hdCA9ICJNIGosIFkgZzppIGEiOwoJCX0KCQllbHNlCgkJewoJCQkkZGF0ZUZvcm1hdCA9ICJNIGosIFkiOwoJCX0KCQkKCQlmb3JlYWNoKCRkYXRhIGFzICRpdGVtKQoJCXsKCQkJaWYoaXNzZXQoJGl0ZW0tPm9yZGVyX2l0ZW1faWQpKQoJCQl7CgkJCQkkb3JkZXJJdGVtID0gbmV3IE1NX09yZGVySXRlbSgkaXRlbS0+b3JkZXJfaXRlbV9pZCk7CgkJCQkKCQkJCWlmKCRvcmRlckl0ZW0tPmlzR2lmdCgpKQoJCQkJewoJCQkJCSRnaWZ0Q291cG9uQ29kZSA9IE1NX0NvdXBvbjo6Z2V0R2lmdENvdXBvbkNvZGUoJG9yZGVySXRlbS0+Z2V0SWQoKSk7CgkJCQkKCQkJCQlpZighZW1wdHkoJGdpZnRDb3Vwb25Db2RlKSkKCQkJCQl7CgkJCQkJCSRnaWZ0TGluayA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRSZWRlZW1HaWZ0UGFnZVN0YXRpY0xpbmsoJG9yZGVySXRlbS0+Z2V0SXRlbUlkKCkpOwoJCQkJCQkkZ2lmdExpbmsgPSBNTV9VdGlsczo6YXBwZW5kVXJsUGFyYW0oJGdpZnRMaW5rLCAiY291cG9uIiwgJGdpZnRDb3Vwb25Db2RlKTsKCQkJCQl9CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCWNvbnRpbnVlOwoJCQkJfQoJCQl9CgkJCQoJCQkkaXNSZWRlZW1lZCA9IGZhbHNlOwoJCQkKCQkJaWYoaXNfbnVsbCgkaXRlbS0+dXNhZ2VfdXNlcl9pZCkgfHwgaXNfbnVsbCgkaXRlbS0+dXNhZ2VfZGF0ZSkpCgkJCXsKCQkJCSRzdGF0dXMgPSBNTV9VdGlsczo6Z2V0SWNvbignY2xvY2stbycsICdibHVlJywgJzEuMmVtJywgJzFweCcpOwoJCQkJJHN0YXR1cyAuPSAiIDxlbT5Ob3QgcmVkZWVtZWQ8L2VtPiI7CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCRpdGVtLT51c2FnZV91c2VyX2lkKTsKCQkJCQoJCQkJaWYoJHVzZXItPmlzVmFsaWQoKSkKCQkJCXsKCQkJCQkkbWVtYmVyTmFtZSA9ICIiOwoJCQkJCSRmaXJzdE5hbWUgPSAkdXNlci0+Z2V0Rmlyc3ROYW1lKCk7CgkJCQkJJGxhc3ROYW1lID0gJHVzZXItPmdldExhc3ROYW1lKCk7CgkJCQkJCgkJCQkJaWYoIWVtcHR5KCRmaXJzdE5hbWUpKQoJCQkJCXsKCQkJCQkJJG1lbWJlck5hbWUgPSAkZmlyc3ROYW1lOwoJCQkJCQkKCQkJCQkJaWYoIWVtcHR5KCRsYXN0TmFtZSkpCgkJCQkJCXsKCQkJCQkJCSRtZW1iZXJOYW1lIC49ICIgIi5zdWJzdHIoJHVzZXItPmdldExhc3ROYW1lKCksIDAsIDEpOwoJCQkJCQl9CgkJCQkJfQoJCQkJCQoJCQkJCWlmKGVtcHR5KCRtZW1iZXJOYW1lKSkKCQkJCQl7CgkJCQkJCSRtZW1iZXJOYW1lID0gJHVzZXItPmdldEVtYWlsKCk7CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCRyZW5kZXJGb3JBZG1pbikKCQkJCQl7CgkJCQkJCSRtZW1iZXJOYW1lID0gIjxhIGhyZWY9Jz9wYWdlPSIuTU1fTU9EVUxFX01BTkFHRV9NRU1CRVJTLiImbW9kdWxlPWRldGFpbHNfZ2VuZXJhbCZ1c2VyX2lkPXskdXNlci0+Z2V0SWQoKX0nPnskbWVtYmVyTmFtZX08L2E+IjsKCQkJCQl9CgkJCQkJCgkJCQkJJHN0YXR1cyA9IE1NX1V0aWxzOjpnZXRDaGVja0ljb24oKTsJCQoJCQkJCSRzdGF0dXMgLj0gIiBSZWRlZW1lZCBieSB7JG1lbWJlck5hbWV9IG9uICIuTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCRpdGVtLT51c2FnZV9kYXRlLCAiTSBqLCBZIik7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCSRzdGF0dXMgPSAiUmVkZWVtZWQgYnkgYW4gaW52YWxpZCBtZW1iZXIiOwoJCQkJfQoJCQkJCgkJCQkkaXNSZWRlZW1lZCA9IHRydWU7CgkJCX0KCQkJCgkJCSRhY3Rpb25zID0gIiI7CgkJCQoJCQlpZighJHJlbmRlckZvckFkbWluICYmICEkaXNSZWRlZW1lZCkKCQkJewoJCQkJJGFjdGlvbnMgPSAiPGEgaHJlZj1cImphdmFzY3JpcHQ6bXlhY2NvdW50X2pzLnNob3dHaWZ0TGluaygneyRnaWZ0TGlua30nKTtcIj5zaG93IGdpZnQgbGluazwvYT4iOwoJCQl9CgkJCQoJCQkkY3JudFJvdyA9IGFycmF5CgkJCSgKCQkJCWFycmF5KCAnY29udGVudCcgPT4gTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCRpdGVtLT5kYXRlX2dpZnRlZCwgJGRhdGVGb3JtYXQpKSwKCQkJCWFycmF5KCAnY29udGVudCcgPT4gJGl0ZW0tPm5hbWUpLAoJCQkJYXJyYXkoICdjb250ZW50JyA9PiAkc3RhdHVzKQoJCQkpOwoJCQkKCQkJaWYoISRyZW5kZXJGb3JBZG1pbikKCQkJewoJCQkJJGNybnRSb3dbXSA9IGFycmF5KCAnY29udGVudCcgPT4gJGFjdGlvbnMsICJhdHRyIiA9PiAibm93cmFwIik7CgkJCX0KCQkJCgkJCSRyb3dzW10gPSAkY3JudFJvdzsKCQl9CgkJCgkJcmV0dXJuICRyb3dzOwoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(92, 'reportcolumnchart', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVwb3J0Q29sdW1uQ2hhcnQgZXh0ZW5kcyBNTV9SZXBvcnRCYXJDaGFydAp7CglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGNvbnRhaW5lcj0iIiwkZGlyZWN0aXZlcz0iIikKCXsKCQkkdGhpcy0+b3JpZW50YXRpb24gPSBzZWxmOjokVkVSVElDQUxfT1JJRU5UQVRJT047CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgkY29udGFpbmVyLCRkaXJlY3RpdmVzKTsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNyZWF0ZUZyb21Ub3BSZXN1bHRzKCRlbGVtZW50SWRlbnRpZmllciwgJGNhdGVnb3J5RmllbGQsICR2YWx1ZUZpZWxkLCAkbnVtUmVjb3JkcywgTU1fUmVwb3J0UmVzcG9uc2UgJHJlc3VsdE9iamVjdCwgJGRpcmVjdGl2ZXM9YXJyYXkoKSkKCXsKCQlpZiAoIU1NX1JlcG9ydFJlc3BvbnNlOjppc1N1Y2Nlc3MoJHJlc3VsdE9iamVjdCkpCgkJewoJCQlyZXR1cm4gbnVsbDsKCQl9CgkJJGNvbHVtbiA9IG5ldyBNTV9SZXBvcnRDb2x1bW5DaGFydCgkZWxlbWVudElkZW50aWZpZXIsJGRpcmVjdGl2ZXMpOwoJCgkJLy9jcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgZGF0YSBtb2RlbAoJCSRtb2RlbCA9IE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbDo6Y3JlYXRlRnJvbVRvcFJlc3VsdHMoJHJlc3VsdE9iamVjdC0+bWVzc2FnZSwgJGNhdGVnb3J5RmllbGQsICR2YWx1ZUZpZWxkLCAkbnVtUmVjb3Jkcyk7CgkJJGNvbHVtbi0+c2V0TW9kZWwoJG1vZGVsKTsKCQlyZXR1cm4gJGNvbHVtbjsKCX0KfQ==', 0, '2018-11-21 06:38:54'),
(93, 'affiliateproviderfactory', 'LyoqCiAqIAogKiBUaGUgQWZmaWxpYXRlIFByb3ZpZGVyIEZhY3RvcnkgZG9lcyB0aGUgd29yayBvZiByZXRyaWV2aW5nIGFuZCBjb25maWd1cmluZyBhbiBBZmZpbGlhdGUgUHJvdmlkZXIgaW1wbGVtZW50YXRpb24KICoKICovCmNsYXNzIE1NX0FmZmlsaWF0ZVByb3ZpZGVyRmFjdG9yeSAKewkKCS8qKgoJICogUmV0dXJucyB0aGUgYWN0aXZlIEFmZmlsaWF0ZSBQcm92aWRlcgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEFjdGl2ZVByb3ZpZGVyKCkgewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcHJvdmlkZXJfaW5mbyA9ICR3cGRiLT5nZXRfcm93KCJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfQUZGSUxJQVRFX1BST1ZJREVSUy4iIHdoZXJlIGFjdGl2ZT0nMScgbGltaXQgMSIpOwoJCQoJCXJldHVybiBzZWxmOjpfZ2V0UHJvdmlkZXIoJHByb3ZpZGVyX2luZm8pOwoJfQoJCgkvKioKCSAqIFJldHVybnMgYSBzcGVjaWZpYyBBZmZpbGlhdGUgUHJvdmlkZXIsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBpdCBpcyB0aGUgYWN0aXZlIHByb3ZpZGVyIG9yIG5vdAoJICogQHBhcmFtIFN0cmluZyAkcHJvdmlkZXJfdG9rZW4gVGhlIHByb3ZpZGVyIHRva2VuIGlkZW50aWZ5aW5nIHRoZSBwcm92aWRlciBpbiB0aGUgZGF0YWJhc2UKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRQcm92aWRlcigkcHJvdmlkZXJfdG9rZW4pIHsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHByb3ZpZGVyX2luZm8gPSAkd3BkYi0+Z2V0X3Jvdygkd3BkYi0+cHJlcGFyZSgic2VsZWN0ICogZnJvbSAiLk1NX1RBQkxFX0FGRklMSUFURV9QUk9WSURFUlMuIiB3aGVyZSBwcm92aWRlcl90b2tlbj0lcyIsJHByb3ZpZGVyX3Rva2VuKSk7CgkJCgkJcmV0dXJuIHNlbGY6Ol9nZXRQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7Cgl9CgkKCS8qKgoJICogCgkgKiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCBjbGFzcyB0byB1c2UgYW5kIHRvIGluc3RhbnRpYXRlLCBpbml0aWFsaXplLCBhbmQgcmV0dXJuIGl0CgkgKiBAcGFyYW0gU3RyaW5nICRwcm92aWRlcl9pbmZvIAoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfZ2V0UHJvdmlkZXIoJHByb3ZpZGVyX2luZm8pIHsKCQkkcHJvdmlkZXJfdG9rZW4gPSAkcHJvdmlkZXJfaW5mby0+cHJvdmlkZXJfdG9rZW47CgkJc3dpdGNoKCRwcm92aWRlcl90b2tlbikgCgkJewoJCQljYXNlICJpZGV2YWZmaWxpYXRlIjoKCQkJCXJldHVybiBuZXcgTU1fSURldkFmZmlsaWF0ZVByb3ZpZGVyKCRwcm92aWRlcl9pbmZvKTsKCQkJY2FzZSAiZGVmYXVsdCI6CgkJCQlyZXR1cm4gbmV3IE1NX0RlZmF1bHRBZmZpbGlhdGVQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7CgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gbnVsbDsKCQkJCQoJCX0KCX0gCgkKfQoK', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(94, 'bundle', '', 0, '2018-11-21 06:38:54'),
(95, 'facebookloginextension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmNsYXNzIE1NX0ZhY2Vib29rTG9naW5FeHRlbnNpb24gZXh0ZW5kcyBNTV9BYnN0cmFjdFNvY2lhbExvZ2luRXh0ZW5zaW9uCnsJCgkKCXByb3RlY3RlZCAkZXh0ZW5zaW9uTmFtZSA9ICJMb2dpbiB3aXRoIEZhY2Vib29rIjsKCXByb3RlY3RlZCAkcHJvdmlkZXJOYW1lICA9ICJGYWNlYm9vayI7Cglwcm90ZWN0ZWQgJGtleU5hbWUJCSA9ICJBcHAgSUQiOwoJcHJvdGVjdGVkICRzZWNyZXROYW1lIAkgPSAiQXBwIFNlY3JldCI7CgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkYXV0b2xvYWREZXBlbmRlbmNpZXM9dHJ1ZSwkY29uZmlnRGF0YT0iIikgCgl7IAoJCS8vZmFjZWJvb2sgc3BlY2lmaWMgc2V0dGluZ3MKCQkkdGhpcy0+dG9rZW4gPSBNTV9FeHRlbnNpb246OiRGQUNFQk9PS19MT0dJTl9UT0tFTjsKCQkkdGhpcy0+bGlzdGluZ0ltYWdlID0gImh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9wbHVnaW5faW1hZ2VzL2xvZ29zL2V4dGVuc2lvbnMtZmIuanBnIjsKCSAJJHRoaXMtPnN1cHBvcnRBcnRpY2xlVXJsID0gImh0dHA6Ly9zdXBwb3J0Lm1lbWJlcm1vdXNlLmNvbS9zdXBwb3J0L3NvbHV0aW9ucy9hcnRpY2xlcy85MDAwMDIwMjgzLWNvbmZpZ3VyaW5nLWZhY2Vib29rLWxvZ2luIjsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCRhdXRvbG9hZERlcGVuZGVuY2llcywkY29uZmlnRGF0YSk7Cgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldEh5YnJpZEF1dGhDb25maWcoKQoJewoJCSRjb25maWcgPSBwYXJlbnQ6OmdldEh5YnJpZEF1dGhDb25maWcoKTsKCQkkY29uZmlnWyJwcm92aWRlcnMiXSA9IGFycmF5ICgKCQkJCQkkdGhpcy0+dG9rZW4gPT4gYXJyYXkgKAoJCQkJCQkJImVuYWJsZWQiID0+IHRydWUsCgkJCQkJCQkia2V5cyIgICAgPT4gYXJyYXkgKCAiaWQiID0+ICR0aGlzLT5hcGlLZXksICJzZWNyZXQiID0+ICR0aGlzLT5hcGlTZWNyZXQgKSwKCQkJCQkJCSJzY29wZSIgICA9PiAiZW1haWwiLAoJCQkJCQkJCgkJCQkJKQoJCQkpOwoJCXJldHVybiAkY29uZmlnOwoJfQp9', 0, '2018-11-21 06:38:54'),
(96, 'datagrid', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0RhdGFHcmlkCnsKCXByaXZhdGUgJGhlYWRlcnMgPSBhcnJheSgpOwoJcHJpdmF0ZSAkcm93cyA9IGFycmF5KCk7CglwdWJsaWMgJHdpZHRoID0gIiI7CglwdWJsaWMgJHRvdGFsUmVjb3JkcyA9IDA7CglwdWJsaWMgJHNvcnRCeSA9ICJpZCI7CglwdWJsaWMgJHNvcnREaXIgPSAiZGVzYyI7CglwdWJsaWMgJGNybnRQYWdlID0gMDsKCXB1YmxpYyAkcmVzdWx0U2l6ZSA9IDIwOwoJcHVibGljICRyZWNvcmROYW1lID0gInJlY29yZHMiOwoJcHVibGljICRzaG93UGFnaW5nQ29udHJvbHMgPSB0cnVlOwoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHBvc3Q9bnVsbCwgJGRmbHRTb3J0Qnk9IiIsICRkZmx0U29ydERpcj0iIiwgJGRmbHRSZXN1bHRTaXplPSIiKSAKCXsKCQlpZigkZGZsdFNvcnRCeSAhPSAiIikgewoJCQkkdGhpcy0+c29ydEJ5ID0gJGRmbHRTb3J0Qnk7CgkJfQoJCQoJCWlmKCRkZmx0U29ydERpciAhPSAiIikgewoJCQkkdGhpcy0+c29ydERpciA9ICRkZmx0U29ydERpcjsKCQl9CgkJCgkJaWYoJGRmbHRSZXN1bHRTaXplICE9ICIiKSB7CgkJCSR0aGlzLT5yZXN1bHRTaXplID0gJGRmbHRSZXN1bHRTaXplOwoJCX0KCQkKCQlpZihpc3NldCgkcG9zdCkpIHsKCQkJJHRoaXMtPnNldFByb3BlcnRpZXMoJHBvc3QpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEhlYWRlcnMoJGFycikKCXsKCQkkdGhpcy0+aGVhZGVycyA9ICRhcnI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRSb3dzKCRhcnIpCgl7CgkJJHRoaXMtPnJvd3MgPSAkYXJyOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0VG90YWxSZWNvcmRzKCRkYXRhKQoJewoJCWlmKCRkYXRhICYmIGlzX2FycmF5KCRkYXRhKSAmJiBjb3VudCgkZGF0YSkgPiAwKSAKCQl7CgkJCSR0aGlzLT50b3RhbFJlY29yZHMgPSAkZGF0YVswXS0+dG90YWw7CgkJfQoJCWVsc2UKCQl7CgkJCSR0aGlzLT50b3RhbFJlY29yZHMgPSAkZGF0YTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRQcm9wZXJ0aWVzKCRwb3N0KQoJewoJCSR0aGlzLT5zb3J0QnkgPSAoaXNzZXQoJHBvc3RbInNvcnRCeSJdKSkgPyAkcG9zdFsic29ydEJ5Il0gOiAkdGhpcy0+c29ydEJ5OwoJCSR0aGlzLT5zb3J0RGlyID0gKGlzc2V0KCRwb3N0WyJzb3J0RGlyIl0pKSA/ICRwb3N0WyJzb3J0RGlyIl0gOiAkdGhpcy0+c29ydERpcjsKCQkkdGhpcy0+Y3JudFBhZ2UgPSAoaXNzZXQoJHBvc3RbImNybnRQYWdlIl0pKSA/ICRwb3N0WyJjcm50UGFnZSJdIDogJHRoaXMtPmNybnRQYWdlOwoJCSR0aGlzLT5yZXN1bHRTaXplID0gKGlzc2V0KCRwb3N0WyJyZXN1bHRTaXplIl0pKSA/ICRwb3N0WyJyZXN1bHRTaXplIl0gOiAkdGhpcy0+cmVzdWx0U2l6ZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldExpbWl0U3FsKCkKCXsKCQkkc3FsID0gIiI7CgkJCgkJaWYoaXNzZXQoJHRoaXMtPmNybnRQYWdlKSAmJiBpc3NldCgkdGhpcy0+cmVzdWx0U2l6ZSkpIAoJCXsKCQkJJHNxbCAuPSAiIExJTUlUICIuaW50dmFsKCR0aGlzLT5jcm50UGFnZSkqaW50dmFsKCR0aGlzLT5yZXN1bHRTaXplKS4iLCB7JHRoaXMtPnJlc3VsdFNpemV9IjsKCQl9CgkJCgkJcmV0dXJuICRzcWw7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZUh0bWwoJGN1c3RvbVRlbXBsYXRlPSIiKQoJewoJCSRodG1sID0gIiI7CgkJCgkJaWYoIWVtcHR5KCR0aGlzLT5oZWFkZXJzKSAmJiAhZW1wdHkoJHRoaXMtPnJvd3MpICYmIGNvdW50KCR0aGlzLT5yb3dzKSA+IDApIHsKCQkJLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHNvcnRpbmcgYSByZXN1bHQgc2V0IGZyb20gdGhlIHdwX3VzZXJzIHRhYmxlCgkJCWlmKCFpc3NldCgkdGhpcy0+aGVhZGVyc1skdGhpcy0+c29ydEJ5XSkgJiYgJHRoaXMtPnNvcnRCeSA9PSAiaWQiKSB7CgkJCQkkdGhpcy0+c29ydEJ5ID0gIklEIjsKCQkJfQoJCQkKCQkJaWYoaXNzZXQoJHRoaXMtPmhlYWRlcnNbJHRoaXMtPnNvcnRCeV0pICYmICFlbXB0eSgkdGhpcy0+c29ydEJ5KSAmJiAhaXNfbnVsbCgkdGhpcy0+c29ydEJ5KSkKCQkJewoJCQkJCgkJCQkkc29ydEltYWdlID0gKCR0aGlzLT5zb3J0RGlyID09ICdhc2MnKSA/ICJjYXJldC11cCIgOiAiY2FyZXQtZG93biI7CgkJCQkKCQkJCSR0aGlzLT5oZWFkZXJzWyR0aGlzLT5zb3J0QnldWydjb250ZW50J10gPSAkdGhpcy0+aGVhZGVyc1skdGhpcy0+c29ydEJ5XVsnY29udGVudCddIC4gTU1fVXRpbHM6OmdldEljb24oJHNvcnRJbWFnZSwgJ2dyZXknLCAnMS4zZW0nLCAnMnB4JywgJycsICdtYXJnaW4tbGVmdDo0cHg7Jyk7CgkJCQkkdGhpcy0+aGVhZGVyc1skdGhpcy0+c29ydEJ5XVsnY29udGVudCddID0gc3RyX3JlcGxhY2UoJzxhJywgJzxhIGNsYXNzPSJzZWxlY3RlZCInLCAkdGhpcy0+aGVhZGVyc1skdGhpcy0+c29ydEJ5XVsnY29udGVudCddICk7CgkJCX0KCQkJCgkJCSRkZyA9IG5ldyBzdGRDbGFzcygpOwoJCQkkZGctPmRhdGFncmlkID0gbmV3IHN0ZENsYXNzKCk7CgkJCSRkZy0+ZGF0YWdyaWQtPmF0dHIgPSAnaWQ9Im1tLWRhdGEtZ3JpZCIgY2xhc3M9IndpZGVmYXQiJzsKCQkJCgkJCWlmKCFlbXB0eSgkdGhpcy0+d2lkdGgpKQoJCQl7CgkJCQkkZGctPmRhdGFncmlkLT5hdHRyIC49ICcgc3R5bGU9IndpZHRoOicuJHRoaXMtPndpZHRoLiciJzsKCQkJfQoJCQkKCQkJJGRnLT5kYXRhZ3JpZC0+aGVhZGVycyA9ICR0aGlzLT5oZWFkZXJzOwoJCQkkZGctPmRhdGFncmlkLT5yb3dzID0gJHRoaXMtPnJvd3M7CgkJCQoJCQkkZGctPnNvcnRCeSA9ICR0aGlzLT5zb3J0Qnk7CgkJCSRkZy0+c29ydERpciA9ICR0aGlzLT5zb3J0RGlyOwoJCQkkZGctPmNybnRQYWdlID0gJHRoaXMtPmNybnRQYWdlOwoJCQkkZGctPnJlc3VsdFNpemUgPSAkdGhpcy0+cmVzdWx0U2l6ZTsKCQkJJGRnLT50b3RhbFJlY29yZHMgPSAkdGhpcy0+dG90YWxSZWNvcmRzOwoJCQkkZGctPnRvdGFsUGFnZXMgPSBjZWlsKGludHZhbCgkdGhpcy0+dG90YWxSZWNvcmRzKS9pbnR2YWwoJHRoaXMtPnJlc3VsdFNpemUpKTsKCQkJJGRnLT5yZWNvcmROYW1lID0gKGludHZhbCgkdGhpcy0+dG90YWxSZWNvcmRzKSA+IDEpID8gJHRoaXMtPnJlY29yZE5hbWUuInMiIDogJHRoaXMtPnJlY29yZE5hbWU7CgkJCSRkZy0+c2hvd1BhZ2luZ0NvbnRyb2xzID0gJHRoaXMtPnNob3dQYWdpbmdDb250cm9sczsKCQkJCgkJCWlmKGVtcHR5KCRjdXN0b21UZW1wbGF0ZSkpCgkJCXsKCQkJCSRodG1sID0gTU1fVGVtcGxhdGU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9kYXRhZ3JpZC5waHAiLCAkZGcpOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJGh0bWwgPSBNTV9UZW1wbGF0ZTo6Z2VuZXJhdGUoTU1fTU9EVUxFUy4iLyIuJGN1c3RvbVRlbXBsYXRlLCAkZGcpOwoJCQl9CgkJfQoJCQkJCQoJCXJldHVybiAkaHRtbDsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(97, 'emailserviceprovider', '', 0, '2018-11-21 06:38:54'),
(98, 'googleloginextension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmNsYXNzIE1NX0dvb2dsZUxvZ2luRXh0ZW5zaW9uIGV4dGVuZHMgTU1fQWJzdHJhY3RTb2NpYWxMb2dpbkV4dGVuc2lvbgp7CQoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGF1dG9sb2FkRGVwZW5kZW5jaWVzPXRydWUsJGNvbmZpZ0RhdGE9IiIpIAoJeyAKCQkvL2dvb2dsZSsgc3BlY2lmaWMgc2V0dGluZ3MKCQkkdGhpcy0+dG9rZW4gPSBNTV9FeHRlbnNpb246OiRHT09HTEVfTE9HSU5fVE9LRU47CgkJJHRoaXMtPmxpc3RpbmdJbWFnZSAgPSAiaHR0cHM6Ly9tZW1iZXJtb3VzZS5jb20vYXNzZXRzL3BsdWdpbl9pbWFnZXMvbG9nb3MvZXh0ZW5zaW9ucy1nb29nbGUuanBnIjsKCQkkdGhpcy0+ZXh0ZW5zaW9uTmFtZSA9ICJMb2dpbiB3aXRoIEdvb2dsZSI7CgkJJHRoaXMtPnByb3ZpZGVyTmFtZSAgPSAiR29vZ2xlIjsKCQkkdGhpcy0+a2V5TmFtZSAgICAgICA9ICJDbGllbnQgSUQiOwoJCSR0aGlzLT5zZWNyZXROYW1lICAgID0gIkNsaWVudCBTZWNyZXQiOwoJIAkkdGhpcy0+c3VwcG9ydEFydGljbGVVcmwgPSAiaHR0cDovL3N1cHBvcnQubWVtYmVybW91c2UuY29tL3N1cHBvcnQvc29sdXRpb25zL2FydGljbGVzLzkwMDAwMjAzMzItY29uZmlndXJpbmctZ29vZ2xlLWxvZ2luIjsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCRhdXRvbG9hZERlcGVuZGVuY2llcywkY29uZmlnRGF0YSk7Cgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldEh5YnJpZEF1dGhDb25maWcoKQoJeyAKCQkkY29uZmlnID0gcGFyZW50OjpnZXRIeWJyaWRBdXRoQ29uZmlnKCk7CgkJCgkJLy8gYm90aCB0aGUgcGx1cy5sb2dpbiBhbmQgcGx1cy5wcm9maWxlLmVtYWlscy5yZWFkIHNjb3BlcyBhcmUgcmVxdWlyZWQKCQkvLyB0byBvYnRhaW4gYm90aCB0aGUgdXNlcnMgZW1haWwgYW5kIGZpcnN0L2xhc3QgbmFtZXMgdXBvbiBzaWdudXAuCgkJJGNvbmZpZ1sicHJvdmlkZXJzIl0gPSBhcnJheSAoCgkJCQkkdGhpcy0+dG9rZW4gPT4gYXJyYXkgKAoJCQkJCQkiZW5hYmxlZCIgPT4gdHJ1ZSwKCQkJCQkJImtleXMiICAgID0+IGFycmF5ICggImlkIiA9PiAkdGhpcy0+YXBpS2V5LCAic2VjcmV0IiA9PiAkdGhpcy0+YXBpU2VjcmV0ICksCgkJCQkJCSJzY29wZSIgICAgICAgICAgID0+ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubG9naW4gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9wbHVzLnByb2ZpbGUuZW1haWxzLnJlYWQiICAgLCAvLyBvcHRpb25hbAoJCQkJKQoJCSk7CgkJcmV0dXJuICRjb25maWc7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGRpc3BsYXlDb25maWdTY3JlZW4oKQoJewoJCSRjYWxsYmFja1VybCA9ICR0aGlzLT5saWJyYXJ5VXJsLiIvaW5kZXgucGhwP2hhdXRoLmRvbmU9R29vZ2xlIjsKCQkkdGhpcy0+YWRkaXRpb25hbEluZm8gPSAiPHRyPgoJCQkJPHRkIE5PV1JBUD5DYWxsYmFjayBVUkw8L3RkPgoJCQkJPHRkIE5PV1JBUD4KCQkJCQk8c3BhbiBzdHlsZT0nZm9udC1mYW1pbHk6Y291cmllcjsgZm9udC1zaXplOjExcHg7Jz4KCQkJCQk8aW5wdXQgaWQ9J21tLWdvb2dsZS1jYWxsYmFjay11cmwnIHR5cGU9J3RleHQnIHJlYWRvbmx5IHZhbHVlPSd7JGNhbGxiYWNrVXJsfScgc3R5bGU9J3dpZHRoOjYwMHB4JyBvbmNsaWNrPVwialF1ZXJ5KCcjbW0tZ29vZ2xlLWNhbGxiYWNrLXVybCcpLmZvY3VzKCk7IGpRdWVyeSgnI21tLWdvb2dsZS1jYWxsYmFjay11cmwnKS5zZWxlY3QoKTtcIiAvPgoJCQkJCTwvc3Bhbj4KCQkJCTwvdGQ+CgkJCTwvdHI+XG4iOwoJCXJldHVybiBwYXJlbnQ6OmRpc3BsYXlDb25maWdTY3JlZW4oKTsJCgl9Cn0=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(99, 'ordertagprocessor', '', 0, '2018-11-21 06:38:54'),
(100, 'newmemberscomparisonreport', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KY2xhc3MgTU1fTmV3TWVtYmVyc0NvbXBhcmlzb25SZXBvcnQgZXh0ZW5kcyBNTV9SZXBvcnRCYXNlIAp7CgkKCXB1YmxpYyBzdGF0aWMgJE5FV19NRU1CRVJTX0NPTVBBUklTT05fREFUQUdSSUQgPSAibmV3X21lbWJlcnNfY29tcGFyaXNvbl9kYXRhZ3JpZCI7CglwdWJsaWMgc3RhdGljICRORVdfTUVNQkVSU19DT01QQVJJU09OX0xJTkVDSEFSVCA9ICJuZXdfbWVtYmVyc19jb21wYXJpc29uX2xpbmVjaGFydCI7CgkKCXByb3RlY3RlZCAkdmlzdWFsRWxlbWVudHMgPSBhcnJheSgiTU1fUmVwb3J0RGF0YUdyaWQiLCJNTV9SZXBvcnRMaW5lQ2hhcnQiKTsJCgkKCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJWaXN1YWxFbGVtZW50KCRlbGVtZW50SWRlbnRpZmllciwgJHBhcmFtcyA9ICcnLCAkd2lkdGggPSAnJywgJGhlaWdodCA9ICcnLCAkZGlyZWN0aXZlcz1hcnJheSgpKSAKCXsKCQlzd2l0Y2ggKCRlbGVtZW50SWRlbnRpZmllcikKCQl7CgkJCWNhc2Ugc2VsZjo6JE5FV19NRU1CRVJTX0NPTVBBUklTT05fTElORUNIQVJUOgoJCQkJcmV0dXJuICR0aGlzLT5yZW5kZXJOZXdNZW1iZXJzQ29tcGFyaXNvbkxpbmVDaGFydCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMsICR3aWR0aCwgJGhlaWdodCwgJGRpcmVjdGl2ZXMpOwoJCQkJYnJlYWs7CgkJCWNhc2Ugc2VsZjo6JE5FV19NRU1CRVJTX0NPTVBBUklTT05fREFUQUdSSUQ6CgkJCQlyZXR1cm4gJHRoaXMtPnJlbmRlck5ld01lbWJlcnNDb21wYXJpc29uRGF0YWdyaWQoJGVsZW1lbnRJZGVudGlmaWVyLCAkcGFyYW1zLCAkd2lkdGgsICRoZWlnaHQsICRkaXJlY3RpdmVzKTsKCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgiVW5hYmxlIHRvIHJlbmRlciB2aXN1YWwgZWxlbWVudDogaWRlbnRpZmllciAiLigoIWlzX2FycmF5KCRlbGVtZW50SWRlbnRpZmllcikgJiYgIWlzX29iamVjdCgkZWxlbWVudElkZW50aWZpZXIpKT8ieyRlbGVtZW50SWRlbnRpZmllcn0gIjoiIikuInVua25vd24iLE1NX1JlcG9ydFJlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJCgkvKioKCSAqIAoJICogQHBhcmFtIHN0cmluZyAkZWxlbWVudElkZW50aWZpZXIKCSAqIEBwYXJhbSBzdHJpbmcgJHdpZHRoCgkgKiBAcGFyYW0gc3RyaW5nICRoZWlnaHQKCSAqIEBwYXJhbSBzdHJpbmcgJHBhcmFtcwoJICogQHJldHVybiBNTV9SZXBvcnRSZXNwb25zZSBjb250YWluaW5nIHRoZSBkYXRhZ3JpZCBpZiBpdCBpcyByZW5kZXJhYmxlLCBub3QtcmVhZHkgc3RhdHVzIGlmIHRoZSBkYXRhIGlzIGF2YWlsYWJsZSwgb3IgZXJyb3IgaWYgdGhlcmUgd2FzIGFuIGVycm9yCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJOZXdNZW1iZXJzQ29tcGFyaXNvbkRhdGFncmlkKCRlbGVtZW50SWRlbnRpZmllciwgJHBhcmFtcyA9ICcnLCAkd2lkdGggPSAnJywgJGhlaWdodCA9ICcnLCAkZGlyZWN0aXZlcz1hcnJheSgpKQoJewoJCS8vc2hhcmUgcmVwb3J0IHdpdGggdGhlIG5ldyBtZW1iZXJzIHJlcG9ydCwgc2luY2UgdGhpcyBpcyBqdXN0IGEgbmV3IHZpZXcgb24gdGhlIHNhbWUgZGF0YQoJCSRkYXRhUmVzcG9uc2UgPSBNTV9SZXBvcnREYXRhUmV0cmlldmVyOjpyZXF1ZXN0RGF0YSgiTU1fTmV3TWVtYmVyc1JlcG9ydCIsIE1NX05ld01lbWJlcnNSZXBvcnQ6OiRORVdfTUVNQkVSU19CWV9EQVRFX1FVRVJZLCAkcGFyYW1zKTsKCQlpZiAoIU1NX1JlcG9ydFJlc3BvbnNlOjppc1N1Y2Nlc3MoJGRhdGFSZXNwb25zZSkpCgkJewoJCQlyZXR1cm4gJGRhdGFSZXNwb25zZTsKCQl9CgkJCgkJJHJvd0luZGV4ID0gIkRhdGUiOwoJCQoJCWlmIChpc3NldCgkcGFyYW1zWyd0eXBlJ10pKQoJCXsKCQkJc3dpdGNoICgkcGFyYW1zWyd0eXBlJ10pCgkJCXsKCQkJCWNhc2UgJ3dlZWtseSc6CgkJCQkJJHJvd0luZGV4ID0gIldlZWsgb2YiOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAnbW9udGhseSc6CgkJCQkJJHJvd0luZGV4ID0gIk1vbnRoIjsKCQkJCQlicmVhazsKCQkJCWNhc2UgJ3llYXJseSc6CgkJCQkJJHJvd0luZGV4ID0gIlllYXIiOwoJCQkJCWJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQkkcm93SW5kZXggPSAiRGF0ZSI7CgkJCQkJYnJlYWs7CgkJCX0KCQl9CgkJCgkJLy9kYXRhIGlzIHJlYWR5LCBjb25zdHJ1Y3QgdGhlIGdyaWQgbW9kZWwsIHN0YXJ0aW5nIHdpdGggdGhlIGhlYWRlcnMKCQkkcmVzdWx0c2V0ICAgPSAkZGF0YVJlc3BvbnNlLT5tZXNzYWdlOwoJCSRncmlkSGVhZGVycyA9IGFycmF5KCJkYXRlIj0+YXJyYXkoJ2xhYmVsJz0+JHJvd0luZGV4LCAnc29ydGFibGUnPT50cnVlLCAnc29ydFZhbHVlQ29sdW1uJz0+J2RhdGVfc29ydF92YWx1ZScpKTsKCQkKCQkvL3RoZXJlIGlzIGEgY29sdW1uIGZvciBlYWNoIG1lbWJlcnNoaXAgbGV2ZWwuIFdlIGNvdWxkIHF1ZXJ5IHRoaXMgZGF0YSBhZ2FpbiwgYnV0IGZhc3RlciB0byBqdXN0IGV4dHJhY3QgaXQgZnJvbSB0aGUgZmlyc3Qgcm93IG9mIHRoZSByZXN1bHRzZXQKCQkkZmlyc3RSb3cgPSByZXNldCgkcmVzdWx0c2V0KTsKCQlmb3JlYWNoICgkZmlyc3RSb3cgYXMgJGs9PiR2KQoJCXsJCgkJCWlmICgoJGsgIT0gImRhdGUiKSAmJiAoJGsgIT0gImRhdGVfc29ydF92YWx1ZSIpKQoJCQl7CgkJCQkkZ3JpZEhlYWRlcnNbJGtdID0gYXJyYXkoJ2xhYmVsJz0+JGspOwoJCQl9CgkJfQoJCQoJCSRncmlkID0gTU1fUmVwb3J0RGF0YWdyaWQ6OmNyZWF0ZUZyb21EYXRhKHNlbGY6OiRORVdfTUVNQkVSU19DT01QQVJJU09OX0RBVEFHUklELCAkZ3JpZEhlYWRlcnMsICRkYXRhUmVzcG9uc2UsJGRpcmVjdGl2ZXMpOwoJCS8vJGdyaWQtPnNldEdyaWRUaXRsZSgiTmV3IE1lbWJlcnMgQnkgRGF0ZSIpOwoJCSRncmlkLT5zZXRTaG93SGVhZGVyUm93KGZhbHNlKTsKCQkKCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCRncmlkLT5yZW5kZXIoKSk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbmRlck5ld01lbWJlcnNDb21wYXJpc29uTGluZUNoYXJ0KCRlbGVtZW50SWRlbnRpZmllciwgJHBhcmFtcyA9ICcnLCAkd2lkdGggPSAnJywgJGhlaWdodCA9ICcnLCAkZGlyZWN0aXZlcz1hcnJheSgpKQoJewoJCSRkYXRhUmVzcG9uc2UgPSBNTV9SZXBvcnREYXRhUmV0cmlldmVyOjpyZXF1ZXN0RGF0YSgiTU1fTmV3TWVtYmVyc1JlcG9ydCIsIE1NX05ld01lbWJlcnNSZXBvcnQ6OiRORVdfTUVNQkVSU19CWV9EQVRFX1FVRVJZLCAkcGFyYW1zKTsJCQoJCWlmICghTU1fUmVwb3J0UmVzcG9uc2U6OmlzU3VjY2VzcygkZGF0YVJlc3BvbnNlKSkKCQl7CgkJCXJldHVybiAkZGF0YVJlc3BvbnNlOwoJCX0KCQkKCQkkcmVzdWx0cyA9ICRkYXRhUmVzcG9uc2UtPm1lc3NhZ2U7CgkJCgkJLy9nZXQgdGhlIGNvbXBhcmVkIG1lbWJlcnNoaXBzIGZyb20gdGhlIGZpcnN0IGxpbmUKCQkkZmlyc3RMaW5lID0gcmVzZXQoJHJlc3VsdHMpOwoJCSRtZW1iZXJzaGlwcyA9IGFycmF5X2tleXMoYXJyYXlfc2xpY2UoJGZpcnN0TGluZSwxKSk7CgkJCgkJLy9ub3cga2V5IGEgbG9va3VwIHRhYmxlIHdpdGggdGhlIG1lbWJlcnNoaXAgcG9pbnRpbmcgdG8gYSBtb2RlbCB3ZSB3aWxsIGNyZWF0ZSBmb3IgaXQKCQkkbWxMb29rdXAgPSBhcnJheSgpOwoJCWZvcmVhY2ggKCRtZW1iZXJzaGlwcyBhcyAkdikKCQl7CgkJCWlmICgoJHYgIT0gJ2RhdGUnKSAmJiAoJHYgIT0gJ2RhdGVfc29ydF92YWx1ZScpKQoJCQl7CgkJCQkkbWxMb29rdXBbJHZdID0gbmV3IE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbCgpOwoJCQkJJG1sTG9va3VwWyR2XS0+c2V0VGl0bGUoJHYpOyAvL2ZvciB0aGUgbGVnZW5lZAoJCQl9CgkJfQoJCQoJCS8vbm93IGl0ZXJhdGUgdGhyb3VnaCB0aGUgZGF0YSBhbmQgYWRkIGl0IHRvIHRoZSBjb3JyZWN0IG1vZGVsCgkJZm9yZWFjaCAoJHJlc3VsdHMgYXMgJHJvdykKCQl7CgkJCWZvcmVhY2ggKCRyb3cgYXMgJGNvbHVtbj0+JGNvbHVtblZhbCkKCQkJewoJCQkJaWYgKCgkY29sdW1uICE9ICdkYXRlJykgJiYgKCRjb2x1bW4gIT0gJ2RhdGVfc29ydF92YWx1ZScpKQoJCQkJewoJCQkJCWlmIChpc3NldCgkbWxMb29rdXBbJGNvbHVtbl0pICYmIGlzX29iamVjdCgkbWxMb29rdXBbJGNvbHVtbl0pKQoJCQkJCXsKCQkJCQkJJG1sTG9va3VwWyRjb2x1bW5dLT5hZGRWYWx1ZXMoJHJvd1snZGF0ZV9zb3J0X3ZhbHVlJ10sICRjb2x1bW5WYWwpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCQkKCQkvL25vdyBjcmVhdGUgdGhlIGxpbmUgY2hhcnQKCQkkbGluZSA9IG5ldyBNTV9SZXBvcnRMaW5lQ2hhcnQoJGVsZW1lbnRJZGVudGlmaWVyKTsKCQkkbGluZS0+c2V0Q2F0ZWdvcmllc0FyZURhdGVzKHRydWUpOwoJCSRsaW5lLT5zZXREYXRlRm9ybWF0KCJZWVlZLU1NLUREIik7CgkJCgkJLy9hZGQgdGhlIG1vZGVscyB3ZSBqdXN0IGNyZWF0ZWQKCQlmb3JlYWNoICgkbWxMb29rdXAgYXMgJG1vZGVsKQoJCXsKCQkJJGxpbmUtPmFkZE1vZGVsKCRtb2RlbCk7CgkJfQoJCQoJCS8vc2V0IHRoZSBncmFwaCByZXNvbHV0aW9uIGJhc2VkIG9uIHdoYXQgdGhlIHVzZXIgY2hvc2UKCQkkcmVzb2x1dGlvbiA9IE1NX1JlcG9ydExpbmVDaGFydDo6JERBWVM7CgkJaWYgKGlzc2V0KCRwYXJhbXNbJ3R5cGUnXSkpCgkJewoJCQlzd2l0Y2ggKCRwYXJhbXNbJ3R5cGUnXSkKCQkJewoJCQkJY2FzZSAnd2Vla2x5JzoKCQkJCQkkcmVzb2x1dGlvbiA9IE1NX1JlcG9ydExpbmVDaGFydDo6JFdFRUtTOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAnbW9udGhseSc6CgkJCQkJJHJlc29sdXRpb24gPSBNTV9SZXBvcnRMaW5lQ2hhcnQ6OiRNT05USFM7CgkJCQkJYnJlYWs7CgkJCQljYXNlICd5ZWFybHknOgoJCQkJCSRyZXNvbHV0aW9uID0gTU1fUmVwb3J0TGluZUNoYXJ0OjokWUVBUlM7CgkJCQkJYnJlYWs7CgkJCQlkZWZhdWx0OgoJCQkJCWJyZWFrOwoJCQl9CgkJfQoJCSRsaW5lLT5zZXRSZXNvbHV0aW9uKCRyZXNvbHV0aW9uKTsKCQkkbGluZS0+c2V0VmFsdWVBeGlzVGl0bGUoIiMgb2YgbWVtYmVycyBhZGRlZCIpOwoJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoJGxpbmUtPnJlbmRlcigpKTsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YSgkcXVlcnlJZGVudGlmaWVyLCAkcGFyYW1zKQoJewoJCS8vdGhpcyByZXBvcnQgZ2VuZXJhdGVzIG5vIGRhdGEgb2YgaXRzIG93bgoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIGdlbmVyYXRpbmcgZGF0YSBmb3IgdW5rbm93biBxdWVyeSBpZGVudGlmaWVyIHskcXVlcnlJZGVudGlmaWVyfSIsTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKfQoK', 0, '2018-11-21 06:38:54'),
(101, 'aweberoauthexception', 'LyoqCiAqIE1NX0FXZWJlck9BdXRoRXhjZXB0aW9uCiAqCiAqIE9BdXRoIGV4Y2VwdGlvbiwgYXMgZ2VuZXJhdGVkIGJ5IGFuIEFQSSBKU09OIGVycm9yIHJlc3BvbnNlCiAqIEB1c2VzIE1NX0FXZWJlckV4Y2VwdGlvbgogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJPQXV0aEV4Y2VwdGlvbiBleHRlbmRzIE1NX0FXZWJlckV4Y2VwdGlvbiB7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCR0eXBlLCAkbWVzc2FnZSkgewoJCSR0aGlzLT50eXBlID0gJHR5cGU7CgkJJHRoaXMtPm1lc3NhZ2UgPSAkbWVzc2FnZTsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCJ7JHR5cGV9OiB7JG1lc3NhZ2V9Iik7Cgl9Cn0K', 0, '2018-11-21 06:38:54'),
(102, 'previewview', '', 0, '2018-11-21 06:38:54'),
(103, 'aweberserviceprovider', 'LyoqCiAqIE1NX0FXZWJlclNlcnZpY2VQcm92aWRlcgogKgogKiBQcm92aWRlcyBzcGVjaWZpYyBBV2ViZXIgaW5mb3JtYXRpb24gb3IgaW1wbGVtZW50aW5nIE9BdXRoLgogKiBAdXNlcyBNTV9PQXV0aFNlcnZpY2VQcm92aWRlcgogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJTZXJ2aWNlUHJvdmlkZXIgaW1wbGVtZW50cyBNTV9PQXV0aFNlcnZpY2VQcm92aWRlciB7CgogICAgLyoqCiAgICAgKiBAdmFyIFN0cmluZyBMb2NhdGlvbiBmb3IgQVBJIGNhbGxzCiAgICAgKi8KICAgIHB1YmxpYyAkYmFzZVVyaSA9ICdodHRwczovL2FwaS5hd2ViZXIuY29tLzEuMCc7CgogICAgLyoqCiAgICAgKiBAdmFyIFN0cmluZyBMb2NhdGlvbiB0byByZXF1ZXN0IGFuIGFjY2VzcyB0b2tlbgogICAgICovCiAgICBwdWJsaWMgJGFjY2Vzc1Rva2VuVXJsID0gJ2h0dHBzOi8vYXV0aC5hd2ViZXIuY29tLzEuMC9vYXV0aC9hY2Nlc3NfdG9rZW4nOwoKICAgIC8qKgogICAgICogQHZhciBTdHJpbmcgTG9jYXRpb24gdG8gYXV0aG9yaXplIGFuIEFwcGxpY2F0aW9uCiAgICAgKi8KICAgIHB1YmxpYyAkYXV0aG9yaXplVXJsID0gJ2h0dHBzOi8vYXV0aC5hd2ViZXIuY29tLzEuMC9vYXV0aC9hdXRob3JpemUnOwoKICAgIC8qKgogICAgICogQHZhciBTdHJpbmcgTG9jYXRpb24gdG8gcmVxdWVzdCBhIHJlcXVlc3QgdG9rZW4KICAgICAqLwogICAgcHVibGljICRyZXF1ZXN0VG9rZW5VcmwgPSAnaHR0cHM6Ly9hdXRoLmF3ZWJlci5jb20vMS4wL29hdXRoL3JlcXVlc3RfdG9rZW4nOwoKCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0QmFzZVVyaSgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmJhc2VVcmk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHJlbW92ZUJhc2VVcmkoJHVybCkgewogICAgICAgIHJldHVybiBzdHJfcmVwbGFjZSgkdGhpcy0+Z2V0QmFzZVVyaSgpLCAnJywgJHVybCk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuVXJsKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+YWNjZXNzVG9rZW5Vcmw7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGdldEF1dGhvcml6ZVVybCgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmF1dGhvcml6ZVVybDsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UmVxdWVzdFRva2VuVXJsKCkgewogICAgICAgIHJldHVybiAkdGhpcy0+cmVxdWVzdFRva2VuVXJsOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRBdXRoVG9rZW5Gcm9tVXJsKCkgeyByZXR1cm4gJyc7IH0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRVc2VyRGF0YSgpIHsgcmV0dXJuICcnOyB9Cgp9Cgo=', 0, '2018-11-21 06:38:54'),
(104, 'cookies', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0Nvb2tpZXMKewoJcHVibGljIHN0YXRpYyAkQ09PS0lFX1BSRUZJWCA9ICJtbV9jb29raWVfIjsKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzZXRDb29raWVzKCkKCXsKCQkkYWZmaWxpYXRlSWQgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9BRkZJTElBVEUpOwoJCSRzdWJBZmZpbGlhdGVJZCA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NVQl9BRkZJTElBVEUpOwoJCSRsaWZlc3BhbiA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0FGRklMSUFURV9MSUZFU1BBTik7CgkJCgkJJGFmZmlsaWF0ZUFsaWFzZXMgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9BRkZJTElBVEVfQUxJQVMpOwoJCQoJCWlmKCFlbXB0eSgkYWZmaWxpYXRlQWxpYXNlcykpCgkJewoJCQkkYWZmaWxpYXRlQWxpYXNlcyA9IGV4cGxvZGUoIiwiLCAkYWZmaWxpYXRlQWxpYXNlcyk7CgkJCQoJCQlmb3IoJGkgPSAwOyAkaSA8IGNvdW50KCRhZmZpbGlhdGVBbGlhc2VzKTsgJGkrKykKCQkJewoJCQkJJGFmZmlsaWF0ZUFsaWFzZXNbJGldID0gdHJpbSgkYWZmaWxpYXRlQWxpYXNlc1skaV0pOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCSRhZmZpbGlhdGVBbGlhc2VzID0gYXJyYXkoKTsKCQl9CgkJCgkJJHN1YkFmZmlsaWF0ZUFsaWFzZXMgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9TVUJfQUZGSUxJQVRFX0FMSUFTKTsKCQkKCQlpZighZW1wdHkoJHN1YkFmZmlsaWF0ZUFsaWFzZXMpKQoJCXsKCQkJJHN1YkFmZmlsaWF0ZUFsaWFzZXMgPSBleHBsb2RlKCIsIiwgJHN1YkFmZmlsaWF0ZUFsaWFzZXMpOwoJCQkKCQkJZm9yKCRpID0gMDsgJGkgPCBjb3VudCgkc3ViQWZmaWxpYXRlQWxpYXNlcyk7ICRpKyspCgkJCXsKCQkJCSRzdWJBZmZpbGlhdGVBbGlhc2VzWyRpXSA9IHRyaW0oJHN1YkFmZmlsaWF0ZUFsaWFzZXNbJGldKTsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQkkc3ViQWZmaWxpYXRlQWxpYXNlcyA9IGFycmF5KCk7CgkJfQoJCQoJCS8vIGdldCBhZmZpbGlhdGUgdHJhY2tpbmcgSURzIGZyb20gYWN0aXZlIGFmZmlsaWF0ZSBwcm92aWRlcgoJCSRhZmZpbGlhdGVQcm92aWRlciA9IE1NX0FmZmlsaWF0ZVByb3ZpZGVyRmFjdG9yeTo6Z2V0QWN0aXZlUHJvdmlkZXIoKTsKCQkKCQlpZigkYWZmaWxpYXRlUHJvdmlkZXIpCgkJewoJCQkkcHJvdmlkZXJBZmZpbGlhdGVJZCA9ICRhZmZpbGlhdGVQcm92aWRlci0+Z2V0QWZmaWxpYXRlVHJhY2tpbmdJZCgpOwoJCQkkcHJvdmlkZXJTdWJhZmZpbGlhdGVJZCA9ICRhZmZpbGlhdGVQcm92aWRlci0+Z2V0U3ViYWZmaWxpYXRlVHJhY2tpbmdJZCgpOwoJCQkKCQkJaWYoIWVtcHR5KCRwcm92aWRlckFmZmlsaWF0ZUlkKSkKCQkJewoJCQkJJGFmZmlsaWF0ZUFsaWFzZXNbXSA9IHRyaW0oJHByb3ZpZGVyQWZmaWxpYXRlSWQpOwoJCQl9CgkJCQoJCQlpZighZW1wdHkoJHByb3ZpZGVyU3ViYWZmaWxpYXRlSWQpKQoJCQl7CgkJCQkkc3ViQWZmaWxpYXRlQWxpYXNlc1tdID0gdHJpbSgkcHJvdmlkZXJTdWJhZmZpbGlhdGVJZCk7CgkJCX0KCQl9CgkJCQoJCWlmKGludHZhbCgkbGlmZXNwYW4pID4gMCkgCgkJewoJCQkkZGF5cyA9IHRpbWUoKSArIDM2MDAgKiAyNCAqIGludHZhbCgkbGlmZXNwYW4pOwoJCQkKCQkJZm9yZWFjaCgkX0dFVCBhcyAka2V5PT4kdmFsdWUpCgkgICAgICAgIHsKCSAgICAgICAgCWlmKCFpc19hcnJheSgkdmFsdWUpKQoJICAgICAgICAJewoJCSAgICAgICAgCWlmKCgka2V5ID09ICRhZmZpbGlhdGVJZCkgfHwgKCRrZXkgPT0gJHN1YkFmZmlsaWF0ZUlkKSkKCQkgICAgICAgIAl7CgkJICAgICAgICAJCWlmKHNlbGY6OmRvU2V0QWZmaWxpYXRlVmFsdWUoJGtleSkpCgkJICAgICAgICAJCXsKCQkgICAgICAgIAkJCXNldGNvb2tpZShzZWxmOjokQ09PS0lFX1BSRUZJWC4ka2V5LCAkdmFsdWUsICRkYXlzLCAiLyIpOwoJCSAgICAgICAgCQl9CgkJICAgICAgICAJfQoJCSAgICAgICAgCWVsc2UgaWYoaW5fYXJyYXkoJGtleSwgJGFmZmlsaWF0ZUFsaWFzZXMpKQoJCSAgICAgICAgCXsKCQkgICAgICAgIAkJaWYoc2VsZjo6ZG9TZXRBZmZpbGlhdGVWYWx1ZSgkYWZmaWxpYXRlSWQpKQoJCSAgICAgICAgCQl7CgkJICAgICAgICAJCQlzZXRjb29raWUoc2VsZjo6JENPT0tJRV9QUkVGSVguJGFmZmlsaWF0ZUlkLCAkdmFsdWUsICRkYXlzLCAiLyIpOwoJCSAgICAgICAgCQl9CgkJICAgICAgICAJfQoJCSAgICAgICAgCWVsc2UgaWYoaW5fYXJyYXkoJGtleSwgJHN1YkFmZmlsaWF0ZUFsaWFzZXMpKQoJCSAgICAgICAgCXsKCQkgICAgICAgIAkJaWYoc2VsZjo6ZG9TZXRBZmZpbGlhdGVWYWx1ZSgkc3ViQWZmaWxpYXRlSWQpKQoJCSAgICAgICAgCQl7CgkJICAgICAgICAJCQlzZXRjb29raWUoc2VsZjo6JENPT0tJRV9QUkVGSVguJHN1YkFmZmlsaWF0ZUlkLCAkdmFsdWUsICRkYXlzLCAiLyIpOwoJCSAgICAgICAgCQl9CgkJICAgICAgICAJfQoJCSAgICAgICAgCWVsc2UKCQkgICAgICAgIAl7CgkJICAgICAgICAJCSRpbmZvT2JqID0gbmV3IHN0ZENsYXNzKCk7CgkJICAgICAgICAJCSRpbmZvT2JqLT5rZXkgPSAka2V5OwoJCSAgICAgICAgCQkkaW5mb09iai0+dmFsdWUgPSAkdmFsdWU7CgkJICAgICAgICAJCSRpbmZvT2JqLT5kYXlzID0gJGRheXM7CgkJICAgICAgICAJCQoJCSAgICAgICAgCQkkZG9TZXRDb29raWUgPSBhcHBseV9maWx0ZXJzKE1NX0ZpbHRlcnM6OiRTRVRfQ09PS0lFLCAkaW5mb09iaik7CgkJICAgICAgICAJCQoJCSAgICAgICAgCQlpZigkZG9TZXRDb29raWUgIT09IGZhbHNlKQoJCSAgICAgICAgCQl7CgkgICAgICAgIAkJCQlzZXRjb29raWUoc2VsZjo6JENPT0tJRV9QUkVGSVguJGtleSwgJHZhbHVlLCAkZGF5cywgIi8iKTsKCQkgICAgICAgIAkJfQoJCSAgICAgICAgCX0KCSAgICAgICAgCX0KCSAgICAgICAgfQoJCX0KCQkKCQlyZXR1cm4gdHJ1ZTsKCX0KCQoJLyoqCgkgKiBBZmZpbGlhdGUgY29va2llcyBzaG91bGQgb25seSBiZSBzZXQgaWYgdGhleSdyZSBub3Qgc2V0IGFscmVhZHkKCSAqIEBwYXJhbSBTdHJpbmcgJGtleSB0aGUga2V5IG9mIHRoZSBjb29raWUgdG8gc2V0CgkgKiBAcmV0dXJuIGJvb2xlYW4gcmV0dXJucyB0cnVlIGlmIGl0J3Mgb2sgdG8gc2V0IHRoZSBjb29raWUsIGZhbHNlIG90aGVyd2lzZQoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBkb1NldEFmZmlsaWF0ZVZhbHVlKCRrZXkpCgl7CgkJaWYoIWlzc2V0KCRfQ09PS0lFW3NlbGY6OiRDT09LSUVfUFJFRklYLiRrZXldKSB8fCAoaXNzZXQoJF9DT09LSUVbc2VsZjo6JENPT0tJRV9QUkVGSVguJGtleV0pICYmIGVtcHR5KCRfQ09PS0lFW3NlbGY6OiRDT09LSUVfUFJFRklYLiRrZXldKSkpCgkJewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldENvb2tpZSgka2V5KQoJewoJCSRhZmZpbGlhdGVJZCA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0FGRklMSUFURSk7CgkJJHN1YkFmZmlsaWF0ZUlkID0gTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfU1VCX0FGRklMSUFURSk7CgkJCgkJJGFmZmlsaWF0ZUFsaWFzZXMgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9BRkZJTElBVEVfQUxJQVMpOwoJCQoJCWlmKCFlbXB0eSgkYWZmaWxpYXRlQWxpYXNlcykpCgkJewoJCQkkYWZmaWxpYXRlQWxpYXNlcyA9IGV4cGxvZGUoIiwiLCAkYWZmaWxpYXRlQWxpYXNlcyk7CgkJCQkKCQkJZm9yKCRpID0gMDsgJGkgPCBjb3VudCgkYWZmaWxpYXRlQWxpYXNlcyk7ICRpKyspCgkJCXsKCQkJCSRhZmZpbGlhdGVBbGlhc2VzWyRpXSA9IHRyaW0oJGFmZmlsaWF0ZUFsaWFzZXNbJGldKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJJGFmZmlsaWF0ZUFsaWFzZXMgPSBhcnJheSgpOwoJCX0KCQkKCQkkc3ViQWZmaWxpYXRlQWxpYXNlcyA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NVQl9BRkZJTElBVEVfQUxJQVMpOwoJCQoJCWlmKCFlbXB0eSgkc3ViQWZmaWxpYXRlQWxpYXNlcykpCgkJewoJCQkkc3ViQWZmaWxpYXRlQWxpYXNlcyA9IGV4cGxvZGUoIiwiLCAkc3ViQWZmaWxpYXRlQWxpYXNlcyk7CgkJCQkKCQkJZm9yKCRpID0gMDsgJGkgPCBjb3VudCgkc3ViQWZmaWxpYXRlQWxpYXNlcyk7ICRpKyspCgkJCXsKCQkJCSRzdWJBZmZpbGlhdGVBbGlhc2VzWyRpXSA9IHRyaW0oJHN1YkFmZmlsaWF0ZUFsaWFzZXNbJGldKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJJHN1YkFmZmlsaWF0ZUFsaWFzZXMgPSBhcnJheSgpOwoJCX0KCQkKCQkvLyBnZXQgYWZmaWxpYXRlIHRyYWNraW5nIElEcyBmcm9tIGFjdGl2ZSBhZmZpbGlhdGUgcHJvdmlkZXIKCQkkYWZmaWxpYXRlUHJvdmlkZXIgPSBNTV9BZmZpbGlhdGVQcm92aWRlckZhY3Rvcnk6OmdldEFjdGl2ZVByb3ZpZGVyKCk7CgkJCgkJaWYoJGFmZmlsaWF0ZVByb3ZpZGVyKQoJCXsKCQkJJHByb3ZpZGVyQWZmaWxpYXRlSWQgPSAkYWZmaWxpYXRlUHJvdmlkZXItPmdldEFmZmlsaWF0ZVRyYWNraW5nSWQoKTsKCQkJJHByb3ZpZGVyU3ViYWZmaWxpYXRlSWQgPSAkYWZmaWxpYXRlUHJvdmlkZXItPmdldFN1YmFmZmlsaWF0ZVRyYWNraW5nSWQoKTsKCQkJCQoJCQlpZighZW1wdHkoJHByb3ZpZGVyQWZmaWxpYXRlSWQpKQoJCQl7CgkJCQkkYWZmaWxpYXRlQWxpYXNlc1tdID0gdHJpbSgkcHJvdmlkZXJBZmZpbGlhdGVJZCk7CgkJCX0KCQkJCQoJCQlpZighZW1wdHkoJHByb3ZpZGVyU3ViYWZmaWxpYXRlSWQpKQoJCQl7CgkJCQkkc3ViQWZmaWxpYXRlQWxpYXNlc1tdID0gdHJpbSgkcHJvdmlkZXJTdWJhZmZpbGlhdGVJZCk7CgkJCX0KCQl9CgkJCgkJLy8gV2hlbiBjb29raWUgdmFsdWVzIGFyZSBzZXQgdGhlIHBhZ2UgbmVlZHMgdG8gYmUgcmVmcmVzaGVkIGluIG9yZGVyIGZvciB0aGUgdmFsdWVzIHRvIGJlIHJlYWQuCgkJLy8gVGhpcyBpc24ndCBzYXRpc2ZhY3RvcnkgZm9yIHRoZSBuZWVkcyBvZiBNZW1iZXJNb3VzZS4gV2Ugd2FudCB2YWx1ZXMgcGFzc2VkIGZyb20gdGhlIHF1ZXJ5c3RyaW5nCgkJLy8gdG8gYmUgYXZhaWxhYmxlIGltbWVkaWF0ZWx5IHRvIGRyaXZlIGR5bmFtaWMgY29udGVudCBnZW5lcmF0aW9uLiBGb3IgYWZmaWxpYXRlIGFuZCBzdWItYWZmaWxpYXRlCgkJLy8gcGFyYW1zLCB0aGUgdmFsdWVzIHN0b3JlZCBpbiB0aGUgY29va2llcyB0YWtlIHByZWNlZGVuY2UuIEZvciBhbGwgb3RoZXIgdmFsdWVzLCB0aGUgdmFsdWUgc3RvcmVkCgkJLy8gaW4gdGhlIHF1ZXJ5c3RyaW5nIHRha2VzIHByZWNlbmRlbmNlLiAKCQlpZigoJGtleSA9PSAkYWZmaWxpYXRlSWQpIHx8ICgka2V5ID09ICRzdWJBZmZpbGlhdGVJZCkpCgkJewoJCQkkYWZmVmFsdWUgPSAiIjsKCQkJCgkJCS8vIHRyeSBnZXR0aW4gYWZmaWxpYXRlIHZhbHVlIGZyb20gY29va2llcy4uLgoJCQlpZihpc3NldCgkX0NPT0tJRVtzZWxmOjokQ09PS0lFX1BSRUZJWC4ka2V5XSkpCgkJCXsKCQkJCSRhZmZWYWx1ZSA9ICRfQ09PS0lFW3NlbGY6OiRDT09LSUVfUFJFRklYLiRrZXldOwoJCQl9CgkJCQoJCQkvLyBpZiBhZmZpbGlhdGUgdmFsdWUgaXMgc3RpbGwgZW1wdHksIGNoZWNrIHRoZSBxdWVyeXN0cmluZwoJCQlpZigkYWZmVmFsdWUgPT0gIiIgJiYgaXNzZXQoJF9HRVRbJGtleV0pKQoJCQl7CgkJCQkkYWZmVmFsdWUgPSAkX0dFVFska2V5XTsKCQkJfQoJCQkKCQkJLy8gaWYgYWZmaWxpYXRlIHZhbHVlIGlzIHN0aWxsIGVtcHR5LCBjaGVjayB0aGUgYWxpYXNlcwoJCQlpZigkYWZmVmFsdWUgPT0gIiIpCgkJCXsKCQkJCSRhbGlhc2VzID0gKCRrZXkgPT0gJGFmZmlsaWF0ZUlkKSA/ICRhZmZpbGlhdGVBbGlhc2VzIDogJHN1YkFmZmlsaWF0ZUFsaWFzZXM7CgkJCQkKCQkJCWZvcmVhY2goJGFsaWFzZXMgYXMgJGFsaWFzKQoJCQkJewoJCQkJCWlmKGlzc2V0KCRfR0VUWyRhbGlhc10pKQoJCQkJCXsKCQkJCQkJJGFmZlZhbHVlID0gJF9HRVRbJGFsaWFzXTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJCgkJCXJldHVybiAkYWZmVmFsdWU7CgkJfQoJCWVsc2UgCgkJewoJCQkkY29va2llVmFsdWUgPSAiIjsKCQkJCgkJCWlmKGlzc2V0KCRfR0VUWyRrZXldKSkKCQkJewoJCQkJJGNvb2tpZVZhbHVlID0gJF9HRVRbJGtleV07CgkJCX0KCQkJZWxzZSBpZihpc3NldCgkX0NPT0tJRVtzZWxmOjokQ09PS0lFX1BSRUZJWC4ka2V5XSkpIAoJCQl7CgkJCQkkY29va2llVmFsdWUgPSAkX0NPT0tJRVtzZWxmOjokQ09PS0lFX1BSRUZJWC4ka2V5XTsKCQkJfQoJCQkKCQkJcmV0dXJuICRjb29raWVWYWx1ZTsKCQl9CgkJCgkJcmV0dXJuICIiOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEFmZmlsaWF0ZVZhbHVlKCkKCXsKCQlyZXR1cm4gc2VsZjo6Z2V0Q29va2llKE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0FGRklMSUFURSkpOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFN1YkFmZmlsaWF0ZVZhbHVlKCkKCXsKCQlyZXR1cm4gc2VsZjo6Z2V0Q29va2llKE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NVQl9BRkZJTElBVEUpKTsKCX0KfQo=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(105, 'reportvisualelement', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KY2xhc3MgTU1fUmVwb3J0VmlzdWFsRWxlbWVudAp7Cglwcm90ZWN0ZWQgJGNvbnRhaW5lciA9ICIiOwoJCgkvL2RhdGEgbW9kZWwKCXByb3RlY3RlZCAkbW9kZWw7CgkKCS8vcmVuZGVyaW5nIGRpcmVjdGl2ZXMKCXByb3RlY3RlZCAkZGlyZWN0aXZlczsKCQoJLy9hIHNoYXJlZCBwb29sIG9mIFJHQiBjb2xvciB2YWx1ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBjb2xvciBjb21wb25lbnRzIG9mIGltcGxlbWVudGluZyBncmFwaHMgKGllLCBiYXJzIGluIGJhciBjaGFydCwgbGluZXMgaW4gbGluZWNoYXJ0KTsKCXByb3RlY3RlZCAkY29sb3JQb29sID0gYXJyYXkoIiM2MjlBQzgiLCIjQjNDNjQxIiwiIzU5QjZCQSIsIiNENzM2NTciLCIjRUNEMTM3IiwiI0MxMjYzMiIsIiNEQTYxOTYiLCIjNDZDN0RBIiwKCQkJIiM3MEJGM0IiLCIjRDhDMjQ5IiwiIzU1NjI3MCIsIiM0RUNFQzQiLCIjQzdGNDY0IiwiI0ZGNkI2QiIsIiNDNDRENTgiLCIjRDE2NTVEIiwKCQkJIiM2MzdCQjYiLCIjMDAwMEZGIiwiI0ZGRkYwMCIsIiNGRjAwRkYiLCIjQzBDMEMwIiwiI0NDMDAzMyIpOwoJCgkKCS8qKgoJICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgY2xhc3MgcmVwcmVzZW50aW5nIHRoZSB2aXN1YWwgZWxlbWVudAoJICogCgkgKiBAcGFyYW0gc3RyaW5nICRjb250YWluZXIgVGhlIGlkIG9mIHRoZSBjb250YWluZXIgKHVzdWFsbHkgYSBkaXYpIHRoYXQgdGhlIGVsZW1lbnQgaXMgYmVpbmcgcmVuZGVyZWQgaW50bwoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGNvbnRhaW5lcj0iIiwgJGRpcmVjdGl2ZXM9IiIpCgl7CgkJaWYgKCFlbXB0eSgkY29udGFpbmVyKSkKCQl7CgkJCSR0aGlzLT5jb250YWluZXIgPSAkY29udGFpbmVyOwoJCX0KCiAgICAgICAgaWYgKCFlbXB0eSgkZGlyZWN0aXZlcykgJiYgaXNfYXJyYXkoJGRpcmVjdGl2ZXMpKQogICAgICAgIHsKICAgICAgICAgICAgJHRoaXMtPnNldERpcmVjdGl2ZXMoJGRpcmVjdGl2ZXMpOwogICAgICAgIH0KCX0KCQoJCgkvKioKCSAqIAoJICogQHBhcmFtICRtb2RlbCBUaGUgbW9kZWwgY2xhc3MgYXBwcm9wcmlhdGUgZm9yIHRoZSB2aXN1YWwgZWxlbWVudAoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0TW9kZWwoJG1vZGVsKQoJewoJCSR0aGlzLT5tb2RlbCA9ICRtb2RlbDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TW9kZWwoKQoJewoJCXJldHVybiAkdGhpcy0+bW9kZWw7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRKYXZhc2NyaXB0RGVwZW5kZW5jaWVzKCkKCXsKCQlyZXR1cm4gYXJyYXkoKTsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldENTU0RlcGVuZGVuY2llcygpCgl7CgkJcmV0dXJuIGFycmF5KCk7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoJGVsZW1lbnROYW1lKQoJewoJCS8vVE9ETzogRWxlbWVudG5hbWUgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIsIGJlY2F1c2UgaW4gPCA1LjIgdGhlcmUgaXMgbm8gd2F5IHRvIHJlZmVyZW5jZSB0aGUgZGVwZW5kZW5jeSBtZXRob2RzIGluIHRoZSBjYWxsZWQgY2xhc3MsIAoJCS8vd2hpY2ggd2lsbCBiZSBhIHN1YmNsYXNzIG9mIHRoaXMgb25lLiBXaGVuIHN1cHBvcnQgZm9yIFBIUCA1LjIgaXMgZHJvcHBlZCwgY2xlYW4gdGhpcyB1cCB1c2luZyBsYXRlIHN0YXRpYyBiaW5kaW5nCgkJCgkJJGNzc0RlcGVuZGVuY2llcyA9IGNhbGxfdXNlcl9mdW5jKGFycmF5KCRlbGVtZW50TmFtZSwiZ2V0Q1NTRGVwZW5kZW5jaWVzIikpOwoJCSRqc0RlcGVuZGVuY2llcyAgPSBjYWxsX3VzZXJfZnVuYyhhcnJheSgkZWxlbWVudE5hbWUsImdldEphdmFzY3JpcHREZXBlbmRlbmNpZXMiKSk7CgkJcmV0dXJuIGFycmF5KCJjc3MiPT4kY3NzRGVwZW5kZW5jaWVzLAoJCQkJCSAianMiID0+JGpzRGVwZW5kZW5jaWVzCgkJKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlcygpCgl7CgkJcmV0dXJuICR0aGlzLT5kaXJlY3RpdmVzOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXREaXJlY3RpdmVzKCRkaXJlY3RpdmVzKQoJewoJCSR0aGlzLT5kaXJlY3RpdmVzID0gJGRpcmVjdGl2ZXM7Cgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldENvbG9yRm9yUG9zaXRpb24oJHBvc2l0aW9uKQoJewoJCSRwb3NpdGlvbiA9IGludHZhbCgkcG9zaXRpb24pOwoJCWlmICghaXNzZXQoJHRoaXMtPmNvbG9yUG9vbFskcG9zaXRpb25dKSkKCQl7CgkJCSRwb3NpdGlvbiA9IHJhbmQoMCxjb3VudCgkdGhpcy0+Y29sb3JQb29sKS0xKTsKCQl9CgkKCQlyZXR1cm4gJHRoaXMtPmNvbG9yUG9vbFskcG9zaXRpb25dOwoJfQoJCn0=', 0, '2018-11-21 06:38:54'),
(106, 'orderrequest', 'LyoqCiAqIAogKiAKICogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIAogKiBNTV9PcmRlclJlcXVlc3QgaXMgcmVzcG9uc2libGUgZm9yIHByb2Nlc3NpbmcgcmVxdWVzdCBkYXRhLCBzdWJtaXR0aW5nIGEgcmVxdWVzdCBhbmQgaGFuZGxpbmcKICogdGhlIHJlc3VsdC4gQSBzdWJjbGFzcyBpcyBjcmVhdGVkIGZvciBlYWNoIG1ldGhvZCB0aGF0IGNhbiBiZSB1c2VkIGZvciBjcmVhdGluZyBvcmRlciAKICogcmVxdWVzdHMuIEZvciBleGFtcGxlLCByZXF1ZXN0cyBjYW4gY29tZSBmcm9tIGEgY2hlY2tvdXQgZm9ybSwgYSBmcmVlIG1lbWJlciB3ZWJmb3JtLCBhbiBBUEkgCiAqIGNhbGwsIGV0Yy4KICovCgpjbGFzcyBNTV9PcmRlclJlcXVlc3QKewoJcHJvdGVjdGVkICRyZXF1ZXN0RGF0YSA9IGFycmF5KCk7Cglwcm90ZWN0ZWQgJGlzQXBpUmVxdWVzdCA9IGZhbHNlOwoJcHJvdGVjdGVkICRzdGF0ZTsKCQoJCgkvKioKCSAqIFN0b3JlcyB0aGUgcmVxdWVzdCBkYXRhIGFuZCBtYWtlcyBhIGNhbGwgdG8gcHJvY2Vzc1JlcXVlc3QgdG8gcHJvY2VzcyB0aGUgZGF0YQoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHJlcXVlc3REYXRhIGRhdGEgZnJvbSB0aGUgc291cmNlIG9mIHRoZSBvcmRlciByZXF1ZXN0CgkgKiBAcGFyYW0gYm9vbGVhbiAkaXNBcGlSZXF1ZXN0IGluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYW4gQVBJIHJlcXVlc3QgCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcmVxdWVzdERhdGEsICRpc0FwaVJlcXVlc3Q9ZmFsc2UpCgl7CgkJJHRoaXMtPnJlcXVlc3REYXRhID0gJHJlcXVlc3REYXRhOwoJCSR0aGlzLT5zdGF0ZSA9IG5ldyBNTV9SZXNwb25zZSgpOwoJCSR0aGlzLT5pc0FwaVJlcXVlc3QgPSAkaXNBcGlSZXF1ZXN0OwoJCQoJCSR0aGlzLT5wcm9jZXNzUmVxdWVzdCgpOwoJfQoJCgkKCS8qKgoJICogVGhpcyBtZXRob2QgdW5kZXJzdGFuZHMgaG93IHRvIHByb2Nlc3MgdGhlIGRhdGEgZnJvbSBhIHNwZWNpZmljIHNvdXJjZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHByb2Nlc3NSZXF1ZXN0KCkgeyB9CgkKCQoJLyoqCgkgKiBUaGlzIG1ldGhvZCB1bmRlcnN0YW5kcyB3aGF0IGFjdGlvbnMgdG8gdGFrZSB0byBzdWJtaXQgdGhlIHJlcXVlc3QuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzdWJtaXRSZXF1ZXN0KCkgeyB9CgkKCQoJLyoqCgkgKiBUaGlzIG1ldGhvZCB1bmRlcnN0YW5kcyBob3cgdG8gaGFuZGxlIHN1Y2Nlc3MgYW5kIGVycm9yIGNvbmRpdGlvbnMgdGhhdCBjYW4KCSAqIG9jY3VyIHdoaWxlIHByb2Nlc3Npbmcgb3Igc3VibWl0dGluZyB0aGUgcmVxdWVzdC4KCSAqIAoJICogQHBhcmFtICRyZXN1bHQgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlc3VsdCBvZiB0aGUgc3VibWl0dGVkIHJlcXVlc3QKCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIGhhbmRsZVJlc3VsdCgkcmVzdWx0KSB7IH0KCQp9Cg==', 0, '2018-11-21 06:38:54'),
(107, 'myaccountview', '', 0, '2018-11-21 06:38:54'),
(108, 'action', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQWN0aW9uIGV4dGVuZHMgTU1fRW50aXR5CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0FDVElPTl9OT1RJRllfWkFQSUVSID0gImFjdGlvbl9ub3RpZnlfemFwaWVyIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0FDVElPTl9DQUxMX1NDUklQVCA9ICJhY3Rpb25fY2FsbF9zY3JpcHQiOwoJcHVibGljIHN0YXRpYyAkTU1fQUNUSU9OX1NFTkRfRU1BSUwgPSAiYWN0aW9uX3NlbmRfZW1haWwiOwoJCglwdWJsaWMgc3RhdGljICRDVVJSRU5UX01FTUJFUl9QTEFDRUhPTERFUiA9ICItMSI7CgkKCXByaXZhdGUgJGV2ZW50VHlwZSA9ICIiOwoJcHJpdmF0ZSAkYWN0aW9uVHlwZSA9ICIiOwoJcHJpdmF0ZSAkYWN0aW9uVmFsdWUgPSBhcnJheSgpOwoJcHJpdmF0ZSAkZXZlbnRBdHRyaWJ1dGVzID0gYXJyYXkoKTsKCXByaXZhdGUgJHN0YXR1cyA9ICIxIjsKCQoJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoKSAKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfQUNUSU9OUy4iIFdIRVJFIGlkPSciLiR0aGlzLT5pZC4iJzsiOwoJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkKCQlpZigkcmVzdWx0KSB7CgkJCSR0aGlzLT5zZXREYXRhKCRyZXN1bHQpOwoJCX0KCQllbHNlIHsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRkYXRhKQoJewoJCXRyeSAKCQl7CgkJCSR0aGlzLT5ldmVudFR5cGUgPSAkZGF0YS0+ZXZlbnRfdHlwZTsKCQkJJHRoaXMtPmFjdGlvblR5cGUgPSAkZGF0YS0+YWN0aW9uX3R5cGU7CgkJCSR0aGlzLT5hY3Rpb25WYWx1ZSA9IHVuc2VyaWFsaXplKCRkYXRhLT5hY3Rpb25fdmFsdWUpOwoJCQkkdGhpcy0+ZXZlbnRBdHRyaWJ1dGVzID0gdW5zZXJpYWxpemUoJGRhdGEtPmV2ZW50X2F0dHJpYnV0ZXMpOwoJCQkkdGhpcy0+c3RhdHVzID0gJGRhdGEtPnN0YXR1czsKCQkJcGFyZW50Ojp2YWxpZGF0ZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkgCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBjb21taXREYXRhKCkKCXsJCgkJZ2xvYmFsICR3cGRiOwoJCWlmKGludHZhbCgkdGhpcy0+aWQpID4gMCkKCQl7CgkJCSRzcWwgPSAiVVBEQVRFICIuTU1fVEFCTEVfQUNUSU9OUy4iIFNFVCBldmVudF90eXBlPSclcycsIGFjdGlvbl90eXBlPSclcycsIGFjdGlvbl92YWx1ZT0nJXMnLCBldmVudF9hdHRyaWJ1dGVzPSclcycsIHN0YXR1cz0nJXMnIFdIRVJFIGlkPSd7JHRoaXMtPmlkfSc7IjsKCQkJJHByZXBhcmVkU3FsID0gJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmV2ZW50VHlwZSwgJHRoaXMtPmFjdGlvblR5cGUsIHNlcmlhbGl6ZSgkdGhpcy0+YWN0aW9uVmFsdWUpLCBzZXJpYWxpemUoJHRoaXMtPmV2ZW50QXR0cmlidXRlcyksICR0aGlzLT5zdGF0dXMpOwoJCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCRwcmVwYXJlZFNxbCk7CgkJCQoJCQlpZigkcmVzdWx0ID09PSBmYWxzZSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHNhdmUgcHVzaCBub3RpZmljYXRpb24iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsJCgkJCSRzcWwgPSAiSU5TRVJUIElOVE8gIi5NTV9UQUJMRV9BQ1RJT05TLiIgU0VUIGV2ZW50X3R5cGU9JyVzJywgYWN0aW9uX3R5cGU9JyVzJywgYWN0aW9uX3ZhbHVlPSclcycsIGV2ZW50X2F0dHJpYnV0ZXM9JyVzJywgc3RhdHVzPSclcyc7IjsKCQkJJHByZXBhcmVkU3FsID0gJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmV2ZW50VHlwZSwgJHRoaXMtPmFjdGlvblR5cGUsIHNlcmlhbGl6ZSgkdGhpcy0+YWN0aW9uVmFsdWUpLCBzZXJpYWxpemUoJHRoaXMtPmV2ZW50QXR0cmlidXRlcyksICR0aGlzLT5zdGF0dXMpOwoJCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCRwcmVwYXJlZFNxbCk7CgkJCQoJCQlpZigkcmVzdWx0ID09PSBmYWxzZSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGNyZWF0ZSBwdXNoIG5vdGlmaWNhdGlvbiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRlbGV0ZSgpCgl7CQoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfQUNUSU9OUy4iIFdIRVJFIGlkPSclZCcgTElNSVQgMSI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+cXVlcnkoJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmlkKSk7CgkJCgkJaWYoJHJlc3VsdHMpIAoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJCX0KCQkKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gZGVsZXRlIGFjdGlvbiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0RXZlbnRUeXBlKCR0eXBlKQoJewoJCSR0aGlzLT5ldmVudFR5cGUgPSAkdHlwZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEV2ZW50VHlwZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5ldmVudFR5cGU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRBY3Rpb25UeXBlKCR0eXBlKQoJewoJCSR0aGlzLT5hY3Rpb25UeXBlID0gJHR5cGU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRBY3Rpb25UeXBlKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmFjdGlvblR5cGU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRBY3Rpb25WYWx1ZSgkdmFsdWUpCgl7CgkJJHRoaXMtPmFjdGlvblZhbHVlID0gJHZhbHVlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWN0aW9uVmFsdWUoKQoJewoJCXJldHVybiAkdGhpcy0+YWN0aW9uVmFsdWU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRFdmVudEF0dHJpYnV0ZXMoJHZhbHVlKQoJewoJCSR0aGlzLT5ldmVudEF0dHJpYnV0ZXMgPSAkdmFsdWU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRFdmVudEF0dHJpYnV0ZXMoKQoJewoJCXJldHVybiAkdGhpcy0+ZXZlbnRBdHRyaWJ1dGVzOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U3RhdHVzKCR2YWx1ZSkKCXsKCQkkdGhpcy0+c3RhdHVzID0gJHZhbHVlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0U3RhdHVzKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnN0YXR1czsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGlzQWN0aXZlKCkKCXsKCQlyZXR1cm4gKGludHZhbCgkdGhpcy0+c3RhdHVzKSA9PSAxKSA/IHRydWUgOiBmYWxzZTsKCX0KCQoJCgkvKiogVVRJTElUSUVTICoqLwoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGZpbmRBY3Rpb25zQnlFdmVudFR5cGUoJGV2ZW50VHlwZSkKCXsKCQkkYWN0aW9ucyA9IGFycmF5KCk7CgkJCgkJZ2xvYmFsICR3cGRiOwoJCSRzcWwgPSAiU0VMRUNUICogRlJPTSAiLk1NX1RBQkxFX0FDVElPTlMuIiBXSEVSRSBldmVudF90eXBlPSd7JGV2ZW50VHlwZX0nOyI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCgkJaWYoJHJlc3VsdHMpIAoJCXsKCQkJZm9yZWFjaCgkcmVzdWx0cyBhcyAkcmVzdWx0KQoJCQl7CgkJCQkkYWN0aW9uID0gbmV3IE1NX0FjdGlvbigpOwoJCQkJJGFjdGlvbi0+c2V0RGF0YSgkcmVzdWx0KTsKCQkJCWFycmF5X3B1c2goJGFjdGlvbnMsICRhY3Rpb24pOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkYWN0aW9uczsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBldmVudEFzc2lnbmVkKCRldmVudFR5cGUsICRhY3Rpb25UeXBlKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkkc3FsID0gIlNFTEVDVCBjb3VudCgqKSBhcyB0b3RhbCBGUk9NICIuTU1fVEFCTEVfQUNUSU9OUy4iIFdIRVJFIGV2ZW50X3R5cGUgPSAneyRldmVudFR5cGV9JyBBTkQgYWN0aW9uX3R5cGUgPSAneyRhY3Rpb25UeXBlfSc7IjsKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkKCQlpZihpc19vYmplY3QoJHJlc3VsdCkpCgkJewoJCQlyZXR1cm4gKCRyZXN1bHQtPnRvdGFsID4gMCk7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwcmVwYXJlU2VuZEVtYWlsVmFsdWUoJGVtYWlsVG9JZCwgJGVtYWlsRnJvbUlkLCAkZW1haWxDQywgJGVtYWlsU3ViamVjdCwgJGVtYWlsQm9keSkKCXsKCQkkdmFsdWUgPSBhcnJheSgpOwoJCSR2YWx1ZVsiZW1haWxUb0lkIl0gPSAkZW1haWxUb0lkOwoJCSR2YWx1ZVsiZW1haWxGcm9tSWQiXSA9ICRlbWFpbEZyb21JZDsKCQkkdmFsdWVbImVtYWlsQ0MiXSA9ICRlbWFpbENDOwoJCSR2YWx1ZVsiZW1haWxTdWJqZWN0Il0gPSAkZW1haWxTdWJqZWN0OwoJCSR2YWx1ZVsiZW1haWxCb2R5Il0gPSAkZW1haWxCb2R5OwoJCXJldHVybiAkdmFsdWU7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcHJlcGFyZU5vdGlmeVphcGllclZhbHVlKCRtYWlsYm94LCAkZW1haWxGcm9tSWQsICRhZGRpdGlvbmFsSW5mbykKCXsKCQkkdmFsdWUgPSBhcnJheSgpOwoJCSR2YWx1ZVsiemFwaWVyTWFpbGJveCJdID0gJG1haWxib3g7CgkJJHZhbHVlWyJlbWFpbEZyb21JZCJdID0gJGVtYWlsRnJvbUlkOwoJCSR2YWx1ZVsiemFwaWVyQWRkaXRpb25hbEluZm8iXSA9ICRhZGRpdGlvbmFsSW5mbzsKCQlyZXR1cm4gJHZhbHVlOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHByZXBhcmVDYWxsU2NyaXB0VmFsdWUoJHNjcmlwdFVybCkKCXsKCQkkdmFsdWUgPSBhcnJheSgpOwoJCSR2YWx1ZVsic2NyaXB0VXJsIl0gPSAkc2NyaXB0VXJsOwoJCXJldHVybiAkdmFsdWU7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0QWN0aW9uTmFtZSgkdHlwZSkKCXsKCQlzd2l0Y2goJHR5cGUpCgkJewoJCQljYXNlIE1NX0FjdGlvbjo6JE1NX0FDVElPTl9TRU5EX0VNQUlMOgoJCQkJcmV0dXJuICJTZW5kIGFuIEVtYWlsIjsKCQkJCQoJCQljYXNlIE1NX0FjdGlvbjo6JE1NX0FDVElPTl9OT1RJRllfWkFQSUVSOgoJCQkJcmV0dXJuICJOb3RpZnkgWmFwaWVyIjsKCQkJCQoJCQljYXNlIE1NX0FjdGlvbjo6JE1NX0FDVElPTl9DQUxMX1NDUklQVDoKCQkJCXJldHVybiAiQ2FsbCBhIEN1c3RvbSBTY3JpcHQiOwoJCX0KCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRBY3Rpb25zTGlzdCgpCgl7CgkJJGxpc3QgPSBhcnJheSgpOwoJCSRsaXN0W01NX0FjdGlvbjo6JE1NX0FDVElPTl9TRU5EX0VNQUlMXSA9IHNlbGY6OmdldEFjdGlvbk5hbWUoTU1fQWN0aW9uOjokTU1fQUNUSU9OX1NFTkRfRU1BSUwpOwoJCSRsaXN0W01NX0FjdGlvbjo6JE1NX0FDVElPTl9OT1RJRllfWkFQSUVSXSA9IHNlbGY6OmdldEFjdGlvbk5hbWUoTU1fQWN0aW9uOjokTU1fQUNUSU9OX05PVElGWV9aQVBJRVIpOwoJCSRsaXN0W01NX0FjdGlvbjo6JE1NX0FDVElPTl9DQUxMX1NDUklQVF0gPSBzZWxmOjpnZXRBY3Rpb25OYW1lKE1NX0FjdGlvbjo6JE1NX0FDVElPTl9DQUxMX1NDUklQVCk7CgkJcmV0dXJuICRsaXN0OwoJfQp9', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(109, 'clickbankservice', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(110, 'tagprocessor', 'Y2xhc3MgTU1fVGFnUHJvY2Vzc29yCnsKCXByaXZhdGUgc3RhdGljICRpc1Byb2Nlc3NpbmcgPSBmYWxzZTsKCXByaXZhdGUgc3RhdGljICRzdG9yZWRTaG9ydGNvZGVzID0gYXJyYXkoKTsKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwcm9jZXNzU21hcnRUYWdzKCRjb250ZW50KQoJewoJCWdsb2JhbCAkc2hvcnRjb2RlX3RhZ3M7CgkJCgkJaWYgKHN0cnBvcygkY29udGVudCwnWycpID09PSBmYWxzZSkgCgkJewoJCQlyZXR1cm4gJGNvbnRlbnQ7CgkJfQoJCgkJJHNtYXJ0VGFnUmVnZXggPSBNTV9TbWFydFRhZ1V0aWw6OmdldFNtYXJ0VGFnc1JlZ2V4KCk7CgkJaWYgKGVtcHR5KCRzbWFydFRhZ1JlZ2V4KSkKCQl7CgkJCXJldHVybiAkY29udGVudDsKCQl9CgkKCQkkcGF0dGVybiA9ICIvXFxbKCRzbWFydFRhZ1JlZ2V4KS9zIjsKCQoJCWlmIChwcmVnX21hdGNoKCRwYXR0ZXJuLCRjb250ZW50KSAhPT0gMSkgCgkJewoJCQkvL3dlIHdhbnQgdG8gc2NvcGUgb3VyIHByb2Nlc3NpbmcgdG8gY29udGVudCBjb250YWluaW5nIE1lbWJlck1vdXNlIFNtYXJ0VGFncwoJCQlyZXR1cm4gJGNvbnRlbnQ7CgkJfQoJCQoJCSRzaG91bGRSZXN0b3JlU2hvcnRjb2RlcyA9IGZhbHNlOwoJCWlmICghc2VsZjo6JGlzUHJvY2Vzc2luZykKCQl7CgkJCS8vVGVtcG9yYXJpbHkgcmVtb3ZlIGFsbCBub24tU21hcnRUYWcgc2hvcnRjb2RlcyBmcm9tIHRoZSBnbG9iYWwgYXJyYXkuIFRoaXMgYWxsb3dzIHVzIHRvIHJlY3Vyc2l2ZWx5IGNhbGwgdGhlIAoJCQkvL3dvcmRwcmVzcyBzaG9ydGNvZGUgcHJvY2Vzc2luZyBmdW5jdGlvbnMgYW5kIG9ubHkgcHJvY2VzcyBNZW1iZXJNb3VzZSBTbWFydFRhZ3MKCQkJc2VsZjo6JHN0b3JlZFNob3J0Y29kZXMgPSAkc2hvcnRjb2RlX3RhZ3M7CgkJCSRzbWFydFRhZ05hbWVQYXR0ZXJuID0gIi8oeyRzbWFydFRhZ1JlZ2V4fSkvcyI7CgkJCQoJCQkkdmFsaWRLZXlzID0gYXJyYXlfZmlsdGVyKGFycmF5X2tleXMoJHNob3J0Y29kZV90YWdzKSwgZnVuY3Rpb24oJGspIHVzZSAoJHNtYXJ0VGFnTmFtZVBhdHRlcm4pIHsKCQkJCXJldHVybiAocHJlZ19tYXRjaCgkc21hcnRUYWdOYW1lUGF0dGVybiwkaykgPT09IDEpOwoJCQl9KTsKCQkJCgkJCSRzaG9ydGNvZGVfdGFncyA9IGFycmF5X2ludGVyc2VjdF9rZXkoJHNob3J0Y29kZV90YWdzLCBhcnJheV9mbGlwKCR2YWxpZEtleXMpKTsKCQkJc2VsZjo6JGlzUHJvY2Vzc2luZyA9IHRydWU7CgkJCSRzaG91bGRSZXN0b3JlU2hvcnRjb2RlcyA9IHRydWU7CgkJfQoJCQoJCQoJCS8vUHJvY2VzcyBzaG9ydGNvZGVzIGluIHRoZSBjb250ZW50IGJsb2NrCgkJJHBhdHRlcm4gPSBnZXRfc2hvcnRjb2RlX3JlZ2V4KCk7CgkJJGNvbnRlbnQgPSBwcmVnX3JlcGxhY2VfY2FsbGJhY2soICIveyRwYXR0ZXJufS9zIiwgJ2RvX3Nob3J0Y29kZV90YWcnLCAkY29udGVudCApOwoJCQoJCWlmICgkc2hvdWxkUmVzdG9yZVNob3J0Y29kZXMpCgkJewoJCQkkc2hvcnRjb2RlX3RhZ3MgPSBzZWxmOjokc3RvcmVkU2hvcnRjb2RlczsKCQkJc2VsZjo6JHN0b3JlZFNob3J0Y29kZXMgPSBhcnJheSgpOwoJCQlzZWxmOjokaXNQcm9jZXNzaW5nID0gZmFsc2U7CgkJfQoJCQoJCXJldHVybiAkY29udGVudDsKCX0KfQ==', 0, '2018-11-21 06:38:54'),
(111, 'emailserviceproviderfactory', 'LyoqCiAqIAogKiBUaGUgRW1haWwgU2VydmljZSBQcm92aWRlciBGYWN0b3J5IGRvZXMgdGhlIHdvcmsgb2YgcmV0cmlldmluZyBhbmQgY29uZmlndXJpbmcgYW4gRW1haWwgU2VydmljZSBQcm92aWRlciBpbXBsZW1lbnRhdGlvbgogKgogKi8KY2xhc3MgTU1fRW1haWxTZXJ2aWNlUHJvdmlkZXJGYWN0b3J5IHsKCQoJLyoqCgkgKiBSZXR1cm5zIHRoZSBhY3RpdmUgRW1haWwgU2VydmljZSBQcm92aWRlcgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEFjdGl2ZVByb3ZpZGVyKCkgewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcHJvdmlkZXJfaW5mbyA9ICR3cGRiLT5nZXRfcm93KCJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfRU1BSUxfU0VSVklDRV9QUk9WSURFUlMuIiB3aGVyZSBhY3RpdmU9JzEnIGxpbWl0IDEiKTsKCQlpZiAoIWVtcHR5KCRwcm92aWRlcl9pbmZvLT5wYXNzd29yZCkpCgkJewoJCQkkcHJvdmlkZXJfaW5mby0+cGFzc3dvcmQgPSBNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OmRlY3J5cHRQYXNzd29yZCgkcHJvdmlkZXJfaW5mby0+cGFzc3dvcmQpOwoJCX0KCQlyZXR1cm4gc2VsZjo6X2dldFByb3ZpZGVyKCRwcm92aWRlcl9pbmZvKTsKCX0KCQoJLyoqCgkgKiBSZXR1cm5zIGEgc3BlY2lmaWMgRW1haWwgU2VydmljZSBQcm92aWRlciwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGl0IGlzIHRoZSBhY3RpdmUgcHJvdmlkZXIgb3Igbm90CgkgKiBAcGFyYW0gU3RyaW5nICRwcm92aWRlcl90b2tlbiBUaGUgcHJvdmlkZXIgdG9rZW4gaWRlbnRpZnlpbmcgdGhlIHByb3ZpZGVyIGluIHRoZSBkYXRhYmFzZQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFByb3ZpZGVyKCRwcm92aWRlcl90b2tlbikgewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcHJvdmlkZXJfaW5mbyA9ICR3cGRiLT5nZXRfcm93KCR3cGRiLT5wcmVwYXJlKCJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfRU1BSUxfU0VSVklDRV9QUk9WSURFUlMuIiB3aGVyZSBwcm92aWRlcl90b2tlbj0lcyIsJHByb3ZpZGVyX3Rva2VuKSk7CgkJaWYgKCFlbXB0eSgkcHJvdmlkZXJfaW5mby0+cGFzc3dvcmQpKQoJCXsKCQkJJHByb3ZpZGVyX2luZm8tPnBhc3N3b3JkID0gTU1fTWVtYmVyTW91c2VTZXJ2aWNlOjpkZWNyeXB0UGFzc3dvcmQoJHByb3ZpZGVyX2luZm8tPnBhc3N3b3JkKTsKCQl9CgkJcmV0dXJuIHNlbGY6Ol9nZXRQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7Cgl9CgkKCS8qKgoJICogR2V0cyB0aGUgcHJvdmlkZXIgdGhlIG1lbWJlciBpcyBzdWJzY3JpYmVkIHRvLCB0aGUgYWN0aXZlIHByb3ZpZGVyIGlmIG5vbmUKCSAqIEBwYXJhbSBtZW1iZXIgZW1haWwgdG8gZ2V0IHRoZSBwcm92aWRlciBmb3IKCSAqIAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFByb3ZpZGVyRm9yTWVtYmVyKCRtZW1iZXJfZW1haWwpCgl7CgkJJG1lbWJlciA9IE1NX1VzZXI6OmZpbmRCeUVtYWlsKCRtZW1iZXJfZW1haWwpOwoJCQoJCWlmICgkbWVtYmVyLT5pc1ZhbGlkKCkpCgkJewoJCQkkcHJvdmlkZXJfZW50aXR5ID0gbmV3IE1NX0VtYWlsU2VydmljZVByb3ZpZGVyKCk7CgkJCSRwcm92aWRlcl9lbnRpdHktPnNldElkKCRtZW1iZXItPmdldFN1YnNjcmliZWRQcm92aWRlcklkKCkpOwoJCQkkcHJvdmlkZXJfZW50aXR5LT5nZXREYXRhKCk7CgkJCWlmICgkcHJvdmlkZXJfZW50aXR5LT5pc1ZhbGlkKCkpCgkJCXsKCQkJCXJldHVybiBzZWxmOjpnZXRQcm92aWRlcigkcHJvdmlkZXJfZW50aXR5LT5nZXRUb2tlbigpKTsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gc2VsZjo6Z2V0QWN0aXZlUHJvdmlkZXIoKTsKCX0KCQoJLyoqCgkgKiBHZXRzIHRoZSBwcm92aWRlciB0aGUgbWVtYmVyIGlzIHN1YnNjcmliZWQgdG8gZm9yIGEgcGFydGljdWxhciBidW5kbGUsIHRoZSBhY3RpdmUgcHJvdmlkZXIgaWYgbm9uZQoJICogCgkgKiBAcGFyYW0gJG1lbWJlcl9lbWFpbCB0aGUgbWVtYmVyIGVtYWlsIHRvIGdldCB0aGUgcHJvdmlkZXIgZm9yCgkgKiBAcGFyYW0gJGJ1bmRsZUlkIHRoZSBJRCBvZiB0aGUgYnVuZGxlIHRvIGdldCB0aGUgcHJvdmlkZXIgZm9yCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0UHJvdmlkZXJGb3JCdW5kbGUoJG1lbWJlcl9lbWFpbCwgJGJ1bmRsZUlkKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkbWVtYmVyID0gTU1fVXNlcjo6ZmluZEJ5RW1haWwoJG1lbWJlcl9lbWFpbCk7CgkJCgkJaWYgKCRtZW1iZXItPmlzVmFsaWQoKSkKCQl7CgkJCSRzcWwgPSAiU0VMRUNUIHN1YnNjcmliZWRfcHJvdmlkZXJfaWQgRlJPTSAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUy4iIFdIRVJFIGFjY2Vzc190eXBlPSciLk1NX0FwcGxpZWRCdW5kbGU6OiRBQ0NFU1NfVFlQRV9VU0VSLiInICI7CgkJCSRzcWwgLj0gIiBBTkQgYWNjZXNzX3R5cGVfaWQgPSAneyRtZW1iZXItPmdldElkKCl9JyBBTkQgYnVuZGxlX2lkID0gJ3skYnVuZGxlSWR9JyBMSU1JVCAxOyI7CgkJCSRhcHBsaWVkQnVuZGxlID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCQoJCQlpZigkYXBwbGllZEJ1bmRsZSAmJiBpc3NldCgkYXBwbGllZEJ1bmRsZS0+c3Vic2NyaWJlZF9wcm92aWRlcl9pZCkpCgkJCXsKCQkJCSRwcm92aWRlcl9lbnRpdHkgPSBuZXcgTU1fRW1haWxTZXJ2aWNlUHJvdmlkZXIoKTsKCQkJCSRwcm92aWRlcl9lbnRpdHktPnNldElkKCRhcHBsaWVkQnVuZGxlLT5zdWJzY3JpYmVkX3Byb3ZpZGVyX2lkKTsKCQkJCSRwcm92aWRlcl9lbnRpdHktPmdldERhdGEoKTsKCQkJCWlmICgkcHJvdmlkZXJfZW50aXR5LT5pc1ZhbGlkKCkpCgkJCQl7CgkJCQkJcmV0dXJuIHNlbGY6OmdldFByb3ZpZGVyKCRwcm92aWRlcl9lbnRpdHktPmdldFRva2VuKCkpOwoJCQkJfQoJCQl9CgkJfQoJCQoJCXJldHVybiBzZWxmOjpnZXRBY3RpdmVQcm92aWRlcigpOwoJfQoJCgkvKioKCSAqIAoJICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgY2xhc3MgdG8gdXNlIGFuZCB0byBpbnN0YW50aWF0ZSwgaW5pdGlhbGl6ZSwgYW5kIHJldHVybiBpdAoJICogQHBhcmFtIFN0cmluZyAkcHJvdmlkZXJfaW5mbyAKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX2dldFByb3ZpZGVyKCRwcm92aWRlcl9pbmZvKSB7CgkJJHByb3ZpZGVyX3Rva2VuID0gJHByb3ZpZGVyX2luZm8tPnByb3ZpZGVyX3Rva2VuOwoJCXN3aXRjaCgkcHJvdmlkZXJfdG9rZW4pIAoJCXsKCQkJY2FzZSAibWFpbGNoaW1wIjoKCQkJCXJldHVybiBuZXcgTU1fTWFpbENoaW1wRW1haWxTZXJ2aWNlUHJvdmlkZXIoJHByb3ZpZGVyX2luZm8pOwoJCQljYXNlICJpY29udGFjdCI6CgkJCQlyZXR1cm4gbmV3IE1NX0lDb250YWN0RW1haWxTZXJ2aWNlUHJvdmlkZXIoJHByb3ZpZGVyX2luZm8pOwoJCQljYXNlICJhd2ViZXIiOgoJCQkJcmV0dXJuIG5ldyBNTV9BV2ViZXJFbWFpbFNlcnZpY2VQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7CgkJCWNhc2UgImdldHJlc3BvbnNlIjoKCQkJCXJldHVybiBuZXcgTU1fR2V0UmVzcG9uc2VFbWFpbFNlcnZpY2VQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7CgkJCWNhc2UgImFjdGl2ZWNhbXBhaWduIjoKCQkJCXJldHVybiBuZXcgTU1fQWN0aXZlQ2FtcGFpZ25FbWFpbFNlcnZpY2VQcm92aWRlcigkcHJvdmlkZXJfaW5mbyk7CgkJCWNhc2UgImRlZmF1bHQiOgoJCQkJcmV0dXJuIG5ldyBNTV9EZWZhdWx0RW1haWxTZXJ2aWNlUHJvdmlkZXIoJHByb3ZpZGVyX2luZm8pOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIG51bGw7CgkJCQkKCQl9Cgl9IAoJCn0KCg==', 0, '2018-11-21 06:38:54'),
(112, 'resetpasswordformview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1Jlc2V0UGFzc3dvcmRGb3JtVmlldyBleHRlbmRzIE1NX1ZpZXcKewkKICBwdWJsaWMgc3RhdGljICRNTV9OT05DRV9BQ1RJT05fUkVTRVRfUEFTU1dPUkRfRk9STSAJPSAibW0tcmVzZXQtcGFzc3dvcmQiOwogIHB1YmxpYyBzdGF0aWMgJE1NX05PTkNFX05BTUVfUkVTRVRfUEFTU1dPUkRfRk9STSAgIAk9ICJtbS1zZWN1cml0eSI7CiAgcHVibGljIHN0YXRpYyAkTU1fUEFSQU1fS0VZX0tFWSAgIAkJCQkJCT0gImsiOwogIHB1YmxpYyBzdGF0aWMgJE1NX1BBUkFNX0tFWV9FTUFJTCAgIAkJCQkJCT0gImUiOwoKICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogIHsKICAJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwogIH0KICAKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fUkVTRVRfUEFTU1dPUkQ6CgkJCQkJcmV0dXJuICR0aGlzLT5yZXNldFBhc3N3b3JkKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlc2V0UGFzc3dvcmQoJHBvc3QpCgl7CQoJCSRNTV9SZXNwb25zZSA9ICIiOwoJCQogIAkJdHJ5CiAgCQl7CiAgICAJCSRyZXN1bHQgPSBNTV9SZXNldFBhc3N3b3JkRm9ybTo6Y2hlY2tJbnB1dCgpOwoJCQoJCQlpZigkcmVzdWx0WydzdWNjZXNzJ10gPT09IGZhbHNlKQoJCQl7CgkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCRyZXN1bHRbJ21lc3NhZ2UnXSk7CgkJCX0KCQkJCgkJCSRtZW1iZXIgCQkgPSAkcmVzdWx0WydtZW1iZXInXTsKCSAgICAgICRwd2QgICAgICAgICA9IHRyaW0oJHBvc3RbJ3B3ZCddKTsKCSAgICAgICRwd2RfY29uZmlybSA9IHRyaW0oJHBvc3RbJ3B3ZF9jb25maXJtJ10pOwogICAgICAKCSAgICAgIGlmKCgkcHdkID09ICRwd2RfY29uZmlybSkgPT09IGZhbHNlKQoJICAgICAgewoJICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJQYXNzd29yZHMgbXVzdCBtYXRjaCwgcGxlYXNlIHRyeSBhZ2Fpbi4uLiIpOwoJICAgICAgfQogICAgICAKCSAgICAgIGlmKHN0cmxlbigkcHdkKSA8IDgpCgkgICAgICB7CgkgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcsIHBsZWFzZSB0cnkgYWdhaW4uLi4iKTsKCSAgICAgIH0KCQkJCgkgICAgICAkbWVtYmVyLT5zZXRQYXNzd29yZCgkcHdkKTsKCSAgICAgICRtZW1iZXItPnNldEZvcmdvdFBhc3N3b3JkSGFzaCgiIik7CgkgICAgICAkbWVtYmVyLT5jb21taXREYXRhKCk7CiAgICAgIAoJICAgICAgTU1fU2Vzc2lvbjo6Y2xlYXIoTU1fU2Vzc2lvbjo6JEtFWV9MQVNUX1VTRVJfSUQpOwoJICAgICAgTU1fTWVzc2FnZXM6OmFkZE1lc3NhZ2UoIlBhc3N3b3JkIGhhcyBzdWNjZXNzZnVsbHkgYmVlbiByZXNldCwgeW91IG1heSBub3cgbG9naW4gd2l0aCB5b3VyIG5ldyBwYXNzd29yZCIpOwogICAgICAKCSAgICAgICRNTV9SZXNwb25zZSA9IG5ldyBNTV9SZXNwb25zZSgpOwoJICAgICAgJE1NX1Jlc3BvbnNlLT5kYXRhWydyZWRpcmVjdF90byddID0gTU1fQ29yZVBhZ2VFbmdpbmU6OmdldFVybChNTV9Db3JlUGFnZVR5cGU6OiRMT0dJTl9QQUdFKTsKICAJCX0KICAJCWNhdGNoKEV4Y2VwdGlvbiAkZSkKICAJCXsKCQkJJE1NX1Jlc3BvbnNlID0gbmV3IE1NX1Jlc3BvbnNlKCRlLT5nZXRNZXNzYWdlKCksIE1NX1Jlc3BvbnNlOjokRVJST1IpOwogIAkJfQoJCQoJCXJldHVybiAkTU1fUmVzcG9uc2U7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGNhbkNhbGxNZXRob2QoJHJlcXVlc3QpCgl7CgkJcmV0dXJuICgkcmVxdWVzdFtzZWxmOjokTU1fSlNBQ1RJT05dID09IHNlbGY6OiRNTV9KU0FDVElPTl9SRVNFVF9QQVNTV09SRCk7Cgl9Cn0K', 0, '2018-11-21 06:38:54'),
(113, 'trainingvideosview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fVHJhaW5pbmdWaWRlb3NWaWV3IGV4dGVuZHMgTU1fUkJBQ0FkbWluVmlldwp7CiAgICAKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCiAgICB7CiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdCgpOwogICAgfQogICAgCiAgICBwdWJsaWMgZnVuY3Rpb24gcGVyZm9ybUFjdGlvbigkcG9zdCkKICAgIHsKICAgICAgICAkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwogICAgICAgIAogICAgICAgIGlmICghKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKICAgICAgICB7CiAgICAgICAgICAgIHN3aXRjaCAoJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSwgTU1fUmVzcG9uc2U6OiRTVUNDRVNTLCB0cnVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gJHJlc3BvbnNlOwogICAgICAgIH0KICAgIH0KICAgIAogICAgCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGRpc3BsYXlWaWRlb3MoKQogICAgewogICAgICAgID8+CgkJPHNjcmlwdCBjaGFyc2V0PSJVVEYtOCIKCQkJc3JjPSIvL2Zhc3Qud2lzdGlhLmNvbS9hc3NldHMvZXh0ZXJuYWwvcG9wb3Zlci12MS5qcyI+PC9zY3JpcHQ+CgkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLXJvdyI+CgkJCTxkaXYgY2xhc3M9Im1tLW1ldHJpYy1jb250YWluZXIgbW0tbWV0cmljLWNvbnRhaW5lci0zMyBtbS1jZW50ZXIiPgoJCQkJPGEgaHJlZj0iLy9mYXN0Lndpc3RpYS5uZXQvZW1iZWQvaWZyYW1lL3cyMTZtdmk1anI/cG9wb3Zlcj10cnVlIiBjbGFzcz0id2lzdGlhLXBvcG92ZXJbaGVpZ2h0PTQyNSxwbGF5ZXJDb2xvcj03Yjc5NmEsd2lkdGg9ODAwXSI+CgkJCQk8aW1nCgkJCQkJc3JjPSJodHRwczovL21lbWJlcm1vdXNlLmNvbS9hc3NldHMva25vd2xlZGdlL3RyYWluaW5nLXNtLXBsdWdpbi10b3VyLmpwZyIKCQkJCQlhbHQ9IiI+CgkJCQk8L2E+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtbS1tZXRyaWMtY29udGFpbmVyIG1tLW1ldHJpYy1jb250YWluZXItMzMgbW0tY2VudGVyIj4KCQkJCTxhIGhyZWY9Ii8vZmFzdC53aXN0aWEubmV0L2VtYmVkL2lmcmFtZS83Y3hmYTFtdmF0P3BvcG92ZXI9dHJ1ZSIgY2xhc3M9Indpc3RpYS1wb3BvdmVyW2hlaWdodD00MjUscGxheWVyQ29sb3I9N2I3OTZhLHdpZHRoPTgwMF0iPgoJCQkJPGltZwoJCQkJCXNyYz0iaHR0cHM6Ly9tZW1iZXJtb3VzZS5jb20vYXNzZXRzL2tub3dsZWRnZS90cmFpbmluZy1zbS1wcm9kdWN0cy5qcGciCgkJCQkJYWx0PSIiPgoJCQkJPC9hPgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLWNvbnRhaW5lciBtbS1tZXRyaWMtY29udGFpbmVyLTMzIG1tLWNlbnRlciI+CgkJCQk8YSBocmVmPSIvL2Zhc3Qud2lzdGlhLm5ldC9lbWJlZC9pZnJhbWUvN3kzeXoydmt1bD9wb3BvdmVyPXRydWUiIGNsYXNzPSJ3aXN0aWEtcG9wb3ZlcltoZWlnaHQ9NDI1LHBsYXllckNvbG9yPTdiNzk2YSx3aWR0aD04MDBdIj4KCQkJCTxpbWcKCQkJCQlzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9rbm93bGVkZ2UvdHJhaW5pbmctc20taW50ZWdyYXRpb25zLmpwZyIKCQkJCQlhbHQ9IiI+CgkJCQk8L2E+CgkJCTwvZGl2PgoJCTwvZGl2PgoJCTxicj4KCQk8ZGl2IGNsYXNzPSJtbS1tZXRyaWMtcm93Ij4KCQkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLWNvbnRhaW5lciBtbS1tZXRyaWMtY29udGFpbmVyLTMzIG1tLWNlbnRlciI+CgkJCQk8YSBocmVmPSIvL2Zhc3Qud2lzdGlhLm5ldC9lbWJlZC9pZnJhbWUveDBnaWIwbjlocD9wb3BvdmVyPXRydWUiIGNsYXNzPSJ3aXN0aWEtcG9wb3ZlcltoZWlnaHQ9NDI1LHBsYXllckNvbG9yPTdiNzk2YSx3aWR0aD04MDBdIj4KCQkJCTxpbWcKCQkJCQlzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9rbm93bGVkZ2UvdHJhaW5pbmctc20tY29yZS1wYWdlcy5qcGciCgkJCQkJYWx0PSIiPgoJCQkJPC9hPgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLWNvbnRhaW5lciBtbS1tZXRyaWMtY29udGFpbmVyLTMzIG1tLWNlbnRlciI+CgkJCQk8YSBocmVmPSIvL2Zhc3Qud2lzdGlhLm5ldC9lbWJlZC9pZnJhbWUvN3U4c2F5ZGt0dT9wb3BvdmVyPXRydWUiIGNsYXNzPSJ3aXN0aWEtcG9wb3ZlcltoZWlnaHQ9NDM1LHBsYXllckNvbG9yPTdiNzk2YSx3aWR0aD04MDBdIj4KCQkJCTxpbWcKCQkJCQlzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9rbm93bGVkZ2UvaG93LXRvLW1hc3Rlci1tZW1iZXItbWFuYWdlbWVudC1zbS5qcGciCgkJCQkJYWx0PSIiPgoJCQkJPC9hPgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLWNvbnRhaW5lciBtbS1tZXRyaWMtY29udGFpbmVyLTMzIG1tLWNlbnRlciI+CgkJCQk8YSBocmVmPSIvL2Zhc3Qud2lzdGlhLm5ldC9lbWJlZC9pZnJhbWUvMmFsamF0c2s1az9wb3BvdmVyPXRydWUiIGNsYXNzPSJ3aXN0aWEtcG9wb3ZlcltoZWlnaHQ9NDUwLHBsYXllckNvbG9yPTdiNzk2YSx3aWR0aD04MDBdIj4KCQkJCTxpbWcKCQkJCQlzcmM9Imh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9rbm93bGVkZ2UvdHJhaW5pbmctc20tc21hcnQtdGFncy5qcGciCgkJCQkJYWx0PSIiPgoJCQkJPC9hPgoJCQk8L2Rpdj4KCQk8L2Rpdj4KCQk8YnI+CgkJPGRpdiBjbGFzcz0ibW0tbWV0cmljLXJvdyI+CgkJCTxkaXYgY2xhc3M9Im1tLW1ldHJpYy1jb250YWluZXIgbW0tbWV0cmljLWNvbnRhaW5lci0zMyBtbS1jZW50ZXIiPgoJCQkJPGEgaHJlZj0iLy9mYXN0Lndpc3RpYS5uZXQvZW1iZWQvaWZyYW1lL2l0MndhZ2Ziang/cG9wb3Zlcj10cnVlIiBjbGFzcz0id2lzdGlhLXBvcG92ZXJbaGVpZ2h0PTQ1MCxwbGF5ZXJDb2xvcj03Yjc5NmEsd2lkdGg9ODAwXSI+CgkJCQk8aW1nCgkJCQkJc3JjPSJodHRwczovL21lbWJlcm1vdXNlLmNvbS9hc3NldHMva25vd2xlZGdlL3RyYWluaW5nLXNtLXB1c2gtbm90aWZpY2F0aW9ucy5qcGciCgkJCQkJYWx0PSIiPgoJCQkJPC9hPgoJCQk8L2Rpdj4KCQk8L2Rpdj4KCTw/cGhwIAoJfQkKfQo=', 0, '2018-11-21 06:38:54'),
(114, 'membertagprocessor', '', 0, '2018-11-21 06:38:54'),
(115, 'activitylogview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQWN0aXZpdHlMb2dWaWV3IGV4dGVuZHMgTU1fUkJBQ0dlbmVyYWxFbXBsb3llZVZpZXcKewoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fU0VBUkNIID0gInNlYXJjaCI7CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0VBUkNIOgoJCQkJCXJldHVybiAkdGhpcy0+Z2VuZXJhdGVEYXRhR3JpZCgkcG9zdCk7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZURhdGFHcmlkKCRwb3N0PW51bGwpCgl7CgkJcmV0dXJuIE1NX1RFTVBMQVRFOjpnZW5lcmF0ZShNTV9NT0RVTEVTLiIvYWN0aXZpdHlfbG9nLmRhdGFncmlkLnBocCIsICRwb3N0KTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKCRwb3N0LCBNTV9EYXRhR3JpZCAkZGcpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCk7CgkJCgkJaWYoIWVtcHR5KCRwb3N0WyJtZW1iZXJfaWQiXSkpCgkJewoJCQlhcnJheV9wdXNoKCR3aGVyZUNsYXVzZSwgIih1c2VyX2lkPSd7JHBvc3RbIm1lbWJlcl9pZCJdfScpIik7CgkJfQoJCQoJCWlmKCFlbXB0eSgkcG9zdFsiZXZlbnRfdHlwZSJdKSkKCQl7CgkJCWFycmF5X3B1c2goJHdoZXJlQ2xhdXNlLCAiKGV2ZW50X3R5cGU9J3skcG9zdFsiZXZlbnRfdHlwZSJdfScpIik7CgkJfQoJCQoJCWlmKCFlbXB0eSgkcG9zdFsiZnJvbV9kYXRlIl0pKQoJCXsKCQkJJGZyb21EYXRlID0gTU1fVXRpbHM6OmRhdGVUb1VUQygkcG9zdFsnZnJvbV9kYXRlJ10sIlktbS1kIiwiMDA6MDA6MDAiKTsKCQkJYXJyYXlfcHVzaCgkd2hlcmVDbGF1c2UsICIoZGF0ZV9hZGRlZCA+PSAneyRmcm9tRGF0ZX0nKSIpOwoJCQkKCQkJaWYoIWVtcHR5KCRwb3N0WyJ0b19kYXRlIl0pKQoJCQl7CQkKCQkJCSR0b0RhdGUgPSBNTV9VdGlsczo6ZGF0ZVRvVVRDKCRwb3N0Wyd0b19kYXRlJ10sIlktbS1kIiwiMjM6NTk6NTkiKTsKCQkJCWFycmF5X3B1c2goJHdoZXJlQ2xhdXNlLCAiKGRhdGVfYWRkZWQgPD0gJ3skdG9EYXRlfScpIik7CgkJCX0KCQl9CgkKCQkkd2hlcmVDbGF1c2UgPSBqb2luKCIgQU5EICIsICR3aGVyZUNsYXVzZSk7CgkJCgkJcmV0dXJuIHBhcmVudDo6Z2V0RGF0YShNTV9UQUJMRV9FVkVOVF9MT0csIG51bGwsICRkZywgJHdoZXJlQ2xhdXNlKTsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(116, 'countryutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0NvdW50cnlVdGlscwp7CQoJcHVibGljIHN0YXRpYyAkREZMVF9DT1VOVFJZX0lTTyA9ICJVUyI7CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0RnVsbENvdW50cnlMaXN0KCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJTRUxFQ1QgaXNvLCBwcmludGFibGVfbmFtZSBmcm9tICIuTU1fVEFCTEVfQ09VTlRSSUVTLiIgb3JkZXIgYnkgcHJpbnRhYmxlX25hbWUgYXNjIjsKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsLCBPQkpFQ1RfSyk7CgkJJGxpc3QgPSBhcnJheSgpOwoJCQoJCWZvcmVhY2ggKCRyZXN1bHRzIGFzICRpc289PiRyb3cpCgkJewoJCQkkbGlzdFskaXNvXSA9ICRyb3ctPnByaW50YWJsZV9uYW1lOwoJCX0KCQkKCQlyZXR1cm4gJGxpc3Q7Cgl9CgkKCS8qKgoJICogVGhpcyByZXR1cm5zIG9ubHkgdGhvc2UgY291bnRyaWVzIHdoaWNoIGhhdmUgYmVlbiBtYXJrZWQgZm9yIHVzZSBpbiB0aGUgTU0gY29uZmlndXJhdGlvbgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldENvdW50cnlMaXN0KCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkKCQkkc3FsID0gIlNFTEVDVCBpc28sIHByaW50YWJsZV9uYW1lIGZyb20gIi5NTV9UQUJMRV9DT1VOVFJJRVMuIiBvcmRlciBieSBwcmludGFibGVfbmFtZSBhc2MiOwoJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwsIE9CSkVDVF9LKTsKCQkkbGlzdCA9IGFycmF5KCk7CgkKCQlmb3JlYWNoICgkcmVzdWx0cyBhcyAkaXNvPT4kcm93KQoJCXsKCQkJJHNlbGVjdGVkQ291bnRyaWVzID0gTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfQ09VTlRSWV9TRUxFQ1RJT05TKTsKCQkKCQkJaWYoYXJyYXlfa2V5X2V4aXN0cygkaXNvLCAkc2VsZWN0ZWRDb3VudHJpZXMpKQoJCQl7CgkJCQkkbGlzdFskaXNvXSA9ICRyb3ctPnByaW50YWJsZV9uYW1lOwoJCQl9CgkJfQoJCgkJcmV0dXJuICRsaXN0OwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldENvdW50cnlOYW1lKCRpc29Db2RlKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gIlNFTEVDVCBwcmludGFibGVfbmFtZSBmcm9tICIuTU1fVEFCTEVfQ09VTlRSSUVTLiIgd2hlcmUgaXNvID0gJ3skaXNvQ29kZX0nIGxpbWl0IDE7IjsKCQkkcm93ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCgkJaWYoaXNzZXQoJHJvdy0+cHJpbnRhYmxlX25hbWUpKQoJCXsKCQkJcmV0dXJuICRyb3ctPnByaW50YWJsZV9uYW1lOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gJGlzb0NvZGU7CQoJCX0KCX0KCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNvbnZlcnRJU08zKCRpc28zQ29kZSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkKCQkkc3FsID0gIlNFTEVDVCBpc28gZnJvbSAiLk1NX1RBQkxFX0NPVU5UUklFUy4iIHdoZXJlIGlzbzMgPSAneyRpc28zQ29kZX0nIGxpbWl0IDE7IjsKCQkkcm93ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkKCQlpZihpc3NldCgkcm93LT5pc28pKQoJCXsKCQkJcmV0dXJuICRyb3ctPmlzbzsKCQl9CgkJCgkJcmV0dXJuICRpc28zQ29kZTsKCX0KfQo=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(117, 'apiservice', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(118, 'appliedbundle', '', 0, '2018-11-21 06:38:54'),
(119, 'corepagetype', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0NvcmVQYWdlVHlwZSBleHRlbmRzIE1NX0VudGl0eQp7CQoJcHVibGljIHN0YXRpYyAkTk9fUEFHRSA9IDA7CglwdWJsaWMgc3RhdGljICRNRU1CRVJfSE9NRV9QQUdFID0gMTsKCXB1YmxpYyBzdGF0aWMgJFNBVkVUSEVTQUxFID0gMjsKCXB1YmxpYyBzdGF0aWMgJEVSUk9SID0gMzsKCXB1YmxpYyBzdGF0aWMgJExPR0lOX1BBR0UgPSA0OwoJcHVibGljIHN0YXRpYyAkRk9SR09UX1BBU1NXT1JEID0gNTsKCXB1YmxpYyBzdGF0aWMgJENIRUNLT1VUID0gNjsKCXB1YmxpYyBzdGF0aWMgJFBBSURfQ09ORklSTUFUSU9OID0gNzsKCXB1YmxpYyBzdGF0aWMgJEZSRUVfQ09ORklSTUFUSU9OID0gOTsKCXB1YmxpYyBzdGF0aWMgJE1ZX0FDQ09VTlQgPSAxMDsKCXB1YmxpYyBzdGF0aWMgJExPR09VVF9QQUdFID0gMTE7CglwdWJsaWMgc3RhdGljICRSRURFRU1fR0lGVCA9IDEyOwoJcHVibGljIHN0YXRpYyAkUkVTRVRfUEFTU1dPUkQgPSAxMzsKCQoJcHJpdmF0ZSAkbmFtZTsKCXByaXZhdGUgJHZpc2libGU7CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXREYXRhKCkgCgl7CQoJCS8vZG8gbm90aGluZwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldENvcmVQYWdlVHlwZXNMaXN0KCkKIAl7CiAJCWdsb2JhbCAkd3BkYjsKIAkJCiAJCSRsaXN0ID0gYXJyYXkoKTsKIAkJCiAJCSRzcWwgPSAic2VsZWN0ICogZnJvbSAiLk1NX1RBQkxFX0NPUkVfUEFHRV9UWVBFUy4iIHdoZXJlIHZpc2libGU9JzEnIjsKIAkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CiAJCQogCQlpZigkcm93cykKIAkJewoJIAkJZm9yZWFjaCgkcm93cyBhcyAkcm93KQoJCQl7CQoJCQkJJGxpc3RbJHJvdy0+aWRdID0gJHJvdy0+bmFtZTsKCQkJfQogCQl9CQogCQlyZXR1cm4gJGxpc3Q7CiAJfQogCQogCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0Q29yZVBhZ2VOYW1lKCR0eXBlSWQpCiAJewogCQlnbG9iYWwgJHdwZGI7CiAJCSRzcWwgPSAic2VsZWN0IG5hbWUgZnJvbSAiLk1NX1RBQkxFX0NPUkVfUEFHRV9UWVBFUy4iIHdoZXJlIGlkID0geyR0eXBlSWR9IjsKIAkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwogCQkJCiAJCWlmKCRyb3cpCiAJCXsKIAkJCXJldHVybiAkcm93LT5uYW1lOwogCQl9CiAJCQogCQlyZXR1cm4gIiI7CiAJfQogCQoJcHVibGljIGZ1bmN0aW9uIHNldERhdGEoJGRhdGEpCgl7CgkJdHJ5CgkJewoJCQkkdGhpcy0+bmFtZSA9ICRkYXRhLT5uYW1lOwoJCQkkdGhpcy0+dmlzaWJsZSA9ICRkYXRhLT52aXNpYmxlOwoJCQlwYXJlbnQ6OnZhbGlkYXRlKCk7CgkJfQoJCWNhdGNoIChFeGNlcHRpb24gJGV4KSB7CgkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGNvbW1pdERhdGEoKQoJewkKCQkvLyBkbyBub3RoaW5nCgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXROYW1lKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm5hbWU7Cgl9CiAJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VmlzaWJsZSgpCgl7CgkJcmV0dXJuICR0aGlzLT52aXNpYmxlOwoJfQoJCn0K', 0, '2018-11-21 06:38:54'),
(120, 'decisiontagprocessor', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(121, 'dripcontentwidget', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(122, 'mcapi', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(123, 'limelightshippingmethod', '', 0, '2018-11-21 06:38:54'),
(124, 'rbacproductmanagerview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCgphYnN0cmFjdCBjbGFzcyBNTV9SQkFDUHJvZHVjdE1hbmFnZXJWaWV3IGV4dGVuZHMgTU1fUkJBQ0Jhc2VWaWV3CnsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7CgkJJHRoaXMtPnBlcm1pc3Npb25zID0gYXJyYXkoCgkJCQkiKiIgID0+ICBhcnJheShNTV9Sb2xlOjokUk9MRV9BRE1JTklTVFJBVE9SLE1NX1JvbGU6OiRST0xFX1BST0RVQ1RfTUFOQUdFUikKCQkJCSk7Cgl9CgkKfQ==', 0, '2018-11-21 06:38:54'),
(125, 'membersview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX01lbWJlcnNWaWV3IGV4dGVuZHMgTU1fUkJBQ0dlbmVyYWxFbXBsb3llZVZpZXcKewkKCXB1YmxpYyBzdGF0aWMgJFRJTUVfUEVSX09SREVSID0gMS41OwoJCglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TRUFSQ0ggPSAic2VhcmNoIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1JFU0VUX0ZPUk0gPSAicmVzZXRGb3JtIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1NUT1JFX1NFQVJDSF9TVEFURSA9ICJzdG9yZVNlYXJjaFN0YXRlIjsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0NSRUFURV9NRU1CRVIgPSAiY3JlYXRlTWVtYmVyIjsKCQoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9SRVNFVF9GT1JNOgoJCQkJCXJldHVybiAkdGhpcy0+Z2VuZXJhdGVTZWFyY2hGb3JtKCRwb3N0KTsJCgkJCQkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TRUFSQ0g6CgkJCQkJcmV0dXJuICR0aGlzLT5nZW5lcmF0ZURhdGFHcmlkKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NUT1JFX1NFQVJDSF9TVEFURToKCQkJCQlyZXR1cm4gJHRoaXMtPnN0b3JlU2VhcmNoU3RhdGUoJHBvc3QpOwkKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0NSRUFURV9NRU1CRVI6CgkJCQkJcmV0dXJuICR0aGlzLT5jcmVhdGVNZW1iZXIoJHBvc3QpOwoJCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fUkVNT1ZFOgoJCQkJCXJldHVybiAkdGhpcy0+cmVtb3ZlTWVtYmVyKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQogCXB1YmxpYyBmdW5jdGlvbiBzZWFyY2goJHBvc3QsIE1NX0RhdGFHcmlkICRkZywgJGRvR2VuZXJhdGVDc3Y9ZmFsc2UpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRidW5kbGVzSm9pblNxbCA9ICIiOwoJCSRidW5kbGVzQ29sdW1uU3FsID0gIiI7CgkJJGJ1bmRsZXNXaGVyZVNxbCA9ICIiOwoJCSRidW5kbGVJZHMgPSAiIjsKCQkKCQkkY3VzdG9tRmllbGRKb2luU3FsID0gIiI7CgkJJGN1c3RvbUZpZWxkQ29sdW1uU3FsID0gIiI7CgkJJGN1c3RvbUZpZWxkV2hlcmVTcWwgPSAiIjsKCQkKCQkkY3VzdG9tRmllbGRKb2luU3FsMiA9ICIiOwoJCSRjdXN0b21GaWVsZENvbHVtblNxbDIgPSAiIjsKCQkkY3VzdG9tRmllbGRXaGVyZVNxbDIgPSAiIjsKCQkKCQlpZighZW1wdHkoJHBvc3RbIm1tX2J1bmRsZXMiXSkpCgkJewoJCQkkYnVuZGxlSWRzID0gam9pbignLCcgLCAkcG9zdFsibW1fYnVuZGxlcyJdKTsKCQkJJGJ1bmRsZXNKb2luU3FsID0gIiwgICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTLiIgYnVuZGxlcyAiOwoJCQkkYnVuZGxlc0NvbHVtblNxbCA9ICIiOwoJCQkkYnVuZGxlc1doZXJlU3FsID0gIiAoKGJ1bmRsZXMuYWNjZXNzX3R5cGVfaWQ9dS5JRCkgIjsKCQkJJGJ1bmRsZXNXaGVyZVNxbCAuPSAiIEFORCAoYnVuZGxlcy5idW5kbGVfaWQgSU4gKCB7JGJ1bmRsZUlkc30gKSkgIjsKCQkJJGJ1bmRsZXNXaGVyZVNxbCAuPSAiIEFORCAoYnVuZGxlcy5hY2Nlc3NfdHlwZT0nIi5NTV9BcHBsaWVkQnVuZGxlOjokQUNDRVNTX1RZUEVfVVNFUi4iJykgIjsKCQkJJGJ1bmRsZXNXaGVyZVNxbCAuPSAiIEFORCAoYnVuZGxlcy5zdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRBQ1RJVkUuIicgT1IgYnVuZGxlcy5zdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRQRU5ESU5HX0NBTkNFTExBVElPTi4iJykpICI7CgkJfQoJCQoJCWlmKCFlbXB0eSgkcG9zdFsibW1fbWVtYmVyX2N1c3RvbV9maWVsZCJdKSkKCQl7CgkJCSRjdXN0b21GaWVsZEpvaW5TcWwgPSAiLCAgIi5NTV9UQUJMRV9DVVNUT01fRklFTERfREFUQS4iIGNmZCAiOwoJCQkkY3VzdG9tRmllbGRDb2x1bW5TcWwgPSAiLCBjZmQudmFsdWUgYXMgY3VzdG9tX2ZpZWxkX3ZhbHVlICI7CgkJCSRjdXN0b21GaWVsZFdoZXJlU3FsID0gIiAoKGNmZC51c2VyX2lkPXUuaWQpIEFORCAoY2ZkLmN1c3RvbV9maWVsZF9pZD0neyRwb3N0WyJtbV9tZW1iZXJfY3VzdG9tX2ZpZWxkIl19JykgQU5EIChjZmQudmFsdWUgTElLRSAnJSIuJHBvc3RbIm1tX21lbWJlcl9jdXN0b21fZmllbGRfdmFsdWUiXS4iJScpKSAiOwoJCX0KCQkKCQlpZighZW1wdHkoJHBvc3RbIm1tX21lbWJlcl9jdXN0b21fZmllbGQyIl0pKQoJCXsKCQkJJGN1c3RvbUZpZWxkSm9pblNxbDIgPSAiLCAgIi5NTV9UQUJMRV9DVVNUT01fRklFTERfREFUQS4iIGNmZDIgIjsKCQkJJGN1c3RvbUZpZWxkQ29sdW1uU3FsMiA9ICIsIGNmZDIudmFsdWUgYXMgY3VzdG9tX2ZpZWxkX3ZhbHVlMiAiOwoJCQkkY3VzdG9tRmllbGRXaGVyZVNxbDIgPSAiICgoY2ZkMi51c2VyX2lkPXUuaWQpIEFORCAoY2ZkMi5jdXN0b21fZmllbGRfaWQ9J3skcG9zdFsibW1fbWVtYmVyX2N1c3RvbV9maWVsZDIiXX0nKSBBTkQgKGNmZDIudmFsdWUgTElLRSAnJSIuJHBvc3RbIm1tX21lbWJlcl9jdXN0b21fZmllbGQyX3ZhbHVlIl0uIiUnKSkgIjsKCQl9CgkJCgkJJHNxbEZyb20gPSAiIEZST00gIi4kd3BkYi0+dXNlcnMuIiB1LCAiLk1NX1RBQkxFX1VTRVJfREFUQS4iIG1tdSAiLiRjdXN0b21GaWVsZEpvaW5TcWwuJGN1c3RvbUZpZWxkSm9pblNxbDIuJGJ1bmRsZXNKb2luU3FsOwoJCQoJCSRmaWx0ZXJzID0gIiI7CgkJJG5ld0ZpbHRlciA9ICIiOwoJCSRtbVVzZXJEYXRhQ29sdW1ucyA9IGFycmF5KCJtZW1iZXJzaGlwX2xldmVsX2lkIiwgInN0YXR1cyIsICJsYXN0X25hbWUiLCAicGhvbmUiLCAibGFzdF9sb2dpbl9kYXRlIiwgInN0YXR1c191cGRhdGVkIik7CgkJJHNlYXJjaEJ5RGF0ZSA9ICJ1c2VyX3JlZ2lzdGVyZWQiOwoJCQoJCWlmKCFlbXB0eSgkcG9zdFsibW1fbWVtYmVyX3NlYXJjaF9ieV9kYXRlIl0pKQoJCXsKCQkJJHNlYXJjaEJ5RGF0ZSA9ICRwb3N0WyJtbV9tZW1iZXJfc2VhcmNoX2J5X2RhdGUiXTsKCQl9CgkJICAKCQlpZihlbXB0eSgkZGctPnNvcnRCeSkpCgkJewoJCQkkZGctPnNvcnRCeSA9ICRzZWFyY2hCeURhdGU7CgkJfQoJCQoJCSR0YWJsZU5hbWUgPSAoaW5fYXJyYXkoJHNlYXJjaEJ5RGF0ZSwgJG1tVXNlckRhdGFDb2x1bW5zKSkgPyAibW11IiA6ICJ1IjsgICAgIAoJCWlmKCFlbXB0eSgkcG9zdFsnbW1fZnJvbV9kYXRlJ10pKSAKCQl7CgkJCSRmcm9tRGF0ZSA9IE1NX1V0aWxzOjpkYXRlVG9VVEMoJHBvc3RbJ21tX2Zyb21fZGF0ZSddLCAiWS1tLWQgSDppIiwgIjAwOjAwOjAwIik7CgkJCSRuZXdGaWx0ZXIgPSAieyR0YWJsZU5hbWV9Lnskc2VhcmNoQnlEYXRlfSA+PSAnIi4kZnJvbURhdGUuIiciOwoJCQkkZmlsdGVycyA9ICR0aGlzLT5hZGRGaWx0ZXIoJGZpbHRlcnMsICRuZXdGaWx0ZXIpOwoJCX0KCQkKCQlpZighZW1wdHkoJHBvc3RbJ21tX3RvX2RhdGUnXSkpIAoJCXsKCQkJJHRvRGF0ZSA9IE1NX1V0aWxzOjpkYXRlVG9VVEMoJHBvc3RbJ21tX3RvX2RhdGUnXSwgIlktbS1kIEg6aSIsICIyMzo1OTo1OSIpOwoJCQkkbmV3RmlsdGVyID0gInskdGFibGVOYW1lfS57JHNlYXJjaEJ5RGF0ZX0gPD0gJyIuJHRvRGF0ZS4iJyI7CgkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgJG5ld0ZpbHRlcik7CgkJfQoJCQoJCS8vIE1lbWJlciBJRAoJCWlmKCFlbXB0eSgkcG9zdFsnbW1fbWVtYmVyX2lkJ10pKSAKCQl7CgkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgInUuaWQgPSAnIi4kcG9zdFsibW1fbWVtYmVyX2lkIl0uIiciKTsKCQl9CgkJCgkJLy8gRmlyc3QgTmFtZQoJCWlmKCFlbXB0eSgkcG9zdFsnbW1fZmlyc3RfbmFtZSddKSkgCgkJewoJCQkkZmlsdGVycyA9ICR0aGlzLT5hZGRGaWx0ZXIoJGZpbHRlcnMsICJtbXUuZmlyc3RfbmFtZSBMSUtFICclIi4kcG9zdFsibW1fZmlyc3RfbmFtZSJdLiIlJyIpOwoJCX0KCQkKCQkvLyBMYXN0IE5hbWUKCQlpZighZW1wdHkoJHBvc3RbJ21tX2xhc3RfbmFtZSddKSkgCgkJewoJCQkkZmlsdGVycyA9ICR0aGlzLT5hZGRGaWx0ZXIoJGZpbHRlcnMsICJtbXUubGFzdF9uYW1lIExJS0UgJyUiLiRwb3N0WyJtbV9sYXN0X25hbWUiXS4iJSciKTsKCQl9CgkJCgkJLy8gRW1haWwKCQlpZighZW1wdHkoJHBvc3RbJ21tX2VtYWlsJ10pKSAKCQl7CgkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgInUudXNlcl9lbWFpbCBMSUtFICclIi4kcG9zdFsibW1fZW1haWwiXS4iJSciKTsKCQl9CgkJCgkJZ2xvYmFsICRjdXJyZW50X3VzZXI7CgkJJGVtcGxveWVlID0gTU1fRW1wbG95ZWU6OmZpbmRCeVVzZXJJZCgkY3VycmVudF91c2VyLT5JRCk7CgkJCgkJLy8gTWVtYmVyc2hpcCBMZXZlbCBJRHMKCQkkbWVtYmVyc2hpcEZpbHRlclNldCA9IGZhbHNlOwoJCWlmKCFlbXB0eSgkcG9zdFsnbW1fbWVtYmVyc2hpcHMnXSkpIAoJCXsKCQkJLy8gbWFrZSBzdXJlIGN1cnJlbnQgZW1wbG95ZWUgaGFzIGFjY2VzcyB0byB0aGUgcmVxdWVzdGVkIG1lbWJlcnNoaXAgSURzCgkJCWlmKCRlbXBsb3llZS0+aXNWYWxpZCgpKQoJCQl7CgkJCQkkZmlsdGVyZWRMaXN0ID0gYXJyYXkoKTsKCQkJCQoJCQkJZm9yZWFjaCgkcG9zdFsibW1fbWVtYmVyc2hpcHMiXSBhcyAkaWQpCgkJCQl7CgkJCQkJaWYoJGVtcGxveWVlLT5oYXNBY2Nlc3MoTU1fRW1wbG95ZWU6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQLCAkaWQpKQoJCQkJCXsKCQkJCQkJJGZpbHRlcmVkTGlzdFtdID0gJGlkOwoJCQkJCX0KCQkJCX0KCQkJCQoJCQkJJHBvc3RbIm1tX21lbWJlcnNoaXBzIl0gPSAkZmlsdGVyZWRMaXN0OwoJCQl9CgkJCQoJCQlpZihjb3VudCgkcG9zdFsibW1fbWVtYmVyc2hpcHMiXSkgPiAwKQoJCQl7CgkJCQkkbWVtYmVyc2hpcEZpbHRlclNldCA9IHRydWU7CgkJCQkkbmV3RmlsdGVyID0gIm1tdS5tZW1iZXJzaGlwX2xldmVsX2lkIElOICgiLmpvaW4oJywnICwgJHBvc3RbIm1tX21lbWJlcnNoaXBzIl0pLiIpIjsKCQkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgJG5ld0ZpbHRlcik7CgkJCX0KCQl9CgkJCgkJLy8gZmlsdGVyIG1lbWJlcnNoaXAgSURzIHRvIG9ubHkgaW5jbHVkZSB0aG9zZSB0aGUgY3VycmVudCBlbXBsb3llZSBoYXMgYWNjZXNzIHRvCgkJaWYoISRtZW1iZXJzaGlwRmlsdGVyU2V0ICYmICRlbXBsb3llZS0+aXNWYWxpZCgpKQoJCXsKCQkJJG1lbWJlcnNoaXBSZXN0cmljdGlvbnMgPSAkZW1wbG95ZWUtPmdldEFjY2Vzc1Jlc2NyaWN0aW9ucyhNTV9FbXBsb3llZTo6JEFDQ0VTU19UWVBFX01FTUJFUlNISVApOwoJCQkJCgkJCWlmKGNvdW50KCRtZW1iZXJzaGlwUmVzdHJpY3Rpb25zKSA+IDApCgkJCXsKCQkJCSRuZXdGaWx0ZXIgPSAibW11Lm1lbWJlcnNoaXBfbGV2ZWxfaWQgSU4gKCIuam9pbignLCcgLCAkbWVtYmVyc2hpcFJlc3RyaWN0aW9ucykuIikiOwoJCQkJJGZpbHRlcnMgPSAkdGhpcy0+YWRkRmlsdGVyKCRmaWx0ZXJzLCAkbmV3RmlsdGVyKTsKCQkJfQoJCX0KCQkKCQkvLyBNZW1iZXIgU3RhdHVzCgkJaWYoIWVtcHR5KCRwb3N0WydtbV9tZW1iZXJfc3RhdHVzX3R5cGVzJ10pKSAKCQl7CgkJCSRuZXdGaWx0ZXIgPSAibW11LnN0YXR1cyBJTiAoIi5qb2luKCcsJyAsICRwb3N0WyJtbV9tZW1iZXJfc3RhdHVzX3R5cGVzIl0pLiIpIjsKCQkJCgkJCWlmKCRuZXdGaWx0ZXIgIT0gIiIpIAoJCQl7CgkJCQkkZmlsdGVycyA9ICR0aGlzLT5hZGRGaWx0ZXIoJGZpbHRlcnMsICRuZXdGaWx0ZXIpOwoJCQl9CgkJfQoJCQoJCS8vIGJ1bmRsZXMKCQlpZighZW1wdHkoJGJ1bmRsZXNXaGVyZVNxbCkpCgkJewoJCQkkZmlsdGVycyA9ICR0aGlzLT5hZGRGaWx0ZXIoJGZpbHRlcnMsICRidW5kbGVzV2hlcmVTcWwpOwoJCX0KCQkKCQkvLyBjdXN0b20gZmllbGRzCgkJaWYoIWVtcHR5KCRjdXN0b21GaWVsZFdoZXJlU3FsKSkKCQl7CgkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgJGN1c3RvbUZpZWxkV2hlcmVTcWwpOwoJCX0KCQkKCQlpZighZW1wdHkoJGN1c3RvbUZpZWxkV2hlcmVTcWwyKSkKCQl7CgkJCSRmaWx0ZXJzID0gJHRoaXMtPmFkZEZpbHRlcigkZmlsdGVycywgJGN1c3RvbUZpZWxkV2hlcmVTcWwyKTsKCQl9CgkJCgkJJHNxbFdoZXJlID0gIiBXSEVSRSB1LklEID0gbW11LndwX3VzZXJfaWQiOwoJCQoJCWlmKCRmaWx0ZXJzICE9ICIiKSAKCQl7CgkJCSRzcWxXaGVyZSAuPSAiIEFORCAiLiRmaWx0ZXJzOwoJCX0KCgkJJHNvcnRUYWJsZU5hbWUgPSAoaW5fYXJyYXkoJGRnLT5zb3J0QnksICRtbVVzZXJEYXRhQ29sdW1ucykpID8gIm1tdSIgOiAidSI7CgkJaWYoaXNzZXQoJGRnLT5zb3J0QnkpICYmICFpc19udWxsKCRkZy0+c29ydEJ5KSAmJiAhZW1wdHkoJGRnLT5zb3J0QnkpKSAKCQl7CgkJCSRzcWxHcm91cEJ5ID0gIiBPUkRFUiBCWSB7JHNvcnRUYWJsZU5hbWV9LnskZGctPnNvcnRCeX0geyRkZy0+c29ydERpcn0gIjsKCQl9CgkJCgkJJHNxbFJlc3VsdENvdW50ID0gInNlbGVjdCBjb3VudChkaXN0aW5jdCB1LklEKSBhcyB0b3RhbCAiOwoJCSRzcWxSZXN1bHRDb3VudCAuPSAkc3FsRnJvbTsKCQkkc3FsUmVzdWx0Q291bnQgLj0gJHNxbFdoZXJlOwoJCQoJCSRjb3VudFJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWxSZXN1bHRDb3VudCk7CgkJCgkJaWYoJGNvdW50Um93LT50b3RhbCA+IDApIAoJCXsKCQkJJHNxbCA9ICJzZWxlY3QgdS5pZCwgJ3skY291bnRSb3ctPnRvdGFsfScgYXMgdG90YWwsIHUudXNlcl9yZWdpc3RlcmVkLCB1LnVzZXJfZW1haWwsICI7CgkJCSRzcWwgLj0gIm1tdS5tZW1iZXJzaGlwX2xldmVsX2lkLCBtbXUuc3RhdHVzLCBtbXUuZmlyc3RfbmFtZSwgbW11Lmxhc3RfbmFtZSwgbW11LnBob25lLCBtbXUubGFzdF9sb2dpbl9kYXRlLCBtbXUuc3RhdHVzX3VwZGF0ZWQgIjsKCQkJaWYoJGRvR2VuZXJhdGVDc3YpCgkJCXsKCQkJCSRzcWwgLj0gIiwgbW11LmJpbGxpbmdfYWRkcmVzczEsIG1tdS5iaWxsaW5nX2NpdHksIG1tdS5iaWxsaW5nX3N0YXRlLCBtbXUuYmlsbGluZ19wb3N0YWxfY29kZSwgbW11LmJpbGxpbmdfY291bnRyeSAiOwoJCQkJJHNxbCAuPSAiLCBtbXUuc2hpcHBpbmdfYWRkcmVzczEsIG1tdS5zaGlwcGluZ19jaXR5LCBtbXUuc2hpcHBpbmdfc3RhdGUsIG1tdS5zaGlwcGluZ19wb3N0YWxfY29kZSwgbW11LnNoaXBwaW5nX2NvdW50cnksIG1tdS5leHBpcmF0aW9uX2RhdGUgIjsKCQkJfQoJCQkkc3FsIC49ICIgIi4kY3VzdG9tRmllbGRDb2x1bW5TcWw7CgkJCSRzcWwgLj0gIiAiLiRjdXN0b21GaWVsZENvbHVtblNxbDI7CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gYXJyYXkoKTsKCQl9CgkJCgkJJHNxbCAuPSAkc3FsRnJvbTsKCQkkc3FsIC49ICRzcWxXaGVyZTsKCQkkc3FsIC49ICRzcWxHcm91cEJ5OwoJCQoJCWlmKCEkZG9HZW5lcmF0ZUNzdikKCQl7CgkJCSRzcWwgLj0gJGRnLT5nZXRMaW1pdFNxbCgpOwoJCQkkYmF0Y2hfc2l6ZSA9ICRkZy0+cmVzdWx0U2l6ZTsKCQl9CgkJZWxzZSAKCQl7CgkJCSRiYXRjaF9zaXplID0gNTA7IC8vbGFyZ2VyIGJhdGNoIHNob3VsZCBiZSBtb3JlIGVmZmljaWVudCBmb3IgZnVsbCByZXN1bHQgc2V0cwkKCQl9CgkJCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCwgT0JKRUNUX0spOwoJCQoJCS8vIEV4ZWN1dGUgYWRkaXRpb25hbCBzdWItcXVlcmllcyBvbiB0aGUgcmVzdWx0IHNldCBpbiBiYXRjaGVzCgkJJGk9MDsKCQkkaWRfYmF0Y2ggPSBhcnJheSgpOwoJCWZvcmVhY2ggKCRyb3dzIGFzICRpZD0+JG1lbWJlcikKCQl7CgkJCSRpZF9iYXRjaFtdID0gJGlkOwoJCQlpZiAoKCsrJGkpID49ICRiYXRjaF9zaXplKSAKCQkJewoJCQkJJHVzZXJJZHMgPSBpbXBsb2RlKCIsIiwkaWRfYmF0Y2gpOwoJCQkJJHNxbCA9ICR0aGlzLT5idWlsZEFwcGxpZWRCdW5kbGVzU1FMKCR1c2VySWRzLCAkYnVuZGxlSWRzKTsKCQkJCSRiYXRjaFJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCwgQVJSQVlfQSk7CgkJCQlmb3JlYWNoICgkYmF0Y2hSb3dzIGFzICRiYXRjaFJvd051bT0+JGJhdGNoSW5mbykKCQkJCXsKCQkJCQkkbWVtYmVySWQgPSAkYmF0Y2hJbmZvWydhY2Nlc3NfdHlwZV9pZCddOwoJCQkJCWZvcmVhY2ggKCRiYXRjaEluZm8gYXMgJHByb3BOYW1lPT4kcHJvcFZhbHVlKQoJCQkJCXsKCQkJCQkJJHJvd3NbJG1lbWJlcklkXS0+JHByb3BOYW1lID0gJHByb3BWYWx1ZTsKCQkJCQl9CgkJCQl9CgkJCQkkaWRfYmF0Y2ggPSBhcnJheSgpOwoJCQl9CgkJfQoJCQoJCWlmICghZW1wdHkoJGlkX2JhdGNoKSkKCQl7CgkJCSR1c2VySWRzID0gaW1wbG9kZSgiLCIsJGlkX2JhdGNoKTsKCQkJJHNxbCA9ICR0aGlzLT5idWlsZEFwcGxpZWRCdW5kbGVzU1FMKCR1c2VySWRzLCAkYnVuZGxlSWRzKTsKCQkJJGJhdGNoUm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsLCBBUlJBWV9BKTsKCQkJZm9yZWFjaCAoJGJhdGNoUm93cyBhcyAkYmF0Y2hSb3dOdW09PiRiYXRjaEluZm8pCgkJCXsKCQkJCSRtZW1iZXJJZCA9ICRiYXRjaEluZm9bJ2FjY2Vzc190eXBlX2lkJ107CgkJCQlmb3JlYWNoICgkYmF0Y2hJbmZvIGFzICRwcm9wTmFtZT0+JHByb3BWYWx1ZSkKCQkJCXsKCQkJCQkkcm93c1skbWVtYmVySWRdLT4kcHJvcE5hbWUgPSAkcHJvcFZhbHVlOwoJCQkJfQoJCQl9CgkJfQoJCQoJCXJldHVybiBhcnJheV92YWx1ZXMoJHJvd3MpOwoJfQoJCgkvKioKCSAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgdGhlIFNRTCB0byBleGVjdXRlIHRvIGdldCB0aGUgYnVuZGxlcyBhcHBsaWVkIHRvIGEgcGFydGljdWxhciBzZXQgb2YgdXNlcnMuIAoJICogSWYgdGhlICRidW5kbGVJZHMgcGFyYW1ldGVyIGlzIHNldCwgaXQgd2lsbCBhbHNvIGxpbWl0IHRoZSByZXN1bHRzIHRvIGEgc3BlY2lmaWMgZ3JvdXAgb2YgYnVuZGxlcy4KCSAqIEBwYXJhbSBTdHJpbmcgJHVzZXJJZHMgY29tbWEtZGVsaW1pYXRlZCBsaXN0IG9mIHVzZXIgSURzIAoJICogQHBhcmFtIFN0cmluZyAkYnVuZGxlSWRzIGNvbW1hLWRlbGltaW5hdGVkIGxpc3Qgb2YgYnVuZGxlIElEcwoJICovCglwcml2YXRlIGZ1bmN0aW9uIGJ1aWxkQXBwbGllZEJ1bmRsZXNTUUwoJHVzZXJJZHMsICRidW5kbGVJZHMpCgl7CgkJJHNxbCA9ICJTRUxFQ1QgYWNjZXNzX3R5cGVfaWQsIGdyb3VwX2NvbmNhdChidW5kbGVfaWQpIEFTIGJ1bmRsZXMgRlJPTSAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUzsKCQkkc3FsIC49ICIgV0hFUkUgKGFjY2Vzc190eXBlID0gJyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX1VTRVIuIicpIEFORCAoYWNjZXNzX3R5cGVfaWQgSU4gKHskdXNlcklkc30pKSAiOwoJCSRzcWwgLj0gIiBBTkQgKHN0YXR1cyA9ICciLk1NX1N0YXR1czo6JEFDVElWRS4iJyBPUiBzdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRQRU5ESU5HX0NBTkNFTExBVElPTi4iJykgIjsKCQkKCQlpZighZW1wdHkoJGJ1bmRsZUlkcykpCgkJewoJCQkkc3FsIC49ICIgQU5EIChidW5kbGVfaWQgSU4gKHskYnVuZGxlSWRzfSkpICI7CgkJfQoJCQoJCSRzcWwgLj0gIiBHUk9VUCBCWSBhY2Nlc3NfdHlwZV9pZDsiOwoJCXJldHVybiAkc3FsOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGFkZEZpbHRlcigkZmlsdGVycywgJG5ld0ZpbHRlcikgCgl7CgkJaWYoJGZpbHRlcnMgPT0gIiIpIHsKCQkJJGZpbHRlcnMgPSAiICIuJG5ld0ZpbHRlcjsKCQl9CgkJZWxzZSBpZigkbmV3RmlsdGVyICE9ICIiKSB7CgkJCSRmaWx0ZXJzIC49ICIgQU5EICIuJG5ld0ZpbHRlcjsKCQl9CgkJCgkJcmV0dXJuICRmaWx0ZXJzOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHN0b3JlU2VhcmNoU3RhdGUoJHBvc3QpIAoJewoJCWlmKGlzc2V0KCRwb3N0WyJtbV9zaG93X3NlYXJjaCJdKSkgCgkJewoJCQlpZihpc3NldCgkcG9zdFsibW1fYWRtaW5faWQiXSkpCgkJCXsKCQkJCSRvcHRpb25OYW1lID0gTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NIT1dfTUJSU19TRUFSQ0guIi0iLiRwb3N0WyJtbV9hZG1pbl9pZCJdOwoJCQkJTU1fT3B0aW9uVXRpbHM6OnNldE9wdGlvbigkb3B0aW9uTmFtZSwgJHBvc3RbIm1tX3Nob3dfc2VhcmNoIl0pOwoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHN0b3JlIHNlYXJjaCBzdGF0ZS4gQ291bGRuJ3QgZmluZCBjdXJyZW50IHVzZXIgSUQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHN0b3JlIHNlYXJjaCBzdGF0ZS4gTWlzc2luZyBjdXJyZW50IHN0YXRlIHZhbHVlLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGNyZWF0ZU1lbWJlcigkcG9zdCkgCgl7CgkJaWYoaXNzZXQoJHBvc3RbIm1tX25ld19tZW1iZXJzaGlwIl0pICYmIGlzc2V0KCRwb3N0WyJtbV9uZXdfZW1haWwiXSkpCgkJewoJCQkkbWVtYmVyc2hpcCA9IG5ldyBNTV9NZW1iZXJzaGlwTGV2ZWwoJHBvc3RbIm1tX25ld19tZW1iZXJzaGlwIl0pOwoJCQlpZighJG1lbWJlcnNoaXAtPmlzVmFsaWQoKSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3IgY3JlYXRpbmcgbWVtYmVyLiBNZW1iZXJzaGlwIGxldmVsIHdpdGggSUQgJ3skcG9zdFsibW1fbmV3X21lbWJlcnNoaXAiXX0nIGlzIGludmFsaWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQkJCgkJCSR1c2VyID0gTU1fVXNlcjo6ZmluZEJ5RW1haWwoJHBvc3RbIm1tX25ld19lbWFpbCJdKTsKCQkJCgkJCWlmKCEkdXNlci0+aXNWYWxpZCgpKQoJCQl7CgkJCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCk7CgkJCQkkdXNlci0+c2V0U3RhdHVzKE1NX1N0YXR1czo6JFBFTkRJTkdfQUNUSVZBVElPTik7CgkJCQkkdXNlci0+c2V0U3RhdHVzTWVzc2FnZSgiQ3VzdG9tZXIgYWNjb3VudCBjcmVhdGVkIGJ5IGFkbWluaXN0cmF0b3IgdXNpbmcgdGhlIENyZWF0ZSBNZW1iZXIgdG9vbCBidXQgbm90IGNvbXBsZXRlZC4iKTsKCQkJfQoJCQkKCQkJJHVzZXItPnNldEVtYWlsKCRwb3N0WyJtbV9uZXdfZW1haWwiXSk7CgkJCQoJCQlpZihpc3NldCgkcG9zdFsibW1fbmV3X2ZpcnN0X25hbWUiXSkpCgkJCXsKCQkJCSR1c2VyLT5zZXRGaXJzdE5hbWUoJHBvc3RbIm1tX25ld19maXJzdF9uYW1lIl0pOwoJCQl9CgkJCQoJCQlpZihpc3NldCgkcG9zdFsibW1fbmV3X2xhc3RfbmFtZSJdKSkKCQkJewoJCQkJJHVzZXItPnNldExhc3ROYW1lKCRwb3N0WyJtbV9uZXdfbGFzdF9uYW1lIl0pOwoJCQl9CgkJCQoJCQlpZihpc3NldCgkcG9zdFsibW1fbmV3X3Bob25lIl0pKQoJCQl7CgkJCQkkdXNlci0+c2V0UGhvbmUoJHBvc3RbIm1tX25ld19waG9uZSJdKTsKCQkJfQoJCQkKCQkJaWYoaXNzZXQoJHBvc3RbIm1tX25ld19wYXNzd29yZCJdKSkKCQkJewoJCQkJJHVzZXItPnNldFBhc3N3b3JkKCRwb3N0WyJtbV9uZXdfcGFzc3dvcmQiXSk7CgkJCX0KCQkJCgkJCSRyZXN1bHQgPSAkdXNlci0+Y29tbWl0RGF0YSgpOwoJCQkKCQkJaWYoTU1fUmVzcG9uc2U6OmlzU3VjY2VzcygkcmVzdWx0KSkKCQkJewoJCQkJcmV0dXJuIE1NX0FjY2Vzc0NvbnRyb2xFbmdpbmU6OmFzc2lnbk1lbWJlcnNoaXBUb1VzZXIoJHVzZXIsICRtZW1iZXJzaGlwKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCXJldHVybiAkcmVzdWx0OwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIGNyZWF0aW5nIG1lbWJlci4gTWVtYmVyc2hpcCBsZXZlbCBhbmQgZW1haWwgYWRkcmVzcyBhcmUgcmVxdWlyZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHJlbW92ZU1lbWJlcigkcG9zdCkgCgl7CgkJJHVzZXIgPSBuZXcgTU1fVXNlcigkcG9zdFsiaWQiXSk7CgkJCgkJaWYoJHVzZXItPmlzVmFsaWQoKSkgCgkJewoJCQkkcmVzdWx0ID0gJHVzZXItPmRlbGV0ZSgpOwoJCQkKCQkJcmV0dXJuICRyZXN1bHQ7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBkZWxldGUgbWVtYmVyLiBObyBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZVNlYXJjaEZvcm0oJHBvc3Q9bnVsbCkKCXsKCQlyZXR1cm4gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9tZW1iZXJzLmZvcm0ucGhwIiwgJHBvc3QpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2VuZXJhdGVEYXRhR3JpZCgkcG9zdD1udWxsKQoJewoJCXJldHVybiBNTV9URU1QTEFURTo6Z2VuZXJhdGUoTU1fTU9EVUxFUy4iL21lbWJlcnMuZGF0YWdyaWQucGhwIiwgJHBvc3QpOwoJfQogfQo=', 0, '2018-11-21 06:38:54'),
(126, 'paymentsettingsview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUGF5bWVudFNldHRpbmdzVmlldyBleHRlbmRzIE1NX1JCQUNBZG1pblZpZXcKewoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fU0FWRV9QQVlNRU5UX09QVElPTlMgPSAic2F2ZVBheW1lbnRPcHRpb25zIjsKCQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fUFJPQ0VTU19JTlRFUk1FRElBVEVfQUNUSU9OID0gInByb2Nlc3NJbnRlcm1lZGlhdGVBY3Rpb24iOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcGVyZm9ybUFjdGlvbigkcG9zdCkKCXsKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCgkJaWYoISgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSkpCgkJewoJCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0FWRV9QQVlNRU5UX09QVElPTlM6CgkJCQkJcmV0dXJuICR0aGlzLT5zYXZlUGF5bWVudE9wdGlvbnMoJHBvc3QpOwoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fUFJPQ0VTU19JTlRFUk1FRElBVEVfQUNUSU9OOgoJCQkJCSRjaGVjayA9ICR0aGlzLT5wcm9jZXNzSW50ZXJtZWRpYXRlQWN0aW9uKCRwb3N0KTsKCQkJCQlyZXR1cm4gJGNoZWNrOwoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBzYXZlUGF5bWVudE9wdGlvbnMgcmVjZWl2ZXMgdGhlIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZnJvbSB0aGUgaW50ZWdyYXRpb25zIHBhZ2UgKHBheW1lbnQgc2VydmljZXMgc2V0dGluZ3MpIGFuZCBpdGVyYXRlcyB0aHJvdWdoIHRoZSBwYXltZW50cyBzZXJ2aWNlcywgCgkgKiBjYWxsaW5nIHByb2Nlc3NDb25maWdPcHRpb25zIG9uIGVhY2ggb25lLCBhbGxvd2luZyB0aGVtIHRvIHNhdmUgdGhlaXIgY29uZmlndXJhdGlvbiBzZXR0aW5ncwoJICogCgkgKiBAcGFyYW0gQXJyYXkgJHBvc3QgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZGF0YSBmcm9tIHRoZSBwYXltZW50IHNlcnZpY2VzIHNldHRpbmdzIHBhZ2UKCSAqIEByZXR1cm4gTU1fUmVzcG9uc2Ugb2JqZWN0IGluZGljYXRpbmcgc3VjY2VzcyBvciBmYWlsdXJlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzYXZlUGF5bWVudE9wdGlvbnMoJHBvc3QpCgl7CgkJLy9jbGVhciB0aGUgb2JqZWN0IGNhY2hlLCBzaW5jZSB0aGlzIGFjdGlvbiBpbnZhbGlkYXRlcyBpdAoJCU1NX09iamVjdENhY2hlOjpkZWxldGUoTU1fUGF5bWVudFNlcnZpY2VGYWN0b3J5OjokQVZBSUxBQkxFX1NFUlZJQ0VTX0NBQ0hFX0tFWSk7CgkJCgkJaWYgKGlzc2V0KCRwb3N0WydvbnNpdGVfcGF5bWVudF9zZXJ2aWNlJ10pKQoJCXsKCQkJJGF2YWlsYWJsZVBheW1lbnRTZXJ2aWNlcyA9IE1NX1BheW1lbnRTZXJ2aWNlRmFjdG9yeTo6Z2V0UGF5bWVudFNlcnZpY2VzQXJyYXkoKTsKCQkJZm9yZWFjaCAoJGF2YWlsYWJsZVBheW1lbnRTZXJ2aWNlcyBhcyAkYVNlcnZpY2UpCgkJCXsKCQkJCSRyZXNwb25zZSA9ICRhU2VydmljZS0+cHJvY2Vzc0NvbmZpZ09wdGlvbnMoJHBvc3QpOwoJCQkJaWYgKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCQkJewoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGFTZXJ2aWNlLT5nZXROYW1lKCkuIjoiLiRyZXNwb25zZS0+bWVzc2FnZSxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJCX0KCQkJCWlmICgkcmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVzcG9uc2U6OiRFUlJPUikKCQkJCXsKCQkJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCQkJfQoJCQl9CgkJCS8vaWYgd2UgcmVhY2ggdGhpcyBwb2ludCwgYWxsIHRoZSBjb25maWcgb3B0aW9ucyB3ZXJlIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkKCQkJJHRvdGFsX3Jlc3BvbnNlID0gIiI7CgkJCWZvcmVhY2ggKCRhdmFpbGFibGVQYXltZW50U2VydmljZXMgYXMgJGFTZXJ2aWNlKQoJCQl7CgkJCQkkcmVzcG9uc2UgPSAkYVNlcnZpY2UtPmNvbW1pdERhdGEoKTsKCQkJCWlmIChNTV9SZXNwb25zZTo6aXNFcnJvcigkcmVzcG9uc2UpKQoJCQkJewoJCQkJCSR0b3RhbF9yZXNwb25zZSAuPSAoJGFTZXJ2aWNlLT5nZXROYW1lKCkuIjoiLiRyZXNwb25zZS0+bWVzc2FnZS4iXG4iKTsKCQkJCX0KCQkJfQoJCQkKCQkJaWYgKCR0b3RhbF9yZXNwb25zZSAhPSAiIikKCQkJewoJCQkJLy90aGlzIG1lYW5zIGF0IGxlYXN0IG9uZSBzZXJ2aWNlIGhhZCBwcm9ibGVtcyBkdXJpbmcgY29tbWl0LCBwYXNzIGJhY2sgdGhlIGVycm9yIG1lc3NhZ2VzCgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCR0b3RhbF9yZXNwb25zZSwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQkJLy9yZWFjaGluZyBoZXJlIG1lYW5zIGFsbCBzZXJ2aWNlcyBjb21taXR0ZWQgc3VjY2Vzc2Z1bGx5CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlBheW1lbnQgbWV0aG9kIHNldHRpbmdzIHNhdmVkIHN1Y2Nlc3NmdWxseSIpOwoJCX0KCQkKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUaGVyZSB3YXMgYW4gZXJyb3Igc2F2aW5nIHBheW1lbnQgbWV0aG9kIHNldHRpbmdzIixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCX0KCQoJCgkvKioKCSAqIHByb2Nlc3NJbnRlcm1lZGlhdGVBY3Rpb24gaXMgbWVhbnQgdG8gYWxsb3cgYSBjaGFubmVsIG9mIGNvbW11bmljYXRpb24gdG8gdGhlIHBheW1lbnQgc2VydmljZSBjbGFzc2VzIHByaW9yIHRvIGNvbmZpZ3VyYXRpb24gYmVpbmcgY29tcGxldGVkCgkgKiBBbiBleGFtcGxlIHVzZSBjYXNlIG9mIHRoaXMgbWlnaHQgYmUgYSBzZXJ2aWNlIHRoYXQgcmVxdWlyZXMgYSB1c2VybmFtZSBhbmQgcGFzc3dvcmQsIGFuZCB0aGVuIHJlcXVpcmVzIHRoZSB1c2VyIHRvIHNlbGVjdCBmcm9tIG11bHRpcGxlIGFjY291bnRzIGFzc29jaWF0ZWQKCSAqIHdpdGggdGhhdCB1c2VybmFtZSBhbmQgcGFzc3dvcmQuIFRoaXMgbWV0aG9kIHdvdWxkIHNlbmQgdGhlIHVuL3B3IHRvIHRoZSBwYXltZW50IHNlcnZpY2UsIHdoaWNoIHdvdWxkIHRoZW4gY29ubmVjdCB0byB0aGUgcmVtb3RlIHNlcnZlciBhbmQgcmV0cmlldmUgYSBsaXN0IG9mIGFjY291bnRzLAoJICogd2hpY2ggd291bGQgdGhlbiBiZSByZXR1cm5lZCB0byB0aGUgVUkgd2hlcmUgdGhleSBhcmUgcHJlc2VudGVkIGluIGEgZHJvcGRvd24KCSAqIAoJICogQHBhcmFtIEFycmF5ICRwb3N0IEFuIGFycmF5IG9mIHBvc3RlZCBkYXRhIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29uZmlndXJhdGlvbiBmb3JtIG9mIHRoZSBwYXltZW50IHNlcnZpY2UgcmVxdWVzdGluZyB0aGUgYWN0aW9uCgkgKiBAcmV0dXJuIE1NX1Jlc3BvbnNlIG9iamVjdCBjb250YWluaW5nIGFueSByZXF1ZXN0ZWQgZGF0YSBvbiBzdWNjZXNzLCBvciBhIGRlc2NyaXB0aXZlIGVycm9yIG1lc3NhZ2Ugb24gZmFpbHVyZQoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJvY2Vzc0ludGVybWVkaWF0ZUFjdGlvbigkcG9zdCkKCXsKCQlpZiAoIWlzX2FycmF5KCRwb3N0KSB8fCAhaXNzZXQoJHBvc3RbJ3Rva2VuJ10pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3I6IGltcHJvcGVyIHJlcXVlc3Qgc2VudCB0byBwcm9jZXNzSW50ZXJtZWRpYXRlQWN0aW9uIixNTV9SZXNwb25zZTo6JEVSUk9SKTsgLy9pbXByb3BlciBjb25maWd1cmF0aW9uCgkJfQoJCQoJCSRzZXJ2aWNlID0gTU1fUGF5bWVudFNlcnZpY2VGYWN0b3J5OjpnZXRQYXltZW50U2VydmljZShzdHJ0b3VwcGVyKCRwb3N0Wyd0b2tlbiddKSk7CgkJaWYgKCgkc2VydmljZSA9PW51bGwpIHx8ICEoJHNlcnZpY2UgaW5zdGFuY2VvZiBNTV9QYXltZW50U2VydmljZSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJwcm9jZXNzSW50ZXJtZWRpYXRlQWN0aW9uIGVycm9yOiBzZXJ2aWNlIG5vdCBmb3VuZCAtIHskcG9zdFsndG9rZW4nXX0iLE1NX1Jlc3BvbnNlOjokRVJST1IpOyAvL2ltcHJvcGVyIGNvbmZpZ3VyYXRpb24KCQl9CgkJCgkJcmV0dXJuICgkc2VydmljZS0+cHJvY2Vzc0ludGVybWVkaWF0ZUFjdGlvbigkcG9zdCkpOwkJCgl9CgkKfQo=', 0, '2018-11-21 06:38:54'),
(127, 'pushnotificationview', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(128, 'emailintegrationview', '', 0, '2018-11-21 06:38:54'),
(129, 'aweberoauthdatamissing', 'LyoqCiAqIE1NX0FXZWJlck9BdXRoRGF0YU1pc3NpbmcKICoKICogVXNlZCB3aGVuIGEgc3BlY2lmaWMgcGllY2Ugb3IgcGllY2VzIG9mIGRhdGEgd2FzIG5vdCBmb3VuZCBpbiB0aGUKICogcmVzcG9uc2UuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSBleGNlcHRpb24gdGhhdCBtaWdodCBiZSB0aHJvd24gYXMKICogYW4gTU1fQVdlYmVyT0F1dGhFeGNlcHRpb24gd2hlbiBwYXJhbWV0ZXJzIGFyZSBub3QgcHJvdmlkZWQgYmVjYXVzZQogKiBpdCBpcyBub3QgdGhlIHNlcnZlcnMnIGV4cGVjdGF0aW9ucyB0aGF0IHdlcmUgbm90IG1ldCwgYnV0IHJhdGhlcgogKiB0aGUgZXhwZWNhdGlvbnMgb2YgdGhlIGNsaWVudCB3ZXJlIG5vdCBtZXQgYnkgdGhlIHNlcnZlci4KICoKICogQHVzZXMgTU1fQVdlYmVyRXhjZXB0aW9uCiAqIEBwYWNrYWdlCiAqIEB2ZXJzaW9uICRpZCQKICovCmNsYXNzIE1NX0FXZWJlck9BdXRoRGF0YU1pc3NpbmcgZXh0ZW5kcyBNTV9BV2ViZXJFeGNlcHRpb24gewoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkbWlzc2luZykgewoJCWlmICghaXNfYXJyYXkoJG1pc3NpbmcpKSAkbWlzc2luZyA9IGFycmF5KCRtaXNzaW5nKTsKCQkkdGhpcy0+bWlzc2luZyA9ICRtaXNzaW5nOwoJCSRyZXF1aXJlZCA9IGpvaW4oJywgJywgJHRoaXMtPm1pc3NpbmcpOwoJCXBhcmVudDo6X19jb25zdHJ1Y3QoIk9BdXRoRGF0YU1pc3Npbmc6IFJlc3BvbnNlIHdhcyBleHBlY3RlZCB0byBjb250YWluOiB7JHJlcXVpcmVkfSIpOwoKCX0KfQo=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(130, 'order', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogCiAqIAogKiBNTV9PcmRlciByZXByZXNlbnRzIGFuIG9yZGVyIGFuZCBhbGwgb2YgdGhlIG5vbi1wcm9kdWN0IGluZm9ybWF0aW9uIHRoYXQgZ29lcyB3aXRoIGl0IChiaWxsaW5nICYgc2hpcHBpbmcgYWRkcmVzc2VzLCBzdGF0dXMsCiAqIHRvdGFscywgZXRjKS4gSXQgYWxzbyBpcyBhIGNvbnRhaW5lciBmb3IgdGhlIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBwYXltZW50IHNlcnZpY2UsIHByb2R1Y3RzIGFuZCBjb3Vwb25zLCBhbHRob3VnaCB0aGVzZSBhcmUgc3RvcmVkIAogKiBpbiBzZXBhcmF0ZSBkYiB0YWJsZXMuCiAqIAogKiBPcmRlciBzdGF0dXMgaXMgaW5kaWNhdGVkIGFzIGZvbGxvd3M6CiAqIAogKiBQRU5ESU5HIC0gb3JkZXIgaGFzIGJlZW4gY3JlYXRlZCBidXQgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBiZWVuIHBlcnNpc3RlZCB0byB0aGUgZGF0YWJhc2UuIEl0IGhhcyBub3QgYmVlbiB2YWxpZGF0ZWQgYW5kIGEgcGF5bWVudCBzZXJ2aWNlIGhhcyBub3QgYmVlbiBhdHRhY2hlZAogKiBBV0FJVElOR19QQVlNRU5UIC0gb3JkZXIgaGFzIGJlZW4gcGVyc2lzdGVkLCB2YWxpZGF0ZWQsIGFuZCBzaG91bGQgaGF2ZSBhIHZhbGlkIHBheW1lbnQgc2VydmljZSBhdHRhY2hlZC4gTm8gc3VjY2Vzc2Z1bHMgcGF5bWVudHMgaGF2ZSBiZWVuIG1hZGUKICogUEFJRF9DT01QTEVURSAtIHBhaWQvY29tcGxldGUuIEEgc3VjY2Vzc2Z1bCBwYXltZW50IGhhcyBiZWVuIG1hZGUgYWdhaW5zdCB0aGUgb3JkZXIsIG9yIGluIHRoZSBjYXNlIG9mIGEgZnJlZSBwcm9kdWN0LCB0aGUgb3JkZXIgaXMgaW4gYSBjb21wbGV0ZWQgc3RhdGUgd2l0aG91dCBwYXltZW50CiAqCiAqIEFuIGltcG9ydGFudCB0aGluZyB0byBub3RlIGFib3V0IHRoZSBvcmRlciBpcyB0aGF0IHRvdGFsIGNhbGN1bGF0aW9uIGNhbiBiZSB2ZXJ5IGV4cGVuc2l2ZSwgZXNwZWNpYWxseSBpbiB0aGUgY2FzZSB3aGVyZSBhIGNvdXBvbiBpcyBhcHBsaWVkLgogKiBCZWNhdXNlIHNvbWUgY291cG9ucyBhcHBseSBhIHBlcmNlbnRhZ2UgZGlzY291bnQgdG8gdGhlIGVudGlyZSBvcmRlciwgZXZlcnkgcHJvZHVjdCBoYXMgdG8gYmUgZXhhbWluZWQgdG8gY2FsY3VsYXRlIHRoZSBleGFjdCBkaXNjb3VudC4gVGhpcyBtZWFucyB0aGF0CiAqIEFMTCBvZiB0aGUgbGlua2VkIHByb2R1Y3QgZW50aXRpZXMgaGF2ZSB0byBiZSBsb2FkZWQgYXMgYSByZXN1bHQgb2YgdGhhdCBjYWxsLiBEdWUgdG8gdGhpcyBiZWhhdmlvciwgc3VidG90YWwvdG90YWwgY2FsY3VsYXRpb24gaXMgbGltaXRlZCB0byBiZWluZyBkb25lIG9ubHkgCiAqIGFzIHRoZSByZXN1bHQgb2YgYSBtYW51YWwgY2FsbCB0byBjYWxjdWxhdGVUb3RhbCwgc28gYmUgYXdhcmUgdGhhdCBpZiB0aGUgb3JkZXIgaXMgbW9kaWZpZWQgYWZ0ZXIgY2FsY3VsYXRpb24sIHRoZSB0b3RhbHMgbWF5IGJlIG91dCBvZiBzeW5jIHdpdGggdGhlIG9yZGVyIHN0YXRlCiAqCiAqLwpjbGFzcyBNTV9PcmRlciBleHRlbmRzIE1NX0VudGl0eQp7CQoJLy8gdGhpcyBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBvcmRlciBvYmplY3Qgd2l0aCBzYW1wbGUgZGF0YSBpbiBpdAoJcHVibGljIHN0YXRpYyAkU0FNUExFX09SREVSX0lEID0gIi0xMCI7CgkKCXByaXZhdGUgJG9yZGVyX251bWJlciA9IDA7Cglwcml2YXRlICRjdXN0b21lciA9IG51bGw7CgkKCXByaXZhdGUgJHBheW1lbnRNZXRob2QgPSBudWxsOwoJcHJpdmF0ZSAkYmlsbGluZ0FkZHJlc3MgPSBudWxsOwoJcHJpdmF0ZSAkc2hpcHBpbmdBZGRyZXNzID0gbnVsbDsKCQoJcHJpdmF0ZSAkc2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbiA9IG51bGw7Cglwcml2YXRlICRzaGlwcGluZ09wdGlvbktleSA9IG51bGw7CgkKCXByaXZhdGUgJHN1YnRvdGFsID0gMC4wMDsKCXByaXZhdGUgJHRheCA9IDAuMDA7Cglwcml2YXRlICRzaGlwcGluZyA9IDAuMDA7Cglwcml2YXRlICRkaXNjb3VudCA9IDAuMDA7Cglwcml2YXRlICR0b3RhbCA9IDAuMDA7Cglwcml2YXRlICRjdXJyZW5jeSA9ICIiOwoJCglwcml2YXRlICRvcmRlckRhdGUgPSBudWxsOwoJcHJpdmF0ZSAkb3JkZXJVcGRhdGVkID0gbnVsbDsKCQoJcHJpdmF0ZSAkb3JkZXJfc3RhdHVzID0gMDsgLy9kZWZhdWx0IHN0YXR1cyBpcyBwZW5kaW5nCglwcml2YXRlICRvcmRlclByb2R1Y3RzID0gYXJyYXkoKTsKCXByaXZhdGUgJG9yZGVyQ291cG9ucyA9IGFycmF5KCk7Cglwcml2YXRlICRvcmRlclByb3JhdGlvbnMgPSBhcnJheSgpOwoJCglwcml2YXRlICRkYXRlQWRkZWQgPSAiIjsKCXByaXZhdGUgJGRhdGVNb2RpZmllZCA9ICIiOwoJCglwcml2YXRlICRpc1NoaXBwYWJsZSA9IGZhbHNlOyAgLy90cmFuc2llbnQKCXByaXZhdGUgJHNoaXBwaW5nU2FtZUFzQmlsbGluZyA9IGZhbHNlOyAvL3RyYW5zaWVudAoJCglwcml2YXRlICRhZmZpbGlhdGVJZCA9ICIiOwoJcHJpdmF0ZSAkc3ViQWZmaWxpYXRlSWQgPSAiIjsKCQoJcHJpdmF0ZSAkaXBBZGRyZXNzID0gIiI7CgkKCXByaXZhdGUgJGZvcm1TdWJtaXNzaW9uSWQgPSBudWxsOwoJCglwcml2YXRlICRpc1Rlc3QgPSBmYWxzZTsKCQoJcHVibGljIHN0YXRpYyAkUEVORElORyA9IDA7CglwdWJsaWMgc3RhdGljICRBV0FJVElOR19QQVlNRU5UID0gMTsKCXB1YmxpYyBzdGF0aWMgJFBBSURfQ09NUExFVEUgPSAyOwoJcHVibGljIHN0YXRpYyAkRVJST1JfRkFJTEVEID0gMzsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRpZD0iIiwgJGdldERhdGE9dHJ1ZSkKCXsKCQkvL3NldCBkZWZhdWx0IGFkZHJlc3MgdmFsdWVzCgkJJHRoaXMtPmJpbGxpbmdBZGRyZXNzICA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoKTsKCQkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzID0gbmV3IE1NX0N1c3RvbWVyQWRkcmVzcygpOwoJCQoJCS8vc2V0IGRlZmF1bHQgY3VycmVuY3kKCQkkdGhpcy0+Y3VycmVuY3kgPSBNTV9DdXJyZW5jeVV0aWw6OmdldEFjdGl2ZUN1cnJlbmN5KCk7CgkJJHRoaXMtPmlwQWRkcmVzcyA9IE1NX1V0aWxzOjpnZXRDbGllbnRJUEFkZHJlc3MoKTsKCQkKCQlpZighKCRpZCBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCWlmKGlzc2V0KCRpZCkgJiYgKGludHZhbCgkaWQpID4gMCB8fCBpbnR2YWwoJGlkKSA9PSBzZWxmOjokU0FNUExFX09SREVSX0lEKSkKCQkJewoJCQkJJHRoaXMtPmlkID0gJGlkOwoJCQkJCQoJCQkJaWYoJGdldERhdGEgPT0gdHJ1ZSkKCQkJCXsKCQkJCQkkdGhpcy0+Z2V0RGF0YSgpOwoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJGlkID0gIiI7CgkJCX0KCQl9Cgl9CgkKCQoJLyoqCgkgKiBEZXN0cm95IHJlbW92ZXMgYW55IGNpcmN1bGFyIHJlZmVyZW5jZXMgYmV0d2VlbiB0aGUgb3JkZXIgYW5kIGl0cyBvcmRlciBpdGVtcy4gSW4gUEhQIDw9IDUuMiwgYW5kIDUuMysgd2hlbiB1c2luZyB0aGUgb2xkIGdhcmJhZ2UgY29sbGVjdG9yLCAKCSAqIGRlc3Ryb3koKSBtdXN0IGJlIGNhbGxlZCBtYW51YWxseSBvbiBhbiBvcmRlciB0byBmcmVlIHRoZSB1c2VkIG1lbW9yeS4gSW4gVEhFT1JZLCBQSFAgNS40KyBjYW4gZG8gdGhpcyBhdXRvbWF0aWNhbGx5CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBkZXN0cm95KCkgCgl7CgkJaWYgKGlzc2V0KCR0aGlzLT5vcmRlclByb2R1Y3RzKSkKCQl7CgkJCWZvcmVhY2ggKCR0aGlzLT5vcmRlclByb2R1Y3RzIGFzICRwcm9kdWN0SXRlbSkKCQkJewoJCQkJJHByb2R1Y3RJdGVtLT5kZXN0cm95KCk7CgkJCX0KCQkJdW5zZXQoJHRoaXMtPm9yZGVyUHJvZHVjdHMpOwoJCX0KCQkKCQlpZiAoaXNzZXQoJHRoaXMtPm9yZGVyQ291cG9ucykpCgkJewoJCQlmb3JlYWNoICgkdGhpcy0+b3JkZXJDb3Vwb25zIGFzICRjb3Vwb25JdGVtKQoJCQl7CgkJCQkkY291cG9uSXRlbS0+ZGVzdHJveSgpOwoJCQl9CgkJCXVuc2V0KCR0aGlzLT5vcmRlckNvdXBvbnMpOwoJCX0KCQkKCQlpZiAoaXNzZXQoJHRoaXMtPm9yZGVyUHJvcmF0aW9ucykpCgkJewoJCQlmb3JlYWNoICgkdGhpcy0+b3JkZXJQcm9yYXRpb25zIGFzICRwcm9yYXRpb25JdGVtKQoJCQl7CgkJCQkkcHJvcmF0aW9uSXRlbS0+ZGVzdHJveSgpOwoJCQl9CgkJCXVuc2V0KCR0aGlzLT5vcmRlclByb3JhdGlvbnMpOwoJCX0KCX0KCQoJCgkvKioKCSAqIE1NX09yZGVyOjpnZXREYXRhIHJldHJpZXZlcyBzdG9yZWQgb3JkZXIgaW5mb3JtYXRpb24uIEl0IGF0dGVtcHRzIHRvIHVzZSB0aGUgb3JkZXIgbnVtYmVyIGZvciByZXRyaWV2YWwgZmlyc3QsIGlmIHRoaXMgaXMgbm90IHNldCB0aGVuCgkgKiBpdCBjaGVja3MgdG8gc2VlIGlmIHRoZSBpZCBoYXMgYmVlbiBzZXQuIElmIHRoZSBpZCBoYXMgbm90IGJlZW4gc2V0LCB0aGUgbWV0aG9kIHJldHVybnMgZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCB0aGUgb3JkZXIgY2Fubm90IGJlIHJldHJpZXZlZCAoaW5zdWZmaWNpZW50IGRhdGEpIAoJICogQHNlZSBNTV9FbnRpdHk6OmdldERhdGEoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpIAoJewoJCWlmKCR0aGlzLT5pZCAhPSBzZWxmOjokU0FNUExFX09SREVSX0lEKQoJCXsKCQkJZ2xvYmFsICR3cGRiOwoJCQkkc3FsID0gInNlbGVjdCAqIGZyb20gIi5NTV9UQUJMRV9PUkRFUlMuIiB3aGVyZSAiOwoJCQlpZiAoJHRoaXMtPm9yZGVyX251bWJlciAhPSAwKSAKCQkJewoJCQkJJHNxbC49Im9yZGVyX251bWJlcj0neyR0aGlzLT5vcmRlcl9udW1iZXJ9JyI7CgkJCX0KCQkJZWxzZSBpZiAoJHRoaXMtPmlkICE9IDApIAoJCQl7CgkJCQkkc3FsLj0iaWQ9J3skdGhpcy0+aWR9JyI7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCQoJCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCWlmKCRyZXN1bHQpIAoJCQl7CgkJCQkkdGhpcy0+c2V0RGF0YSgkcmVzdWx0KTsKCQkJfQoJCQllbHNlIAoJCQl7CgkJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQkvLyBwb3B1bGF0ZSBzYW1wbGUgZGF0YQoJCQkkdGhpcy0+aWQgPSBzZWxmOjokU0FNUExFX09SREVSX0lEOwoJCQkkdGhpcy0+Y3VzdG9tZXIgPSBuZXcgTU1fVXNlcihNTV9Vc2VyOjokU0FNUExFX1VTRVJfSUQpOwoJCQkkdGhpcy0+b3JkZXJfbnVtYmVyID0gIjEwMDAwMSI7CgkJCSR0aGlzLT5zdWJ0b3RhbCA9ICI4MC4wMCI7CgkJCSR0aGlzLT5kaXNjb3VudCA9ICIxMC4wMCI7CgkJCSR0aGlzLT5zaGlwcGluZyA9ICI1LjAwIjsKCQkJJHRoaXMtPnRheCA9ICIwLjAwIjsKCQkJJHRoaXMtPnRvdGFsID0gIjc1LjAwIjsKCQkJJHRoaXMtPmN1cnJlbmN5ID0gTU1fQ3VycmVuY3lVdGlsOjpnZXRBY3RpdmVDdXJyZW5jeSgpOwoJCQkkdGhpcy0+YmlsbGluZ0FkZHJlc3MgPSBuZXcgTU1fQ3VzdG9tZXJBZGRyZXNzKCk7CgkJCSR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+c2V0QWRkcmVzc0xpbmUxKCIxMjMgU2FtcGxlIFN0LiIpOwoJCQkkdGhpcy0+YmlsbGluZ0FkZHJlc3MtPnNldENpdHkoIlNhbXBsZSBDaXR5Iik7CgkJCSR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+c2V0U3RhdGUoIk5ZIik7CgkJCSR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+c2V0UG9zdGFsQ29kZSgiMTIzNDUiKTsKCQkJJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5zZXRDb3VudHJ5KCJVUyIpOwoJCQkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzID0gbmV3IE1NX0N1c3RvbWVyQWRkcmVzcygpOwoJCQkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5zZXRBZGRyZXNzTGluZTEoIjEyMyBTYW1wbGUgU3QuIik7CgkJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPnNldENpdHkoIlNhbXBsZSBDaXR5Iik7CgkJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPnNldFN0YXRlKCJOWSIpOwoJCQkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5zZXRQb3N0YWxDb2RlKCIxMjM0NSIpOwoJCQkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5zZXRDb3VudHJ5KCJVUyIpOwoJCQkkdGhpcy0+ZGF0ZUFkZGVkID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCSR0aGlzLT5kYXRlTW9kaWZpZWQgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJJHRoaXMtPnNoaXBwaW5nT3B0aW9uRGVzY3JpcHRpb24gPSAiKEZMQVRSQVRFKSBHcm91bmQiOwoJCQkkdGhpcy0+YWZmaWxpYXRlSWQgPSAic2FtcGxlYWZmaWxpYXRlIjsKCQkJJHRoaXMtPnN1YkFmZmlsaWF0ZUlkID0gInNhbXBsZXN1YmFmZmlsaWF0ZSI7CgkJCSR0aGlzLT5pcEFkZHJlc3MgPSAiMTAwLjEuMS4xIjsKCQkJCgkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRkYXRhKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQl0cnkgCgkJewoJCQkkdGhpcy0+aWQgPSAkZGF0YS0+aWQ7CgkJCSR0aGlzLT5jdXN0b21lciA9IG5ldyBNTV9Vc2VyKCRkYXRhLT51c2VyX2lkKTsKCQkJCgkJCSR0aGlzLT5iaWxsaW5nQWRkcmVzcyA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoKTsKCQkJJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5zZXRCaWxsaW5nQWRkcmVzcygkZGF0YSk7CgkJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MgPSBuZXcgTU1fQ3VzdG9tZXJBZGRyZXNzKCk7CgkJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPnNldFNoaXBwaW5nQWRkcmVzcygkZGF0YSk7CgkJCQoJCQkkdGhpcy0+b3JkZXJfbnVtYmVyID0gJGRhdGEtPm9yZGVyX251bWJlcjsKCQkJJHRoaXMtPnN1YnRvdGFsID0gJGRhdGEtPnN1YnRvdGFsOwoJCQkkdGhpcy0+ZGlzY291bnQgPSAkZGF0YS0+ZGlzY291bnQ7CgkJCSR0aGlzLT5zaGlwcGluZyA9ICRkYXRhLT5zaGlwcGluZzsKCQkJJHRoaXMtPnRheCA9ICRkYXRhLT50YXg7CgkJCSR0aGlzLT50b3RhbCA9ICRkYXRhLT50b3RhbDsKCQkJJHRoaXMtPmN1cnJlbmN5ID0gJGRhdGEtPmN1cnJlbmN5OwoJCQkkdGhpcy0+b3JkZXJfc3RhdHVzID0gJGRhdGEtPnN0YXR1czsKCQkJJHRoaXMtPmRhdGVBZGRlZCA9ICRkYXRhLT5kYXRlX2FkZGVkOwoJCQkkdGhpcy0+ZGF0ZU1vZGlmaWVkID0gJGRhdGEtPmRhdGVfbW9kaWZpZWQ7CgkJCSR0aGlzLT5zaGlwcGluZ09wdGlvbkRlc2NyaXB0aW9uID0gJGRhdGEtPnNoaXBwaW5nX29wdGlvbl9kZXNjcmlwdGlvbjsKCQkJCgkJCSR0aGlzLT5hZmZpbGlhdGVJZCA9ICRkYXRhLT5hZmZpbGlhdGVfaWQ7CgkJCSR0aGlzLT5zdWJBZmZpbGlhdGVJZCA9ICRkYXRhLT5zdWJfYWZmaWxpYXRlX2lkOwoJCQkkdGhpcy0+Zm9ybVN1Ym1pc3Npb25JZCA9ICRkYXRhLT5mb3JtX3N1Ym1pc3Npb25faWQ7CgkJCSR0aGlzLT5pcEFkZHJlc3MgPSAkZGF0YS0+aXBfYWRkcmVzczsKCQkJJHRoaXMtPmlzVGVzdCA9ICgkZGF0YS0+aXNfdGVzdCA9PSAxKTsKCQkJCgkJCS8vY3JlYXRlIGFuZCBhdHRhY2ggcGF5bWVudCBzZXJ2aWNlIG9iamVjdAoJCQlpZiAoaXNzZXQoJGRhdGEtPnBheW1lbnRfaWQpKQoJCQl7CgkJCQkkdGhpcy0+c2V0UGF5bWVudE1ldGhvZChNTV9QYXltZW50U2VydmljZUZhY3Rvcnk6OmdldFBheW1lbnRTZXJ2aWNlQnlJZCgkZGF0YS0+cGF5bWVudF9pZCkpOwoJCQl9CgkJCQoJCQkvL2ZldGNoIG9yZGVyIGl0ZW1zCgkJCSR0aGlzLT5vcmRlckl0ZW1zICAgPSBhcnJheSgpOwoJCQkkdGhpcy0+b3JkZXJDb3Vwb25zID0gYXJyYXkoKTsKCQkJJHRoaXMtPm9yZGVyUHJvcmF0aW9ucyA9IGFycmF5KCk7CgkJCSRvaXNxbCA9ICJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfT1JERVJfSVRFTVMuIiB3aGVyZSBvcmRlcl9pZCA9ICd7JHRoaXMtPmlkfSciOwoJCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkb2lzcWwpOwoJCQlmb3JlYWNoICgkcmVzdWx0cyBhcyAkb3JkZXJJdGVtRGF0YSkKCQkJewoJCQkJJG5ld0l0ZW0gPSBuZXcgTU1fT3JkZXJJdGVtKCRvcmRlckl0ZW1EYXRhLT5pZCwgZmFsc2UsJHRoaXMpOyAvL3NheWluZyBmYWxzZSBoZXJlIHNhdmVzIHVzIGZyb20gaGF2aW5nIHRvIG1ha2UgYW5vdGhlciB0cmlwIHRvIGRiIHRvIGdldCB0aGUgc2FtZSBkYXRhCgkJCQkkbmV3SXRlbS0+c2V0RGF0YSgkb3JkZXJJdGVtRGF0YSk7CgkJCQkkbmV3SXRlbS0+dmFsaWRhdGUoKTsKCQkJCWlmICgkbmV3SXRlbS0+Z2V0SXRlbVR5cGUoKSA9PSBNTV9PcmRlckl0ZW06OiRPUkRFUl9JVEVNX1RZUEVfUFJPRFVDVCkKCQkJCXsKCQkJCQkkdGhpcy0+b3JkZXJQcm9kdWN0c1skb3JkZXJJdGVtRGF0YS0+aXRlbV9pZF0gPSAkbmV3SXRlbTsKCQkJCX0KCQkJCWVsc2UgaWYgKCRuZXdJdGVtLT5nZXRJdGVtVHlwZSgpID09IE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9ESVNDT1VOVCkKCQkJCXsKCQkJCQkkdGhpcy0+b3JkZXJDb3Vwb25zWyRvcmRlckl0ZW1EYXRhLT5pdGVtX2lkXSA9ICRuZXdJdGVtOwoJCQkJfQoJCQkJZWxzZSBpZiAoJG5ld0l0ZW0tPmdldEl0ZW1UeXBlKCkgPT0gTU1fT3JkZXJJdGVtOjokT1JERVJfSVRFTV9UWVBFX1BST1JBVElPTikKCQkJCXsKCQkJCQkkdGhpcy0+b3JkZXJQcm9yYXRpb25zW10gPSAkbmV3SXRlbTsKCQkJCX0KCQkJfQoJCQkKCQkJcGFyZW50Ojp2YWxpZGF0ZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkKCQl7CgkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGNvbW1pdERhdGEoKQoJewkKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy9jYW50IGNvbW1pdCB3aXRoIG5vIGl0ZW1zCgkJaWYgKCFpc19hcnJheSgkdGhpcy0+b3JkZXJQcm9kdWN0cykgfHwgKGNvdW50KCR0aGlzLT5vcmRlclByb2R1Y3RzKSA9PSAwKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBzYXZlIG9yZGVyOiBPcmRlciBoYXMgbm8gcHJvZHVjdHMiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkvL2NhbnQgY29tbWl0IHdpdGggbm8gY3VzdG9tZXIgZWl0aGVyCgkJaWYgKGlzX251bGwoJHRoaXMtPmN1c3RvbWVyKSB8fCAhKCR0aGlzLT5jdXN0b21lciBpbnN0YW5jZW9mIE1NX1VzZXIpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHNhdmUgb3JkZXI6IE9yZGVyIGhhcyBubyBjdXN0b21lciIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQkJCgkJLy9pZiBjdXN0b21lciBoYXNudCBiZWVuIGNvbW1pdHRlZCwgY29tbWl0LiAKCQlpZiAoISR0aGlzLT5jdXN0b21lci0+aXNWYWxpZCgpKQoJCXsKCQkJJGN1c3RvbWVyUmVzcG9uc2UgPSAkdGhpcy0+Y3VzdG9tZXItPmNvbW1pdERhdGEoKTsKCQkJaWYgKCRjdXN0b21lclJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokRVJST1IpCgkJCXsKCQkJCSRjdXN0b21lclJlc3BvbnNlLT5tZXNzYWdlID0gIlVuYWJsZSB0byBzYXZlIG9yZGVyOiAiLiRjdXN0b21lclJlc3BvbnNlLT5tZXNzYWdlOwoJCQkJcmV0dXJuICRjdXN0b21lclJlc3BvbnNlOwoJCQl9CgkJfQoJCQoJCSR0aGlzLT5jYWxjdWxhdGVUb3RhbCgpOyAvL21ha2Ugc3VyZSB0aGUgdG90YWwgaXMgYWNjdXJhdGUKCQkkaXNVcGRhdGUgPSAoaW50dmFsKCR0aGlzLT5pZCkgPjApP3RydWU6ZmFsc2U7CgkJCgkJJG9yZGVyRGF0YSA9IGFycmF5KAoJCQkib3JkZXJfbnVtYmVyIiAgICAgICAgICAgICAgICAgPT4gICR0aGlzLT5vcmRlcl9udW1iZXIsCgkJCSJ1c2VyX2lkIiAgICAgICAgICAgICAgICAgICAgICA9PiAgJHRoaXMtPmN1c3RvbWVyLT5nZXRJZCgpLAoJCQkiYWZmaWxpYXRlX2lkIiAgICAgICAgICAgICAgICAgPT4gICR0aGlzLT5hZmZpbGlhdGVJZCwKCQkJInN1Yl9hZmZpbGlhdGVfaWQiICAgICAgICAgICAgID0+ICAkdGhpcy0+c3ViQWZmaWxpYXRlSWQsCgkJCSJiaWxsaW5nX2ZpcnN0X25hbWUiICAgICAgICAgICA9PiAgJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5nZXRGaXJzdE5hbWUoKSwKCQkJImJpbGxpbmdfbGFzdF9uYW1lIiAgICAgICAgICAgID0+ICAkdGhpcy0+YmlsbGluZ0FkZHJlc3MtPmdldExhc3ROYW1lKCksCgkJCSJiaWxsaW5nX3Bob25lIgkJCQkgICA9PiAgJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5nZXRQaG9uZSgpLAoJCQkiYmlsbGluZ19hZGRyZXNzMSIgICAgICAgICAgICAgPT4gICR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+Z2V0QWRkcmVzc0xpbmUxKCksCgkJCSJiaWxsaW5nX2FkZHJlc3MyIiAgICAgICAgICAgICA9PiAgJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTIoKSwKCQkJImJpbGxpbmdfY2l0eSIgICAgICAgICAgICAgICAgID0+ICAkdGhpcy0+YmlsbGluZ0FkZHJlc3MtPmdldENpdHkoKSwKCQkJImJpbGxpbmdfc3RhdGUiICAgICAgICAgICAgICAgID0+ICAkdGhpcy0+YmlsbGluZ0FkZHJlc3MtPmdldFN0YXRlKCksCgkJCSJiaWxsaW5nX3Byb3ZpbmNlIiAgICAgICAgICAgICA9PiAgJHRoaXMtPmJpbGxpbmdBZGRyZXNzLT5nZXRQcm92aW5jZSgpLAoJCQkiYmlsbGluZ19wb3N0YWxfY29kZSIgICAgICAgICAgPT4gICR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+Z2V0UG9zdGFsQ29kZSgpLAoJCQkiYmlsbGluZ19jb3VudHJ5IiAgICAgICAgICAgICAgPT4gICR0aGlzLT5iaWxsaW5nQWRkcmVzcy0+Z2V0Q291bnRyeSgpLAoJCQkic2hpcHBpbmdfZmlyc3RfbmFtZSIgICAgICAgICAgPT4gICR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPmdldEZpcnN0TmFtZSgpLAoJCQkic2hpcHBpbmdfbGFzdF9uYW1lIiAgICAgICAgICAgPT4gICR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPmdldExhc3ROYW1lKCksCgkJCSJzaGlwcGluZ19waG9uZSIJCQkgICA9PiAgJHRoaXMtPnNoaXBwaW5nQWRkcmVzcy0+Z2V0UGhvbmUoKSwKCQkJInNoaXBwaW5nX2FkZHJlc3MxIiAgICAgICAgICAgID0+ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTEoKSwKCQkJInNoaXBwaW5nX2FkZHJlc3MyIiAgICAgICAgICAgID0+ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTIoKSwKCQkJInNoaXBwaW5nX2NpdHkiICAgICAgICAgICAgICAgID0+ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5nZXRDaXR5KCksCgkJCSJzaGlwcGluZ19zdGF0ZSIgICAgICAgICAgICAgICA9PiAgJHRoaXMtPnNoaXBwaW5nQWRkcmVzcy0+Z2V0U3RhdGUoKSwKCQkJInNoaXBwaW5nX3Byb3ZpbmNlIiAgICAgICAgICAgID0+ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5nZXRQcm92aW5jZSgpLAoJCQkic2hpcHBpbmdfcG9zdGFsX2NvZGUiICAgICAgICAgPT4gICR0aGlzLT5zaGlwcGluZ0FkZHJlc3MtPmdldFBvc3RhbENvZGUoKSwKCQkJInNoaXBwaW5nX2NvdW50cnkiICAgICAgICAgICAgID0+ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzLT5nZXRDb3VudHJ5KCksCgkJCSJzaGlwcGluZ19vcHRpb25fa2V5IiAgICAgICAgICA9PiAgJHRoaXMtPnNoaXBwaW5nT3B0aW9uS2V5LAoJCQkic2hpcHBpbmdfb3B0aW9uX2Rlc2NyaXB0aW9uIiAgPT4gICR0aGlzLT5zaGlwcGluZ09wdGlvbkRlc2NyaXB0aW9uLAoJCQkic3VidG90YWwiICAgICAgICAgICAgICAgICAgICAgPT4gICR0aGlzLT5zdWJ0b3RhbCwKCQkJImRpc2NvdW50IiAgICAgICAgICAgICAgICAgICAgID0+ICAkdGhpcy0+ZGlzY291bnQsCgkJCSJzaGlwcGluZyIgICAgICAgICAgICAgICAgICAgICA9PiAgJHRoaXMtPnNoaXBwaW5nLAoJCQkidGF4IiAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gICR0aGlzLT50YXgsCgkJCSJ0b3RhbCIgICAgICAgICAgICAgICAgICAgICAgICA9PiAgJHRoaXMtPnRvdGFsLAoJCQkiY3VycmVuY3kiICAgICAgICAgICAgICAgICAgICAgPT4gICR0aGlzLT5jdXJyZW5jeSwKCQkJImZvcm1fc3VibWlzc2lvbl9pZCIgICAgICAgICAgICAgICAgICAgICA9PiAgJHRoaXMtPmZvcm1TdWJtaXNzaW9uSWQsCgkJCSJzdGF0dXMiICAgICAgICAgICAgICAgICAgICAgICA9PiAgJHRoaXMtPm9yZGVyX3N0YXR1cywKCQkJImlzX3Rlc3QiCQkJCQkgICA9PiAgJHRoaXMtPmlzVGVzdD8xOjAKCQkpOwoJCQoJCWlmKCFpc19udWxsKCR0aGlzLT5wYXltZW50TWV0aG9kKSkKCQl7CgkJCSRvcmRlckRhdGFbInBheW1lbnRfaWQiXSA9ICR0aGlzLT5wYXltZW50TWV0aG9kLT5nZXRJZCgpOwoJCX0KCQkKCQkvL2JlZ2luIHRyYW5zYWN0aW9uCgkJTU1fVHJhbnNhY3Rpb246OmJlZ2luKCk7CgkJdHJ5CgkJewoJCQlpZiAoISRpc1VwZGF0ZSkKCQkJewoJCQkJLy90aGlzIGlzIGEgbmV3IHJlY29yZAoJCQkJJG9yZGVyTnVtYmVyR2VuZXJhdG9yID0gTU1fT3JkZXJOdW1iZXJHZW5lcmF0b3JGYWN0b3J5OjpnZXRPcmRlck51bWJlckdlbmVyYXRvcihNTV9PcmRlck51bWJlckdlbmVyYXRvcjo6JERFRkFVTFQpOwoJCQkJJG9yZGVyRGF0YVsib3JkZXJfbnVtYmVyIl0gPSAkb3JkZXJOdW1iZXJHZW5lcmF0b3ItPnByZUNvbW1pdCgkdGhpcyk7CgkJCQkkb3JkZXJEYXRhWyJkYXRlX2FkZGVkIl0gICA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCQkJJG9yZGVyRGF0YVsiaXBfYWRkcmVzcyJdICAgPSAkdGhpcy0+aXBBZGRyZXNzOwoJCQkJCQoJCQkJJHJlc3VsdCA9ICR3cGRiLT5pbnNlcnQoTU1fVEFCTEVfT1JERVJTLCRvcmRlckRhdGEpOwoJCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCQl7CgkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigidW5hYmxlIHRvIGNyZWF0ZSBvcmRlciBpZCB7JHRoaXMtPmlkfTogZXJyb3IgPSAiLiR3cGRiLT5sYXN0X2Vycm9yKTsKCQkJCX0KCQkJCQoJCQkJJHRoaXMtPmlkID0gJHdwZGItPmluc2VydF9pZDsKCQkJCQoJCQkJJHRoaXMtPnNldE9yZGVyTnVtYmVyKCRvcmRlck51bWJlckdlbmVyYXRvci0+cG9zdENvbW1pdCgkdGhpcykpOwoJCQkJJHdwZGItPnVwZGF0ZShNTV9UQUJMRV9PUkRFUlMsYXJyYXkoIm9yZGVyX251bWJlciI9PiR0aGlzLT5nZXRPcmRlck51bWJlcigpKSwgYXJyYXkoImlkIj0+JHRoaXMtPmlkKSk7CgkJCQkKCQkJCS8vd3JpdGUgZW50cnkgdG8gdGhlIHRyYW5zYWN0aW9uIGxvZwoJCQkJJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24gPSAiT3JkZXIgIyIuJHRoaXMtPmdldE9yZGVyTnVtYmVyKCkuIiBjcmVhdGVkIjsKCQkJCWlmICgkdGhpcy0+aXNUZXN0KCkpCgkJCQl7CgkJCQkJTU1fVHJhbnNhY3Rpb25Mb2c6OmNyZWF0ZVRlc3RUcmFuc2FjdGlvbkVudHJ5KCR0aGlzLT5pZCwgbnVsbCwgJHRoaXMtPnRvdGFsLCR0aGlzLT5jdXJyZW5jeSwgJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24sTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX0NIQVJHRSxmYWxzZSk7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCU1NX1RyYW5zYWN0aW9uTG9nOjpjcmVhdGVUcmFuc2FjdGlvbkVudHJ5KCR0aGlzLT5pZCwgbnVsbCwgJHRoaXMtPnRvdGFsLCR0aGlzLT5jdXJyZW5jeSwgJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24sTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX0NIQVJHRSxmYWxzZSk7CgkJCQl9CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkb3JkZXJEYXRhWyJkYXRlX21vZGlmaWVkIl0gPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCJpZCIgPT4gJHRoaXMtPmlkKTsKCQkJCQoJCQkJJHJlc3VsdCA9ICR3cGRiLT51cGRhdGUoTU1fVEFCTEVfT1JERVJTLCAkb3JkZXJEYXRhLCAkd2hlcmVDbGF1c2UpOwoJCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCQl7CgkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigidW5hYmxlIHRvIHVwZGF0ZSBvcmRlciBpZCB7JHRoaXMtPmlkfTogZXJyb3IgPSAiLiR3cGRiLT5sYXN0X2Vycm9yKTsKCQkJCX0KCQkJfQoJCQlwYXJlbnQ6OnZhbGlkYXRlKCk7CgkJCQoJCQkvL2NvbW1pdCBvcmRlciBpdGVtcwoJCQkkY29tYmluZWRMaW5lSXRlbXMgPSBhcnJheV9tZXJnZSgkdGhpcy0+b3JkZXJQcm9kdWN0cywgJHRoaXMtPm9yZGVyQ291cG9ucywgJHRoaXMtPm9yZGVyUHJvcmF0aW9ucyk7CgkJCWZvcmVhY2ggKCRjb21iaW5lZExpbmVJdGVtcyBhcyAkbGluZUl0ZW0pCgkJCXsJCgkJCQkkbGluZUl0ZW0tPnNldE9yZGVySWQoJHRoaXMtPmlkKTsKCQkJCSRsaW5lSXRlbVJlc3BvbnNlID0gJGxpbmVJdGVtLT5jb21taXREYXRhKCk7CgkJCQlpZiAoISgkbGluZUl0ZW1SZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSB8fCAoJGxpbmVJdGVtUmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVzcG9uc2U6OiRFUlJPUikpCgkJCQl7CgkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigoJGxpbmVJdGVtUmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSk/JGxpbmVJdGVtUmVzcG9uc2UtPm1lc3NhZ2U6IkVycm9yIHNhdmluZyBvbmUgb2YgdGhlIG9yZGVyIGl0ZW1zIik7CgkJCQl9CgkJCX0KCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpCgkJewoJCQlNTV9UcmFuc2FjdGlvbjo6cm9sbGJhY2soKTsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGV4LT5nZXRNZXNzYWdlKCksTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCU1NX1RyYW5zYWN0aW9uOjpjb21taXQoKTsKCgkJLyoKCQkgKiBQdXNoIG5vdGlmaWNhdGlvbiBmb3IgcHJvZHVjdCBwdXJjaGFzZWQuCgkJICovCgkJZm9yZWFjaCgkdGhpcy0+b3JkZXJQcm9kdWN0cyBhcyAkb3JkZXJJdGVtKQoJCXsKCQkJZG9fYWN0aW9uKE1NX0V2ZW50OjokUFJPRFVDVF9QVVJDSEFTRSwgTU1fRXZlbnQ6OnBhY2thZ2VQcm9kdWN0RGF0YSgkb3JkZXJJdGVtLT5nZXRJdGVtSWQoKSwgJHRoaXMtPmN1c3RvbWVyLT5nZXRJZCgpLCAkdGhpcy0+aWQsICRvcmRlckl0ZW0tPmdldElkKCkpKTsKCQl9CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOyAvL3N1Y2Nlc3MKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gYWRkUHJvZHVjdChNTV9Qcm9kdWN0ICRwcm9kdWN0LCAkcXVhbnRpdHk9MSwgJGlzR2lmdD1mYWxzZSkKCXsKCQlpZiAoaXNzZXQoJHRoaXMtPm9yZGVyUHJvZHVjdHNbJHByb2R1Y3QtPmlkXSkpCgkJewoJCQkkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdLT5zZXRRdWFudGl0eSgkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdLT5nZXRRdWFudGl0eSgpICsgJHF1YW50aXR5KTsKCQl9CgkJZWxzZQoJCXsKCQkJaWYgKCRwcm9kdWN0LT5pc1NoaXBwYWJsZSgpKQoJCQl7CgkJCQkkdGhpcy0+aXNTaGlwcGFibGUgPSB0cnVlOwoJCQl9CgkJCSRuZXdJdGVtID0gbmV3IE1NX09yZGVySXRlbSgpOwoJCQkkbmV3SXRlbS0+c2V0SXRlbVR5cGUoTU1fT3JkZXJJdGVtOjokT1JERVJfSVRFTV9UWVBFX1BST0RVQ1QpOwoJCQkkbmV3SXRlbS0+c2V0SXRlbUlkKCRwcm9kdWN0LT5pZCk7CgkJCSRuZXdJdGVtLT5zZXREZXNjcmlwdGlvbigkcHJvZHVjdC0+Z2V0TmFtZSgpKTsKCQkJJG5ld0l0ZW0tPnNldFF1YW50aXR5KCRxdWFudGl0eSk7CgkJCSRuZXdJdGVtLT5zZXRBbW91bnQoKCRwcm9kdWN0LT5oYXNUcmlhbCgpKT8kcHJvZHVjdC0+Z2V0VHJpYWxBbW91bnQoZmFsc2UpOiRwcm9kdWN0LT5nZXRQcmljZShmYWxzZSkpOwoJCQkkbmV3SXRlbS0+c2V0SXNHaWZ0KCRpc0dpZnQpOwoJCQkkbmV3SXRlbS0+c2V0Q3VycmVuY3koJHRoaXMtPmN1cnJlbmN5KTsKCQkJCgkJCWlmICgkcHJvZHVjdC0+aGFzVHJpYWwoKSkKCQkJewoJCQkJJG5ld0l0ZW0tPnNldFRyaWFsQW1vdW50KCRwcm9kdWN0LT5nZXRUcmlhbEFtb3VudChmYWxzZSkpOwoJCQkJJG5ld0l0ZW0tPnNldFRyaWFsRHVyYXRpb24oJHByb2R1Y3QtPmdldFRyaWFsRHVyYXRpb24oKSk7CgkJCQkkbmV3SXRlbS0+c2V0VHJpYWxGcmVxdWVuY3koJHByb2R1Y3QtPmdldFRyaWFsRnJlcXVlbmN5KCkpOwoJCQkJJG5ld0l0ZW0tPnNldFJlY3VycmluZ0Ftb3VudCgkcHJvZHVjdC0+Z2V0UHJpY2UoZmFsc2UpKTsKCQkJfQoJCQlpZiAoJHByb2R1Y3QtPmlzUmVjdXJyaW5nKCkpCgkJCXsKCQkJCSRuZXdJdGVtLT5zZXRJc1JlY3VycmluZyh0cnVlKTsKCQkJCSRuZXdJdGVtLT5zZXRSZWN1cnJpbmdBbW91bnQoJHByb2R1Y3QtPmdldFByaWNlKGZhbHNlKSk7CgkJCQkkbmV3SXRlbS0+c2V0UmViaWxsUGVyaW9kKCRwcm9kdWN0LT5nZXRSZWJpbGxQZXJpb2QoKSk7CgkJCQkkbmV3SXRlbS0+c2V0UmViaWxsRnJlcXVlbmN5KCRwcm9kdWN0LT5nZXRSZWJpbGxGcmVxdWVuY3koKSk7CgkJCQlpZiAoJHByb2R1Y3QtPmRvTGltaXRQYXltZW50cygpKQoJCQkJewoJCQkJCSRuZXdJdGVtLT5zZXRNYXhSZWJpbGxzKCRwcm9kdWN0LT5nZXROdW1iZXJPZlBheW1lbnRzKCkpOwoJCQkJfQoJCQl9CgkJCSR0aGlzLT5vcmRlclByb2R1Y3RzWyRwcm9kdWN0LT5pZF0gPSAkbmV3SXRlbTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiByZW1vdmVQcm9kdWN0KE1NX1Byb2R1Y3QgJHByb2R1Y3QsICRxdWFudGl0eT0xKQoJewoJCS8vaWYgdGhlIHJlcXVlc3QgcHJvZHVjdCBpcyBhdHRhY2hlZCB0byB0aGUgb3JkZXIsIGlzIGFuIG9yZGVyIGl0ZW0sIGFuZCBpcyBkZXNpZ25hdGVkIGFzIGEgcHJvZHVjdC4uLgoJCWlmIChpc3NldCgkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdKSAmJiAoJHRoaXMtPm9yZGVyUHJvZHVjdHNbJHByb2R1Y3QtPmlkXSBpbnN0YW5jZW9mIE1NX09yZGVySXRlbSkgJiYgKCR0aGlzLT5vcmRlclByb2R1Y3RzWyRwcm9kdWN0LT5pZF0tPmdldEl0ZW1UeXBlKCkgPT0gTU1fT3JkZXJJdGVtOjokT1JERVJfSVRFTV9UWVBFX1BST0RVQ1QpKQoJCXsKCQkJLy9yZWR1Y2UgdGhlIHF1YW50aXR5IGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBJZiB0aGlzIHRha2VzIHRoZSBxdWFudGl0eSB0byA8PTAsIHJlbW92ZSBpdCBhbHRvZ2V0aGVyCgkJCSRuZXdRdWFudGl0eSA9ICgkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdLT5nZXRRdWFudGl0eSgpIC0gJHF1YW50aXR5KTsKCQkJaWYgKCRuZXdRdWFudGl0eSA8PSAwKQoJCQl7CgkJCQl1bnNldCgkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdKTsKCQkJfQoJCQllbHNlIAoJCQl7CgkJCQkkdGhpcy0+b3JkZXJQcm9kdWN0c1skcHJvZHVjdC0+aWRdLT5zZXRRdWFudGl0eSgkbmV3UXVhbnRpdHkpOwoJCQl9CgkJfQoJfQoJCgkvKioKCSAqIHJlbW92ZUFsbFByb2R1Y3RzIHJlbW92ZXMgYWxsIHRoZSBwcm9kdWN0IGl0ZW1zIGZyb20gdGhlIG9yZGVyLiBEaXNjb3VudHMgYW5kIGFueSBmdXR1cmUgaXRlbSB0eXBlcyBhcmUgY3VycmVudGx5IGxlZnQgYWxvbmUKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHJlbW92ZUFsbFByb2R1Y3RzKCkKCXsKCQkkdGhpcy0+b3JkZXJQcm9kdWN0cyA9IGFycmF5KCk7Cgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIE1NX09yZGVySXRlbXMgcmVwcmVzZW50aW5nIHByb2R1Y3RzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9yZGVyCgkgKiAKCSAqIEByZXR1cm4gYXJyYXkgb2YgTU1fT3JkZXJJdGVtIHdpdGggaXRlbSB0eXBlIE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9QUk9EVUNUCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9kdWN0cygpCgl7CQkKCQlyZXR1cm4gJHRoaXMtPm9yZGVyUHJvZHVjdHM7Cgl9CgkKCQoJLyoqCgkgKiBTZXQgdGhlIGN1c3RvbWVyCgkgKiAKCSAqIEBwYXJhbSBNTV9Vc2VyICRjdXN0b21lciBUaGUgY3VzdG9tZXIgYXR0YWNoZWQgdG8gdGhlIG9yZGVyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRDdXN0b21lcihNTV9Vc2VyICRjdXN0b21lcikgCgl7CgkJJHRoaXMtPmN1c3RvbWVyID0gJGN1c3RvbWVyOwoJfQoJCgkKCS8qKgoJICogUmV0dXJuIHRoZSBjdXN0b21lcgoJICogCgkgKiBAcmV0dXJuIE1NX1VzZXIgVGhlIGN1c3RvbWVyIGF0dGFjaGVkIHRvIHRoZSBvcmRlcgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q3VzdG9tZXIoKQoJewoJCXJldHVybiAkdGhpcy0+Y3VzdG9tZXI7Cgl9CgkKCQoJLyoqCgkgKiBTZXQgdGhlIGJpbGxpbmcgYWRkcmVzcwoJICogCgkgKiBAcGFyYW0gTU1fQ3VzdG9tZXJBZGRyZXNzICRiaWxsaW5nQWRkcmVzcyBUaGUgYmlsbGluZyBhZGRyZXNzIGZvciB0aGUgb3JkZXIKCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBzZXRCaWxsaW5nQWRkcmVzcyhNTV9DdXN0b21lckFkZHJlc3MgJGJpbGxpbmdBZGRyZXNzKQogCXsKIAkgCSR0aGlzLT5iaWxsaW5nQWRkcmVzcyA9ICRiaWxsaW5nQWRkcmVzczsKIAl9CgogCQogCS8qKgogCSAqIFJldHVybnMgdGhlIGJpbGxpbmcgYWRkcmVzcyBmb3IgdGhlIG9yZGVyCiAJICogCiAJICogQHJldHVybiBNTV9DdXN0b21lckFkZHJlc3MgVGhlIGJpbGxpbmcgYWRkcmVzcyBmb3IgdGhlIG9yZGVyCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGdldEJpbGxpbmdBZGRyZXNzKCkKIAl7CiAJIAlyZXR1cm4gJHRoaXMtPmJpbGxpbmdBZGRyZXNzOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldFNoaXBwaW5nQWRkcmVzcyhNTV9DdXN0b21lckFkZHJlc3MgJHN0cikKIAl7CiAJIAkkdGhpcy0+c2hpcHBpbmdBZGRyZXNzID0gJHN0cjsKIAl9CgogCQogCS8qKgogCSAqIFJldHVybnMgdGhlIHNoaXBwaW5nIGFkZHJlc3MKIAkgKiAKIAkgKiBAcmV0dXJuIE1NX0N1c3RvbWVyQWRkcmVzcyBUaGUgc2hpcHBpbmcgYWRkcmVzcwogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRTaGlwcGluZ0FkZHJlc3MoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzOwogCX0KIAkKCXB1YmxpYyBmdW5jdGlvbiBzZXRUb3RhbCgkdG90YWwpCgl7CgkJJHRoaXMtPnRvdGFsID0gJHRvdGFsOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VG90YWwoJGRvRm9ybWF0PWZhbHNlKQoJewoJCWlmICgkZG9Gb3JtYXQpCgkJewoJCQlyZXR1cm4gX21tZigkdGhpcy0+dG90YWwsJHRoaXMtPmN1cnJlbmN5KTsKCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG51bWJlcl9mb3JtYXQoZmxvYXR2YWwoJHRoaXMtPnRvdGFsKSxNTV9DdXJyZW5jeVV0aWw6OmdldFByZWNpc2lvbkZvckN1cnJlbmN5KCR0aGlzLT5jdXJyZW5jeSksJy4nLCcnKTsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBSZXR1cm4gdGhlIHRheCBhbW91bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBvcmRlcgoJICogCgkgKiBAcGFyYW0gYm9vbGVhbiAkZG9Gb3JtYXQgKG9wdGlvbmFsKSBJZiB0cnVlLCByZXR1cm5zIHRoaXMgZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHdpdGggMiBkZWNpbWFsIHBsYWNlcywgc3VpdGFibGUgZm9yIHJlcHJlc2VudGluZyBjdXJyZW5jeQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0VGF4KCRkb0Zvcm1hdD1mYWxzZSkKCXsKCQlpZiAoJGRvRm9ybWF0KQoJCXsKCQkJcmV0dXJuIF9tbWYoZmxvYXR2YWwoJHRoaXMtPnRheCksJHRoaXMtPmN1cnJlbmN5KTsKCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG51bWJlcl9mb3JtYXQoZmxvYXR2YWwoJHRoaXMtPnRheCksTU1fQ3VycmVuY3lVdGlsOjpnZXRQcmVjaXNpb25Gb3JDdXJyZW5jeSgkdGhpcy0+Y3VycmVuY3kpLCcuJywnJyk7CgkJfQoJfQoJCgkKCS8qKgoJICogU2V0cyB0aGUgdGF4IGFtb3VudCBmb3IgdGhpcyBvcmRlcgoJICogCgkgKiBAcGFyYW0gZmxvYXQgJHRheCBUaGUgYW1vdW50IG9mIHRheCB0byBjaGFyZ2Ugd2l0aCB0aGlzIG9yZGVyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRUYXgoJHRheCkKCXsKCQkkdGhpcy0+dGF4ID0gJHRheDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGNhbGN1bGF0ZVRvdGFsKCRkb0Zvcm1hdD1mYWxzZSkKCXsKCQkvL3RheCBpcyBpZ25vcmVkIGZvciBub3cKCQkkbmV3U3VidG90YWwgPSAwLjAwOwoJCSRuZXdEaXNjb3VudCA9IDAuMDA7CgkJZm9yZWFjaCAoJHRoaXMtPm9yZGVyUHJvZHVjdHMgYXMgJGFuSXRlbSkKCQl7CgkJCWlmICgkYW5JdGVtLT5nZXRJdGVtVHlwZSgpID09IE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9QUk9EVUNUKQoJCQl7CgkJCQkkbmV3U3VidG90YWwgKz0gJGFuSXRlbS0+Y2FsY3VsYXRlVG90YWwoKTsKCQkJfQoJCX0KCQkKCQlmb3JlYWNoICgkdGhpcy0+b3JkZXJDb3Vwb25zIGFzICRhbkl0ZW0pCgkJewoJCQlpZiAoJGFuSXRlbS0+Z2V0SXRlbVR5cGUoKSA9PSBNTV9PcmRlckl0ZW06OiRPUkRFUl9JVEVNX1RZUEVfRElTQ09VTlQpCgkJCXsKCQkJCSRuZXdEaXNjb3VudCArPSAkYW5JdGVtLT5jYWxjdWxhdGVUb3RhbCgpOwoJCQl9CgkJfQoJCQoJCWZvcmVhY2ggKCR0aGlzLT5vcmRlclByb3JhdGlvbnMgYXMgJGFuSXRlbSkKCQl7CgkJCWlmICgkYW5JdGVtLT5nZXRJdGVtVHlwZSgpID09IE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9QUk9SQVRJT04pCgkJCXsKCQkJCSRuZXdEaXNjb3VudCArPSAkYW5JdGVtLT5jYWxjdWxhdGVUb3RhbCgpOwoJCQl9CgkJfQoJCQoJCSR0aGlzLT5zdWJ0b3RhbCA9ICRuZXdTdWJ0b3RhbDsKCQkkdGhpcy0+ZGlzY291bnQgPSAkbmV3RGlzY291bnQ7CgkJJHRoaXMtPnRvdGFsID0gJG5ld1N1YnRvdGFsIC0gYWJzKCRuZXdEaXNjb3VudCkgKyBmbG9hdHZhbCgkdGhpcy0+c2hpcHBpbmcpOwoJCQoJCS8vZG9uJ3QgbGV0IGFuIG9yZGVyIHRvdGFsIGdvIGxlc3MgdGhhbiAkMAoJCSR0aGlzLT50b3RhbCA9ICgkdGhpcy0+dG90YWw+PTApPyR0aGlzLT50b3RhbDowLjAwOwoJCQoJCXJldHVybiAoJGRvRm9ybWF0KT9fbW1mKCR0aGlzLT50b3RhbCwkdGhpcy0+Y3VycmVuY3kpOm51bWJlcl9mb3JtYXQoZmxvYXR2YWwoJHRoaXMtPnRvdGFsKSxNTV9DdXJyZW5jeVV0aWw6OmdldFByZWNpc2lvbkZvckN1cnJlbmN5KCR0aGlzLT5jdXJyZW5jeSksJy4nLCcnKTsKCX0KCQogCQoJcHVibGljIGZ1bmN0aW9uIHNldFBheW1lbnRNZXRob2QoTU1fUGF5bWVudFNlcnZpY2UgJHBheW1lbnRNZXRob2Q9bnVsbCkgCgl7CgkJJHRoaXMtPnBheW1lbnRNZXRob2QgPSAkcGF5bWVudE1ldGhvZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0UGF5bWVudE1ldGhvZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5wYXltZW50TWV0aG9kOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRBZmZpbGlhdGVJZCgkc3RyKSAKCXsKCQkkdGhpcy0+YWZmaWxpYXRlSWQgPSAkc3RyOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRBZmZpbGlhdGVJZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5hZmZpbGlhdGVJZDsKCX0JCgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFN1YkFmZmlsaWF0ZUlkKCRzdHIpIAoJewoJCSR0aGlzLT5zdWJBZmZpbGlhdGVJZCA9ICRzdHI7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFN1YkFmZmlsaWF0ZUlkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnN1YkFmZmlsaWF0ZUlkOwoJfQkKCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0SVBBZGRyZXNzKCRzdHIpCgl7CgkJJHRoaXMtPmlwQWRkcmVzcyA9ICRzdHI7Cgl9CQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRJUEFkZHJlc3MoKQoJewoJCXJldHVybiAkdGhpcy0+aXBBZGRyZXNzOwoJfQoJCgkKCS8qKgoJICogUmV0cmlldmUgdGhlIE1NX09yZGVySXRlbXMgcmVwcmVzZW50aW5nIGNvdXBvbnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgb3JkZXIKCSAqCgkgKiBAcmV0dXJuIGFycmF5IG9mIE1NX09yZGVySXRlbSB3aXRoIGl0ZW0gdHlwZSBNTV9PcmRlckl0ZW06OiRPUkRFUl9JVEVNX1RZUEVfRElTQ09VTlQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldENvdXBvbnMoKQoJewoJCXJldHVybiAkdGhpcy0+b3JkZXJDb3Vwb25zOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBhZGRDb3Vwb24oTU1fQ291cG9uICRjb3Vwb24pCgl7CgkJaWYgKCFpc3NldCgkdGhpcy0+b3JkZXJDb3Vwb25zWyRjb3Vwb24tPmdldElkKCldKSkKCQl7CgkJCSRuZXdJdGVtID0gbmV3IE1NX09yZGVySXRlbSgiIix0cnVlLCR0aGlzKTsKCQkJJG5ld0l0ZW0tPnNldEl0ZW1UeXBlKE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9ESVNDT1VOVCk7CgkJCSRuZXdJdGVtLT5zZXRJdGVtSWQoJGNvdXBvbi0+Z2V0SWQoKSk7CgkJCSRuZXdJdGVtLT5zZXREZXNjcmlwdGlvbigkY291cG9uLT5nZXRDb3Vwb25OYW1lKCkpOwoJCQkkbmV3SXRlbS0+c2V0UXVhbnRpdHkoMSk7CgkJCSR0aGlzLT5vcmRlckNvdXBvbnNbJGNvdXBvbi0+Z2V0SWQoKV0gPSAkbmV3SXRlbTsKCQl9Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbW92ZUNvdXBvbigkY291cG9uKQoJewoJCWlmIChpc3NldCgkdGhpcy0+b3JkZXJDb3Vwb25zWyRjb3Vwb24tPmdldElkKCldKSkKCQl7CgkJCXVuc2V0KCR0aGlzLT5vcmRlckNvdXBvbnNbJGNvdXBvbi0+Z2V0SWQoKV0pOwoJCX0KCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQWxsQ291cG9ucygpCgl7CgkJJHRoaXMtPm9yZGVyQ291cG9ucyA9IGFycmF5KCk7Cgl9CgkKCS8qKgoJICogUmV0cmlldmUgdGhlIE1NX09yZGVySXRlbXMgcmVwcmVzZW50aW5nIHByb3JhdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgb3JkZXIKCSAqCgkgKiBAcmV0dXJuIGFycmF5IG9mIE1NX09yZGVySXRlbSB3aXRoIGl0ZW0gdHlwZSBNTV9PcmRlckl0ZW06OiRPUkRFUl9JVEVNX1RZUEVfUFJPUkFUSU9OCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9yYXRpb25zKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm9yZGVyUHJvcmF0aW9uczsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gYWRkUHJvcmF0aW9uKE1NX09yZGVySXRlbSAkcHJvcmF0aW9uSXRlbSkKCXsKCQkkdGhpcy0+b3JkZXJQcm9yYXRpb25zW10gPSAkcHJvcmF0aW9uSXRlbTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQWxsUHJvcmF0aW9ucygpCgl7CgkJJHRoaXMtPm9yZGVyUHJvcmF0aW9ucyA9IGFycmF5KCk7Cgl9CgkKCS8qCgkgKiBhY3Rpb24gbWV0aG9kcwoJICovCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY3JlYXRlRnJvbUNhcnQoTU1fVXNlciAkY3VzdG9tZXIsIE1NX1Nob3BwaW5nQ2FydCAkY2FydCkKCXsKCQkkb3JkZXIgPSBuZXcgTU1fT3JkZXIoKTsKCQkkb3JkZXItPnNldEN1c3RvbWVyKCRjdXN0b21lcik7CgkJZm9yZWFjaCAoJGNhcnQtPmdldFByb2R1Y3RzSW5DYXJ0KCkgYXMgJHByb2R1Y3RfaWQ9PiRjYXJ0SXRlbSkgLy9hZGQgcHJvZHVjdHMKCQl7CgkJCWlmICgkY2FydEl0ZW0gaW5zdGFuY2VvZiBNTV9TaG9wcGluZ0NhcnRJdGVtKSAvL2VuZm9yY2UgY29ycmVjdCBjYXJ0IHN0cnVjdHVyZQoJCQl7CgkJCQkkb3JkZXItPmFkZFByb2R1Y3QoJGNhcnRJdGVtLT5nZXRJdGVtKCksJGNhcnRJdGVtLT5nZXRRdWFudGl0eSgpKTsKCQkJfQoJCX0KCQlmb3JlYWNoICgkY2FydC0+Z2V0Q291cG9uc0luQ2FydCgpIGFzICRjb3Vwb25faWQ9PiRjYXJ0Q291cG9uKSAvL2FkZCBjb3Vwb25zCgkJewoJCQlpZiAoJGNhcnRDb3Vwb24gaW5zdGFuY2VvZiBNTV9TaG9wcGluZ0NhcnRJdGVtKSAvL21ha2Ugc3VyZSBpdHMgYSBjb3Vwb24KCQkJewoJCQkJJG9yZGVyLT5hZGRDb3Vwb24oJGNhcnRDb3Vwb24tPmdldEl0ZW0oKSk7CgkJCX0KCQl9CgkJCgkJJG9yZGVyLT5zZXRCaWxsaW5nQWRkcmVzcygkY2FydC0+Z2V0QmlsbGluZ0FkZHJlc3MoKSk7CgkJJG9yZGVyLT5zZXRTaGlwcGluZ0FkZHJlc3MoJGNhcnQtPmdldFNoaXBwaW5nQWRkcmVzcygpKTsKCQlyZXR1cm4gJG9yZGVyOwoJfQoJCgkKCS8qKgoJICogUmV0cmlldmUgYW4gb3JkZXIgYnkgdGhlIG9yZGVyIG51bWJlcgoJICogQHBhcmFtIFN0cmluZyAkb3JkZXJOdW1iZXIgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcmRlciBudW1iZXIsIGdlbmVyYWxseSAoYnV0IG5vdCBuZWNlc3NhcmlseSkgbnVtZXJpYwoJICogQHJldHVybiBNTV9PcmRlciBlbnRpdHkgdGhhdCBpcyB2YWxpZCBhbmQgcG9wdWxhdGVkIGlmIHRoZSBvcmRlciBudW1iZXIgZXhpc3RzLCBvciBhbiBpbnZhbGlkIE1NX09yZGVyIG9iamVjdCBpZiB0aGUgb3JkZXIgbnVtYmVyIGRvZXMgbm90IGV4aXN0CgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0RGF0YUJ5T3JkZXJOdW1iZXIoJG9yZGVyTnVtYmVyKQoJewoJCWlmIChlbXB0eSgkb3JkZXJOdW1iZXIpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9PcmRlcigpOwoJCX0KCQkKCQlnbG9iYWwgJHdwZGI7CiAJCQoJCSRzcWwgPSAiU0VMRUNUIGlkIEZST00gIi5NTV9UQUJMRV9PUkRFUlMuIiBXSEVSRSBvcmRlcl9udW1iZXI9JyVzJyBMSU1JVCAxOyI7CgkJJG9yZGVySWQgPSAkd3BkYi0+Z2V0X3Zhcigkd3BkYi0+cHJlcGFyZSgkc3FsLCRvcmRlck51bWJlcikpOwoJCQoJCWlmICghaXNfbnVsbCgkb3JkZXJJZCkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX09yZGVyKCRvcmRlcklkKTsKCQl9CgkJcmV0dXJuIG5ldyBNTV9PcmRlcigpOyAvL3JldHVybiBhbiBpbnZhbGlkIGVudGl0eSBpZiB0aGUgb3JkZXIgY291bGQgbm90IGJlIGZvdW5kCgl9CgkKCS8qKgoJICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgdXNlciBJRCBhc3NvY2lhdGQgd2l0aCB0aGUgb3JkZXIgSUQgcGFzc2VkLiBJdCBpcyBtZWFudCB0byBiZSB1c2VkIGFzIAoJICogYW4gZWZmaWNpZW50IG1lYXNuIGZvciByZXRyaWV2aW5nIHRoZSB1c2VyIElEIHdpdGhvdXQgaGF2aW5nIHRvIGxvYWQgdGhlIGVudGlyZSBvcmRlciBvYmplY3QuIAoJICogQHBhcmFtIE51bWJlciAkb3JkZXJJZCB0aGUgb3JkZXIgSUQgdG8gZ2V0IHRoZSBhc3NvaWNhdGVkIHVzZXIgSUQgZm9yCgkgKiBAcmV0dXJuIE51bWJlciB0aGUgdXNlciBJRCBhc3NvY2lhdGVkIHdpdGggdGhlIG9yZGVyIElEIHBhc3NlZC4gLTEgaWYgbm8gYXNzb2NpYXRlZCB1c2VyIElEIGZvdW5kLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFVzZXJJZEJ5T3JkZXJJZCgkb3JkZXJJZCkKCXsKCQlpZihpc3NldCgkb3JkZXJJZCkgJiYgKGludHZhbCgkb3JkZXJJZCkgPiAwIHx8IGludHZhbCgkb3JkZXJJZCkgPT0gTU1fT3JkZXI6OiRTQU1QTEVfT1JERVJfSUQpKQoJCXsKCQkJZ2xvYmFsICR3cGRiOwoJCQkJCgkJCSRzcWwgPSAiU0VMRUNUIHVzZXJfaWQgRlJPTSAiLk1NX1RBQkxFX09SREVSUy4iIFdIRVJFIGlkPSclcycgTElNSVQgMTsiOwoJCQkkdXNlcklkID0gJHdwZGItPmdldF92YXIoJHdwZGItPnByZXBhcmUoJHNxbCwkb3JkZXJJZCkpOwoJCQoJCQlpZiAoIWlzX251bGwoJHVzZXJJZCkpCgkJCXsKCQkJCXJldHVybiAkdXNlcklkOwoJCQl9CgkJfQoKCQlyZXR1cm4gLTE7Cgl9CgkKCS8qKgoJICogVGhpcyBtZXRob2Qgd2lsbCBjaGVjayBmb3IgYW55IG90aGVyIHN1Ym1pc3Npb25zIHN1Ym1pdHRlZCBieSB0aGlzIHVzZXIgdGhhdCBtYXRjaCB0aGUgc2FtZSAkZm9ybUlkLiAgCgkgKiBUaGlzIHdpbGwgYmUgdXNlZnVsIGluIHByZXZlbnRpbmcgZHVwbGljYXRlIG9yZGVycyBhY2NpZGVudGx5IHByb2Nlc3NlZCBieSBtdWx0aS1jbGljayBvciBiYWNrIGJ1dHRvbiBzY2VuYXJpb3MuCgkgKiAKCSAqIEBwYXJhbSBzdHJpbmcgJGZvcm1JZCB0aGUgc3VibWlzc2lvbiBmb3JtIGlkIAoJICogQHBhcmFtIGludCAkdXNlcklkIGN1cnJlbnQgdXNlciBjaGVja2luZyBvdXQKCSAqIEByZXR1cm4gdHJ1ZSBpZiBmb3JtIHN1Ym1pc3Npb24gaXMgZm91bmQsIG90aGVyd2lzZSBmYWxzZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBoYXNGb3JtU3VibWlzc2lvbklkKCRmb3JtSWQsJHVzZXJJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYoIWlzX251bGwoJGZvcm1JZCkgJiYgIWVtcHR5KCRmb3JtSWQpICYmIHN0cmxlbigkZm9ybUlkKT4wKQoJCXsgCgkJCSRzcWwgPSAiU0VMRUNUIGNvdW50KCopIGFzIHRvdGFsIEZST00gIi5NTV9UQUJMRV9PUkRFUlMuIiBXSEVSRSBmb3JtX3N1Ym1pc3Npb25faWQ9JyVzJyBBTkQgdXNlcl9pZD0nJXMnOyI7CgkJCSR0b3RhbCA9ICR3cGRiLT5nZXRfdmFyKCR3cGRiLT5wcmVwYXJlKCRzcWwsJGZvcm1JZCwkdXNlcklkKSk7CgkJCgkJCWlmICghaXNfbnVsbCgkdG90YWwpICYmIGludHZhbCgkdG90YWwpPjApCgkJCXsKCQkJCXJldHVybiB0cnVlOwoJCQl9ICAKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoJCgkKCS8qKgoJICogTG9va3MgdXAgYW4gb3JkZXIgdXNpbmcgYSBmb3JtIHN1Ym1pc3Npb24gaWQgYW5kIGEgdXNlciBpZCwgYW5kIHJldHVybnMgYW4gb3JkZXIgb2JqZWN0CgkgKiAKCSAqIEBwYXJhbSBzdHJpbmcgJGZvcm1TdWJtaXNzaW9uSWQgVGhlIHVuaXF1ZSBpZCBhc3NpZ25lZCB0byB0aGUgZm9ybSB0aGF0IGNyZWF0ZWQgdGhpcyBvcmRlci4gVGhlIGZvcm0gZmllbGQgbmFtZSBpcyBtbV9zdWJtaXNzaW9uX211dGV4CgkgKiBAcGFyYW0gaW50ZWdlciAkdXNlcklkIFRoZSBpZCBpZGVudGlmeWluZyB0aGUgdXNlciB0aGUgb3JkZXIgc2hvdWxkIGJlbG9uZyB0bwoJICogCgkgKiBAcmV0dXJuIE1NX09yZGVyIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgaWYgZm91bmQsIG51bGwgb3RoZXJ3aXNlCgkgKiAKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRPcmRlckJ5VXNlckFuZEZvcm1TdWJtaXNzaW9uSWQoJGZvcm1TdWJtaXNzaW9uSWQsJHVzZXJJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJG9yZGVyc1RhYmxlID0gTU1fVEFCTEVfT1JERVJTOwoJCSRzcWwgPSAiU0VMRUNUICogRlJPTSB7JG9yZGVyc1RhYmxlfSBXSEVSRSAoZm9ybV9zdWJtaXNzaW9uX2lkKSA9ICVzIEFORCAodXNlcl9pZCA9ICVzKSI7CgkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCR3cGRiLT5wcmVwYXJlKCRzcWwsJGZvcm1TdWJtaXNzaW9uSWQsJHVzZXJJZCkpOwoJCWlmICghZW1wdHkoJHJvdykpCgkJewoJCQkkb3JkZXIgPSBuZXcgTU1fT3JkZXIoKTsKCQkJJG9yZGVyLT5zZXREYXRhKCRyb3cpOwoJCQlyZXR1cm4gJG9yZGVyOwoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBwcmVwcm9jZXNzT3JkZXIoKQoJewoJCS8vIGRldGVybWluZSBwcm9yYXRpb24KCQlNTV9QYXltZW50VXRpbHM6OmFwcGx5UHJvcmF0aW9uKCR0aGlzKTsKCX0JCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRPcmRlck51bWJlcigpCgl7CgkJcmV0dXJuICR0aGlzLT5vcmRlcl9udW1iZXI7Cgl9CgkgCglwdWJsaWMgZnVuY3Rpb24gc2V0T3JkZXJOdW1iZXIoJG9yZGVyX251bWJlcikKCXsKCQkkdGhpcy0+b3JkZXJfbnVtYmVyID0gJG9yZGVyX251bWJlcjsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5mb3JtU3VibWlzc2lvbklkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRGb3JtU3VibWlzc2lvbklkKCR2YWwpCgl7CgkJJHRoaXMtPmZvcm1TdWJtaXNzaW9uSWQgPSAkdmFsOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBpc1NoaXBwYWJsZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5pc1NoaXBwYWJsZTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBhYmxlKCRpc1NoaXBwYWJsZSkKCXsKCQkkdGhpcy0+aXNTaGlwcGFibGUgPSAkaXNTaGlwcGFibGU7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFNoaXBwaW5nU2FtZUFzQmlsbGluZygkc2hpcHBpbmdTYW1lQXNCaWxsaW5nKQoJewoJCSR0aGlzLT5zaGlwcGluZ1NhbWVBc0JpbGxpbmcgPSAkc2hpcHBpbmdTYW1lQXNCaWxsaW5nOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBpc1NoaXBwaW5nU2FtZUFzQmlsbGluZygpCgl7CgkJcmV0dXJuICR0aGlzLT5zaGlwcGluZ1NhbWVBc0JpbGxpbmc7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldE9yZGVyU3RhdHVzKCRzdGF0dXMpCgl7CgkJJHRoaXMtPm9yZGVyX3N0YXR1cyA9ICRzdGF0dXM7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldE9yZGVyU3RhdHVzKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm9yZGVyX3N0YXR1czsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0U2hpcHBpbmcoJGRvRm9ybWF0PWZhbHNlKQoJewoJCWlmICgkZG9Gb3JtYXQpCgkJewoJCQlyZXR1cm4gX21tZihmbG9hdHZhbCgkdGhpcy0+c2hpcHBpbmcpLCR0aGlzLT5jdXJyZW5jeSk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBudW1iZXJfZm9ybWF0KGZsb2F0dmFsKCR0aGlzLT5zaGlwcGluZyksTU1fQ3VycmVuY3lVdGlsOjpnZXRQcmVjaXNpb25Gb3JDdXJyZW5jeSgkdGhpcy0+Y3VycmVuY3kpLCcuJywnJyk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRTaGlwcGluZygkc2hpcHBpbmcpCgl7CgkJJHRoaXMtPnNoaXBwaW5nID0gZmxvYXR2YWwoc3RyX3JlcGxhY2UoIlwkIiwiIiwkc2hpcHBpbmcpKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0U2hpcHBpbmdPcHRpb25LZXkoKQoJewoJCXJldHVybiAkdGhpcy0+c2hpcHBpbmdPcHRpb25LZXk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFNoaXBwaW5nT3B0aW9uS2V5KCRzaGlwcGluZ09wdGlvbktleSkKCXsKCQkkdGhpcy0+c2hpcHBpbmdPcHRpb25LZXkgPSAkc2hpcHBpbmdPcHRpb25LZXk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFNoaXBwaW5nT3B0aW9uRGVzY3JpcHRpb24oKQoJewoJCXJldHVybiAkdGhpcy0+c2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbjsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbigkc2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbikKCXsKCQkkdGhpcy0+c2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbiA9ICRzaGlwcGluZ09wdGlvbkRlc2NyaXB0aW9uOwoJfQoJCgkKCS8qKgoJICogQnkgY29udmVudGlvbiwgYSBzaGlwcGluZyBvcHRpb24ga2V5IGhhcyB0aGUgZm9ybWF0ICI8VE9LRU4+LTx1bmlxdWUgaWRlbnRpZmllcj4iLiBUaGlzIG1ldGhvZCB1c2VzIHRoZSB0b2tlbiB0byByZXRyaWV2ZSB0aGUgc2VsZWN0ZWQgc2hpcHBpbmcgbWV0aG9kIGFuZCBvcHRpb24sIAoJICogYW5kIHNldHMgdGhlIHNoaXBwaW5nIGNvc3QgYW5kIGRlc2NyaXB0aW9uIGJhc2VkIG9uIHRoYXQKCSAqIAoJICogQHBhcmFtIHN0cmluZyAkc2hpcHBpbmdPcHRpb25LZXkKCSAqIEByZXR1cm4gTU1fUmVzcG9uc2UgaW5kaWNhdGluZyBzdWNjZXNzLCBvciBjb250YWluaW5nIGEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZSBvbiBmYWlsdXJlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRTaGlwcGluZ01ldGhvZEZyb21LZXkoJHNoaXBwaW5nT3B0aW9uS2V5KQoJewoJCWlmIChlbXB0eSgkc2hpcHBpbmdPcHRpb25LZXkpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3Igc2V0dGluZyBzaGlwcGluZyBjb3N0cyBmb3Igb3JkZXI6IE5vIHNoaXBwaW5nIG9wdGlvbiBzZWxlY3RlZCIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRzcGxpdCA9IGV4cGxvZGUoIi0iLCAkc2hpcHBpbmdPcHRpb25LZXkpOwoJCSR0b2tlbiA9ICRzcGxpdFswXTsKCQkKCQkvL2dldCB0aGUgc2hpcHBpbmcgbWV0aG9kCgkJJHNoaXBwaW5nTWV0aG9kID0gTU1fU2hpcHBpbmdNZXRob2Q6OmdldFNoaXBwaW5nTWV0aG9kQnlUb2tlbigkdG9rZW4pOwoJCWlmIChpc19udWxsKCRzaGlwcGluZ01ldGhvZCkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFcnJvciBzZXR0aW5nIHNoaXBwaW5nIGNvc3RzIGZvciBvcmRlcjogU2hpcHBpbmcgbWV0aG9kIG5vdCBmb3VuZCIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCS8vdXNlIHRoZSBtZXRob2QgdG8gcmV0dXJuIHRoZSBzZWVsZWN0ZWQgb3B0aW9uIGFuZCBpdHMgcmF0ZQoJCSRvcHRpb25SZXRyaWV2YWxSZXNwb25zZSA9ICRzaGlwcGluZ01ldGhvZC0+Z2V0U2hpcHBpbmdPcHRpb25CeUtleSgkdGhpcywgJHNoaXBwaW5nT3B0aW9uS2V5KTsKCQlpZiAoJG9wdGlvblJldHJpZXZhbFJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokRVJST1IpCgkJewoJCQlyZXR1cm4gJG9wdGlvblJldHJpZXZhbFJlc3BvbnNlOwoJCX0KCQkKCQkkc2hpcHBpbmdPcHRpb24gPSAkb3B0aW9uUmV0cmlldmFsUmVzcG9uc2UtPm1lc3NhZ2U7CgkJJHRoaXMtPnNldFNoaXBwaW5nKCRzaGlwcGluZ09wdGlvbi0+Z2V0UmF0ZSgpKTsKCQkkdGhpcy0+c2V0U2hpcHBpbmdPcHRpb25EZXNjcmlwdGlvbigiKHskc2hpcHBpbmdNZXRob2QtPmdldE5hbWUoKX0pIHskc2hpcHBpbmdPcHRpb24tPmdldE5hbWUoKX0iKTsKCQkkdGhpcy0+c2V0U2hpcHBpbmdPcHRpb25LZXkoJHNoaXBwaW5nT3B0aW9uS2V5KTsKCQkKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFN1YnRvdGFsKCRkb0Zvcm1hdD1mYWxzZSkKCXsKCQlpZiAoJGRvRm9ybWF0KQoJCXsKCQkJcmV0dXJuIF9tbWYoZmxvYXR2YWwoJHRoaXMtPnN1YnRvdGFsKSwkdGhpcy0+Y3VycmVuY3kpOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gbnVtYmVyX2Zvcm1hdChmbG9hdHZhbCgkdGhpcy0+c3VidG90YWwpLE1NX0N1cnJlbmN5VXRpbDo6Z2V0UHJlY2lzaW9uRm9yQ3VycmVuY3koJHRoaXMtPmN1cnJlbmN5KSwnLicsJycpOwoJCX0KCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGlzY291bnQoJGRvRm9ybWF0PWZhbHNlKQoJewoJCWlmICgkZG9Gb3JtYXQpCgkJewoJCQlyZXR1cm4gX21tZihmbG9hdHZhbCgkdGhpcy0+ZGlzY291bnQpLCR0aGlzLT5jdXJyZW5jeSk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBudW1iZXJfZm9ybWF0KGZsb2F0dmFsKCR0aGlzLT5kaXNjb3VudCksTU1fQ3VycmVuY3lVdGlsOjpnZXRQcmVjaXNpb25Gb3JDdXJyZW5jeSgkdGhpcy0+Y3VycmVuY3kpLCcuJywnJyk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRDdXJyZW5jeSgkY3VycmVuY3kpCgl7CgkJJHRoaXMtPmN1cnJlbmN5ID0gJGN1cnJlbmN5OwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRDdXJyZW5jeSgpCgl7CgkJcmV0dXJuICR0aGlzLT5jdXJyZW5jeTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldERhdGFBc1N0ZENsYXNzKCkKCXsgCgkJJG9yZGVyT2JqID0gbmV3IHN0ZENsYXNzKCk7CgkJJG9yZGVyT2JqLT5vcmRlck51bWJlciA9ICR0aGlzLT5nZXRPcmRlck51bWJlcigpOwoJCSRvcmRlck9iai0+aXBBZGRyZXNzID0gJHRoaXMtPmdldElQQWRkcmVzcygpOwoJCSRvcmRlck9iai0+b3JkZXJTdGF0dXMgPSAkdGhpcy0+Z2V0T3JkZXJTdGF0dXMoKTsKCQkkb3JkZXJPYmotPmFmZmlsaWF0ZUlkID0gJHRoaXMtPmdldEFmZmlsaWF0ZUlkKCk7CgkJJG9yZGVyT2JqLT5zdWJBZmZpbGlhdGVJZCA9ICR0aGlzLT5nZXRTdWJBZmZpbGlhdGVJZCgpOwoJCSRvcmRlck9iai0+aXNTaGlwcGFibGUgPSAkdGhpcy0+aXNTaGlwcGFibGUoKTsKCQkkb3JkZXJPYmotPmJpbGxpbmdTYW1lQXNTaGlwcGluZyA9ICR0aGlzLT5pc1NoaXBwaW5nU2FtZUFzQmlsbGluZygpOwoJCQoJCSRvcmRlck9iai0+Y3VycmVuY3kgPSAkdGhpcy0+Z2V0Q3VycmVuY3koKTsKCQkkb3JkZXJPYmotPnRheCA9ICR0aGlzLT5nZXRUYXgoZmFsc2UpOwoJCSRvcmRlck9iai0+c2hpcHBpbmcgPSAkdGhpcy0+Z2V0U2hpcHBpbmcoZmFsc2UpOwoJCSRvcmRlck9iai0+ZGlzY291bnQgPSAkdGhpcy0+Z2V0RGlzY291bnQoZmFsc2UpOwoJCSRvcmRlck9iai0+c3ViVG90YWwgPSAkdGhpcy0+Z2V0U3VidG90YWwoZmFsc2UpOwoJCSRvcmRlck9iai0+dG90YWwgPSAkdGhpcy0+Z2V0VG90YWwoZmFsc2UpOwoJCQoJCSRwcm9kdWN0cyA9ICR0aGlzLT5nZXRQcm9kdWN0cygpOwoJCSRvcmRlck9iai0+b3JkZXJQcm9kdWN0cyA9ICR0aGlzLT5vcmRlckl0ZW1zVG9TdGRDbGFzcygkcHJvZHVjdHMpOyAKCQkKCQkkcHJvcmF0aW9ucyA9ICR0aGlzLT5nZXRQcm9yYXRpb25zKCk7CgkJJG9yZGVyT2JqLT5vcmRlclByb3JhdGlvbnMgPSAkdGhpcy0+b3JkZXJJdGVtc1RvU3RkQ2xhc3MoJHByb3JhdGlvbnMpOyAKCQkKCQkkY291cG9ucyA9ICR0aGlzLT5nZXRDb3Vwb25zKCk7CgkJJG9yZGVyT2JqLT5jb3Vwb25zID0gICR0aGlzLT5vcmRlckl0ZW1zVG9TdGRDbGFzcygkY291cG9ucyk7IAoJCSAKCQkkY3VzdG9tZXJBZGRyZXNzID0gICR0aGlzLT5iaWxsaW5nQWRkcmVzczsKCQkkb3JkZXJPYmotPmJpbGxpbmdBZGRyZXNzID0gbmV3IHN0ZENsYXNzKCk7CgkJJG9yZGVyT2JqLT5iaWxsaW5nQWRkcmVzcy0+YWRkcmVzczEgPSAkY3VzdG9tZXJBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTEoKTsKCQkkb3JkZXJPYmotPmJpbGxpbmdBZGRyZXNzLT5hZGRyZXNzMiA9ICRjdXN0b21lckFkZHJlc3MtPmdldEFkZHJlc3NMaW5lMigpOwoJCSRvcmRlck9iai0+YmlsbGluZ0FkZHJlc3MtPmNpdHkgPSAkY3VzdG9tZXJBZGRyZXNzLT5nZXRDaXR5KCk7CgkJJG9yZGVyT2JqLT5iaWxsaW5nQWRkcmVzcy0+c3RhdGUgPSAkY3VzdG9tZXJBZGRyZXNzLT5nZXRTdGF0ZSgpOwoJCSRvcmRlck9iai0+YmlsbGluZ0FkZHJlc3MtPnppcCA9ICRjdXN0b21lckFkZHJlc3MtPmdldFBvc3RhbENvZGUoKTsKCQkkb3JkZXJPYmotPmJpbGxpbmdBZGRyZXNzLT5waG9uZSA9ICRjdXN0b21lckFkZHJlc3MtPmdldFBob25lKCk7CgkJCgkJJHNoaXBwaW5nQWRkcmVzcyA9ICAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzOwoJCSRvcmRlck9iai0+c2hpcHBpbmdBZGRyZXNzID0gbmV3IHN0ZENsYXNzKCk7CgkJJG9yZGVyT2JqLT5zaGlwcGluZ0FkZHJlc3MtPmFkZHJlc3MxID0gJHNoaXBwaW5nQWRkcmVzcy0+Z2V0QWRkcmVzc0xpbmUxKCk7CgkJJG9yZGVyT2JqLT5zaGlwcGluZ0FkZHJlc3MtPmFkZHJlc3MyID0gJHNoaXBwaW5nQWRkcmVzcy0+Z2V0QWRkcmVzc0xpbmUyKCk7CgkJJG9yZGVyT2JqLT5zaGlwcGluZ0FkZHJlc3MtPmNpdHkgPSAkc2hpcHBpbmdBZGRyZXNzLT5nZXRDaXR5KCk7CgkJJG9yZGVyT2JqLT5zaGlwcGluZ0FkZHJlc3MtPnN0YXRlID0gJHNoaXBwaW5nQWRkcmVzcy0+Z2V0U3RhdGUoKTsKCQkkb3JkZXJPYmotPnNoaXBwaW5nQWRkcmVzcy0+emlwID0gJHNoaXBwaW5nQWRkcmVzcy0+Z2V0UG9zdGFsQ29kZSgpOwoJCSRvcmRlck9iai0+c2hpcHBpbmdBZGRyZXNzLT5waG9uZSA9ICRzaGlwcGluZ0FkZHJlc3MtPmdldFBob25lKCk7CgkJcmV0dXJuICRvcmRlck9iajsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0SXNUZXN0KCkKCXsKCQlyZXR1cm4gJHRoaXMtPmlzVGVzdDsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIHNldElzVGVzdCgkaXNUZXN0KQoJewoJCSR0aGlzLT5pc1Rlc3QgPSAkaXNUZXN0OwoJCSRvcmRlckl0ZW1zID0gJHRoaXMtPmdldFByb2R1Y3RzKCkgKyAkdGhpcy0+Z2V0Q291cG9ucygpICsgJHRoaXMtPmdldFByb3JhdGlvbnMoKTsKCQlmb3JlYWNoICgkb3JkZXJJdGVtcyBhcyAkaXRlbSkKCQl7CgkJCSRpdGVtLT5zZXRJc1Rlc3QoJGlzVGVzdCk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBpc1Rlc3QoKQoJewoJCXJldHVybiAkdGhpcy0+aXNUZXN0OwoJfQoKCS8qCgkgKiBoZWxwZXIgbWV0aG9kIGZvciBicmVha2luZyBkb3duIG9yZGVyKiBhcnJheXMgb2Ygb3JkZXJJdGVtcy4KCSAqIEBwYXJhbSBhcnJheSAkb3JkZXJJdGVtQXJyIG9mIG9yZGVySXRlbXMKCSAqIEByZXR1cm4gc3RkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBhcnJheSBvZiBNTV9PcmRlckl0ZW0gb2JqZWN0cyBhcyBzdGRDbGFzcwoJICovICAKCXByaXZhdGUgZnVuY3Rpb24gb3JkZXJJdGVtc1RvU3RkQ2xhc3MoJG9yZGVySXRlbUFycikKCXsKCQkkb3JkZXJPYmogPSBhcnJheSgpOyAKCQlpZihpc19hcnJheSgkb3JkZXJJdGVtQXJyKSl7CgkJCWZvcmVhY2goJG9yZGVySXRlbUFyciBhcyAkaWQ9PiRvcmRlckl0ZW0pewoJCQkJaWYoJG9yZGVySXRlbSBpbnN0YW5jZW9mIE1NX09yZGVySXRlbSl7CgkJCQkJJG9yZGVyT2JqWyRpZF0gPSBuZXcgc3RkQ2xhc3MoKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+aWQgPSAkb3JkZXJJdGVtLT5nZXRJZCgpOwoJCQkJCSRvcmRlck9ialskaWRdLT5pdGVtSWQgPSAkb3JkZXJJdGVtLT5nZXRJdGVtSWQoKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+ZGVzY3JpcHRpb24gPSAkb3JkZXJJdGVtLT5nZXREZXNjcmlwdGlvbigpOwoJCQkJCSRvcmRlck9ialskaWRdLT5hbW91bnQgPSAkb3JkZXJJdGVtLT5nZXRBbW91bnQoKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+cXVhbnRpdHkgPSAkb3JkZXJJdGVtLT5nZXRRdWFudGl0eSgpOwoJCQkJCSRvcmRlck9ialskaWRdLT50b3RhbCA9ICRvcmRlckl0ZW0tPmdldFRvdGFsKCk7CgkJCQkJJG9yZGVyT2JqWyRpZF0tPnN0YXR1cyA9ICRvcmRlckl0ZW0tPmdldFN0YXR1cygpOwoJCQkJCSRvcmRlck9ialskaWRdLT5pc0dpZnQgPSAkb3JkZXJJdGVtLT5pc0dpZnQoKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+aXNSZWN1cnJpbmcgPSAkb3JkZXJJdGVtLT5pc1JlY3VycmluZygpOwoJCQkJCSRvcmRlck9ialskaWRdLT5yZWN1cnJpbmdBbW91bnQgPSAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+cmVjdXJyaW5nRGlzY291bnQgPSAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdEaXNjb3VudCgpOwoJCQkJCSRvcmRlck9ialskaWRdLT50cmlhbEFtb3VudCA9ICRvcmRlckl0ZW0tPmdldFRyaWFsQW1vdW50KCk7CgkJCQkJJG9yZGVyT2JqWyRpZF0tPnRyaWFsRHVyYXRpb24gPSAkb3JkZXJJdGVtLT5nZXRUcmlhbER1cmF0aW9uKCk7CgkJCQkJJG9yZGVyT2JqWyRpZF0tPnRyaWFsRnJlcXVlbmN5ID0gJG9yZGVySXRlbS0+Z2V0VHJpYWxGcmVxdWVuY3koKTsKCQkJCQkkb3JkZXJPYmpbJGlkXS0+cmViaWxsUGVyaW9kID0gJG9yZGVySXRlbS0+Z2V0UmViaWxsUGVyaW9kKCk7CgkJCQkJJG9yZGVyT2JqWyRpZF0tPnJlYmlsbEZyZXF1ZW5jeSA9ICRvcmRlckl0ZW0tPmdldFJlYmlsbEZyZXF1ZW5jeSgpOwoJCQkJCSRvcmRlck9ialskaWRdLT5tYXhSZWJpbGxzID0gJG9yZGVySXRlbS0+Z2V0TWF4UmViaWxscygpOwoJCQkJCSRvcmRlck9ialskaWRdLT5jdXJyZW5jeSA9ICRvcmRlckl0ZW0tPmdldEN1cnJlbmN5KCk7CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuICRvcmRlck9iajsKCX0KCQoJCgkvKioKCSAqIENvbnZlbmllbmNlIGZ1bmN0aW9uIHRoYXQgc2V0cyB0aGUgc3RhdHVzIGFuZCB1cGRhdGVzIHRoZSBvcmRlciBzdGF0dXMgaWYgdGhlIG9yZGVyIGhhcyBhbHJlYWR5IGJlZW4gcGVyc2lzdGVkIAoJICoKCSAqIEBwYXJhbSAkb3JkZXJTdGF0dXMgVGhlIHN0YXR1cyB0byBzYXZlCgkgKiAKCSAqIEByZXR1cm4gVGhlIHJlc3VsdCBvZiB0aGUgd3BkYi0+dXBkYXRlKCkgY2FsbAoJICovCglwdWJsaWMgZnVuY3Rpb24gc2F2ZU9yZGVyU3RhdHVzKCRvcmRlclN0YXR1cykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYgKGlzX251bWVyaWMoJG9yZGVyU3RhdHVzKSkKCQl7CgkJCSR0aGlzLT5zZXRPcmRlclN0YXR1cygkb3JkZXJTdGF0dXMpOwoJCQkkb3JkZXJBbHJlYWR5UGVyc2lzdGVkID0gKGludHZhbCgkdGhpcy0+aWQpID4wKT90cnVlOmZhbHNlOwoJCQlpZiAoJG9yZGVyQWxyZWFkeVBlcnNpc3RlZCkKCQkJewoJCQkJJHJlc3VsdCA9ICR3cGRiLT51cGRhdGUoTU1fVEFCTEVfT1JERVJTLCBhcnJheSgic3RhdHVzIj0+JG9yZGVyU3RhdHVzKSwgYXJyYXkoImlkIiA9PiAkdGhpcy0+aWQpKTsKCQkJfQoJCX0KCQlyZXR1cm4gJHJlc3VsdDsKCX0KCQp9Cg==', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(131, 'loginform', '', 0, '2018-11-21 06:38:54'),
(132, 'emailserviceprovidercontroller', '', 0, '2018-11-21 06:38:54'),
(133, 'customfielddata', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0N1c3RvbUZpZWxkRGF0YSBleHRlbmRzIE1NX0VudGl0eQp7Cglwcml2YXRlICRjdXN0b21GaWVsZElkID0gIiI7Cglwcml2YXRlICR1c2VySWQgPSAiIjsKCXByaXZhdGUgJHZhbHVlID0gIiI7CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXREYXRhKCkgCgl7CgkJLy8gZG8gbm90aGluZwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0RGF0YSgkZGF0YSkKCXsKCQl0cnkgCgkJewoJCQkkdGhpcy0+Y3VzdG9tRmllbGRJZCA9ICRkYXRhLT5jdXN0b21fZmllbGRfaWQ7CgkJCSR0aGlzLT51c2VySWQgPSAkZGF0YS0+dXNlcl9pZDsKCQkJJHRoaXMtPnZhbHVlID0gc3RyaXBzbGFzaGVzKGh0bWxfZW50aXR5X2RlY29kZSgkZGF0YS0+dmFsdWUsRU5UX0NPTVBBVCB8IEVOVF9IVE1MNDAxLCAiVVRGLTgiKSk7CgkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZXgpIAoJCXsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gY29tbWl0RGF0YSgpCgl7CQoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZihpbnR2YWwoJHRoaXMtPmlkKSA+IDApCgkJewoJCQkkc3FsID0gIlVQREFURSAiLk1NX1RBQkxFX0NVU1RPTV9GSUVMRF9EQVRBLiIgU0VUIAoJCQkJCQljdXN0b21fZmllbGRfaWQ9JyVzJywgCgkJCQkJCXVzZXJfaWQ9JyVzJywKCQkJCQkJdmFsdWU9JyVzJywKCQkJCQkJbGFzdF91cGRhdGVkPSclcycKCQkJCQlXSEVSRSAKCQkJCQkJaWQ9J3skdGhpcy0+aWR9JwoJCQkiOwoJCQkKCQkJJHByZXBhcmVkU3FsID0gJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmN1c3RvbUZpZWxkSWQsICR0aGlzLT51c2VySWQsIGh0bWxlbnRpdGllcyhzdHJpcHNsYXNoZXMoJHRoaXMtPnZhbHVlKSwgRU5UX1FVT1RFUywgIlVURi04IiksIE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpKTsKCQkJJHJldCA9ICR3cGRiLT5xdWVyeSgkcHJlcGFyZWRTcWwpOwoJCQlpZigkcmV0PT09ZmFsc2UpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBzYXZlIHF1ZXJ5IHskcHJlcGFyZWRTcWx9LiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCSRzcWwgPSAiSU5TRVJUIElOVE8gIi5NTV9UQUJMRV9DVVNUT01fRklFTERfREFUQS4iIFNFVCAKCQkJCWN1c3RvbV9maWVsZF9pZD0nJXMnLCAKCQkJCXVzZXJfaWQ9JyVzJywKCQkJCXZhbHVlPSclcycsCgkJCQlsYXN0X3VwZGF0ZWQ9JyVzJwoJCQkiOwoJCQkKCQkJJHByZXBhcmVkU3FsID0gJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmN1c3RvbUZpZWxkSWQsICR0aGlzLT51c2VySWQsIGh0bWxlbnRpdGllcyhzdHJpcHNsYXNoZXMoJHRoaXMtPnZhbHVlKSwgRU5UX1FVT1RFUywgIlVURi04IiksIE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpKTsKCQkJJHJldCA9ICR3cGRiLT5xdWVyeSgkcHJlcGFyZWRTcWwpOwoJCQlpZigkcmV0PT09ZmFsc2UpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBzYXZlIHF1ZXJ5IHskcHJlcGFyZWRTcWx9LiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRlbGV0ZSgpCgl7CQoJCWdsb2JhbCAkd3BkYjsKCQlpZihpbnR2YWwoJHRoaXMtPmlkKT4wKQoJCXsKCQkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX0NVU1RPTV9GSUVMRF9EQVRBLiIgd2hlcmUgaWQ9J3skdGhpcy0+aWR9JyBsaW1pdCAxIjsKCQkJCgkJCSRyZXN1bHQgPSAkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCWlmKCRyZXN1bHQ9PT1mYWxzZSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IHJlbW92ZSBjdXN0b20gZmllbGQgZGF0YSBkdWUgdG8gc3FsIGVycm9yLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCQl9CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IHJlbW92ZSBpbnZhbGlkIGN1c3RvbSBmaWVsZCBkYXRhLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQoJCgkKCS8qKiBHRVRURVJTIC8gU0VUVEVSUyAqKi8KCQoJcHVibGljIGZ1bmN0aW9uIHNldEN1c3RvbUZpZWxkSWQoJGlkKQoJewoJCSR0aGlzLT5jdXN0b21GaWVsZElkID0gJGlkOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q3VzdG9tRmllbGRJZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5jdXN0b21GaWVsZElkOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0VXNlcklkKCRpZCkKCXsKCQkkdGhpcy0+dXNlcklkID0gJGlkOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VXNlcklkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnVzZXJJZDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldFZhbHVlKCR2YWwpCgl7CgkJJHRoaXMtPnZhbHVlID0gJHZhbDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFZhbHVlKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnZhbHVlOwoJfQoJCgkKCS8qKiBVVElMSVRJRVMgKiovCgkKCS8qKgoJICogQHBhcmFtIE51bWJlciAkZmllbGRJZCB0aGUgSUQgb2YgdGhlIGN1c3RvbSBmaWVsZCB0byBnZXQgZGF0YSBmb3IKCSAqIEBwYXJhbSBOdW1iZXIgJHVzZXJJZCB0aGUgSUQgb2YgdGhlIHVzZXIgdG8gZ2V0IGN1c3RvbSBkYXRhIGZvcgoJICogQHJldHVybiBNTV9DdXN0b21GaWVsZERhdGEKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRDdXN0b21GaWVsZERhdGFCeVVzZXIoJGZpZWxkSWQsICR1c2VySWQpCgl7CgkJJGZpZWxkRGF0YSA9IG5ldyBNTV9DdXN0b21GaWVsZERhdGEoKTsKCQkKCQlnbG9iYWwgJHdwZGI7CiAJCQogCQkkc3FsID0gInNlbGVjdCAqIGZyb20gIi5NTV9UQUJMRV9DVVNUT01fRklFTERfREFUQS4iIHdoZXJlIHVzZXJfaWQ9J3skdXNlcklkfScgYW5kIGN1c3RvbV9maWVsZF9pZD0neyRmaWVsZElkfScgbGltaXQgMTsiOwogCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CiAJCQogCQlpZihpc3NldCgkcmVzdWx0LT51c2VyX2lkKSkKIAkJewogCQkJJGZpZWxkRGF0YS0+c2V0RGF0YSgkcmVzdWx0KTsKIAkJCQogCQkJaWYoJGZpZWxkRGF0YS0+aXNWYWxpZCgpKQogCQkJewogCQkJCSRmaWVsZERhdGEtPnNldElkKCRyZXN1bHQtPmlkKTsKIAkJCX0KIAkJfQogCQkKIAkJcmV0dXJuICRmaWVsZERhdGE7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gd2FzUmVjZW50bHlVcGRhdGVkKCRmaWVsZElkLCAkdXNlcklkKQoJewoJCWdsb2JhbCAkd3BkYjsKCQoJCSRzcWwgPSAiU0VMRUNUIGNvdW50KCopIGFzIHRvdGFsIEZST00gIi5NTV9UQUJMRV9DVVNUT01fRklFTERfREFUQS4iIFdIRVJFIGN1c3RvbV9maWVsZF9pZCA9IHskZmllbGRJZH0gQU5EIHVzZXJfaWQgPSB7JHVzZXJJZH0gQU5EIGxhc3RfdXBkYXRlZCA+IChub3coKSAtIElOVEVSVkFMIDEwIFNFQ09ORCkgTElNSVQgMTsiOwoJCSRyb3cgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQoJCWlmKCRyb3cgJiYgaXNzZXQoJHJvdy0+dG90YWwpICYmIGludHZhbCgkcm93LT50b3RhbCkgPiAwKQoJCXsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCQoJCgkvKioKCSAqIERlbGV0ZSBhbGwgY3VzdG9tIGZpZWxkIGRhdGEgbGlua2VkIHRvIGEgc3BlY2lmaWMgdXNlciBpZAoJICogCgkgKiBAcGFyYW0gaW50ICR1c2VySWQgVGhlIHVzZXIgaWQgdG8gcmVtb3ZlIHRoZSBkYXRhIGZyb20KCSAqIEByZXR1cm4gTU1fUmVzcG9uc2Ugb2JqZWN0IGluZGljYXRpbmcgb3BlcmF0aW9uIHN1Y2Nlc3Mgb3IgZmFpbHVyZQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGRlbGV0ZUJ5VXNlcklkKCR1c2VySWQpCgl7CgkgICAgZ2xvYmFsICR3cGRiOwoJICAgIAoJICAgICRzdGF0dXMgPSAkd3BkYi0+ZGVsZXRlKE1NX1RBQkxFX0NVU1RPTV9GSUVMRF9EQVRBLCBhcnJheSgndXNlcl9pZCc9PiR1c2VySWQpLCBhcnJheSgnJWQnKSk7CgkgICAgaWYgKCRzdGF0dXMgPT09IGZhbHNlKQoJICAgIHsKCSAgICAgICAgJGVycm9yTXNnID0gJHdwZGItPnByZXBhcmUoIkVycm9yIGRlbGV0aW5nIHVzZXIgaWQgJXMgZnJvbSBtbV9jdXN0b21fZmllbGRfZGF0YSIsJHVzZXJfaWQpOwoJICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRlcnJvck1zZyxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCSAgICB9CgkgICAgZWxzZQoJICAgIHsKCSAgICAgICAgcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJICAgIH0KCX0KfQ==', 0, '2018-11-21 06:38:54'),
(134, 'repaircorepagesview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1JlcGFpckNvcmVQYWdlc1ZpZXcgZXh0ZW5kcyBNTV9SQkFDQWRtaW5WaWV3CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1JFUEFJUl9DT1JFX1BBR0VTID0gInJlcGFpckNvcmVQYWdlcyI7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKIAlwdWJsaWMgZnVuY3Rpb24gcGVyZm9ybUFjdGlvbigkcG9zdCkgCgl7CQoJCSRyZXNwb25zZSA9IHBhcmVudDo6cGVyZm9ybUFjdGlvbigkcG9zdCk7CgkJCgkJaWYoISgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSkpCgkJewoJCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkgCgkJCXsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFUEFJUl9DT1JFX1BBR0VTOgoJCQkJCXJldHVybiAkdGhpcy0+cmVwYWlyQ29yZVBhZ2VzKCRwb3N0KTsKCQkJCQlicmVhazsKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UsTU1fUmVzcG9uc2U6OiRTVUNDRVNTLHRydWUpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gcmVwYWlyQ29yZVBhZ2VzKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJjb3JlUGFnZUlkcyJdKSAmJiAhZW1wdHkoJHBvc3RbImNvcmVQYWdlSWRzIl0pKSAKCQl7CgkJCWdsb2JhbCAkd3BkYjsKCQkJCgkJCSRjb3JlUGFnZUlkcyA9IGV4cGxvZGUoIiwiLCAkcG9zdFsiY29yZVBhZ2VJZHMiXSk7CgkJCSRyZXN1bHRNc2cgPSAiIjsKCQkJCgkJCWZvcmVhY2goJGNvcmVQYWdlSWRzIGFzICRjb3JlUGFnZUlkKQoJCQl7CgkJCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9DT1JFX1BBR0VTLiIgV0hFUkUgaWQgPSAneyRjb3JlUGFnZUlkfSc7IjsKCQkJCQkKCQkJCSRyb3cgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkJCQoJCQkJaWYoJHJvdykKCQkJCXsKCQkJCQkkZGVsZXRlU3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfQ09SRV9QQUdFUy4iIFdIRVJFIGlkID0gJ3skY29yZVBhZ2VJZH0nIExJTUlUIDE7IjsKCQkJCQkkd3BkYi0+cXVlcnkoJGRlbGV0ZVNxbCk7CgkJCQkJCgkJCQkJJHJlc3VsdE1zZyAuPSBNTV9Db3JlUGFnZVR5cGU6OmdldENvcmVQYWdlTmFtZSgkcm93LT5jb3JlX3BhZ2VfdHlwZV9pZCkuIlxuIjsKCQkJCX0KCQkJfQoJCQkKCQkJLy8gcmVpbnN0YWxsIGNvcmUgcGFnZXMKCQkJJGluc3RhbGxlciA9IG5ldyBNTV9JbnN0YWxsKCk7CgkJCSRpbnN0YWxsZXItPnNldHVwQ29yZVBhZ2VzKCk7CgkJCQoJCQkvL3JlYnVpbGQgY29yZSBwYWdlIGNhY2hlCgkJCU1NX0NvcmVQYWdlRW5naW5lOjpjcmVhdGVDb3JlUGFnZUNhY2hlKCk7CgkJCQoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUaGUgZm9sbG93aW5nIGRlZmF1bHQgY29yZSBwYWdlcyBoYXZlIGJlZW4gcmVpbnN0YWxsZWQ6XG57JHJlc3VsdE1zZ30iLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsKCQl9CgkJCgkgCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIk5vIGNvcmUgcGFnZSBJRHMgcmVjZWl2ZWQiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsJCSAJCgl9CgkKfQo=', 0, '2018-11-21 06:38:54'),
(135, 'salesbypaymentservicereport', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KY2xhc3MgTU1fU2FsZXNCeVBheW1lbnRTZXJ2aWNlUmVwb3J0IGV4dGVuZHMgTU1fQWR2YW5jZWRSZXBvcnRCYXNlIAp7CgkKCXByb3RlY3RlZCAkdmlzdWFsRWxlbWVudHMgPSBhcnJheSgiTU1fUmVwb3J0RGF0YUdyaWQiKTsKCQoJcHVibGljIHN0YXRpYyAkU0FMRVNfQllfUEFZTUVOVF9TRVJWSUNFX1JFUE9SVF9EQVRBR1JJRCA9ICJzYWxlc19ieV9wYXltZW50X3NlcnZpY2VfZGF0YWdyaWQiOwoJCgkvL3F1ZXJ5IGlkZW50aWZpZXJzCglwdWJsaWMgc3RhdGljICRTQUxFU19CWV9QQVlNRU5UX1NFUlZJQ0VfUVVFUlkgPSAic2FsZXNfYnlfcGF5bWVudF9zZXJ2aWNlX3F1ZXJ5IjsKCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVuZGVyVmlzdWFsRWxlbWVudCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMgPSAnJywgJHdpZHRoID0gJycsICRoZWlnaHQgPSAnJywgJGRpcmVjdGl2ZXM9YXJyYXkoKSkgCgl7CgkJc3dpdGNoICgkZWxlbWVudElkZW50aWZpZXIpCgkJewoJCQljYXNlIHNlbGY6OiRTQUxFU19CWV9QQVlNRU5UX1NFUlZJQ0VfUkVQT1JUX0RBVEFHUklEOgoJCQkJcmV0dXJuICR0aGlzLT5yZW5kZXJTYWxlc0J5UGF5bWVudFNlcnZpY2VSZXBvcnREYXRhZ3JpZCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMsICR3aWR0aCwgJGhlaWdodCwgJGRpcmVjdGl2ZXMpOwoJCQkJYnJlYWs7CgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCJVbmFibGUgdG8gcmVuZGVyIHZpc3VhbCBlbGVtZW50OiBpZGVudGlmaWVyICIuKCghaXNfYXJyYXkoJGVsZW1lbnRJZGVudGlmaWVyKSAmJiAhaXNfb2JqZWN0KCRlbGVtZW50SWRlbnRpZmllcikpPyJ7JGVsZW1lbnRJZGVudGlmaWVyfSAiOiIiKS4idW5rbm93biIsTU1fUmVwb3J0UmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJTYWxlc0J5UGF5bWVudFNlcnZpY2VSZXBvcnREYXRhZ3JpZCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMgPSAnJywgJHdpZHRoID0gJycsICRoZWlnaHQgPSAnJywgJGRpcmVjdGl2ZXM9YXJyYXkoKSkKCXsKCQkkZGF0YVJlc3BvbnNlID0gTU1fUmVwb3J0RGF0YVJldHJpZXZlcjo6cmVxdWVzdERhdGEoZ2V0X2NsYXNzKCR0aGlzKSwgc2VsZjo6JFNBTEVTX0JZX1BBWU1FTlRfU0VSVklDRV9RVUVSWSwgJHBhcmFtcyk7CgkJaWYgKCFNTV9SZXBvcnRSZXNwb25zZTo6aXNTdWNjZXNzKCRkYXRhUmVzcG9uc2UpKQoJCXsKCQkJcmV0dXJuICRkYXRhUmVzcG9uc2U7CgkJfQoJCQoJCSRncmlkSGVhZGVycyA9IGFycmF5KCJwYXltZW50X3NlcnZpY2UiPT5hcnJheSgnbGFiZWwnPT4iUGF5bWVudCBTZXJ2aWNlIiksCgkJCQkJCQkgInVuaXRzIj0+YXJyYXkoJ2xhYmVsJz0+IlVuaXRzIiwndG9vbHRpcCc9PidVbml0cyBpbiB0aGlzIGNvbnRleHQgaXMgdGhlIG51bWJlciBvZiBwcm9kdWN0cyBwdXJjaGFzZWQgb3IgcmViaWxsaW5nIGluIHRoZSBzcGVjaWZpZWQgZGF0ZSByYW5nZScpLAoJCQkJICAgICAgICAgICAgICJzYWxlcyI9PmFycmF5KCdsYWJlbCc9PiJTYWxlcyIpKTsKCQkkZ3JpZCA9IE1NX1JlcG9ydERhdGFncmlkOjpjcmVhdGVGcm9tRGF0YShzZWxmOjokU0FMRVNfQllfUEFZTUVOVF9TRVJWSUNFX1JFUE9SVF9EQVRBR1JJRCwgJGdyaWRIZWFkZXJzLCAkZGF0YVJlc3BvbnNlLCRkaXJlY3RpdmVzKTsKCQkvLyRncmlkLT5zZXRHcmlkVGl0bGUoIlBheW1lbnQgTWV0aG9kIik7CgkJJGdyaWQtPnNldFNob3dIZWFkZXJSb3coZmFsc2UpOwoJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoJGdyaWQtPnJlbmRlcigpKTsKCX0KCQoJCgkvKioKCSAqIEdlbmVyYXRlIHRoZSBkYXRhIGZvciB0aGUgU2FsZXMgQnkgUGF5bWVudCBTZXJ2aWNlIHJlcG9ydC4gCgkgKiBDb25zdHJhaW50OiBUaGUgc3VwcGxpZWQgcGFyYW1zIG11c3QgY29udGFpbiBhIHN0YXJ0IGFuZCBlbmQgZGF0ZQoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHBhcmFtcwoJICogQHJldHVybiBNTV9SZXBvcnREYXRhc2V0IGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZW5lcmF0ZVNhbGVzQnlQYXltZW50U2VydmljZVJlcG9ydERhdGEoJHBhcmFtcykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYgKCFpc19hcnJheSgkcGFyYW1zKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBnZW5lcmF0ZSBTYWxlcyBCeSBQYXltZW50IE1ldGhvZCByZXBvcnQgZGF0YTogSW1wcm9wZXIgcGFyYW1ldGVycyBmb3JtYXQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoIWlzc2V0KCRwYXJhbXNbJ3N0YXJ0X2RhdGUnXSkgfHwgIWlzc2V0KCRwYXJhbXNbJ2VuZF9kYXRlJ10pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IGdlbmVyYXRlIFNhbGVzIEJ5IFBheW1lbnQgTWV0aG9kIHJlcG9ydCBkYXRhOiBTdGFydCBhbmQgRW5kIGRhdGUgbXVzdCBiZSBzdXBwbGllZCIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCS8vb3B0aW9uYWwgcGFyYW0KCQkkaW5jbHVkZV9yZWJpbGxzID0gKGlzc2V0KCRwYXJhbXNbJ2luY2x1ZGVfcmViaWxscyddKSAmJiAoJHBhcmFtc1snaW5jbHVkZV9yZWJpbGxzJ10gPT0gIm9uIikpOwoJCQoJCQoJCSR0cmFuc2FjdGlvbnNUYWJsZSA9IE1NX1RBQkxFX1RSQU5TQUNUSU9OX0xPRzsKCQkkcGF5bWVudFNlcnZpY2VzVGFibGUgPSBNTV9UQUJMRV9QQVlNRU5UX1NFUlZJQ0VTOwoJCSRvcmRlckl0ZW1zVGFibGUgPSBNTV9UQUJMRV9PUkRFUl9JVEVNUzsKCQkKCQkkc3RhcnRUaW1lID0gc3RydG90aW1lKCRwYXJhbXNbJ3N0YXJ0X2RhdGUnXSk7CgkJJGVuZFRpbWUgPSBzdHJ0b3RpbWUoJHBhcmFtc1snZW5kX2RhdGUnXSk7CgkJCgkJJHN0YXJ0RGF0ZSA9IGRhdGUoIlktbS1kIDAwOjAwIiwkc3RhcnRUaW1lKTsgLy9teXNxbCBmb3JtYXQKCQkkZW5kRGF0ZSA9ICAgZGF0ZSgiWS1tLWQgMjM6NTk6NTkiLCRlbmRUaW1lKTsKCQkKCQkkdHJhbnNhY3Rpb25UeXBlcyA9IGFycmF5KE1NX1RyYW5zYWN0aW9uTG9nOjokVFJBTlNBQ1RJT05fVFlQRV9QQVlNRU5UKTsKCQlpZiAoJGluY2x1ZGVfcmViaWxscykKCQl7CgkJCSR0cmFuc2FjdGlvblR5cGVzW10gPSBNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUkVDVVJSSU5HX1BBWU1FTlQ7CgkJfQoJCSR0cmFuc2FjdGlvblR5cGVTdHJpbmcgPSBpbXBsb2RlKCIsIiwkdHJhbnNhY3Rpb25UeXBlcyk7CgkJCgkJLy9nZXRzIHRoZSB1bml0cyBhbmQgdG90YWwgcmV2ZW51ZSBmcm9tIHRyYW5zYWN0aW9ucyBsaW5rZWQgdG8gcHJvZHVjdCBzYWxlcyAob3B0aW9uYWxseSBpbmNsdWRpbmcgcmVjdXJyaW5nIHBheW1lbnRzKSBmb3IgdHJhbnNhY3Rpb25zIHRoYXQgb2NjdXIgd2l0aGluIGEgZGF0ZSByYW5nZQoJCS8vcmVmdW5kIGl0ZW1zIGRvIG5vdCBjb3VudCBhZ2FpbnN0IHRoZSB0b3RhbC4gSWYgdGhlcmUgaXMgYSBkYXRhIGVycm9yIChmb3IgaW5zdGFuY2UgdHJhbnNhY3Rpb25zIGV4aXN0IHdoZXJlIHRoZSBsaW5rZWQgb3JkZXJzL2l0ZW1zIHdlcmUgZGVsZXRlZCkgdGhlbiB0aGUgcHJvZHVjdCBpcwoJCS8vbGlzdGVkIGFzICdVbmtub3duIFByb2R1Y3QnCgkJCgkJJHNxbCA9ICJTRUxFQ1QgSUZOVUxMKHBzLm5hbWUsJ1Vua25vd24nKSBBUyBwYXltZW50X3NlcnZpY2UsIFQudW5pdHMsIFQuc2FsZXMgIi4KCQkJICAgIkZST00gKFNFTEVDVCB0bC5wYXltZW50X3NlcnZpY2VfaWQsU1VNKElGTlVMTChvaS5xdWFudGl0eSwxKSkgQVMgdW5pdHMsIEFCUyhTVU0odGwuYW1vdW50KSkgQVMgc2FsZXMgIi4KCQkJICAgIkZST00geyR0cmFuc2FjdGlvbnNUYWJsZX0gdGwgTEVGVCBKT0lOIHskb3JkZXJJdGVtc1RhYmxlfSBvaSBPTiAodGwub3JkZXJfaXRlbV9pZCA9IG9pLmlkKSAiLgoJCQkgICAiV0hFUkUgKHRsLnRyYW5zYWN0aW9uX2RhdGUgQkVUV0VFTiAlcyBBTkQgJXMpIEFORCB0bC50cmFuc2FjdGlvbl90eXBlIElOICh7JHRyYW5zYWN0aW9uVHlwZVN0cmluZ30pICIuCgkJCSAgICJHUk9VUCBCWSB0bC5wYXltZW50X3NlcnZpY2VfaWQpIEFTIFQgTEVGVCBKT0lOIHskcGF5bWVudFNlcnZpY2VzVGFibGV9IHBzIE9OIChULnBheW1lbnRfc2VydmljZV9pZCA9IHBzLmlkKSI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHdwZGItPnByZXBhcmUoJHNxbCwkc3RhcnREYXRlLCRlbmREYXRlKSxBUlJBWV9BKTsKCQkKCQlmb3JlYWNoICgkcmVzdWx0cyBhcyAmJHJvdykKCQl7CgkJCSRyb3dbJ3NhbGVzJ10gPSBfbW1mKCRyb3dbJ3NhbGVzJ10pOyAKCQkJLy9UT0RPOiBkZWFsIHdpdGggbXVsdGlwbGUgY3VycmVuY3kgaXNzdWVzCQoJCX0KCQkKCQkkZGF0YXNldCA9IE1NX1JlcG9ydERhdGFzZXQ6OmNyZWF0ZVNpbmdsZVJlcG9ydERhdGFzZXQoJHBhcmFtcywkcmVzdWx0cyk7CgkJcmV0dXJuICRkYXRhc2V0OwoJfQoJCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2VuZXJhdGVEYXRhKCRxdWVyeUlkZW50aWZpZXIsICRwYXJhbXMpCgl7CgkJc3dpdGNoICgkcXVlcnlJZGVudGlmaWVyKQoJCXsKCQkJY2FzZSBzZWxmOjokU0FMRVNfQllfUEFZTUVOVF9TRVJWSUNFX1FVRVJZOgoJCQkJcmV0dXJuIHNlbGY6OmdlbmVyYXRlU2FsZXNCeVBheW1lbnRTZXJ2aWNlUmVwb3J0RGF0YSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3IgZ2VuZXJhdGluZyBkYXRhIGZvciB1bmtub3duIHF1ZXJ5IGlkZW50aWZpZXIgeyRxdWVyeUlkZW50aWZpZXJ9IixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9Cgl9CgkKfQoK', 0, '2018-11-21 06:38:54'),
(136, 'reportresponse', 'LyoqCioKKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQoqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoqLwpjbGFzcyBNTV9SZXBvcnRSZXNwb25zZSBleHRlbmRzIE1NX1Jlc3BvbnNlCnsKCXB1YmxpYyBzdGF0aWMgJE5PVF9SRUFEWSA9ICJub3RfcmVhZHkiOwoJcHVibGljIHN0YXRpYyAkTk9fREFUQSA9ICJub19kYXRhIjsKCQogCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNOb3RSZWFkeSgkcmVzcG9uc2UpCiAJewogCQlpZigoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVwb3J0UmVzcG9uc2UpICYmICgkcmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVwb3J0UmVzcG9uc2U6OiROT1RfUkVBRFkpKQogCQl7CiAJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQkKIAkJcmV0dXJuIGZhbHNlOwogCX0KIAkKIAkKIAlwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGhhc05vRGF0YSgkcmVzcG9uc2UpCiAJewogCQlpZigoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVwb3J0UmVzcG9uc2UpICYmICgkcmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVwb3J0UmVzcG9uc2U6OiROT19EQVRBKSkKIAkJewogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJCQogCQlyZXR1cm4gZmFsc2U7CiAJfQp9Cgo=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(137, 'releasecontroller', 'Y2xhc3MgUmVsZWFzZUNvbnRyb2xsZXIgaW1wbGVtZW50cyBSZXN0Q29udHJvbGxlciAKewogICAgZnVuY3Rpb24gZXhlY3V0ZShSZXN0U2VydmVyICRyZXN0KSB7fQogICAgCiAgICBwdWJsaWMgZnVuY3Rpb24gZGVwbG95UmVsZWFzZSgkcmVzdCkKICAgIHsKICAgIAkkcG9zdCA9ICRyZXN0LT5nZXRSZXF1ZXN0KCktPmdldFBvc3QoKTsKICAgIAkKICAgICAgICBNTV9Mb2dBcGk6OmxvZ1JlcXVlc3QoanNvbl9lbmNvZGUoJHBvc3QpLCAiL2RlcGxveVJlbGVhc2UiKTsKICAgIAogICAgICAgIGlmKCFpc3NldCgkcG9zdFsidmVyc2lvbiJdKSkKICAgICAgICB7CiAgICAgICAgCXJldHVybiBuZXcgUmVzcG9uc2UoJHJlc3QsICAiTWFqb3IgdmVyc2lvbiBudW1iZXIgaXMgcmVxdWlyZWQiLCBSRVNQT05TRV9FUlJPUl9NRVNTQUdFX01JU1NJTkdfUEFSQU1TLiIgOiB2ZXJzaW9uIiwgUkVTUE9OU0VfRVJST1JfQ09ERV9NSVNTSU5HX1BBUkFNUywgUkVTUE9OU0VfRVJST1JfTUVTU0FHRV9NSVNTSU5HX1BBUkFNUyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgICRtYWpvclZlcnNpb24gPSAkcG9zdFsidmVyc2lvbiJdOwogICAgICAgICRtaW5vclZlcnNpb24gPSAoaXNzZXQoJHBvc3RbIm1pbm9yX3ZlcnNpb24iXSkpID8gJHBvc3RbIm1pbm9yX3ZlcnNpb24iXSA6IE1NX01lbWJlck1vdXNlU2VydmljZTo6JERFRkFVTFRfTUlOT1JfVkVSU0lPTjsKICAgICAgICAKICAgICAgICAkY3JudFZlcnNpb24gPSBNZW1iZXJNb3VzZTo6Z2V0UGx1Z2luVmVyc2lvbigpOwogICAgICAgIAogICAgICAgIGlmKCRjcm50VmVyc2lvbiAhPSAkbWFqb3JWZXJzaW9uKQogICAgICAgIHsKICAgICAgICAJTU1fT3B0aW9uVXRpbHM6OnNldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfVVBHUkFERV9OT1RJQ0UsICRtYWpvclZlcnNpb24pOwogICAgICAgIAlyZXR1cm4gbmV3IFJlc3BvbnNlKCRyZXN0LCAiTWFqb3IgdmVyc2lvbiBkbyBub3QgbWF0Y2guIEEgbm90aWZpY2F0aW9uIHdpbGwgYmUgZGlzcGxheWVkIHRvIHRoZSBjdXN0b21lciBpbmZvcm1pbmcgdGhlbSBhbiB1cGRhdGUgaXMgYXZhaWxhYmxlLiIsICJNYWpvciB2ZXJzaW9uIGRvIG5vdCBtYXRjaC4gQSBub3RpZmljYXRpb24gd2lsbCBiZSBkaXNwbGF5ZWQgdG8gdGhlIGN1c3RvbWVyIGluZm9ybWluZyB0aGVtIGFuIHVwZGF0ZSBpcyBhdmFpbGFibGUuIiwgUkVTUE9OU0VfRVJST1JfQ09ERV9CQURfUkVRVUVTVCwgUkVTUE9OU0VfRVJST1JfTUVTU0FHRV9NSVNTSU5HX1BBUkFNUyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIGlmIG1ham9yIHZlcnNpb25zIG1hdGNoLCB1cGRhdGUgY2FjaGUgd2l0aCB0aGUgbGF0ZXN0IGZpbGVzIGZyb20gY2VudHJhbAogICAgICAgICR3cml0ZWFibGVEaXIgPSBNTV9VdGlsczo6Z2V0Q2FjaGVEaXIoKTsKICAgICAgICAKICAgICAgICAvLyBkZWxldGUgZXhpc3RpbmcgY2FjaGUKICAgICAgICBpZihpc19kaXIoJHdyaXRlYWJsZURpcikpCiAgICAgICAgewogICAgICAgIAlpZihpc193cml0ZWFibGUoJHdyaXRlYWJsZURpcikpCiAgICAgICAgCXsKCSAgICAgICAgCWlmICgkaGFuZGxlID0gb3BlbmRpcigkd3JpdGVhYmxlRGlyKSkgCgkgICAgICAgIAl7CgkJCQkgICAgd2hpbGUoZmFsc2UgIT09ICgkZmlsZSA9IHJlYWRkaXIoJGhhbmRsZSkpKSAKCQkJCSAgICB7CgkJCQkgICAgICAgIGlmKCFpc19kaXIoJGZpbGUpKQoJCQkJICAgICAgICB7CgkJCQkgICAgICAgIAlAdW5saW5rKCR3cml0ZWFibGVEaXIuIi8iLiRmaWxlKTsKCQkJCSAgICAgICAgfQoJCQkJICAgIH0KCQkJCSAgICAKCQkJCSAgICBjbG9zZWRpcigkaGFuZGxlKTsKCQkJCX0KICAgICAgICAJfQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBnZXQgdXBkYXRlZCBjbGFzc2VzIGZyb20gY2VudHJhbAogICAgICAgIE1NX09wdGlvblV0aWxzOjpzZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX01JTk9SX1ZFUlNJT04sICRtaW5vclZlcnNpb24pOwoJCSRyZXQgPSBNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OmF1dGhvcml6ZSh0cnVlKTsKCQkKCQlpZihNTV9SZXNwb25zZTo6aXNFcnJvcigkcmV0KSkKCQl7CgkJCXJldHVybiBuZXcgUmVzcG9uc2UoJHJlc3QsICJDb3VsZCBub3QgZmluZCBjbGFzc2VzIGFzc29jaWF0ZWQgd2l0aCB2ZXJzaW9uIHskbWFqb3JWZXJzaW9ufS57JG1pbm9yVmVyc2lvbn0iLCAiSW52YWxpZCBtYWpvci9taW5vciB2ZXJzaW9uIGNvbWJpbmF0aW9uIiwgUkVTUE9OU0VfRVJST1JfQ09ERV9CQURfUkVRVUVTVCwgUkVTUE9OU0VfRVJST1JfTUVTU0FHRV9NSVNTSU5HX1BBUkFNUyk7CgkJfQogICAgICAgIAogICAgICAgIGlmKGRlZmluZWQoIkRCX05BTUUiKSkKICAgICAgICB7CiAgICAgICAgCWdsb2JhbCAkd3BkYjsKICAgICAgICAJCiAgICAgICAgCWlmKGZpbGVfZXhpc3RzKCR3cml0ZWFibGVEaXIuIi9tZW1iZXJtb3VzZV9zY2hlbWEuc3FsIikpCiAgICAgICAgCXsJCgkJCQkkcGhwT2JqID0gbmV3IE1NX1BocE9iaigkd3BkYiwgREJfTkFNRSk7CgkJCQlpZighJHBocE9iai0+aW1wb3J0RmlsZSgkd3JpdGVhYmxlRGlyLiIvbWVtYmVybW91c2Vfc2NoZW1hLnNxbCIsIHRydWUpKQoJCQkJewoJCSAgICAgICAgCXJldHVybiBuZXcgUmVzcG9uc2UoJHJlc3QsICJDb3VsZCBub3QgdXBkYXRlIE1lbWJlck1vdXNlIGRhdGFiYXNlIiwgIkNvdWxkIG5vdCB1cGRhdGUgTWVtYmVyTW91c2UgZGF0YWJhc2UiLCBSRVNQT05TRV9FUlJPUl9DT0RFX0JBRF9SRVFVRVNULCBSRVNQT05TRV9FUlJPUl9NRVNTQUdFX01JU1NJTkdfUEFSQU1TKTsKCQkJCX0KICAgICAgICAJfQogICAgICAgIH0KICAgCQllbHNlCiAgIAkJewogICAJCQlyZXR1cm4gbmV3IFJlc3BvbnNlKCRyZXN0LCAgIkRCX05BTUUgbm90IGRlZmluZWQiLCAiREJfTkFNRSBub3QgZGVmaW5lZCIsIFJFU1BPTlNFX0VSUk9SX0NPREVfQkFEX1JFUVVFU1QsIFJFU1BPTlNFX0VSUk9SX01FU1NBR0VfTUlTU0lOR19QQVJBTVMpOwogICAJCX0KCQkgICAgICAgIAogICAJCSR2ZXJzaW9uID0gJG1ham9yVmVyc2lvbjsKICAgCQkKICAgCQlpZighZW1wdHkoJG1pbm9yVmVyc2lvbikpCiAgIAkJewogICAJCQkkdmVyc2lvbiAuPSAiLSIuJG1pbm9yVmVyc2lvbjsKICAgCQl9CiAgIAkJCiAgIAkJJHZlcnNpb25SZWxlYXNlID0gTU1fVmVyc2lvblJlbGVhc2U6OmZpbmRCeVZlcnNpb24oJHZlcnNpb24pOwogICAJCSR2ZXJzaW9uUmVsZWFzZS0+c2V0VmVyc2lvbigkdmVyc2lvbik7CiAgIAkJJHZlcnNpb25SZWxlYXNlLT5jb21taXREYXRhKCk7CiAgIAkJCiAgIAkJcmV0dXJuIG5ldyBSZXNwb25zZSgkcmVzdCk7CiAgICB9IAogICAgCiAgICAvKioKICAgICAqIERpYWdub3N0aWMgbWV0aG9kIHRoYXQgcmVzcG9uZHMgaWYgTWVtYmVyTW91c2UgaXMgYWN0aXZlIGFuZCB3b3JraW5nIGNvcnJlY3RseQogICAgICogCiAgICAgKiBAcGFyYW0gUmVzdFNlcnZlciAkcmVzdCBBbiBpbnN0YW5jZSBvZiB0aGUgUmVzdFNlcnZlcgogICAgICogQHJldHVybiBSZXNwb25zZSBvYmplY3Qgd2l0aCBzdGF0dXMgMjAwIGNvbnRhaW5pbmcgaWYgTWVtYmVyTW91c2UgaXMgaW5zdGFsbGVkLCByZWNlaXZlcyB0aGUgcmVxdWVzdCwgYW5kIGlzIGFibGUgdG8gcmVzcG9uZAogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gcGluZygkcmVzdCkKICAgIHsKICAgIAkkcmVzdWx0ID0gTU1fTWVtYmVyTW91c2VTZXJ2aWNlOjpwaW5nKCk7CiAgICAJCiAgICAJaWYoJHJlc3VsdCBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKQogICAgCXsKICAgIAkJcmV0dXJuIG5ldyBSZXNwb25zZSgkcmVzdCwgJHJlc3VsdC0+bWVzc2FnZSwgJHJlc3VsdC0+bWVzc2FnZSwgUkVTUE9OU0VfRVJST1JfQ09ERV9JTlRFUk5BTCwgUkVTUE9OU0VfRVJST1JfQ09ERV9JTlRFUk5BTCk7CiAgICAJfQogICAgCQogICAgCWlmKCRyZXN1bHQpCiAgICAJewogICAgCQlyZXR1cm4gbmV3IFJlc3BvbnNlKCRyZXN0LCAiUE9ORyIsICJQT05HIik7CiAgICAJfQogICAgCWVsc2UgCiAgICAJewogICAgCQlyZXR1cm4gbmV3IFJlc3BvbnNlKCRyZXN0LCAiUGx1Z2luIGF1dGhvcml6YXRpb24gZmFpbGVkIiwgIlBsdWdpbiBhdXRob3JpemF0aW9uIGZhaWxlZCIsIFJFU1BPTlNFX0VSUk9SX0NPREVfSU5URVJOQUwsIFJFU1BPTlNFX0VSUk9SX01FU1NBR0VfSU5URVJOQUwpOwogICAgCX0KICAgIH0KfQ==', 0, '2018-11-21 06:38:54'),
(138, 'jsonrpcclient', '', 0, '2018-11-21 06:38:54'),
(139, 'affiliatereport', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(140, 'litleservice', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(141, 'uservoiceextension', '', 0, '2018-11-21 06:38:54'),
(142, 'employeetagprocessor', 'Y2xhc3MgTU1fRW1wbG95ZWVUYWdQcm9jZXNzb3IKewkKCXB1YmxpYyBzdGF0aWMgJFRBR19FTVBMT1lFRV9EQVRBID0gIm1tX2VtcGxveWVlX2RhdGEiOwoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgaXMgcmVsYXRlZCB0byBlbXBsb3llZXMuCgkgKiAKCSAqIEBwYXJhbSBTdHJpbmcgJHNtYXJ0VGFnIHRoZSBuYW1lIG9mIHRoZSBTbWFydFRhZwoJICogQHJldHVybiBCb29sZWFuIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgcGFzc2VkIGlzIHJlbGF0ZWQgdG8gZW1wbG95ZWVzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzRW1wbG95ZWVTbWFydFRhZygkc21hcnRUYWcpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfRU1QTE9ZRUVfREFUQToKCQkJCXJldHVybiB0cnVlOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gZmFsc2U7CgkJfQoJfQoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBuYW1lIGFuZCBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIHJlbGF0ZWQgdG8gdGhlIFNtYXJ0VGFnIGFuZCBtYWtlcyBhIGNhbGwgdG8gCgkgKiB0aGUgYXBwcm9wcmlhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIFNtYXJ0VGFnIG5hbWUuCgkgKiBAcGFyYW0gU3RyaW5nICRzbWFydFRhZyB0aGUgbmFtZSBvZiB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgdG8gcHJvY2VzcwoJICogQHBhcmFtIEFycmF5ICRhdHRzIGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29kZSB0aGUgcmF3IHZlcnNpb24gb2YgdGhlIFNtYXJ0VGFnIG5hbWUgKGkuZS4gbm90IGNhc2UtaW5zZW50aXZlLCBub3QgYnJva2VuIHVwIGludG8gcGFydHMpCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgJGNvbnRlbnQgcGFzc2VkIHdpdGggYWxsIFNtYXJ0VGFncyBwcm9jZXNzZWQKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwcm9jZXNzU21hcnRUYWcoJHNtYXJ0VGFnLCAkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewoJCXN3aXRjaCgkc21hcnRUYWcpIAoJCXsKCQkJY2FzZSBzZWxmOjokVEFHX0VNUExPWUVFX0RBVEE6CgkJCQlyZXR1cm4gc2VsZjo6bW1fZW1wbG95ZWVfZGF0YSgkY29udGVudCwgJGF0dHMsICRjb2RlKTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuICJJbnZhbGlkIEVtcGxveWVlIFNtYXJ0VGFnIHskc21hcnRUYWd9IGZvdW5kLiI7CgkJfQoJfQoJCgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBnZXRzIHRoZSBlbXBsb3llZSBhc3NvY2lhdGVkIHdpdGggdGhlIElEIHBhc3NlZCBpbiB0aGUgYXR0cmlidXRlcyBvciB0aGUgZGVmYXVsdCBlbXBsb3llZQoJICogCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcwoJICogQHJldHVybiBNTV9FbXBsb3llZSB0aGUgZW1wbG95ZWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBJRCBwYXNzZWQgaW4gdGhlIGF0dHJpYnV0ZXMgb3IgdGhlIGRlZmF1bHQgZW1wbG95ZWUKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZ2V0RW1wbG95ZWUoJGF0dHMpCgl7CgkJaWYoaXNfYXJyYXkoJGF0dHMpICYmIGNvdW50KCRhdHRzKSA+IDApCgkJewoJCQlmb3JlYWNoKCRhdHRzIGFzICRrPT4kdikKCQkJewoJCQkJJGtleSA9IHN0cnRvbG93ZXIoJGspOwoJCQkJJCRrZXkgPSAkdjsKCQkJfQoJCX0KCQkKCQkkZW1wbG95ZWUgPSBuZXcgTU1fRW1wbG95ZWUoKTsKCQkKCQkvLyBnZXQgZW1wbG95ZWUKCQlpZihpc3NldCgkaWQpKQoJCXsKCQkJJGVtcGxveWVlID0gbmV3IE1NX0VtcGxveWVlKCRpZCk7CgkJfQoJCWVsc2UKCQl7CgkJCSRlbXBsb3llZSA9IE1NX0VtcGxveWVlOjpnZXREZWZhdWx0KCk7CgkJfQoJCQoJCXJldHVybiAkZW1wbG95ZWU7Cgl9CgkKCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIHByb2Nlc3NlcyB0aGUgTU1fRW1wbG95ZWVfRGF0YSB0YWcuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciAKCSAqIHJldHVybmluZyB0aGUgZW1wbG95ZWUgZGF0YSBiYXNlZCBvbiB0aGUgbmFtZSBhdHRyaWJ1dGUuCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG1tX2VtcGxveWVlX2RhdGEoJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQkkZW1wbG95ZWUgPSBzZWxmOjpnZXRFbXBsb3llZSgkYXR0cyk7CgkJCgkJaWYoJGVtcGxveWVlLT5pc1ZhbGlkKCkpCgkJewoJCQlpZihpc19hcnJheSgkYXR0cykgJiYgY291bnQoJGF0dHMpID4gMCkKCQkJewoJCQkJZm9yZWFjaCgkYXR0cyBhcyAkaz0+JHYpCgkJCQl7CgkJCQkJJGtleSA9IHN0cnRvbG93ZXIoJGspOwoJCQkJCSQka2V5ID0gJHY7CgkJCQl9CgkJCX0KCQkJCgkJCWlmKGlzc2V0KCRuYW1lKSkKCQkJewoJCQkJc3dpdGNoKHN0cnRvbG93ZXIoJG5hbWUpKQoJCQkJewoJCQkJCWNhc2UgImRpc3BsYXluYW1lIjoKCQkJCQkJcmV0dXJuICRlbXBsb3llZS0+Z2V0RGlzcGxheU5hbWUoKTsKCQkJCQkJCgkJCQkJY2FzZSAiZmlyc3RuYW1lIjoKCQkJCQkJcmV0dXJuICRlbXBsb3llZS0+Z2V0Rmlyc3ROYW1lKCk7CgkJCQkJCQoJCQkJCWNhc2UgImxhc3RuYW1lIjoKCQkJCQkJcmV0dXJuICRlbXBsb3llZS0+Z2V0TGFzdE5hbWUoKTsKCQkJCQkJCgkJCQkJY2FzZSAiZW1haWwiOgoJCQkJCQlyZXR1cm4gJGVtcGxveWVlLT5nZXRFbWFpbCgpOwoJCQkJCQkKCQkJCQljYXNlICJwaG9uZSI6CgkJCQkJCXJldHVybiAkZW1wbG95ZWUtPmdldFBob25lKCk7CgkJCQkJCQoJCQkJCWRlZmF1bHQ6CgkJCQkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiBUaGUgJ25hbWUnIGF0dHJpYnV0ZSAneyRuYW1lfScgaXMgaW52YWxpZCBmb3IgU21hcnRUYWcgeyRjb2RlfS4iOwoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IFRoZSAnbmFtZScgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGZvciBTbWFydFRhZyB7JGNvZGV9LiI7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IENvdWxkIG5vdCBmaW5kIGVtcGxveWVlIGZvciBTbWFydFRhZyB7JGNvZGV9LiI7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(143, 'corepage', '', 0, '2018-11-21 06:38:54'),
(144, 'shoppingcartitem', 'LyoqCiAqCiAqCiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKGMpIE1lbWJlck1vdXNlLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KCi8qKgogKiBNTV9TaG9wcGluZ0NhcnRJdGVtIGlzIGFuIGFic3RyYWN0aW9uIG9mIGFuIGl0ZW0gaW4gYSBzaG9wcGluZyBjYXJ0LiBUaGVyZSBhcmUgdHdvIHR5cGVzIG9mIHB1cmNoYXNlcyBNZW1iZXJNb3VzZSBwbGFucyB0byBzdXBwb3J0OwogKiBtZW1iZXJzaGlwcywgYW5kIGUtY29tbWVyY2UgcHJvZHVjdCBwdXJjaGFzZXMuIFdoaWxlIHRoZSBNTV9NZW1iZXJzaGlwTGV2ZWwgYW5kIE1NX1Byb2R1Y3QgdHlwZXMgY291bGQgYmUgYWRkZWQgZGlyZWN0bHkgdG8gdGhlIGNhcnQsIAogKiBlYWNoIHdvdWxkIG5lZWQgdG8gYmUgdHJlYXRlZCBkaWZmZXJlbnRseSwgYW5kIHRoaXMgaXMgZnVydGhlciBjb21wbGljYXRlZCBieSB0aGUgZmFjdCB0aGF0IGEgbWVtYmVyc2hpcCBwdXJjaGFzZSBpcyBjdXJyZW50bHkgdGhlCiAqIHJlc3VsdCBvZiBhIHByb2R1Y3QgcHVyY2hhc2UuIEluIHRoZSBmdXR1cmUgaG9wZWZ1bGx5IHRoZSB1bmRlcmx5aW5nIG9iamVjdCBtb2RlbCB3aWxsIGJlIHJldmlzZWQsIGVpdGhlciBjcmVhdGluZyBhbiBpbmhlcml0YW5jZSAKICogcmVsYXRpb25zaGlwIGJldHdlZW4gbWVtYmVyc2hpcCBhbmQgcHJvZHVjdCwgb3IgY29tcGxldGVseSBzZXBhcmF0aW5nIHRoZXNlIGNvbmNlcHRzLiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFuIGFic3RyYWN0aW9uIG92ZXIgdGhlIAogKiBwdXJjaGFzZSB0eXBlLCBob3BlZnVsbHkgaW5zdWxhdGluZyB0aGUgcmVzdCBvZiB0aGUgY29kZSBmcm9tIHRoZXNlIGZ1dHVyZSBjaGFuZ2VzCiAqLwoKY2xhc3MgTU1fU2hvcHBpbmdDYXJ0SXRlbSAKewoJcHVibGljIHN0YXRpYyAkQ0FSVF9QUk9EVUNUID0gMTsKCXB1YmxpYyBzdGF0aWMgJENBUlRfQ09VUE9OID0gMjsKCQoJcHJpdmF0ZSAkZGlzcGxheV9uYW1lOwoJcHJpdmF0ZSAkaXRlbTsKCXByaXZhdGUgJGl0ZW1fdHlwZTsKCXByaXZhdGUgJHF1YW50aXR5ID0gMTsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRkaXNwbGF5X25hbWUsICRpdGVtLCAkaXRlbV90eXBlLCAkcXVhbnRpdHk9MSkKCXsKCQkkdGhpcy0+ZGlzcGxheV9uYW1lID0gJGRpc3BsYXlfbmFtZTsKCQkkdGhpcy0+aXRlbSA9ICRpdGVtOwoJCWlmICgoaW50dmFsKCRpdGVtX3R5cGUpIDwgMSkgfHwgKGludHZhbCgkaXRlbV90eXBlKSA+IDIpKQoJCXsKCQkJdGhyb3cgRXhjZXB0aW9uKCJDYXJ0IGl0ZW0gdHlwZSBub3Qgc3VwcG9ydGVkIik7CgkJfQoJCSR0aGlzLT5pdGVtX3R5cGUgPSAkaXRlbV90eXBlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoKQoJewoJCXJldHVybiAkdGhpcy0+ZGlzcGxheV9uYW1lOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoJGRpc3BsYXlfbmFtZSkKCXsKCQkkdGhpcy0+ZGlzcGxheV9uYW1lID0gJGRpc3BsYXlfbmFtZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEl0ZW0oKQoJewoJCXJldHVybiAkdGhpcy0+aXRlbTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEl0ZW0oJGl0ZW0pCgl7CgkJJHRoaXMtPml0ZW0gPSAkaXRlbTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEl0ZW1UeXBlKCkKCXsKCQlyZXR1cm4gJHRoaXMtPml0ZW1fdHlwZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEl0ZW1UeXBlKCRpdGVtX3R5cGUpCgl7CgkJJHRoaXMtPml0ZW1fdHlwZSA9ICRpdGVtX3R5cGU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRRdWFudGl0eSgkcXVhbnRpdHkpCgl7CgkJJHRoaXMtPnF1YW50aXR5ID0gJHF1YW50aXR5OwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0UXVhbnRpdHkoKQoJewoJCXJldHVybiAkdGhpcy0+cXVhbnRpdHk7Cgl9CgkKCQp9Cgo=', 0, '2018-11-21 06:38:54'),
(145, 'manageinstallview', 'Y2xhc3MgTU1fTWFuYWdlSW5zdGFsbFZpZXcgZXh0ZW5kcyBNTV9SQkFDQWRtaW5WaWV3CnsKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Vmlld0RhdGEoTU1fRGF0YUdyaWQgJGRnKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcm93cyA9IHBhcmVudDo6Z2V0RGF0YShNTV9UQUJMRV9WRVJTSU9OX1JFTEVBU0VTLCBudWxsLCAkZGcpOwoJCQoJCXJldHVybiAkcm93czsKCX0KfQ==', 0, '2018-11-21 06:38:54'),
(146, 'corepagetagprocessor', 'Y2xhc3MgTU1fQ29yZVBhZ2VUYWdQcm9jZXNzb3IKewkKCXB1YmxpYyBzdGF0aWMgJFRBR19DT1JFX1BBR0VfTElOSyA9ICJtbV9jb3JlcGFnZV9saW5rIjsKCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIFNtYXJ0VGFnIGlzIHJlbGF0ZWQgdG8gY29yZSBwYWdlcy4KCSAqIAoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcmV0dXJuIEJvb2xlYW4gcmV0dXJucyB0cnVlIGlmIHRoZSBTbWFydFRhZyBwYXNzZWQgaXMgcmVsYXRlZCB0byBjb3JlIHBhZ2VzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzQ29yZVBhZ2VTbWFydFRhZygkc21hcnRUYWcpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfQ09SRV9QQUdFX0xJTks6CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgbmFtZSBhbmQgYSBudW1iZXIgb2YgcHJvcGVydGllcyByZWxhdGVkIHRvIHRoZSBTbWFydFRhZyBhbmQgbWFrZXMgYSBjYWxsIHRvIAoJICogdGhlIGFwcHJvcHJpYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBTbWFydFRhZyBuYW1lLgoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IHRvIHByb2Nlc3MKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcHJvY2Vzc1NtYXJ0VGFnKCRzbWFydFRhZywgJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQlzd2l0Y2goJHNtYXJ0VGFnKSAKCQl7CgkJCWNhc2Ugc2VsZjo6JFRBR19DT1JFX1BBR0VfTElOSzoKCQkJCXJldHVybiBzZWxmOjptbV9jb3JlcGFnZV9saW5rKCRjb250ZW50LCAkYXR0cywgJGNvZGUpOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gIkludmFsaWQgQ29yZSBQYWdlIFNtYXJ0VGFnIHskc21hcnRUYWd9IGZvdW5kLiI7CgkJfQoJfQoJCgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0NvcmVQYWdlX0xpbmsgdGFnLiBJdCBpcyByZXNwb25zaWJsZSBmb3IgCgkgKiByZXR1cm5pbmcgYSBsaW5rIHRvIHRoZSBhcHByb3ByaWF0ZSBjb3JlIHBhZ2UgYmFzZWQgb24gdGhlIHR5cGUgYXR0cmlidXRlLgoJICogQHBhcmFtIFN0cmluZyAkY29udGVudCB0aGUgY29udGVudCBjb250YWluZWQgd2l0aGluIHRoZSBTbWFydFRhZyAoaWYgYW55KQoJICogQHBhcmFtIEFycmF5ICRhdHRzIGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29kZSB0aGUgcmF3IHZlcnNpb24gb2YgdGhlIFNtYXJ0VGFnIG5hbWUgKGkuZS4gbm90IGNhc2UtaW5zZW50aXZlLCBub3QgYnJva2VuIHVwIGludG8gcGFydHMpCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgJGNvbnRlbnQgcGFzc2VkIHdpdGggYWxsIFNtYXJ0VGFncyBwcm9jZXNzZWQKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBtbV9jb3JlcGFnZV9saW5rKCRjb250ZW50LCAkYXR0cywgJGNvZGUpCgl7CgkJaWYoaXNfYXJyYXkoJGF0dHMpICYmIGNvdW50KCRhdHRzKSA+IDApCgkJewoJCQlmb3JlYWNoKCRhdHRzIGFzICRrPT4kdikKCQkJewoJCQkJJGtleSA9IHN0cnRvbG93ZXIoJGspOwoJCQkJJCRrZXkgPSAkdjsKCQkJfQoJCX0KCQkKCQlpZihpc3NldCgkdHlwZSkpCgkJewoJCQkkY3VycmVudFVzZXIgPSBNTV9TbWFydFRhZ1V0aWw6OmdldEN1cnJlbnRVc2VyKCk7CgkJCSR1cmwgPSAiIjsKCQkJCgkJCXN3aXRjaChzdHJ0b2xvd2VyKCR0eXBlKSkKCQkJewoJCQkJY2FzZSAibG9naW4iOgoJCQkJCSR1cmwgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0VXJsKE1NX0NvcmVQYWdlVHlwZTo6JExPR0lOX1BBR0UsIG51bGwpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAibG9nb3V0IjoKCQkJCQkkdXJsID0gd3BfbG9nb3V0X3VybCgpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAiaG9tZXBhZ2UiOgoJCQkJCSR1cmwgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0VXJsKE1NX0NvcmVQYWdlVHlwZTo6JE1FTUJFUl9IT01FX1BBR0UsIG51bGwsICRjdXJyZW50VXNlcik7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJmb3Jnb3RwYXNzd29yZCI6CgkJCQkJJHVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokRk9SR09UX1BBU1NXT1JELCBudWxsKTsKCQkJCQlicmVhazsKCQkJCQoJCQkJY2FzZSAicmVzZXRwYXNzd29yZCI6ICAgIAoJCQkJCSR1cmwgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0VXJsKE1NX0NvcmVQYWdlVHlwZTo6JFJFU0VUX1BBU1NXT1JELCBudWxsKTsKCQkJCQkkdXJsID0gTU1fVXRpbHM6OmFwcGVuZFVybFBhcmFtKCR1cmwsIE1NX1Jlc2V0UGFzc3dvcmRGb3JtVmlldzo6JE1NX1BBUkFNX0tFWV9LRVksICRjdXJyZW50VXNlci0+Z2V0Rm9yZ290UGFzc3dvcmRIYXNoKCkpOwoJCQkJCSR1cmwgPSBNTV9VdGlsczo6YXBwZW5kVXJsUGFyYW0oJHVybCwgTU1fUmVzZXRQYXNzd29yZEZvcm1WaWV3OjokTU1fUEFSQU1fS0VZX0VNQUlMLCBNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OmVuY3J5cHRQYXNzd29yZCgkY3VycmVudFVzZXItPmdldEVtYWlsKCkpKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgIm15YWNjb3VudCI6CgkJCQkJJHVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokTVlfQUNDT1VOVCwgbnVsbCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJzYXZldGhlc2FsZSI6CgkJCQkJJHVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokU0FWRVRIRVNBTEUsIG51bGwsICRjdXJyZW50VXNlcik7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiBUaGUgJ3R5cGUnIGF0dHJpYnV0ZSAneyR0eXBlfScgaXMgaW52YWxpZCBmb3IgU21hcnRUYWcgeyRjb2RlfS4iOwoJCQl9CgkJCQoJCQlpZighZW1wdHkoJHVybCkgJiYgaXNzZXQoJGF1dG9sb2dpbikgJiYgJGF1dG9sb2dpbiA9PSAidHJ1ZSIpCgkJCXsKCQkJCS8vIGdlbmVyYXRlIGEgbG9naW4gdG9rZW4KCQkJCWlmKCRjdXJyZW50VXNlci0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCSRsb2dpblRva2VuUmVzcG9uc2UgPSBNTV9Mb2dpblRva2VuOjpnZW5lcmF0ZVRva2VuKCRjdXJyZW50VXNlci0+Z2V0SWQoKSk7CgkJCQkJCQoJCQkJCWlmIChNTV9SZXNwb25zZTo6aXNTdWNjZXNzKCRsb2dpblRva2VuUmVzcG9uc2UpKQoJCQkJCXsKCQkJCQkJJGxvZ2luVG9rZW4gPSAkbG9naW5Ub2tlblJlc3BvbnNlLT5tZXNzYWdlOwoJCQkJCQkkdXJsID0gTU1fVXRpbHM6OmFwcGVuZFVybFBhcmFtKCR1cmwsIE1NX1Nlc3Npb246OiRQQVJBTV9MT0dJTl9UT0tFTiwgJGxvZ2luVG9rZW4pOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQkKCQkJcmV0dXJuICR1cmw7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiBUaGUgJ3R5cGUnIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCBmb3IgU21hcnRUYWcgeyRjb2RlfS4iOwoJCX0KCX0KfQo=', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(147, 'activecampaignemailserviceprovider', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(148, 'defaultorderrequest', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(149, 'defaultaffiliateprovider', 'Y2xhc3MgTU1fRGVmYXVsdEFmZmlsaWF0ZVByb3ZpZGVyIGV4dGVuZHMgTU1fQWJzdHJhY3RBZmZpbGlhdGVQcm92aWRlciB7CgkJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRwcm92aWRlcl9pbmZvKSB7CgkJCXBhcmVudDo6X19jb25zdHJ1Y3QoJHByb3ZpZGVyX2luZm8pOwoJCX0KCQoJCS8qKgoJCSAqIFJlcG9ydCB0aGUgZmVhdHVyZXMgdGhhdCBkZWZhdWx0IGFmZmlsaWF0ZSBwcm92aWRlcnMgc3VwcG9ydHMKCQkgKgoJCSAqIEBwYXJhbSBpbnRlZ2VyICRmZWF0dXJlQ29uc3QgYSBjb25zdCBhcyBkZWZpbmVkIGluIE1NX0FmZmlsaWF0ZVByb3ZpZGVyRmVhdHVyZXMKCQkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBzdXBwb3J0ZWQsIGZhbHNlIGlmIG5vdCBzdXBwb3J0ZWQKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc3VwcG9ydHNGZWF0dXJlKCRmZWF0dXJlQ29uc3QpCgkJewoJCQkkc3VwcG9ydGVkW10gPSBNTV9BZmZpbGlhdGVQcm92aWRlckZlYXR1cmVzOjpDVVNUT01fUkVCSUxMX0NPTU1JU1NJT05TOwoJCQlyZXR1cm4gaW5fYXJyYXkoJGZlYXR1cmVDb25zdCwkc3VwcG9ydGVkLHRydWUpOwoJCX0KCQkKCQkvKioKCQkgKiBSZXR1cm5zIGFuIGVtcHR5IGFycmF5LCBzaW5jZSBubyBwcm9maWxlcyBjYW4gYmUgY29uZmlndXJlZCB1c2luZyB0aGUgZGVmYXVsdCBwcm92aWRlcgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRQYXlvdXRQcm9maWxlcygpIHsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZShhcnJheSgpKTsKCQl9CgkJCgkJLyoqCgkJICogUmV0dXJucyBhbiBvYmplY3QgY2FwYWJsZSBvZiByZW5kZXJpbmcgdGhlIGRlZmF1bHQgb3B0aW9ucyBkaWFsb2cKCQkgKiBAcGFyYW0gQXJyYXkgJHBvc3QgQW55IGRhdGEgcG9zdGVkIG5lY2Vzc2FyeSB0byBkcmF3IHRoZSBvcHRpb25zIGRpYWxvZwoJCSAqIEByZXR1cm4gT2JqZWN0IG9mIHR5cGUgTU1fQWZmaWxpYXRlUHJvdmlkZXJEaWFsb2cgcmVwcmVzZW50aW5nIHRoZSBkaWFsb2cgdG8gZHJhdwoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJPcHRpb25zRGlhbG9nKCRwb3N0KSB7CgkJCSRmb3JtID0gbmV3IE1NX0FmZmlsaWF0ZVByb3ZpZGVyRGlhbG9nKCk7CgkJCSRmb3JtLT5jb250cm9scyA9ICc8YnV0dG9uIGlkPSJhZmZpbGlhdGUtcHJvdmlkZXItc2F2ZSIgY2xhc3M9Im1tLXVpLWJ1dHRvbiBibHVlIiBvbkNsaWNrPSJtbWpzLnByb3ZpZGVyT3B0aW9uc1NhdmUoXCdcJyk7IHJldHVybiBmYWxzZTsiIHN0eWxlPSJjdXJzb3I6cG9pbnRlcjsiPlNhdmUgU2V0dGluZ3M8L2J1dHRvbj4nOwoJCQlyZXR1cm4gJGZvcm07CgkJfQoJCQoJCS8qKgoJCSAqIFJlc3BvbmRzIHRvIGRhdGEgY29sbGVjdGVkIGZyb20gdGhlIGZvcm0gcmVuZGVyZWQgYnkgcmVuZGVyT3B0aW9uc0RpYWxvZwoJCSAqIEBzZWUgTU1fQWJzdHJhY3RBZmZpbGlhdGVQcm92aWRlcjo6aGFuZGxlT3B0aW9uc0RpYWxvZygpCgkJICogQHBhcmFtICRvcHRpb25EYXRhIEFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc3RlZCB2YWx1ZXMKCQkgKiBAcmV0dXJuIE1NX1Jlc3BvbnNlIG9iamVjdCBpbmRpY2F0aW5nIHN1Y2Nlc3Mgb3IgZmFpbHVyZQoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBoYW5kbGVPcHRpb25zRGlhbG9nKCRvcHRpb25EYXRhKSAKCQl7CgkJCWlmIChpc19hcnJheSgkb3B0aW9uRGF0YSkpIAoJCQl7CgkJCQkkcHJvdmlkZXJfdG9rZW4gPSAkb3B0aW9uRGF0YVsncHJvdmlkZXJfdG9rZW4nXTsKCQkJCQoJCQkJJHByb3ZpZGVyX2VudGl0eSA9IG5ldyBNTV9BZmZpbGlhdGVQcm92aWRlcigpOwoJCQkJJHByb3ZpZGVyX2VudGl0eS0+c2V0VG9rZW4oJHByb3ZpZGVyX3Rva2VuKTsKCQkJCSRwcm92aWRlcl9lbnRpdHktPmdldERhdGEoKTsKCQkJCWlmICgkcHJvdmlkZXJfZW50aXR5LT5pc1ZhbGlkKCkpIAoJCQkJewoJCQkJCS8vZmlyc3Qgd3JpdGUgdGhlIHByb3ZpZGVyJ3MgY29uZmlndXJhdGlvbiBvcHRpb25zCgkJCQkJJHByb3ZpZGVyX2VudGl0eS0+c2V0QWN0aXZlKHRydWUpOwoJCQkJCSRjb21taXRfcmVzcG9uc2UgPSAkcHJvdmlkZXJfZW50aXR5LT5jb21taXREYXRhKCk7CgkJCQkJaWYgKCRjb21taXRfcmVzcG9uc2UtPnR5cGUgPT0gTU1fUmVzcG9uc2U6OiRFUlJPUikgCgkJCQkJewoJCQkJCQkvL3Bhc3MgdGhyb3VnaCBlcnJvcnMgY29tbWl0dGluZyB0byB0aGUgZGF0YWJhc2UKCQkJCQkJcmV0dXJuICRjb21taXRfcmVzcG9uc2U7CgkJCQkJfQoJCQkJCWVsc2UgCgkJCQkJewoJCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUaGUgZGVmYXVsdCBhZmZpbGlhdGUgcHJvdmlkZXIgaGFzIGJlZW4gY29uZmlndXJlZCBzdWNjZXNzZnVsbHkiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyk7CQoJCQkJCX0KCQkJCX0KCQkJCWVsc2UgCgkJCQl7CgkJCQkJLy9mYWlsZWQgdG8gbG9hZCBlbnRpdHkgZnJvbSB0YWJsZQoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkZhaWxlZCB0byBzYXZlIHNldHRpbmdzIixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJCX0KCQkJfQoJCX0KCQkKCX0K', 0, '2018-11-21 06:38:54'),
(150, 'abstractreportdatamodel', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KYWJzdHJhY3QgY2xhc3MgTU1fQWJzdHJhY3RSZXBvcnREYXRhTW9kZWwKewoJcHVibGljIHN0YXRpYyAkU09SVF9BU0MgPSAic29ydF9hc2MiOwoJcHVibGljIHN0YXRpYyAkU09SVF9ERVNDID0gInNvcnRfZGVzYyI7CgkKCS8qKgoJICogU29ydHMgdGhlIHN1cHBsaWVkIHJlc3VsdHMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBjb2x1bW4gYW5kIGRpcmVjdGlvbgoJICogSWYgYW4gaW52YWxpZCBjb2x1bW4gaXMgc3VwcGxpZWQsIG9yIHRoZXJlIGlzIG5vIGRhdGEsIG5vdGhpbmcgaGFwcGVucy4KCSAqIElmIGRpcmVjdGlvbiBpcyBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byB0aGUgcGhwIGNvbnN0YW50IFNPUlRfREVTQwoJICogQWxsIHNvcnRpbmcgaXMgJ25hdHVyYWwgc29ydGluZycgdXNpbmcgUEhQJ3MgaW50ZXJuYWwgZnVuY3Rpb25hbGl0eQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNvcnRDb2x1bW4KCSAqIEBwYXJhbSBzdHJpbmcgJHNvcnREaXJlY3Rpb24KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzb3J0UmVzdWx0cygmJHJlc3VsdHMsICRzb3J0Q29sdW1uLCAkc29ydERpcmVjdGlvbiwgJGdyaWRGb3JtYXQ9ZmFsc2UpCgl7CgkJaWYgKGNvdW50KCRyZXN1bHRzKSA9PSAwKQoJCXsKCQkJcmV0dXJuOyAvL25vIGRhdGEsIG5vdGhpbmcgdG8gZG8KCQl9CgkJaWYgKCFlbXB0eSgkc29ydENvbHVtbikgJiYgIWVtcHR5KCRzb3J0RGlyZWN0aW9uKSkKCQl7CgkJCWlmICh2ZXJzaW9uX2NvbXBhcmUocGhwdmVyc2lvbigpLCI1LjQiLCI+PSIpKQoJCQl7CgkJCQkkZmlyc3RSb3cgPSByZXNldCgkcmVzdWx0cyk7CgkJCQlpZiAoKCRncmlkRm9ybWF0ICYmIGlzc2V0KCRmaXJzdFJvd1snZGF0YSddWyRzb3J0Q29sdW1uXSkpIHx8IGlzc2V0KCRmaXJzdFJvd1skc29ydENvbHVtbl0pKSAvL21ha2Ugc3VyZSB0aGUgY29sdW1uIHRvIGJlIHNvcnRlZCBleGlzdHMKCQkJCXsKCQkJCQlzd2l0Y2ggKCRzb3J0RGlyZWN0aW9uKQoJCQkJCXsKCQkJCQkJY2FzZSBzZWxmOjokU09SVF9BU0M6CgkJCQkJCQkkc29ydERpcmVjdGlvbiA9IFNPUlRfQVNDOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWRlZmF1bHQ6CgkJCQkJCQkkc29ydERpcmVjdGlvbiA9IFNPUlRfREVTQzsKCQkJCQl9CgkJCQkJCQoJCQkJCSR0bXBDb2x1bW5EYXRhID0gYXJyYXkoKTsKCQkJCQlmb3JlYWNoICgkcmVzdWx0cyBhcyAkcm93KQoJCQkJCXsKCQkJCQkJJHRtcENvbHVtbkRhdGFbXSA9ICRncmlkRm9ybWF0PyRyb3dbJ2RhdGEnXVskc29ydENvbHVtbl06JHJvd1skc29ydENvbHVtbl07CgkJCQkJfQoJCQkJCWFycmF5X211bHRpc29ydCgkdG1wQ29sdW1uRGF0YSwkc29ydERpcmVjdGlvbixTT1JUX05BVFVSQUwsJHJlc3VsdHMpOwoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJLy9mb3IgcGhwIDwgNS40Li4uIHNsb3dlciBsZXNzLWVmZmljaWVudCAoYnV0IGNvbXBhdGlibGUpIHNvcnQKCQkJCSRtdWx0aXBsaWVyID0gKCRzb3J0RGlyZWN0aW9uID09IHNlbGY6OiRTT1JUX0RFU0MpPy0xOjE7CgkJCQlpZiAoJGdyaWRGb3JtYXQpCgkJCQl7CgkJCQkJJGZ1bmN0aW9uQm9keSA9ICJyZXR1cm4geyRtdWx0aXBsaWVyfSAqIHN0cm5hdGNtcCggXCRlbDFbJ2RhdGEnXVsneyRzb3J0Q29sdW1ufSddLCBcJGVsMlsnZGF0YSddWyd7JHNvcnRDb2x1bW59J10pOyI7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCSRmdW5jdGlvbkJvZHkgPSAicmV0dXJuIHskbXVsdGlwbGllcn0gKiBzdHJuYXRjbXAoIFwkZWwxWyd7JHNvcnRDb2x1bW59J10sIFwkZWwyWyd7JHNvcnRDb2x1bW59J10pOyI7CgkJCQl9CgkJCQl1c29ydCggJHJlc3VsdHMsIGNyZWF0ZV9mdW5jdGlvbiggJyRlbDEsICRlbDInLCAkZnVuY3Rpb25Cb2R5ICkpOwoJCQl9CgkJfQoJfQp9', 0, '2018-11-21 06:38:54'),
(151, 'orderitemaccess', 'LyoqIAogKiAKICogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwpjbGFzcyBNTV9PcmRlckl0ZW1BY2Nlc3MgZXh0ZW5kcyBNTV9FbnRpdHkKewkKCXB1YmxpYyBzdGF0aWMgJEFDQ0VTU19UWVBFX01FTUJFUlNISVAgPSAibWVtYmVyc2hpcCI7CglwdWJsaWMgc3RhdGljICRBQ0NFU1NfVFlQRV9CVU5ETEUgPSAiYnVuZGxlIjsKCQoJcHJpdmF0ZSAkYWNjZXNzVHlwZSA9ICIiOwoJcHJpdmF0ZSAkYWNjZXNzVHlwZUlkID0gIiI7Cglwcml2YXRlICR1c2VySWQgPSAiIjsKCXByaXZhdGUgJG9yZGVySXRlbUlkID0gIiI7CgoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpCgl7CQoJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJfQoKCS8qKgoJICogQHJldHVybiBhcnJheSBvZiBNTV9PcmRlckl0ZW1BY2Nlc3MgaW5zdGFuY2VzCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0T3JkZXJJdGVtQnlBY2Nlc3MoJHVzZXJJZCwgJGFjY2Vzc1R5cGUsICRhY2Nlc3NUeXBlSWQpCgl7CgkJJGl0ZW1zID0gYXJyYXkoKTsKCQoJCWdsb2JhbCAkd3BkYjsKCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9PUkRFUl9JVEVNX0FDQ0VTUy4iIFdIRVJFIHVzZXJfaWQ9J3skdXNlcklkfScgQU5EIGFjY2Vzc190eXBlPSd7JGFjY2Vzc1R5cGV9JyBBTkQgYWNjZXNzX3R5cGVfaWQ9J3skYWNjZXNzVHlwZUlkfSc7IjsKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkKCQlpZigkcmVzdWx0cykKCQl7CgkJCWZvcmVhY2goJHJlc3VsdHMgYXMgJHJvd0RhdGEpCgkJCXsKCQkJCSRvcmRlckl0ZW1BY2Nlc3MgPSBuZXcgTU1fT3JkZXJJdGVtQWNjZXNzKCk7CgkJCQkkb3JkZXJJdGVtQWNjZXNzLT5zZXREYXRhKCRyb3dEYXRhKTsKCQkJCSRpdGVtc1tdID0gJG9yZGVySXRlbUFjY2VzczsKCQkJfQoJCX0KCQoJCXJldHVybiAkaXRlbXM7Cgl9CgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRBY2Nlc3NCeU9yZGVySXRlbSgkb3JkZXJJdGVtSWQpCgl7CgkJJG9yZGVySXRlbUFjY2VzcyA9IG5ldyBNTV9PcmRlckl0ZW1BY2Nlc3MoKTsKCQoJCWdsb2JhbCAkd3BkYjsKCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9PUkRFUl9JVEVNX0FDQ0VTUy4iIFdIRVJFIG9yZGVyX2l0ZW1faWQ9J3skb3JkZXJJdGVtSWR9JyBMSU1JVCAxOyI7CgkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCgkJaWYoJHJlc3VsdCkKCQl7CgkJCSRvcmRlckl0ZW1BY2Nlc3MtPnNldERhdGEoJHJlc3VsdCk7CgkJfQoJCWVsc2UKCQl7CgkJCSRvcmRlckl0ZW1BY2Nlc3MtPmludmFsaWRhdGUoKTsKCQl9CgkKCQlyZXR1cm4gJG9yZGVySXRlbUFjY2VzczsKCX0KCglwdWJsaWMgZnVuY3Rpb24gc2V0RGF0YSgkZGF0YSkKCXsKCQl0cnkgCgkJewkKCQkJaWYoJGRhdGEpCgkJCXsKCQkJCSR0aGlzLT5hY2Nlc3NUeXBlID0gJGRhdGEtPmFjY2Vzc190eXBlOwoJCQkJJHRoaXMtPmFjY2Vzc1R5cGVJZCA9ICRkYXRhLT5hY2Nlc3NfdHlwZV9pZDsKCQkJCSR0aGlzLT51c2VySWQgPSAkZGF0YS0+dXNlcl9pZDsKCQkJCSR0aGlzLT5vcmRlckl0ZW1JZCA9ICRkYXRhLT5vcmRlcl9pdGVtX2lkOwoJCQkJCgkJCQlpZihpbnR2YWwoJHRoaXMtPnVzZXJJZCkgPiAwICYmIGludHZhbCgkdGhpcy0+YWNjZXNzVHlwZUlkKSA+IDAgJiYgaW50dmFsKCR0aGlzLT5vcmRlckl0ZW1JZCkgPiAwKQoJCQkJewoJCQkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQkJCX0KCQkJfQoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkgCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBjb21taXREYXRhKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy8gdmFsaWRhdGUgcmVxdWlyZWQgZGF0YQoJCWlmKGVtcHR5KCR0aGlzLT51c2VySWQpIHx8IGVtcHR5KCR0aGlzLT5vcmRlckl0ZW1JZCkgfHwgZW1wdHkoJHRoaXMtPmFjY2Vzc1R5cGUpIHx8IGVtcHR5KCR0aGlzLT5hY2Nlc3NUeXBlSWQpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHNhdmUgb3JkZXIgaXRlbSBhY2Nlc3MuIE9yZGVyIGl0ZW0gSUQsIGFjY2VzcyB0eXBlLCBhY2Nlc3MgdHlwZSBJRCBhbmQgdXNlciBJRCBhcmUgcmVxdWlyZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCS8vIGRlbGV0ZSBvcmRlciBpdGVtIGFjY2VzcyByb3dzIHdpdGggdGhlIGV4YWN0IHNhbWUgcHJvcGVydGllcwoJCSR0aGlzLT5kZWxldGUoKTsKCQkKCQkkc3FsID0gIklOU0VSVCBJTlRPICIuTU1fVEFCTEVfT1JERVJfSVRFTV9BQ0NFU1MuIiBTRVQgIjsKCQkkc3FsIC49ICIgYWNjZXNzX3R5cGU9J3skdGhpcy0+YWNjZXNzVHlwZX0nLCBhY2Nlc3NfdHlwZV9pZD0neyR0aGlzLT5hY2Nlc3NUeXBlSWR9JywgIjsKCQkkc3FsIC49ICIgdXNlcl9pZD0neyR0aGlzLT51c2VySWR9Jywgb3JkZXJfaXRlbV9pZCA9ICd7JHRoaXMtPm9yZGVySXRlbUlkfSc7IjsKCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCRzcWwpOwoJCQoJCWlmKCEkcmVzdWx0KQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGluc2VydCBvcmRlciBpdGVtIElEICd7JHRoaXMtPm9yZGVySXRlbUlkfScgd2l0aCB1c2VyIElEICd7JHRoaXMtPnVzZXJJZH0nIGFjY2VzcyB0eXBlICd7JHRoaXMtPmFjY2Vzc1R5cGV9JyAoeyR0aGlzLT5hY2Nlc3NUeXBlSWR9KSIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZGVsZXRlKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJLy8gdmFsaWRhdGUgcmVxdWlyZWQgZGF0YQoJCWlmKGVtcHR5KCR0aGlzLT51c2VySWQpIHx8IGVtcHR5KCR0aGlzLT5vcmRlckl0ZW1JZCkgfHwgZW1wdHkoJHRoaXMtPmFjY2Vzc1R5cGUpIHx8IGVtcHR5KCR0aGlzLT5hY2Nlc3NUeXBlSWQpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSBvcmRlciBpdGVtIGFjY2Vzcy4gT3JkZXIgaXRlbSBJRCwgYWNjZXNzIHR5cGUsIGFjY2VzcyB0eXBlIElEIGFuZCB1c2VyIElEIGFyZSByZXF1aXJlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX09SREVSX0lURU1fQUNDRVNTLiIgV0hFUkUgIjsKCQkkc3FsIC49ICIgYWNjZXNzX3R5cGU9J3skdGhpcy0+YWNjZXNzVHlwZX0nIEFORCBhY2Nlc3NfdHlwZV9pZD0neyR0aGlzLT5hY2Nlc3NUeXBlSWR9JyBBTkQgIjsKCQkkc3FsIC49ICIgdXNlcl9pZD0neyR0aGlzLT51c2VySWR9JyBBTkQgb3JkZXJfaXRlbV9pZCA9ICd7JHRoaXMtPm9yZGVySXRlbUlkfSc7IjsKCQkkcmVzdWx0ID0gJHdwZGItPnF1ZXJ5KCRzcWwpOwoJCQoJCWlmKCEkcmVzdWx0KQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSBvcmRlciBpdGVtIElEICd7JHRoaXMtPm9yZGVySXRlbUlkfScgd2l0aCB1c2VyIElEICd7JHRoaXMtPnVzZXJJZH0nIGFjY2VzcyB0eXBlICd7JHRoaXMtPmFjY2Vzc1R5cGV9JyAoeyR0aGlzLT5hY2Nlc3NUeXBlSWR9KSIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCgkKCS8qKiBHRVRURVJTIC8gU0VUVEVSUyAqKi8KCglwdWJsaWMgZnVuY3Rpb24gc2V0QWNjZXNzVHlwZSgkdmFsKQoJewoJCWlmKCR2YWwgPT0gc2VsZjo6JEFDQ0VTU19UWVBFX0JVTkRMRSB8fCAkdmFsID09IHNlbGY6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQKQoJCXsKCQkJJHRoaXMtPmFjY2Vzc1R5cGUgPSAkdmFsOwoJCX0KCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWNjZXNzVHlwZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5hY2Nlc3NUeXBlOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRBY2Nlc3NUeXBlSWQoJHZhbCkKCXsKCQkkdGhpcy0+YWNjZXNzVHlwZUlkID0gJHZhbDsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWNjZXNzVHlwZUlkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmFjY2Vzc1R5cGVJZDsKCX0KCglwdWJsaWMgZnVuY3Rpb24gc2V0VXNlcklkKCR2YWwpCgl7CgkJJHRoaXMtPnVzZXJJZCA9ICR2YWw7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGdldFVzZXJJZCgpCgl7CgkJcmV0dXJuICR0aGlzLT51c2VySWQ7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIHNldE9yZGVySXRlbUlkKCR2YWwpCgl7CgkJJHRoaXMtPm9yZGVySXRlbUlkID0gJHZhbDsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0T3JkZXJJdGVtSWQoKQoJewoJCXJldHVybiAkdGhpcy0+b3JkZXJJdGVtSWQ7Cgl9CgkKfQ==', 0, '2018-11-21 06:38:54'),
(152, 'productview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1Byb2R1Y3RWaWV3IGV4dGVuZHMgTU1fUkJBQ1Byb2R1Y3RNYW5hZ2VyVmlldwp7CQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fR0VUX01FTUJFUk1PVVNFX1BST0RVQ1RfREVTQyA9ICJnZXRNTVByb2R1Y3REZXNjcmlwdGlvbiI7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0FWRToKCQkJCQlyZXR1cm4gJHRoaXMtPnNhdmVQcm9kdWN0KCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZVByb2R1Y3QoJHBvc3QpOwoJCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fU0hPV19CVVlfTk9XX0xJTktTOgoJCQkJCXJldHVybiAkdGhpcy0+c2hvd1B1cmNoYXNlTGlua3MoJHBvc3QpOwoJCQkJCQoJCQkJY2FzZSBzZWxmOjokTU1fSlNBQ1RJT05fR0VUX01FTUJFUk1PVVNFX1BST0RVQ1RfREVTQzoKCQkJCQlyZXR1cm4gJHRoaXMtPmdldE1NUHJvZHVjdERlc2NyaXB0aW9uKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKE1NX0RhdGFHcmlkICRkZykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJJHJvd3MgPSBwYXJlbnQ6OmdldERhdGEoTU1fVEFCTEVfUFJPRFVDVFMsIG51bGwsICRkZyk7CgkJcmV0dXJuICRyb3dzOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHNhdmVQcm9kdWN0KCRwb3N0KQoJewoJCWlmKCFwcmVnX21hdGNoKCIvXlswLTlcLl0rJC8iLCAkcG9zdFsibW1fcHJpY2UiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJQcmljZSBtdXN0IGJlIGEgdmFsaWQgbnVtYmVyIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKGZsb2F0dmFsKCRwb3N0WyJtbV9wcmljZSJdKSA8PSAwKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiUHJpY2UgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC5cblxuSWYgeW91IHdhbnQgdG8gY3JlYXRlIGEgZnJlZSBtZW1iZXJzaGlwIGxldmVsIG9yIGJ1bmRsZSwgbm8gcHJvZHVjdCBpcyBuZWVkZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKCRwb3N0WyJtbV90cmlhbF9hbW91bnQiXSE9IiIgJiYgIXByZWdfbWF0Y2goIi9eWzAtOVwuXSskLyIsICRwb3N0WyJtbV90cmlhbF9hbW91bnQiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUcmlhbCBhbW91bnQgbXVzdCBiZSBhIHZhbGlkIG51bWJlciIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZigkcG9zdFsibW1fdHJpYWxfZHVyYXRpb24iXSE9IiIgJiYgIXByZWdfbWF0Y2goIi9eWzAtOV0rJC8iLCAkcG9zdFsibW1fdHJpYWxfZHVyYXRpb24iXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUcmlhbCBkdXJhdGlvbiBtdXN0IGJlIGEgdmFsaWQgbnVtYmVyIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKCRwb3N0WyJtbV9yZWJpbGxfcGVyaW9kIl0hPSIiICYmICFwcmVnX21hdGNoKCIvXlswLTldKyQvIiwgJHBvc3RbIm1tX3JlYmlsbF9wZXJpb2QiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJSZWJpbGwgcHJlaW9kIG11c3QgYmUgYSB2YWxpZCBudW1iZXIiLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJaWYoJHBvc3RbIm1tX251bWJlcl9vZl9wYXltZW50cyJdIT0iIiAmJiAhcHJlZ19tYXRjaCgiL15bMC05XSskLyIsICRwb3N0WyJtbV9udW1iZXJfb2ZfcGF5bWVudHMiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJOdW1iZXIgb2YgcGF5bWVudHMgbXVzdCBiZSBhIHZhbGlkIG51bWJlciIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZihpbnR2YWwoJHBvc3RbIm1tX2RvX2xpbWl0X3RyaWFsIl0pID09IDEgJiYgZW1wdHkoJHBvc3RbIm1tX3RyaWFsX2FsdGVybmF0ZV9wcm9kdWN0Il0pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQW4gYWx0ZXJuYXRlIHByb2R1Y3QgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvIGxpbWl0IHRoZSB0cmlhbCB0byBvbmUgcGVyIG1lbWJlciIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZigkcG9zdFsibW1faXNfcmVjdXJyaW5nX3ZhbCJdICE9ICIxIikKCQl7CgkJCSRwb3N0WyJtbV9yZWJpbGxfcGVyaW9kIl0gPSAiMCI7CgkJCSRwb3N0WyJtbV9yZWJpbGxfZnJlcXVlbmN5Il0gPSAiIjsKCQl9CgkJCgkJLy9pZiBhIHByb2R1Y3QgaGFzIGEgdHJpYWwsIHRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIHJlY3VycmluZyBiaWxsaW5nLCBzbyBlbnN1cmUgdGhhdCBhbGwgcHJvZHVjdHMgd2l0aCB0cmlhbHMgYXJlIGNvbmZpZ3VyZWQgYXMgc3Vic2NyaXB0aW9ucwoJCWlmICgoJHBvc3RbIm1tX2hhc190cmlhbF92YWwiXSA9PSAiMSIpICYmICgkcG9zdFsibW1faXNfcmVjdXJyaW5nX3ZhbCJdICE9ICIxIikpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJQcm9kdWN0cyB3aXRoIGEgdHJpYWwgbXVzdCBiZSBjb25maWd1cmVkIGFzIFN1YnNjcmlwdGlvbiBwcm9kdWN0cyIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKCRwb3N0WyJtbV9zdGF0dXMiXSA9PSAiYWN0aXZlIikKCQl7CgkJCSRwb3N0WyJtbV9zdGF0dXMiXSA9ICIxIjsKCQl9CgkJZWxzZQoJCXsKCQkJJHBvc3RbIm1tX3N0YXR1cyJdID0gIjAiOwoJCX0KCQkKCQkkaXNVcGRhdGUgPSBmYWxzZTsKCQlpZihpc3NldCgkcG9zdFsibW1faWQiXSkgJiYgaW50dmFsKCRwb3N0WyJtbV9pZCJdKSA+IDApCgkJewoJCQkkcHJvZHVjdCA9IG5ldyBNTV9Qcm9kdWN0KCRwb3N0WyJtbV9pZCJdKTsKCQkJaWYgKCRwcm9kdWN0LT5pc1ZhbGlkKCkpCgkJCXsKCQkJCSRpc1VwZGF0ZSA9IHRydWU7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgpOwoJCX0KCQkKCQkkcHJvZHVjdC0+c2V0TmFtZSgkcG9zdFsibW1fbmFtZSJdKTsKCQkkcHJvZHVjdC0+c2V0U3RhdHVzKCRwb3N0WyJtbV9zdGF0dXMiXSk7CgkJJHByb2R1Y3QtPnNldFNrdSgkcG9zdFsibW1fc2t1Il0pOwoJCSRwcm9kdWN0LT5zZXRJc1NoaXBwYWJsZUZsYWcoJHBvc3RbIm1tX2lzX3NoaXBwYWJsZV92YWwiXSk7CgkJJHByb2R1Y3QtPnNldEhhc1RyaWFsRmxhZygkcG9zdFsibW1faGFzX3RyaWFsX3ZhbCJdKTsKCQkkcHJvZHVjdC0+c2V0VHJpYWxBbW91bnQoJHBvc3RbIm1tX3RyaWFsX2Ftb3VudCJdKTsKCQkkcHJvZHVjdC0+c2V0VHJpYWxEdXJhdGlvbigkcG9zdFsibW1fdHJpYWxfZHVyYXRpb24iXSk7CgkJCgkJaWYgKCRwcm9kdWN0LT5oYXNUcmlhbCgpKQoJCXsKCQkJJHByb2R1Y3QtPnNldExpbWl0VHJpYWxGbGFnKCRwb3N0WyJtbV9kb19saW1pdF90cmlhbCJdKTsKCQkJCgkJCWlmKCRwcm9kdWN0LT5kb0xpbWl0VHJpYWwoKSAmJiBpc3NldCgkcG9zdFsibW1fdHJpYWxfYWx0ZXJuYXRlX3Byb2R1Y3QiXSkpCgkJCXsKCQkJCSRwcm9kdWN0LT5zZXRMaW1pdFRyaWFsQWx0UHJvZHVjdElkKCRwb3N0WyJtbV90cmlhbF9hbHRlcm5hdGVfcHJvZHVjdCJdKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRwcm9kdWN0LT5zZXRMaW1pdFRyaWFsQWx0UHJvZHVjdElkKCcwJyk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCSRwcm9kdWN0LT5zZXRMaW1pdFRyaWFsRmxhZyhmYWxzZSk7CgkJCSRwcm9kdWN0LT5zZXRMaW1pdFRyaWFsQWx0UHJvZHVjdElkKDApOwoJCX0KCQkKCQlpZihpc3NldCgkcG9zdFsibW1fcHVyY2hhc2VfY29uZmlybWF0aW9uX21lc3NhZ2UiXSkpCgkJewoJCQkkcHJvZHVjdC0+c2V0UHVyY2hhc2VDb25maXJtYXRpb25NZXNzYWdlKCRwb3N0WyJtbV9wdXJjaGFzZV9jb25maXJtYXRpb25fbWVzc2FnZSJdKTsKCQl9CgkJCgkJJHByb2R1Y3QtPnNldERlc2NyaXB0aW9uKCRwb3N0WyJtbV9kZXNjcmlwdGlvbiJdKTsKCQkkcHJvZHVjdC0+c2V0UHJpY2UoJHBvc3RbIm1tX3ByaWNlIl0pOwoJCSRwcm9kdWN0LT5zZXRSZWJpbGxQZXJpb2QoJHBvc3RbIm1tX3JlYmlsbF9wZXJpb2QiXSk7CgkJJHByb2R1Y3QtPnNldFJlYmlsbEZyZXF1ZW5jeSgkcG9zdFsibW1fcmViaWxsX2ZyZXF1ZW5jeSJdKTsKCQkkcHJvZHVjdC0+c2V0VHJpYWxGcmVxdWVuY3koJHBvc3RbIm1tX3RyaWFsX2ZyZXF1ZW5jeSJdKTsKCQkKCQlpZigoaXNzZXQoJHBvc3RbIm1tX2RvX2xpbWl0X3BheW1lbnRzIl0pICYmIGludHZhbCgkcG9zdFsibW1fZG9fbGltaXRfcGF5bWVudHMiXSkgPT0gMSkgCgkJCQkmJiAoaXNzZXQoJHBvc3RbIm1tX251bWJlcl9vZl9wYXltZW50cyJdKSAmJiBpbnR2YWwoaXNzZXQoJHBvc3RbIm1tX251bWJlcl9vZl9wYXltZW50cyJdKSkgPiAwKSkKCQl7CgkJCSRwcm9kdWN0LT5zZXRMaW1pdFBheW1lbnRzRmxhZygxKTsKCQkJJHByb2R1Y3QtPnNldE51bWJlck9mUGF5bWVudHMoaW50dmFsKCRwb3N0WyJtbV9udW1iZXJfb2ZfcGF5bWVudHMiXSkpOwoJCX0KCQllbHNlCgkJewoJCQkkcHJvZHVjdC0+c2V0TGltaXRQYXltZW50c0ZsYWcoMCk7CgkJCSRwcm9kdWN0LT5zZXROdW1iZXJPZlBheW1lbnRzKDApOwoJCX0KCQkKCQkkcHJvZHVjdC0+c2V0Q29tbWlzc2lvblByb2ZpbGVJZCgkcG9zdFsibW1fY29tbWlzc2lvbl9wcm9maWxlX3NlbGVjdG9yIl0pOwoJCQoJCSRyZXNwb25zZSA9ICRwcm9kdWN0LT5jb21taXREYXRhKCk7CgkJCgkJaWYgKCRyZXNwb25zZS0+dHlwZSA9PSBNTV9SZXNwb25zZTo6JEVSUk9SKSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJCgkJLy8gc2V0IHBhcnRuZXIgcGF5b3V0cwoJCSRwcm9kdWN0LT5kZWxldGVQYXJ0bmVycygpOwoJCQoJCWZvcmVhY2goJHBvc3QgYXMgJGtleSA9PiAkdmFsdWUpCgkJewoJCQlpZihzdHJwb3MoJGtleSwgJ21tX3BhcnRuZXJfJykgPT09IDApCgkJCXsKCQkJCSRwYXJ0bmVySWQgPSBzdHJfcmVwbGFjZSgibW1fcGFydG5lcl8iLCAiIiwgJGtleSk7CgkJCQkkYWZmaWxpYXRlSWQgPSAkdmFsdWU7CgkJCQkkY29tbWlzc2lvblByb2ZpbGVJZCA9ICRwb3N0WyJtbV9jb21taXNzaW9uX3Byb2ZpbGVfeyRwYXJ0bmVySWR9Il07CgkJCQkKCQkJCWlmKGVtcHR5KCRjb21taXNzaW9uUHJvZmlsZUlkKSkKCQkJCXsKCQkJCQkkY29tbWlzc2lvblByb2ZpbGVJZCA9IE1NX0NvbW1pc3Npb25Qcm9maWxlOjokREZMVF9DT01NSVNTSU9OX1BST0ZJTEVfSUQ7CgkJCQl9CgoJCQkJaWYoIWVtcHR5KCRhZmZpbGlhdGVJZCkpCgkJCQl7CgkJCQkJJHByb2R1Y3QtPmFkZFBhcnRuZXIoJGFmZmlsaWF0ZUlkLCAkY29tbWlzc2lvblByb2ZpbGVJZCk7CgkJCQl9CgkJCX0KCQl9CgkJCgkJLy8gcmVtb3ZlIG9sZCBhY2Nlc3MgYXNzb2NpYXRpb24gKGlmIGFueSkKCQlpZihpc3NldCgkcG9zdFsibW1fbGFzdF9hc3NvY2lhdGVkX2FjY2Vzc190eXBlIl0pKQoJCXsKCQkJaWYoJHBvc3RbIm1tX2xhc3RfYXNzb2NpYXRlZF9hY2Nlc3NfdHlwZSJdID09ICJtZW1iZXJzaGlwIikKCQkJewoJCQkJaWYoaXNzZXQoJHBvc3RbIm1tX2xhc3RfYXNzb2NpYXRlZF9hY2Nlc3NfaWQiXSkpCgkJCQl7CgkJCQkJJG1lbWJlcnNoaXAgPSBuZXcgTU1fTWVtYmVyc2hpcExldmVsKCRwb3N0WyJtbV9sYXN0X2Fzc29jaWF0ZWRfYWNjZXNzX2lkIl0pOwoJCQkJCQkKCQkJCQlpZigkbWVtYmVyc2hpcC0+aXNWYWxpZCgpKQoJCQkJCXsKCQkJCQkJLy8gY2hlY2sgaWYgdGhpcyBpcyB0aGUgbGFzdCBwcm9kdWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVtYmVyc2hpcCBsZXZlbAoJCQkJCQkkcHJvZHVjdHMgPSAkbWVtYmVyc2hpcC0+Z2V0UHJvZHVjdElkcygpOwoJCQkJCQkKCQkJCQkJaWYoKGlzc2V0KCRwb3N0WyJtbV9hc3NvY2lhdGVkX2FjY2Vzc192YWx1ZSJdKSAmJiAkcG9zdFsibW1fYXNzb2NpYXRlZF9hY2Nlc3NfdmFsdWUiXSA9PSAibm9uZSIgJiYgY291bnQoJHByb2R1Y3RzKSA9PSAxKSkKCQkJCQkJewoJCQkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ2Fubm90IHJlbW92ZSAneyRwcm9kdWN0LT5nZXROYW1lKCl9JyBmcm9tICd7JG1lbWJlcnNoaXAtPmdldE5hbWUoKX0nIGJlY2F1c2UgaXQgaXMgYSBwYWlkIG1lbWJlcnNoaXAgbGV2ZWwgYW5kIHRoaXMgaXMgdGhlIG9ubHkgcHJvZHVjdCBhc3NvY2lhdGVkIHdpdGggaXQuXG5cbklmIHlvdSB3YW50IHRvIGRpc2Fzc29jaWF0ZSB0aGlzIHByb2R1Y3QsIGdvIHRvIHRoZSBtZW1iZXJzaGlwIGxldmVsIGFuZCBjaGFuZ2UgaXQgdG8gYSBmcmVlIG1lbWJlcnNoaXAgbGV2ZWwuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCQkJCX0KCQkJCQkJZWxzZQoJCQkJCQl7CgkJCQkJCQkkbWVtYmVyc2hpcC0+cmVtb3ZlUHJvZHVjdCgkcHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQkJZWxzZSBpZigkcG9zdFsibW1fbGFzdF9hc3NvY2lhdGVkX2FjY2Vzc190eXBlIl0gPT0gImJ1bmRsZSIpCgkJCXsKCQkJCWlmKGlzc2V0KCRwb3N0WyJtbV9sYXN0X2Fzc29jaWF0ZWRfYWNjZXNzX2lkIl0pKQoJCQkJewoJCQkJCSRidW5kbGUgPSBuZXcgTU1fQnVuZGxlKCRwb3N0WyJtbV9sYXN0X2Fzc29jaWF0ZWRfYWNjZXNzX2lkIl0pOwoJCQkJCQkKCQkJCQlpZigkYnVuZGxlLT5pc1ZhbGlkKCkpCgkJCQkJewoJCQkJCQkvLyBjaGVjayBpZiB0aGlzIGlzIHRoZSBsYXN0IHByb2R1Y3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBidW5kbGUKCQkJCQkJJHByb2R1Y3RzID0gJGJ1bmRsZS0+Z2V0QXNzb2NpYXRlZFByb2R1Y3RzKCk7CgkJCQkJCQoJCQkJCQlpZigoaXNzZXQoJHBvc3RbIm1tX2Fzc29jaWF0ZWRfYWNjZXNzX3ZhbHVlIl0pICYmICRwb3N0WyJtbV9hc3NvY2lhdGVkX2FjY2Vzc192YWx1ZSJdID09ICJub25lIiAmJiBjb3VudCgkcHJvZHVjdHMpID09IDEpKQoJCQkJCQl7CgkJCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDYW5ub3QgcmVtb3ZlICd7JHByb2R1Y3QtPmdldE5hbWUoKX0nIGZyb20gJ3skYnVuZGxlLT5nZXROYW1lKCl9JyBiZWNhdXNlIGl0IGlzIGEgcGFpZCBidW5kbGUgYW5kIHRoaXMgaXMgdGhlIG9ubHkgcHJvZHVjdCBhc3NvY2lhdGVkIHdpdGggaXQuXG5cbklmIHlvdSB3YW50IHRvIGRpc2Fzc29jaWF0ZSB0aGlzIHByb2R1Y3QsIGdvIHRvIHRoZSBidW5kbGUgYW5kIGNoYW5nZSBpdCB0byBhIGZyZWUgYnVuZGxlLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQkJCQl9CgkJCQkJCWVsc2UKCQkJCQkJewoJCQkJCQkJJGJ1bmRsZS0+cmVtb3ZlUHJvZHVjdCgkcHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJCgkJLy8gYWRkIG5ldyBhY2Nlc3MgYXNzb2NpYXRpb24KCQlpZihpc3NldCgkcG9zdFsibW1fYXNzb2NpYXRlZF9hY2Nlc3NfdmFsdWUiXSkpCgkJewoJCQlpZigkcG9zdFsibW1fYXNzb2NpYXRlZF9hY2Nlc3NfdmFsdWUiXSA9PSAibWVtYmVyc2hpcCIpCgkJCXsKCQkJCWlmKGlzc2V0KCRwb3N0WyJtbV9tZW1iZXJzaGlwX2FjY2Vzc19zZWxlY3RvciJdKSkKCQkJCXsKCQkJCQkkbWVtYmVyc2hpcCA9IG5ldyBNTV9NZW1iZXJzaGlwTGV2ZWwoJHBvc3RbIm1tX21lbWJlcnNoaXBfYWNjZXNzX3NlbGVjdG9yIl0pOwoJCQkJCQoJCQkJCWlmKCRtZW1iZXJzaGlwLT5pc1ZhbGlkKCkpCgkJCQkJewoJCQkJCQkkbWVtYmVyc2hpcC0+cmVtb3ZlUHJvZHVjdCgkcHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJCSRtZW1iZXJzaGlwLT5hZGRQcm9kdWN0KCRwcm9kdWN0LT5nZXRJZCgpKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJZWxzZSBpZigkcG9zdFsibW1fYXNzb2NpYXRlZF9hY2Nlc3NfdmFsdWUiXSA9PSAiYnVuZGxlIikKCQkJewoJCQkJaWYoaXNzZXQoJHBvc3RbIm1tX2J1bmRsZV9hY2Nlc3Nfc2VsZWN0b3IiXSkpCgkJCQl7CgkJCQkJJGJ1bmRsZSA9IG5ldyBNTV9CdW5kbGUoJHBvc3RbIm1tX2J1bmRsZV9hY2Nlc3Nfc2VsZWN0b3IiXSk7CgkJCQkJCgkJCQkJaWYoJGJ1bmRsZS0+aXNWYWxpZCgpKQoJCQkJCXsKCQkJCQkJJGJ1bmRsZS0+cmVtb3ZlUHJvZHVjdCgkcHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJCSRidW5kbGUtPmFkZFByb2R1Y3QoJHByb2R1Y3QtPmdldElkKCkpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCQkKCQkkbWVkaWF0b3IgPSBuZXcgTU1fUGF5bWVudFNlcnZpY2VNZWRpYXRvcigpOwoJCSRyZXNwb25zZSA9ICghJGlzVXBkYXRlKT8kbWVkaWF0b3ItPm5vdGlmeVByb2R1Y3RBZGRlZCgkcHJvZHVjdCk6JG1lZGlhdG9yLT5ub3RpZnlQcm9kdWN0VXBkYXRlZCgkcHJvZHVjdCk7CgkJCgkJaWYgKCRyZXNwb25zZS0+dHlwZSA9PSBNTV9SZXNwb25zZTo6JEVSUk9SKQoJCXsKCQkJaWYgKCEkaXNVcGRhdGUpCgkJCXsKCQkJCS8vaWYgYSBwYXltZW50IHNlcnZpY2UgYmxvY2tzIGFkZGl0aW9uIG9mIGEgcHJvZHVjdCwgcmVtb3ZlIHRoZSBuZXdseSBjcmVhdGVkIHByb2R1Y3QKCQkJCS8vaG93ZXZlciBpZiBpdHMgYW4gdXBkYXRlIG9uIHRoZSBwYXltZW50IHNlcnZpY2Ugc2lkZSB0aGF0IGZhaWxzLCBrZWVwIHRoZSBjaGFuZ2VzIGFuZCBzaW1wbHkgbm90aWZ5IHRoZSB1c2VyCgkJCQkkcHJvZHVjdC0+cmVtb3ZlKCk7IAoJCQl9CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsJCgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gcmVtb3ZlUHJvZHVjdCgkcG9zdCkKCXsKCQlpZighaXNzZXQoJHBvc3RbImlkIl0pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiSUQgaXMgcmVxdWlyZWQiLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgkcG9zdFsiaWQiXSk7CgkJCgkJJG1lZGlhdG9yID0gbmV3IE1NX1BheW1lbnRTZXJ2aWNlTWVkaWF0b3IoKTsKCQkkcmVzcG9uc2UgPSAkbWVkaWF0b3ItPm5vdGlmeVByb2R1Y3RSZW1vdmVkKCRwcm9kdWN0KTsKCQkKCQlpZiAoJHJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokRVJST1IpCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCQkKCQlpZigkcHJvZHVjdC0+cmVtb3ZlKCkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlByb2R1Y3QgY291bGQgbm90IGJlIHJlbW92ZWQgZHVlIHRvIGV4aXN0aW5nIGFzc29jaWF0aW9ucyIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHNob3dQdXJjaGFzZUxpbmtzKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJwcm9kdWN0X2lkIl0pICYmIGlzc2V0KCRwb3N0WyJwcm9kdWN0X25hbWUiXSkpCgkJewoJCQkkZGF0YSA9IG5ldyBzdGRDbGFzcygpOwoJCQkkZGF0YS0+cHJvZHVjdE5hbWUgPSBzdHJpcHNsYXNoZXMoJHBvc3RbInByb2R1Y3RfbmFtZSJdKTsKCQkJJGRhdGEtPnNtYXJ0VGFnID0gIjxhIGhyZWY9XCJbTU1fUHVyY2hhc2VfTGluayBwcm9kdWN0SWQ9J3skcG9zdFsicHJvZHVjdF9pZCJdfSddXCI+QnV5IE5vdzwvYT4iOwoJCQkkZGF0YS0+c3RhdGljTGluayA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRDaGVja291dFBhZ2VTdGF0aWNMaW5rKCRwb3N0WyJwcm9kdWN0X2lkIl0pOwoJCQkKCQkJJGNvbnRlbnQgPSBNTV9URU1QTEFURTo6Z2VuZXJhdGUoTU1fTU9EVUxFUy4iLyIuTU1fTU9EVUxFX1BST0RVQ1RTLiIuIi5NTV9NT0RVTEVfUFVSQ0hBU0VfTElOS1MuIi5kaWFsb2cucGhwIiwgJGRhdGEpOwoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRjb250ZW50KTsKCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiUHJvZHVjdCBJRCBhbmQgcHJvZHVjdCBuYW1lIGFyZSByZXF1aXJlZCB0byBkaXNwbGF5IHB1cmNoYXNlIGxpbmtzIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGdldE1NUHJvZHVjdERlc2NyaXB0aW9uKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJtbV9wcm9kdWN0X2lkIl0pKQoJCXsKCQkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgkcG9zdFsibW1fcHJvZHVjdF9pZCJdKTsKCQkJCgkJCWlmKCRwcm9kdWN0LT5pc1ZhbGlkKCkpCgkJCXsKCQkJCSRtbVByb2R1Y3REZXNjcmlwdGlvbiA9ICRwcm9kdWN0LT5nZXRCaWxsaW5nRGVzY3JpcHRpb24oKS4iICI7CgkJCQkgCgkJCQlpZigkcHJvZHVjdC0+aGFzVHJpYWwoKSkKCQkJCXsKCQkJCQkkbW1Qcm9kdWN0RGVzY3JpcHRpb24gLj0gTU1fVXRpbHM6OmdldEljb24oJ2Nsb2NrLW8nLCAnYmVpZ2UnLCAnMS4zZW0nLCAnMnB4JywgJ0hhcyBUcmlhbCcsICdtYXJnaW4tcmlnaHQ6NXB4OycpOwoJCQkJfQoJCQkJIAoJCQkJaWYoJHByb2R1Y3QtPmlzUmVjdXJyaW5nKCkpCgkJCQl7CgkJCQkJaWYoJHByb2R1Y3QtPmRvTGltaXRQYXltZW50cygpKQoJCQkJCXsKCQkJCQkJJG1tUHJvZHVjdERlc2NyaXB0aW9uIC49IE1NX1V0aWxzOjpnZXRJY29uKCdjYWxlbmRhci1vJywgJ2JlaWdlJywgJzEuM2VtJywgJzJweCcsICdQYXltZW50IFBsYW4nLCAnbWFyZ2luLXJpZ2h0OjVweDsnKTsKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJJG1tUHJvZHVjdERlc2NyaXB0aW9uIC49IE1NX1V0aWxzOjpnZXRJY29uKCdyZWZyZXNoJywgJ2JlaWdlJywgJzEuM2VtJywgJzJweCcsICdTdWJzY3JpcHRpb24nLCAnbWFyZ2luLXJpZ2h0OjVweDsnKTsKCQkJCQl9CgkJCQl9CgkJCQkgCgkJCQlpZigkcHJvZHVjdC0+aXNTaGlwcGFibGUoKSkKCQkJCXsKCQkJCQkkbW1Qcm9kdWN0RGVzY3JpcHRpb24gLj0gTU1fVXRpbHM6OmdldEljb24oJ3RydWNrJywgJ2JlaWdlJywgJzEuM2VtJywgJzJweCcsICdSZXF1aXJlcyBTaGlwcGluZycsICdtYXJnaW4tcmlnaHQ6NXB4OycpOwoJCQkJfQoJCQkJIAoJCQkJaWYoJHByb2R1Y3QtPmdldFNrdSgpICE9ICIiKQoJCQkJewoJCQkJCSRtbVByb2R1Y3REZXNjcmlwdGlvbiAuPSBNTV9VdGlsczo6Z2V0SWNvbignYmFyY29kZScsICdiZWlnZScsICcxLjNlbScsICcycHgnLCAiU0tVIFsiLiRwcm9kdWN0LT5nZXRTa3UoKS4iXSIsICdtYXJnaW4tcmlnaHQ6NXB4OycpOwoJCQkJfQoJCQkJCgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRtbVByb2R1Y3REZXNjcmlwdGlvbik7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3IgcmV0cmlldmluZyBNZW1iZXJNb3VzZSBwcm9kdWN0IGRlc2NyaXB0aW9uLiBJbnZhbGlkIHByb2R1Y3QgSUQgJ3skcG9zdFsibW1fcHJvZHVjdF9pZCJdfScuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3IgcmV0cmlldmluZyBNZW1iZXJNb3VzZSBwcm9kdWN0IGRlc2NyaXB0aW9uLiBObyBwcm9kdWN0IElEIHNwZWNpZmllZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9Cgl9CgkKfQo=', 0, '2018-11-21 06:38:54'),
(153, 'shippingoption', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJtb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBNTV9TaGlwcGluZ09wdGlvbiBpcyBhIHZhbHVlIG9iamVjdCBtZWFudCB0byBzdGFuZGFyZGl6ZSB0aGUgd2F5IHNoaXBwaW5nIG9wdGlvbiBkYXRhIGlzIHByZXNlbnRlZCBhY3Jvc3Mgc2hpcHBpbmcgbWV0aG9kcwogKgogKi8KCmNsYXNzIE1NX1NoaXBwaW5nT3B0aW9uIAp7CQkKCS8vdW5pcXVlIGlkZW50aWZpZXIgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoaXMgb3B0aW9uIGFuZCB0aGUgbWV0aG9kIGl0IGlzIGFzc29jaWF0ZWQgd2l0aC4gS2V5cyBoYXZlIHRoZSBmb3JtICI8VE9LRU4+LTxJREVOVElGSUVSPiIKCXByaXZhdGUgJGtleTsKCQoJLy90aGUgZGlzcGxheSBuYW1lCglwcml2YXRlICRuYW1lOwoJCgkvL3RoZSBjb3N0IG9mIHVzaW5nIHRoaXMgcmF0ZSwgZ2VuZXJhbGx5IHVzZWQgaW4gdGhlIGNvbnRleHQgb2Ygb3JkZXIgcGxhY2VtZW50Cglwcml2YXRlICRyYXRlOwoJCgkvL29wdGlvbmFsLCB0aGUgaWQgdXNlZCBieSB0aGlzIG9wdGlvbiBpbiBpdHMgYmFja2luZyB0YWJsZSAoaWYgdGhlcmUgaXMgb25lKS4gVGhpcyBzaW1wbGlmaWVzIHNvbWUgb2YgdGhlIGludGVyZmFjZSBjb2RlCglwcml2YXRlICRpZDsKCQoJLy90aGUgc2hpcHBpbmcgbWV0aG9kIHRoaXMgb3B0aW9uIGlzIHBhcnQgb2YKCXByaXZhdGUgJG1ldGhvZE5hbWU7CgkKCS8vdGhlIGN1cnJlbmN5IHRoaXMgcmF0ZSBpcyBtZWFzdXJlZCBpbgoJcHJpdmF0ZSAkY3VycmVuY3k7CgkKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGtleT0iIiwgJG5hbWU9IiIsICRyYXRlPSIiLCAkaWQ9IiIsICRtZXRob2ROYW1lPSIiLCAkY3VycmVuY3k9IiIpCgl7CgkJJHBhcmFtcyA9IGFycmF5KCJrZXkiLCJuYW1lIiwicmF0ZSIsImlkIiwibWV0aG9kTmFtZSIpOwoJCWZvcmVhY2ggKCRwYXJhbXMgYXMgJHBhcmFtKQoJCXsKCQkJaWYgKCQkcGFyYW0gIT09ICIiKQoJCQl7CgkJCQkkdGhpcy0+JHBhcmFtID0gJCRwYXJhbTsKCQkJfQoJCX0KCQkKCQkkdGhpcy0+Y3VycmVuY3kgPSAhZW1wdHkoJGN1cnJlbmN5KT9zdHJ0b3VwcGVyKCRjdXJyZW5jeSk6TU1fQ3VycmVuY3lVdGlsOjpnZXRBY3RpdmVDdXJyZW5jeSgpOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRLZXkoKQoJewoJCXJldHVybiAkdGhpcy0+a2V5OwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRLZXkoJGtleSkKCXsKCQkkdGhpcy0+a2V5ID0gJGtleTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TmFtZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5uYW1lOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXROYW1lKCRuYW1lKQoJewoJCSR0aGlzLT5uYW1lID0gJG5hbWU7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFJhdGUoJGRvRm9ybWF0PWZhbHNlKQoJewoJCWlmICgkZG9Gb3JtYXQpCgkJewoJCQlyZXR1cm4gX21tZigkdGhpcy0+cmF0ZSwkdGhpcy0+Y3VycmVuY3kpOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gbnVtYmVyX2Zvcm1hdChmbG9hdHZhbCgkdGhpcy0+cmF0ZSksTU1fQ3VycmVuY3lVdGlsOjpnZXRQcmVjaXNpb25Gb3JDdXJyZW5jeSgkdGhpcy0+Y3VycmVuY3kpLCcuJywnJyk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRSYXRlKCRyYXRlKQoJewoJCSR0aGlzLT5yYXRlID0gJHJhdGU7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldElkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmlkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRJZCgkaWQpCgl7CgkJJHRoaXMtPmlkID0gJGlkOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TWV0aG9kTmFtZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5tZXRob2ROYW1lOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRNZXRob2ROYW1lKCRtZXRob2ROYW1lKQoJewoJCSR0aGlzLT5tZXRob2ROYW1lID0gJG1ldGhvZE5hbWU7Cgl9CgkKCQp9', 0, '2018-11-21 06:38:54'),
(154, 'loggedinuserview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmFic3RyYWN0IGNsYXNzIE1NX0xvZ2dlZEluVXNlclZpZXcgZXh0ZW5kcyBNTV9WaWV3CnsgCgoJLyoqCgkgKiBEZXRlcm1pbmVzIGlmIHRoZSBjYWxsZXIgaGFzIHBlcm1pc3Npb24gdG8gcGVyZm9ybSB0aGUgcmVxdWVzdGVkIGFjdGlvbgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJG1ldGhvZE5hbWUKCSAqIEByZXR1cm4gYm9vbGVhbgoJICovCglwdWJsaWMgZnVuY3Rpb24gY2FuQ2FsbE1ldGhvZCgkbWV0aG9kTmFtZSkKCXsKCQlyZXR1cm4gTU1fVXRpbHM6OmlzTG9nZ2VkSW4oKTsKCX0KCn0=', 0, '2018-11-21 06:38:54'),
(155, 'dashboardview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0Rhc2hib2FyZFZpZXcgZXh0ZW5kcyBNTV9SQkFDR2VuZXJhbEVtcGxveWVlVmlldwp7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TVE9SRV9UUkFJTklOR19WSURFT19TVEFURSA9ICJzdG9yZVRyYWluaW5nVmlkZW9TdGF0ZSI7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7CgkJJHRoaXMtPnBlcm1pc3Npb25zWyIqIl0gKz0gYXJyYXkoTU1fUm9sZTo6JFJPTEVfQU5BTFlTVCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkKCQlpZighKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSkKCQl7CgkJCXN3aXRjaCgkcG9zdFtzZWxmOjokTU1fSlNBQ1RJT05dKSAKCQkJewkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TVE9SRV9UUkFJTklOR19WSURFT19TVEFURToKCQkJCQlyZXR1cm4gJHRoaXMtPnN0b3JlVHJhaW5pbmdWaWRlb1N0YXRlKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBzdG9yZVRyYWluaW5nVmlkZW9TdGF0ZSgkcG9zdCkKCXsKCQlpZihpc3NldCgkcG9zdFsibW1fc2hvd190cmFpbmluZ192aWRlb3MiXSkpCgkJewoJCQlpZihpc3NldCgkcG9zdFsibW1fYWRtaW5faWQiXSkpCgkJCXsKCQkJCSRvcHRpb25OYW1lID0gTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX1NIT1dfVFJBSU5JTkdfVklERU9TLiItIi4kcG9zdFsibW1fYWRtaW5faWQiXTsKCQkJCU1NX09wdGlvblV0aWxzOjpzZXRPcHRpb24oJG9wdGlvbk5hbWUsICRwb3N0WyJtbV9zaG93X3RyYWluaW5nX3ZpZGVvcyJdKTsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBzdG9yZSB0cmFpbmluZyB2aWRlbyBzdGF0ZS4gQ291bGRuJ3QgZmluZCBjdXJyZW50IHVzZXIgSUQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHN0b3JlIHRyYWluaW5nIHZpZGVvIHN0YXRlLiBNaXNzaW5nIGN1cnJlbnQgc3RhdGUgdmFsdWUuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(156, 'scheduledevent', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(157, 'safemodeview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1NhZmVNb2RlVmlldyBleHRlbmRzIE1NX1JCQUNBZG1pblZpZXcKewoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fU0VUX1NBRkVfTU9ERV9TVEFUVVMgPSAic2V0U2FmZU1vZGVTdGF0dXMiOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fQ0xFQVJfTE9HID0gImNsZWFyU2FmZU1vZGVMb2ciOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TRVRfU0FGRV9NT0RFX1NUQVRVUzoKCQkJCQlyZXR1cm4gJHRoaXMtPnNldFNhZmVNb2RlU3RhdHVzKCRwb3N0KTsKCQkJCQlicmVhazsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0NMRUFSX0xPRzoKCQkJCQlyZXR1cm4gJHRoaXMtPmNsZWFyTG9nKCk7CgkJCQkJYnJlYWs7CgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIHNldFNhZmVNb2RlU3RhdHVzKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJuZXdTdGF0dXMiXSkgJiYgIWVtcHR5KCRwb3N0WyJuZXdTdGF0dXMiXSkpIAoJCXsKCQkJTU1fU2FmZU1vZGU6OnNldE1vZGUoJHBvc3RbIm5ld1N0YXR1cyJdKTsKCQkJJGN1cnJlbnRNb2RlID0gTU1fU2FmZU1vZGU6OmdldE1vZGUoKTsKCQkJCgkJCWlmKCRjdXJyZW50TW9kZSA9PSBNTV9TYWZlTW9kZTo6JE1PREVfRU5BQkxFRCkKCQkJewoJCQkJTU1fU2FmZU1vZGU6OmRpc2FibGVQbHVnaW5zKCk7CgkJCQlNTV9TYWZlTW9kZTo6ZGlzYWJsZVRoZW1lKCk7CgkJCQkKCQkJCSRzYXZlZFBsdWdpbnMgPSBNTV9TYWZlTW9kZTo6Z2V0U2F2ZWRQbHVnaW5OYW1lcygpOwoJCQkJJG1lc3NhZ2UgPSAiPHN0cm9uZz5EZWFjdGl2YXRlZCBQbHVnaW5zICgiLmNvdW50KCRzYXZlZFBsdWdpbnMpLiIpOjwvc3Ryb25nPiAiLmltcGxvZGUoIiwgIiwgJHNhdmVkUGx1Z2lucyk7CgkJCQkKCQkJCSRkZmx0V1BUaGVtZSA9IE1NX1NhZmVNb2RlOjpnZXREZWZhdWx0V29yZFByZXNzVGhlbWUoKTsKCQkJCQoJCQkJaWYoJGRmbHRXUFRoZW1lICE9ICIiKQoJCQkJewoJCQkJCSRtZXNzYWdlIC49ICI8YnIvPjxzdHJvbmc+RGVhY3RpdmF0ZWQgVGhlbWU6PC9zdHJvbmc+ICIuTU1fU2FmZU1vZGU6OmdldFNhdmVkVGhlbWVOYW1lKCk7CgkJCQl9CgkJCQkKCQkJCU1NX1NhZmVNb2RlOjpsb2coJGN1cnJlbnRNb2RlLCAkbWVzc2FnZSk7CgkJCQkKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlNhZmUgTW9kZSBoYXMgYmVlbiBlbmFibGVkIixNTV9SZXNwb25zZTo6JFNVQ0NFU1MsdHJ1ZSk7CgkJCX0KCQkJZWxzZQoJCQl7CQoJCQkJJHNhdmVkUGx1Z2lucyA9IE1NX1NhZmVNb2RlOjpnZXRTYXZlZFBsdWdpbk5hbWVzKCk7CgkJCQkkbWVzc2FnZSA9ICI8c3Ryb25nPlJlc3RvcmVkIFBsdWdpbnMgKCIuY291bnQoJHNhdmVkUGx1Z2lucykuIik6PC9zdHJvbmc+ICIuaW1wbG9kZSgiLCAiLCAkc2F2ZWRQbHVnaW5zKTsKCQkJCSRtZXNzYWdlIC49ICI8YnIvPjxzdHJvbmc+UmVzdG9yZWQgVGhlbWU6PC9zdHJvbmc+ICIuTU1fU2FmZU1vZGU6OmdldFNhdmVkVGhlbWVOYW1lKCk7CgkJCQkKCQkJCU1NX1NhZmVNb2RlOjpyZXN0b3JlUGx1Z2lucygpOwoJCQkJTU1fU2FmZU1vZGU6OnJlc3RvcmVUaGVtZSgpOwoJCQkJCgkJCQlNTV9TYWZlTW9kZTo6bG9nKCRjdXJyZW50TW9kZSwgJG1lc3NhZ2UpOwoJCQkJCgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJTYWZlIE1vZGUgaGFzIGJlZW4gZGlzYWJsZWQiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsKCQkJfQoJCX0KCQkKCSAJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiU2FmZSBtb2RlIHN0YXR1cyB3YXMgbm90IGNoYW5nZWQiLE1NX1Jlc3BvbnNlOjokU1VDQ0VTUyx0cnVlKTsJCSAJCgl9CgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIGNsZWFyTG9nKCkKCXsKCQlNTV9TYWZlTW9kZTo6Y2xlYXJMb2coKTsKCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJTYWZlIG1vZGUgbG9nIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5IiwgTU1fUmVzcG9uc2U6OiRTVUNDRVNTKTsJIAkKCX0KCQp9Cg==', 0, '2018-11-21 06:38:54'),
(158, 'countrysubdivisionutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0NvdW50cnlTdWJkaXZpc2lvblV0aWxzCnsJCQkKCS8qKgoJICogVGhpcyByZXR1cm5zIGFsbCBzdWJkaXZpc2lvbnMgKHN0YXRlcywgcHJvdmluY2VzLCBldGMuLi4pIHdpdGhpbiBkZXNpcmVkIGNvdW50cnkKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRDb3VudHJ5U3ViZGl2c2lvbkxpc3QoJGlzbz1hcnJheSgpKQoJewoJCWdsb2JhbCAkd3BkYjsKCQogICAgJGlzbyA9IChhcnJheSkkaXNvOwogICAgCgkJJHNxbCA9ICJTRUxFQ1QgYGlzb2AsIGBjb2RlYCwgYG5hbWVgIGZyb20gIi5NTV9UQUJMRV9DT1VOVFJZX1NVQkRJVklTSU9OUy4iIFdIRVJFIGBpc29gIElOICgnIi5pbXBsb2RlKCInLCciLCAkaXNvKS4iJykgb3JkZXIgYnkgbmFtZSBhc2MiOwoJCQoJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwsIE9CSkVDVCk7CgkJJGxpc3QgPSBhcnJheSgpOwoJCgkJZm9yZWFjaCAoJHJlc3VsdHMgYXMgJGlzbyA9PiAkcm93KQoJCXsKCQkgICRsaXN0WyRyb3ctPmlzb11bJHJvdy0+Y29kZV0gPSAkcm93LT5uYW1lOwoJCX0KCQoJCXJldHVybiAkbGlzdDsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRDb3VudHJ5U3ViZGl2c2lvbk5hbWUoJGlzbywgJGNvZGUpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRzcWwgPSAiU0VMRUNUIGBuYW1lYCBmcm9tICIuTU1fVEFCTEVfQ09VTlRSWV9TVUJESVZJU0lPTlMuIiB3aGVyZSBgaXNvYCA9ICd7JGlzb30nIEFORCBgY29kZWAgPSAneyRjb2RlfScgbGltaXQgMTsiOwoJCSRyb3cgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkKCQlpZihpc3NldCgkcm93LT5uYW1lKSkKCQl7CgkJCXJldHVybiAkcm93LT5uYW1lOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gInskaXNvfS17JGNvZGV9IjsJCgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(159, 'aweberresourcenotimplemented', 'LyoqCiAqIFRocm93biB3aGVuIGF0dGVtcHRpbmcgdG8gdXNlIGEgcmVzb3VyY2UgdGhhdCBpcyBub3QgaW1wbGVtZW50ZWQuCiAqCiAqIEB1c2VzIE1NX0FXZWJlckV4Y2VwdGlvbgogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJSZXNvdXJjZU5vdEltcGxlbWVudGVkIGV4dGVuZHMgTU1fQVdlYmVyRXhjZXB0aW9uIHsKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJG9iamVjdCwgJHZhbHVlKSB7CgkJJHRoaXMtPm9iamVjdCA9ICRvYmplY3Q7CgkJJHRoaXMtPnZhbHVlID0gJHZhbHVlOwoJCXBhcmVudDo6X19jb25zdHJ1Y3QoIlJlc291cmNlIFwieyR2YWx1ZX1cIiBpcyBub3QgaW1wbGVtZW50ZWQgb24gdGhpcyByZXNvdXJjZS4iKTsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(160, 'aweberemailserviceprovider', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(161, 'customfield', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(162, 'coinbaseservice', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(163, 'couponview', '', 0, '2018-11-21 06:38:54'),
(164, 'simpleaveragereport', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KY2xhc3MgTU1fU2ltcGxlQXZlcmFnZVJlcG9ydCBleHRlbmRzIE1NX0FkdmFuY2VkUmVwb3J0QmFzZSAKewoJCglwcm90ZWN0ZWQgJHZpc3VhbEVsZW1lbnRzID0gYXJyYXkoIk1NX1JlcG9ydERhdGFHcmlkIiwiTU1fUmVwb3J0QmFyQ2hhcnQiKTsKCQoJcHVibGljIHN0YXRpYyAkU0lNUExFX0FWRVJBR0VfREFUQUdSSUQgPSAic2ltcGxlX2F2ZXJhZ2VfZGF0YWdyaWQiOwoJcHVibGljIHN0YXRpYyAkU0lNUExFX0FWRVJBR0VfQ09MVU1OX0NIQVJUID0gInNpbXBsZV9hdmVyYWdlX2NvbHVtbl9jaGFydCI7CgkKCS8vcXVlcnkgaWRlbnRpZmllcnMKCXB1YmxpYyBzdGF0aWMgJFNJTVBMRV9BVkVSQUdFX1FVRVJZID0gInNpbXBsZV9hdmVyYWdlX3F1ZXJ5IjsKCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVuZGVyVmlzdWFsRWxlbWVudCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMgPSAnJywgJHdpZHRoID0gJycsICRoZWlnaHQgPSAnJywgJGRpcmVjdGl2ZXM9YXJyYXkoKSkgCgl7CgkJc3dpdGNoICgkZWxlbWVudElkZW50aWZpZXIpCgkJewoJCQljYXNlIHNlbGY6OiRTSU1QTEVfQVZFUkFHRV9EQVRBR1JJRDoKCQkJCXJldHVybiAkdGhpcy0+cmVuZGVyU2ltcGxlQXZlcmFnZURhdGFncmlkKCRlbGVtZW50SWRlbnRpZmllciwgJHBhcmFtcywgJHdpZHRoLCAkaGVpZ2h0LCAkZGlyZWN0aXZlcyk7CgkJCQlicmVhazsKCQkJY2FzZSBzZWxmOjokU0lNUExFX0FWRVJBR0VfQ09MVU1OX0NIQVJUOgoJCQkJcmV0dXJuICR0aGlzLT5yZW5kZXJTaW1wbGVBdmVyYWdlQ29sdW1uQ2hhcnQoJGVsZW1lbnRJZGVudGlmaWVyLCRwYXJhbXMsJHdpZHRoLCRoZWlnaHQsJGRpcmVjdGl2ZXMpOwoJCQkJYnJlYWs7CgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCJVbmFibGUgdG8gcmVuZGVyIHZpc3VhbCBlbGVtZW50OiBpZGVudGlmaWVyICIuKCghaXNfYXJyYXkoJGVsZW1lbnRJZGVudGlmaWVyKSAmJiAhaXNfb2JqZWN0KCRlbGVtZW50SWRlbnRpZmllcikpPyJ7JGVsZW1lbnRJZGVudGlmaWVyfSAiOiIiKS4idW5rbm93biIsTU1fUmVwb3J0UmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJTaW1wbGVBdmVyYWdlRGF0YWdyaWQoJGVsZW1lbnRJZGVudGlmaWVyLCAkcGFyYW1zID0gJycsICR3aWR0aCA9ICcnLCAkaGVpZ2h0ID0gJycsICRkaXJlY3RpdmVzPWFycmF5KCkpCgl7CgkJCgkJJGRhdGFSZXNwb25zZSA9IE1NX1JlcG9ydERhdGFSZXRyaWV2ZXI6OnJlcXVlc3REYXRhKGdldF9jbGFzcygkdGhpcyksIHNlbGY6OiRTSU1QTEVfQVZFUkFHRV9RVUVSWSwgJHBhcmFtcyk7CgkJaWYgKCFNTV9SZXBvcnRSZXNwb25zZTo6aXNTdWNjZXNzKCRkYXRhUmVzcG9uc2UpKQoJCXsKCQkJcmV0dXJuICRkYXRhUmVzcG9uc2U7CgkJfQoJCQoJCSRyb3dJbmRleCA9ICJBZmZpbGlhdGUiOwoJCQoJCWlmIChpc3NldCgkcGFyYW1zWyd0eXBlJ10pKQoJCXsKCQkJc3dpdGNoICgkcGFyYW1zWyd0eXBlJ10pCgkJCXsKCQkJCWNhc2UgJ2FmZmlsaWF0ZSc6CgkJCQkJJHJvd0luZGV4ID0gIkFmZmlsaWF0ZSI7CgkJCQkJYnJlYWs7CgkJCQljYXNlICdzdWJhZmZpbGlhdGUnOgoJCQkJCSRyb3dJbmRleCA9ICJTdWJhZmZpbGlhdGUiOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAncHJvZHVjdCc6CgkJCQkJJHJvd0luZGV4ID0gIlByb2R1Y3QiOwoJCQkJCWJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQkkcm93SW5kZXggPSAiQWZmaWxpYXRlIjsKCQkJCQlicmVhazsKCQkJfQoJCX0KCQkKCQkkZ3JpZEhlYWRlcnMgPSBhcnJheSgieCI9PmFycmF5KCdsYWJlbCc9PiRyb3dJbmRleCksIAoJCQkJCQkJICJjdXN0b21lcnMiICAgPT5hcnJheSgnbGFiZWwnPT4iIyBDdXN0b21lcnMiKSwKCQkJCQkJCSAidG90YWxfc2FsZXMiID0+YXJyYXkoJ2xhYmVsJz0+IlRvdGFsIFNhbGVzIiwiY29sdW1uVHlwZSI9Pidtb25leScpLAoJCQkJCQkJICJzaW1wbGVfYXZlcmFnZSI9PmFycmF5KCdsYWJlbCc9PiJTaW1wbGUgQXZlcmFnZSIsImNvbHVtblR5cGUiPT4nbW9uZXknKSk7CgkJJGdyaWQgPSBNTV9SZXBvcnREYXRhZ3JpZDo6Y3JlYXRlRnJvbURhdGEoTU1fU2ltcGxlQXZlcmFnZVJlcG9ydDo6JFNJTVBMRV9BVkVSQUdFX0RBVEFHUklELCAkZ3JpZEhlYWRlcnMsICRkYXRhUmVzcG9uc2UsJGRpcmVjdGl2ZXMpOwoJCS8vJGdyaWQtPnNldEdyaWRUaXRsZSgiUXVpY2sgQXZlcmFnZSIpOwoJCSRncmlkLT5zZXRTaG93SGVhZGVyUm93KGZhbHNlKTsKCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCRncmlkLT5yZW5kZXIoKSk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbmRlclNpbXBsZUF2ZXJhZ2VDb2x1bW5DaGFydCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMgPSAnJywgJHdpZHRoID0gJycsICRoZWlnaHQgPSAnJywgJGRpcmVjdGl2ZXM9YXJyYXkoKSkKCXsKCQkkZGF0YVJlc3BvbnNlID0gTU1fUmVwb3J0RGF0YVJldHJpZXZlcjo6cmVxdWVzdERhdGEoZ2V0X2NsYXNzKCR0aGlzKSwgc2VsZjo6JFNJTVBMRV9BVkVSQUdFX1FVRVJZLCAkcGFyYW1zKTsKCQlpZiAoIU1NX1JlcG9ydFJlc3BvbnNlOjppc1N1Y2Nlc3MoJGRhdGFSZXNwb25zZSkpCgkJewoJCQlyZXR1cm4gJGRhdGFSZXNwb25zZTsKCQl9CgkJJGNvbHVtbiA9IE1NX1JlcG9ydENvbHVtbkNoYXJ0OjpjcmVhdGVGcm9tVG9wUmVzdWx0cygkZWxlbWVudElkZW50aWZpZXIsICJ4IiwgInNpbXBsZV9hdmVyYWdlIiwgMTAsICRkYXRhUmVzcG9uc2UpOwoJCSRjb2x1bW4tPnNldEN1cnJlbmN5VmFsdWVzKHRydWUpOwoJCSRjb2x1bW4tPnNldFZhbHVlQXhpc1RpdGxlKCJBdmVyYWdlIGluICIuTU1fQ3VycmVuY3lVdGlsOjpnZXRBY3RpdmVDdXJyZW5jeSgpKTsKCQkkY29sdW1uLT5zZXRDYXRlZ29yeUF4aXNUaXRsZSgiVG9wIHBlcmZvcm1pbmcgYWZmaWxpYXRlcyIpOwoJCS8vVE9ETzogaGFuZGxlIG5vIGRhdGEKCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCRjb2x1bW4tPnJlbmRlcigpKTsJCQoJfQoJCgkKCS8qKgoJICogR2VuZXJhdGUgdGhlIGRhdGEgZm9yIHRoZSBRdWljayBBdmVyYWdlIHJlcG9ydC4gCgkgKiBDb25zdHJhaW50OiBUaGUgc3VwcGxpZWQgcGFyYW1zIG11c3QgY29udGFpbiBhIHN0YXJ0IGFuZCBlbmQgZGF0ZQoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHBhcmFtcwoJICogQHJldHVybiBNTV9SZXNwb25zZSBjb250YWluaW5nIHRoZSByZXN1bHRzCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2VuZXJhdGVTaW1wbGVBdmVyYWdlRGF0YSgkcGFyYW1zKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZiAoIWlzX2FycmF5KCRwYXJhbXMpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IGdlbmVyYXRlIFF1aWNrIEF2ZXJhZ2UgUmVwb3J0IGRhdGE6IEltcHJvcGVyIHBhcmFtZXRlcnMgZm9ybWF0IixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJaWYgKCFpc3NldCgkcGFyYW1zWydzdGFydF9kYXRlJ10pIHx8ICFpc3NldCgkcGFyYW1zWydlbmRfZGF0ZSddKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBnZW5lcmF0ZSBRdWljayBBdmVyYWdlIFJlcG9ydCBkYXRhOiBTdGFydCwgRW5kIGRhdGUsIGFuZCBUeXBlIG11c3QgYmUgc3VwcGxpZWQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkkdHJhbnNhY3Rpb25zVGFibGUgPSBNTV9UQUJMRV9UUkFOU0FDVElPTl9MT0c7CgkJJHByb2R1Y3RzVGFibGUgPSBNTV9UQUJMRV9QUk9EVUNUUzsKCQkkb3JkZXJJdGVtc1RhYmxlID0gTU1fVEFCTEVfT1JERVJfSVRFTVM7CgkJJG9yZGVyc1RhYmxlID0gTU1fVEFCTEVfT1JERVJTOwoJCQoJCSRzdGFydFRpbWUgPSBzdHJ0b3RpbWUoJHBhcmFtc1snc3RhcnRfZGF0ZSddKTsKCQkkZW5kVGltZSA9IHN0cnRvdGltZSgkcGFyYW1zWydlbmRfZGF0ZSddKTsKCQkKCQkkc3RhcnREYXRlID0gZGF0ZSgiWS1tLWQgSDppOnMiLCRzdGFydFRpbWUpOyAvL215c3FsIGZvcm1hdAoJCSRlbmREYXRlID0gICBkYXRlKCJZLW0tZCBIOmk6cyIsJGVuZFRpbWUpOwoJCQoJCSR0eXBlID0gJHBhcmFtc1sndHlwZSddOwoJCQoJCWlmICghaW5fYXJyYXkoJHR5cGUsYXJyYXkoImFmZmlsaWF0ZSIsInN1YmFmZmlsaWF0ZSIsInByb2R1Y3QiKSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJJbnZhbGlkIHJlcG9ydCB0eXBlIixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJHNlbGVjdEZpZWxkID0gKCR0eXBlID09ICJhZmZpbGlhdGUiKT8iby5hZmZpbGlhdGVfaWQiOigoJHR5cGU9PSJzdWJhZmZpbGlhdGUiKT8iby5zdWJfYWZmaWxpYXRlX2lkIjoiY29uY2F0KHAubmFtZSwnICgnLG9pLml0ZW1faWQsJyknKSIpOwoJCSRncm91cEJ5ID0gKCR0eXBlID09ICJhZmZpbGlhdGUiKT8iby5hZmZpbGlhdGVfaWQiOigoJHR5cGU9PSJzdWJhZmZpbGlhdGUiKT8iby5zdWJfYWZmaWxpYXRlX2lkIjoib2kuaXRlbV9pZCIpOwoJCSRzcWwgPSAiU0VMRUNUIHgsIHRvdGFsX3NhbGVzLCBjdXN0b21lcnMsIHRvdGFsX3NhbGVzL2N1c3RvbWVycyBhcyBzaW1wbGVfYXZlcmFnZSBGUk9NICIuCgkJCSAgICIoU0VMRUNUIElGKHskc2VsZWN0RmllbGR9PScnLCdbdW5zcGVjaWZpZWRdJyx7JHNlbGVjdEZpZWxkfSkgYXMgeCwgc3VtKGFicyh0LmFtb3VudCkpIGFzIHRvdGFsX3NhbGVzLCBDT1VOVChESVNUSU5DVCBvLnVzZXJfaWQpIEFTIGN1c3RvbWVycyAiLgoJCQkgICAiRlJPTSB7JHRyYW5zYWN0aW9uc1RhYmxlfSB0IEZPUkNFIElOREVYICh0cmFuc2FjdGlvbl90eXBlX2lkeCkgIi4KCQkJICAgIkxFRlQgSk9JTiB7JG9yZGVySXRlbXNUYWJsZX0gb2kgb24gKHQub3JkZXJfaXRlbV9pZCA9IG9pLmlkKSAiLgoJCQkgICAiTEVGVCBKT0lOIHskb3JkZXJzVGFibGV9IG8gb24gKG9pLm9yZGVyX2lkID0gby5pZCkgIi4KCQkJICAgIkxFRlQgSk9JTiB7JHByb2R1Y3RzVGFibGV9IHAgb24gKHAuaWQgPSBvaS5pdGVtX2lkKSAiLgoJCQkgICAiV0hFUkUgdHJhbnNhY3Rpb25fdHlwZSBJTiAoMiw0KSAiLgoJCQkgICAiQU5EIHQudHJhbnNhY3Rpb25fZGF0ZSBCRVRXRUVOICVzIEFORCAlcyAiLgoJCQkgICAiR1JPVVAgQlkgeyRncm91cEJ5fSkgQVMgUSBPUkRFUiBCWSBjdXN0b21lcnMgREVTQyI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHdwZGItPnByZXBhcmUoJHNxbCwkc3RhcnREYXRlLCRlbmREYXRlKSxBUlJBWV9BKTsKCQlyZXR1cm4gTU1fUmVwb3J0RGF0YXNldDo6Y3JlYXRlU2luZ2xlUmVwb3J0RGF0YXNldCgkcGFyYW1zLCRyZXN1bHRzKTsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YSgkcXVlcnlJZGVudGlmaWVyLCAkcGFyYW1zKQoJewoJCXN3aXRjaCAoJHF1ZXJ5SWRlbnRpZmllcikKCQl7CgkJCWNhc2Ugc2VsZjo6JFNJTVBMRV9BVkVSQUdFX1FVRVJZOgoJCQkJcmV0dXJuIHNlbGY6OmdlbmVyYXRlU2ltcGxlQXZlcmFnZURhdGEoJHBhcmFtcyk7CgkJCQlicmVhazsKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIGdlbmVyYXRpbmcgZGF0YSBmb3IgdW5rbm93biBxdWVyeSBpZGVudGlmaWVyIHskcXVlcnlJZGVudGlmaWVyfSIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(165, 'membershiplevel', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX01lbWJlcnNoaXBMZXZlbCBleHRlbmRzIE1NX0VudGl0eQp7CQoJcHVibGljIHN0YXRpYyAkU1VCX1RZUEVfUEFJRCA9ICJwYWlkIjsKCXB1YmxpYyBzdGF0aWMgJFNVQl9UWVBFX0ZSRUUgPSAiZnJlZSI7CgkKCXB1YmxpYyBzdGF0aWMgJERGTFRfRU1BSUxfU1VCSkVDVCA9ICJXZWxjb21lIFtNTV9NZW1iZXJfRGF0YSBuYW1lPSdmaXJzdE5hbWUnXSEiOwoJcHVibGljIHN0YXRpYyAkREZMVF9FTUFJTF9CT0RZID0gIkhpIFtNTV9NZW1iZXJfRGF0YSBuYW1lPSdmaXJzdE5hbWUnXSxcblxuVGhhbmtzIGZvciBqb2luaW5nIG91ciBjb21tdW5pdHkhXG5cbllvdSBjYW4gbG9naW4gd2l0aCB0aGUgZm9sbG93aW5nIGNyZWRlbnRpYWxzOlxuVXNlcm5hbWU6IFtNTV9NZW1iZXJfRGF0YSBuYW1lPSd1c2VybmFtZSddXG5QYXNzd29yZDogW01NX01lbWJlcl9EYXRhIG5hbWU9J3Bhc3N3b3JkJ11cblxuPGEgaHJlZj1cIltNTV9Db3JlUGFnZV9MaW5rIHR5cGU9J2hvbWVwYWdlJyBhdXRvTG9naW49J3RydWUnXVwiPkNsaWNrIGhlcmUgdG8gbG9naW48L2E+XG5cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMsIGZlZWwgZnJlZSB0byBjb250YWN0IHVzIGF0IDxhIGhyZWY9XCJtYWlsdG86W01NX0VtcGxveWVlX0RhdGEgbmFtZT0nZW1haWwnXVwiPltNTV9FbXBsb3llZV9EYXRhIG5hbWU9J2VtYWlsJ108L2E+LlxuXG5UaGFua3MhXG5bTU1fRW1wbG95ZWVfRGF0YSBuYW1lPSdkaXNwbGF5TmFtZSddIjsKCQoJcHVibGljIHN0YXRpYyAkR0VUX01FTUJFUlNISVBfTEVWRUxTX0NBQ0hFX0tFWSA9ICJtbS1nZXQtbWVtYmVyc2hpcC1sZXZlbHMiOwoJcHVibGljIHN0YXRpYyAkR0VUX01FTUJFUlNISVBfTEVWRUxfUE9TVF9BQ0NFU1NfQ0FDSEVfS0VZID0gIm1tLWdldC1tZW1iZXJzaGlwLWxldmVsLXBvc3QtYWNjZXNzIjsKCQoJcHJpdmF0ZSAkZW1haWxTdWJqZWN0ID0gIiI7Cglwcml2YXRlICRlbWFpbEJvZHkgPSAiIjsKCXByaXZhdGUgJHJlZmVyZW5jZUtleSA9ICIiOwoJcHJpdmF0ZSAkbmFtZSA9ICIiOwoJcHJpdmF0ZSAkZGVmYXVsdFByb2R1Y3RJZD0iIjsKCXByaXZhdGUgJGlzRnJlZUZsYWcgPSAiMSI7Cglwcml2YXRlICRpc0RlZmF1bHRGbGFnID0gIjAiOwoJcHJpdmF0ZSAkZGVzY3JpcHRpb24gPSAiIjsKCXByaXZhdGUgJHByb2R1Y3RJZHMgPSBhcnJheSgpOwoJcHJpdmF0ZSAkbGFzdFByb2R1Y3RJZHMgPSBhcnJheSgpOwoJcHJpdmF0ZSAkY2F0ZWdvcnlJZHMgPSBhcnJheSgpOwoJcHJpdmF0ZSAkc3RhdHVzID0gIjEiOwoJcHJpdmF0ZSAkZW1haWxGcm9tSWQgPSAiIjsKCXByaXZhdGUgJGJ1bmRsZXMgPSAiIjsKCXByaXZhdGUgJGV4cGlyZXMgPSAiMCI7Cglwcml2YXRlICRleHBpcmVBbW91bnQgPSAiIjsKCXByaXZhdGUgJGV4cGlyZVBlcmlvZCA9ICIiOwoJcHJpdmF0ZSAkd2VsY29tZUVtYWlsRW5hYmxlZCA9ICIxIjsKCXByaXZhdGUgJHdwUm9sZSA9ICJtbS1pZ25vcmUtcm9sZSI7CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoKSAKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTFMuIiBXSEVSRSBpZD0nIi4kdGhpcy0+aWQuIic7IjsKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCgkJaWYoJHJlc3VsdCkgewoJCQkkdGhpcy0+c2V0RGF0YSgkcmVzdWx0KTsKCQl9CgkJZWxzZSB7CgkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCX0KCX0KCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGZpbmRCeVJlZmVyZW5jZUtleSgka2V5KQoJewoJCSRtZW1iZXJzaGlwID0gbmV3IE1NX01lbWJlcnNoaXBMZXZlbCgpOwoJCgkJaWYoIWVtcHR5KCRrZXkpKQoJCXsKCQkJZ2xvYmFsICR3cGRiOwoJCQkkc3FsID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMUy4iIFdIRVJFIHJlZmVyZW5jZV9rZXk9JyIuJGtleS4iJyI7CgkJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkJCQoJCQlpZigkcmVzdWx0KQoJCQl7CgkJCQkkbWVtYmVyc2hpcC0+c2V0RGF0YSgkcmVzdWx0KTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRtZW1iZXJzaGlwLT5pbnZhbGlkYXRlKCk7CgkJCX0KCQl9CgkKCQlyZXR1cm4gJG1lbWJlcnNoaXA7Cgl9CgkKCS8qKgoJICogRGV0ZXJtaW5lIGlmIGEgcGFydGljdWxhciBtZW1iZXJzaGlwIGxldmVsIGlzIGFzc29jaWF0ZWQgd2l0aCBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkKCSAqIAoJICogQHBhcmFtIHVua25vd24gJG1lbWJlcnNoaXBJZCBJRCBvZiB0aGUgbWVtYmVyc2hpcCBsZXZlbAoJICogQHBhcmFtIHVua25vd24gJGNhdGVnb3J5SWRzIGFycmF5IG9mIGNhdGVnb3J5IElEcwoJICogQHJldHVybiBib29sZWFuIHJldHVybiB0cnVlIGlmIHRoZSBtZW1iZXJzaGlwIGxldmVsIGlzIGFzc29jaWF0ZWQgd2l0aCBvbmUgb3IgbW9yZSBvZiB0aGUgY2F0ZWdvcnkgSURzIHBhc3NlZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGhhc0FjY2Vzc1RvQ2F0ZWdvcnkoJG1lbWJlcnNoaXBJZCwgJGNhdGVnb3J5SWRzKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkkc3FsID0gIlNFTEVDVCBjb3VudCgqKSBhcyB0b3RhbCBGUk9NICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTF9DQVRFR09SSUVTLiIgV0hFUkUgbWVtYmVyc2hpcF9sZXZlbF9pZD0neyRtZW1iZXJzaGlwSWR9JyAiOwoJCSRzcWwgLj0gIiBBTkQgY2F0ZWdvcnlfaWQgSU4gKCIuaW1wbG9kZSgiLCIsICRjYXRlZ29yeUlkcykuIik7IjsKCQkkcmVzdWx0ID0gJHdwZGItPmdldF92YXIoJHNxbCk7CgkJCgkJaWYoJHJlc3VsdCAhPT0gZmFsc2UgJiYgaW50dmFsKCRyZXN1bHQpID4gMCkKCQl7CgkJCXJldHVybiB0cnVlOwoJCX0KCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCRkYXRhKQoJewoJCXRyeSAKCQl7CgkJCSR0aGlzLT5pZCA9ICRkYXRhLT5pZDsKCQkJJHRoaXMtPnJlZmVyZW5jZUtleSA9ICRkYXRhLT5yZWZlcmVuY2Vfa2V5OwoJCQkkdGhpcy0+bmFtZSA9ICRkYXRhLT5uYW1lOwoJCQkkdGhpcy0+d3BSb2xlID0gJGRhdGEtPndwX3JvbGU7CgkJCSR0aGlzLT5pc0ZyZWVGbGFnID0gJGRhdGEtPmlzX2ZyZWU7CgkJCSR0aGlzLT5pc0RlZmF1bHRGbGFnID0gJGRhdGEtPmlzX2RlZmF1bHQ7CgkJCSR0aGlzLT5kZXNjcmlwdGlvbiA9ICRkYXRhLT5kZXNjcmlwdGlvbjsKCQkJJHRoaXMtPmRlZmF1bHRQcm9kdWN0SWQgPSAkZGF0YS0+ZGVmYXVsdF9wcm9kdWN0X2lkOwoJCQkkdGhpcy0+Z2V0QXNzb2NpYXRlZFByb2R1Y3RzKCk7CgkJCSR0aGlzLT5nZXRBc3NvY2lhdGVkQ2F0ZWdvcmllcygpOwoJCQkkdGhpcy0+c3RhdHVzID0gJGRhdGEtPnN0YXR1czsKCQkJJHRoaXMtPmVtYWlsU3ViamVjdCA9ICRkYXRhLT5lbWFpbF9zdWJqZWN0OwoJCQkkdGhpcy0+ZW1haWxCb2R5ID0gJGRhdGEtPmVtYWlsX2JvZHk7CgkJCSR0aGlzLT5lbWFpbEZyb21JZCA9ICRkYXRhLT5lbWFpbF9mcm9tX2lkOwoJCQkkdGhpcy0+ZXhwaXJlQW1vdW50ID0gJGRhdGEtPmV4cGlyZV9hbW91bnQ7CgkJCSR0aGlzLT5leHBpcmVQZXJpb2QgPSAkZGF0YS0+ZXhwaXJlX3BlcmlvZDsKCQkJJHRoaXMtPmV4cGlyZXMgPSAkZGF0YS0+ZXhwaXJlczsKCQkJJHRoaXMtPndlbGNvbWVFbWFpbEVuYWJsZWQgPSAkZGF0YS0+d2VsY29tZV9lbWFpbF9lbmFibGVkOwoJCQkKCQkJcGFyZW50Ojp2YWxpZGF0ZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRleCkgCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBjb21taXREYXRhKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJGRvVXBkYXRlID0gaXNzZXQoJHRoaXMtPmlkKSAmJiAkdGhpcy0+aWQgIT0gIiIgJiYgaW50dmFsKCR0aGlzLT5pZCkgPiAwOwoJCQoJCU1NX1RyYW5zYWN0aW9uOjpiZWdpbigpOwoJCXRyeQoJCXsJCgkJCWlmKCEkZG9VcGRhdGUpIAoJCQl7CgkJCQkkc3FsID0gImluc2VydCBpbnRvICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTFMuIiBzZXQgIiAuCgkJCQkJCSIgICByZWZlcmVuY2Vfa2V5ID0gJyVzJywgIiAuCgkJCSAJCQkiCW5hbWUgPSAnJXMnLCIgLgoJCQkgCQkJIgl3cF9yb2xlID0gJyVzJywiIC4KCQkJIAkJCSIJc3RhdHVzPSclZCcsIiAuCgkJCSAJCQkiCWlzX2ZyZWU9JyVkJywiIC4KCQkJIAkJCSIJaXNfZGVmYXVsdD0nJWQnLCIgLgoJCQkgCQkJIglkZXNjcmlwdGlvbj0nJXMnLCIgLgoJCQkgCQkJIglkZWZhdWx0X3Byb2R1Y3RfaWQ9JyVkJywiIC4KCQkJIAkJCSIJZW1haWxfc3ViamVjdD0nJXMnLCIgLgoJCQkgCQkJIgllbWFpbF9ib2R5PSclcycsIiAuCgkJCSAJCQkiCWVtYWlsX2Zyb21faWQ9JyVkJywiIC4KCQkJIAkJCSIJd2VsY29tZV9lbWFpbF9lbmFibGVkPSclZCcsIiAuCgkJCSAJCQkiCWV4cGlyZV9hbW91bnQ9JyVkJywiIC4KCQkJIAkJCSIJZXhwaXJlX3BlcmlvZD0nJXMnLCIgLgoJCQkgCQkJIglleHBpcmVzPSclZCciIC4KCQkJIAkJCSIiOwoJCQl9CgkJIAllbHNlIAoJCSAJewoJCQkJJHNxbCA9ICJ1cGRhdGUgIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMUy4iIHNldCAiIC4KCQkJCQkJIiAgIHJlZmVyZW5jZV9rZXkgPSAnJXMnLCAiIC4KCQkJIAkJCSIJbmFtZSA9ICclcycsIiAuCgkJCSAJCQkiCXdwX3JvbGUgPSAnJXMnLCIgLgoJCQkgCQkJIglzdGF0dXM9JyVkJywiIC4KCQkgCQkJCSIJaXNfZnJlZT0nJWQnLCIgLgoJCQkgCQkJIglpc19kZWZhdWx0PSclZCcsIiAuCgkJIAkJCQkiCWRlc2NyaXB0aW9uPSclcycsIiAuCgkJIAkJCQkiCWRlZmF1bHRfcHJvZHVjdF9pZD0nJWQnLCIgLgoJCQkgCQkJIgllbWFpbF9zdWJqZWN0PSclcycsIiAuCgkJCSAJCQkiCWVtYWlsX2JvZHk9JyVzJywiIC4KCQkJIAkJCSIJZW1haWxfZnJvbV9pZD0nJWQnLCIgLgoJCQkgCQkJIgl3ZWxjb21lX2VtYWlsX2VuYWJsZWQ9JyVkJywiIC4KCQkJIAkJCSIJZXhwaXJlX2Ftb3VudD0nJWQnLCIgLgoJCQkgCQkJIglleHBpcmVfcGVyaW9kPSclcycsIiAuCgkJCSAJCQkiCWV4cGlyZXM9JyVkJyB3aGVyZSBpZD0neyR0aGlzLT5pZH0nIiAuCgkJCSAJCQkiIjsKCQkgCX0KCQkJCgkJIAkkcHJlcGFyZWRTcWwgPSAkd3BkYi0+cHJlcGFyZSgkc3FsLCAkdGhpcy0+Z2V0UmVmZXJlbmNlS2V5KCksICR0aGlzLT5uYW1lLCAkdGhpcy0+d3BSb2xlLCAkdGhpcy0+c3RhdHVzLCAkdGhpcy0+aXNGcmVlRmxhZywgCgkJIAkJCQkJCQkJCQkkdGhpcy0+aXNEZWZhdWx0RmxhZywgJHRoaXMtPmRlc2NyaXB0aW9uLCAkdGhpcy0+ZGVmYXVsdFByb2R1Y3RJZCwgCgkJIAkJCQkJCQkJCQkkdGhpcy0+ZW1haWxTdWJqZWN0LCAkdGhpcy0+ZW1haWxCb2R5LCAkdGhpcy0+ZW1haWxGcm9tSWQsICR0aGlzLT53ZWxjb21lRW1haWxFbmFibGVkLAoJCSAJCQkJCQkJCQkJJHRoaXMtPmV4cGlyZUFtb3VudCwgJHRoaXMtPmV4cGlyZVBlcmlvZCwgJHRoaXMtPmV4cGlyZXMpOwoJCSAJCQkJCQkJCQkJCQoJCSAJJHJlc3VsdCA9ICR3cGRiLT5xdWVyeSgkcHJlcGFyZWRTcWwpOwoJCSAJCgkJIAlpZigkcmVzdWx0ID09PSBmYWxzZSkKCQkgCXsKCQkgCQlNTV9UcmFuc2FjdGlvbjo6cm9sbGJhY2soKTsKCQkgCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIG1lbWJlcnNoaXAgbGV2ZWwgKHskd3BkYi0+bGFzdF9lcnJvcn0pIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJIAl9CgkJIAkKCQkgCWlmKCEkZG9VcGRhdGUpIAoJCSAJewoJCSAJCSR0aGlzLT5pZCA9ICR3cGRiLT5pbnNlcnRfaWQ7CgkJIAl9CgkJIAkKCQkgCWlmKGludHZhbCgkdGhpcy0+aWQpID4gMCkKCQkgCXsKCQkgCQkvLyBjaGVjayBpZiBhbnkgcHJvZHVjdHMgYXJlIGJlaW5nIHJlbW92ZWQgdGhhdCBoYXZlIGJlZW4gcHVyY2hhc2VkCgkJIAkJZm9yZWFjaCgkdGhpcy0+bGFzdFByb2R1Y3RJZHMgYXMgJG9sZFByb2R1Y3RJZCkKCQkgCQl7CgkJIAkJCWlmKCFpbl9hcnJheSgkb2xkUHJvZHVjdElkLCAkdGhpcy0+cHJvZHVjdElkcykpCgkJIAkJCXsKCQkgCQkJCSRoYXNCZWVuUHVyY2hhc2VkID0gTU1fUHJvZHVjdDo6aGFzQmVlblB1cmNoYXNlZCgkb2xkUHJvZHVjdElkKTsKCQkgCQkJCQoJCSAJCQkJaWYoJGhhc0JlZW5QdXJjaGFzZWQpCgkJIAkJCQl7CgkJIAkJCQkJTU1fVHJhbnNhY3Rpb246OnJvbGxiYWNrKCk7CgkJIAkJCQkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgkb2xkUHJvZHVjdElkKTsKCQkgCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJQcm9kdWN0ICd7JHByb2R1Y3QtPmdldE5hbWUoKX0nIGhhcyBiZWVuIHB1cmNoYXNlZCBhdCBsZWFzdCBvbmNlIGFuZCBjYW5ub3QgYmUgcmVtb3ZlZCBmcm9tIHRoaXMgbWVtYmVyc2hpcCBsZXZlbC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkgCQkJCX0KCQkgCQkJfQoJCSAJCX0KCQkgCQkKCQkgCQkvLyB1cGRhdGUgcHJvZHVjdHMKCQkJIAkkcHJvZHVjdHMgPSAkdGhpcy0+cHJvZHVjdElkczsKCQkJIAlpZihpc19hcnJheSgkcHJvZHVjdHMpKQoJCQkgCXsKCQkJIAkJJHRoaXMtPnJlbW92ZVByb2R1Y3RzKCk7CgkJCSAJCWZvcmVhY2goJHByb2R1Y3RzIGFzICRwcm9kdWN0SWQpCgkJCSAJCXsKCQkJIAkJCSR0aGlzLT5hZGRQcm9kdWN0KCRwcm9kdWN0SWQpOwoJCQkgCQl9CgkJCSAJfQoJCQkgCQoJCQkgCS8vIHVwZGF0ZSBjYXRlZ29yaWVzCgkJCSAJJGNhdGVnb3JpZXMgPSAkdGhpcy0+Y2F0ZWdvcnlJZHM7CgkJCSAJaWYoaXNfYXJyYXkoJGNhdGVnb3JpZXMpKQoJCQkgCXsKCQkJIAkJJHRoaXMtPnJlbW92ZUNhdGVnb3JpZXMoKTsKCQkJIAkJZm9yZWFjaCgkY2F0ZWdvcmllcyBhcyAkY2F0ZWdvcnlJZCkKCQkJIAkJewoJCQkgCQkJJHRoaXMtPmFkZENhdGVnb3J5KCRjYXRlZ29yeUlkKTsKCQkJIAkJfQoJCQkgCX0KCQkgCX0KCQkgCQoJCSAJJHRoaXMtPmFkZEJ1bmRsZXMoKTsKCQl9CgkJY2F0Y2goRXhjZXB0aW9uICRleCkKCQl7CQoJCSAJTU1fVHJhbnNhY3Rpb246OnJvbGxiYWNrKCk7CgkgCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFUlJPUjogdW5hYmxlIHRvIGNyZWF0ZSBtZW1iZXJzaGlwIGxldmVsIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCU1NX1RyYW5zYWN0aW9uOjpjb21taXQoKTsKCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRlbGV0ZSgpCgl7CQoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZighJHRoaXMtPmhhc0Fzc29jaWF0aW9ucygpKQoJCXsKCQkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLiIgV0hFUkUgaWQ9JyVkJyBMSU1JVCAxIjsKCQkJJHJlc3VsdHMgPSAkd3BkYi0+cXVlcnkoJHdwZGItPnByZXBhcmUoJHNxbCwgJHRoaXMtPmlkKSk7CgkJCQoJCQkvLyByZW1vdmUgYnVuZGxlIHJlbGF0aW9uc2hpcHMKCQkJJHRoaXMtPnJlbW92ZUJ1bmRsZXMoKTsKCQkJCgkJCSR0aGlzLT5yZW1vdmVQcm9kdWN0cygpOwoJCQkKCQkJJHRoaXMtPnJlbW92ZUNhdGVnb3JpZXMoKTsKCQkJCgkJCWlmKCRyZXN1bHRzKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBoYXNBc3NvY2lhdGlvbnMoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkvLyBjaGVjayBpZiBtZW1iZXJzaGlwIGxldmVsIGlzIHRoZSBkZWZhdWx0CgkJJHNxbCA9ICJzZWxlY3QgKiBmcm9tICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTFMuIiB3aGVyZSBpZD0neyR0aGlzLT5pZH0nIjsKCQkkcm93ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCgkJaWYoJHJvdy0+aXNfZGVmYXVsdCA9PSAiMSIpIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCWlmKCR0aGlzLT5oYXNTdWJzY3JpYmVycygpKSB7CgkJCXJldHVybiB0cnVlOwoJCX0KCQkKCQkvLyBjaGVjayBpZiBtZW1iZXJzaGlwIGxldmVsIGlzIGFzc29jaWF0ZWQgd2l0aCBvbmUgb3IgbW9yZSBwb3N0cwoJCSRzcWwgPSAiU0VMRUNUIGNvdW50KCopIGFzIHRvdGFsIEZST00gIi5NTV9UQUJMRV9QT1NUU19BQ0NFU1MuIiBXSEVSRSBhY2Nlc3NfdHlwZT0nbWVtYmVyX3R5cGUnIEFORCBhY2Nlc3NfaWQ9J3skdGhpcy0+aWR9JyI7CgkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCQkKCQlpZigkcm93LT50b3RhbCA+IDApIHsKCQkJcmV0dXJuIHRydWU7CQoJCX0KCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBoYXNTdWJzY3JpYmVycygpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCS8vIGNoZWNrIGlmIG1lbWJlcnNoaXAgbGV2ZWwgaXMgYXNzb2NpYXRlZCB3aXRoIG9uZSBvciBtb3JlIHVzZXJzCgkJaWYoJHRoaXMtPmlzVmFsaWQoKSkgewoJCQkkc3FsID0gIlNFTEVDVCBjb3VudCgqKSBBUyB0b3RhbCBGUk9NICIuTU1fVEFCTEVfVVNFUl9EQVRBLiIgV0hFUkUgbWVtYmVyc2hpcF9sZXZlbF9pZD0neyR0aGlzLT5pZH0nIjsKCQkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCQkKCQkJaWYoJHJvdyAmJiAkcm93LT50b3RhbCA+IDApIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJCQoJCXJldHVybiBmYWxzZTsKCX0KCQoJCgkvKiogUFJPRFVDVC1SRUxBVEVEIE1FVEhPRFMgKiovCgkKCXB1YmxpYyBmdW5jdGlvbiBhZGRQcm9kdWN0KCRwcm9kdWN0SWQpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCSR0aGlzLT5yZW1vdmVQcm9kdWN0KCRwcm9kdWN0SWQpOwoJCSRzcWwgPSAiaW5zZXJ0IGludG8gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMX1BST0RVQ1RTLiIgc2V0IAoJCQkJCW1lbWJlcnNoaXBfaWQ9J3skdGhpcy0+aWR9JywgCgkJCQkJcHJvZHVjdF9pZD0neyRwcm9kdWN0SWR9JwoJCQkJCSI7CgkJJHJlcyA9ICR3cGRiLT5xdWVyeSgkc3FsKTsKCQlpZiAoJHJlcyAhPT0gZmFsc2UpCgkJewoJCQlpZiAoIWluX2FycmF5KCRwcm9kdWN0SWQsJHRoaXMtPnByb2R1Y3RJZHMpKQoJCQl7CgkJCQkkdGhpcy0+cHJvZHVjdElkc1tdID0gJHByb2R1Y3RJZDsKCQkJfQoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlbW92ZVByb2R1Y3QoJHByb2R1Y3RJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxfUFJPRFVDVFMuIiB3aGVyZSBtZW1iZXJzaGlwX2lkPSd7JHRoaXMtPmlkfScgQU5EIHByb2R1Y3RfaWQ9J3skcHJvZHVjdElkfSc7IjsKCQkkd3BkYi0+cXVlcnkoJHNxbCk7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gcmVtb3ZlUHJvZHVjdHMoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkkc3FsID0gImRlbGV0ZSBmcm9tICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTF9QUk9EVUNUUy4iIHdoZXJlIG1lbWJlcnNoaXBfaWQ9J3skdGhpcy0+aWR9JyI7CgkJJHdwZGItPnF1ZXJ5KCRzcWwpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGdldEFzc29jaWF0ZWRQcm9kdWN0cygpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCSRzcWwgPSAic2VsZWN0IHByb2R1Y3RfaWQgYXMgaWQgZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxfUFJPRFVDVFMuIiBtdHAgd2hlcmUgbWVtYmVyc2hpcF9pZD0neyR0aGlzLT5pZH0nICI7CgkJCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkKCQkkcHJvZHVjdHMgPSBhcnJheSgpOwoJCWlmKGlzX2FycmF5KCRyb3dzKSl7CgkJCWZvcmVhY2goJHJvd3MgYXMgJHByb2R1Y3QpCgkJCXsKCQkJCSRwcm9kdWN0c1skcHJvZHVjdC0+aWRdID0gJHByb2R1Y3QtPmlkOwoJCQl9CgkJfQoJCSR0aGlzLT5zZXRQcm9kdWN0SWRzKCRwcm9kdWN0cyk7Cgl9CgkKCQoJLyoqIENBVEVHT1JZLVJFTEFURUQgTUVUSE9EUyAqKi8KCQoJcHVibGljIGZ1bmN0aW9uIGFkZENhdGVnb3J5KCRjYXRlZ29yeUlkKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkkdGhpcy0+cmVtb3ZlUHJvZHVjdCgkY2F0ZWdvcnlJZCk7CgkJJHNxbCA9ICJpbnNlcnQgaW50byAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxfQ0FURUdPUklFUy4iIHNldCAKCQkJCQltZW1iZXJzaGlwX2xldmVsX2lkPSd7JHRoaXMtPmlkfScsIAoJCQkJCWNhdGVnb3J5X2lkPSd7JGNhdGVnb3J5SWR9JwoJCQkJCSI7CgkJJHJlcyA9ICR3cGRiLT5xdWVyeSgkc3FsKTsKCQlpZiAoJHJlcyAhPT0gZmFsc2UpCgkJewoJCQlpZiAoIWluX2FycmF5KCRjYXRlZ29yeUlkLCAkdGhpcy0+Y2F0ZWdvcnlJZHMpKQoJCQl7CgkJCQkkdGhpcy0+Y2F0ZWdvcnlJZHNbXSA9ICRjYXRlZ29yeUlkOwoJCQl9CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQ2F0ZWdvcnkoJGNhdGVnb3J5SWQpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCSRzcWwgPSAiZGVsZXRlIGZyb20gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMX0NBVEVHT1JJRVMuIiB3aGVyZSBtZW1iZXJzaGlwX2xldmVsX2lkPSd7JHRoaXMtPmlkfScgQU5EIGNhdGVnb3J5X2lkPSd7JGNhdGVnb3J5SWR9JzsiOwoJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiByZW1vdmVDYXRlZ29yaWVzKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxfQ0FURUdPUklFUy4iIHdoZXJlIG1lbWJlcnNoaXBfbGV2ZWxfaWQ9J3skdGhpcy0+aWR9JyI7CgkJJHdwZGItPnF1ZXJ5KCRzcWwpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGdldEFzc29jaWF0ZWRDYXRlZ29yaWVzKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJJHNxbCA9ICJzZWxlY3QgY2F0ZWdvcnlfaWQgYXMgaWQgZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxfQ0FURUdPUklFUy4iIG10cCB3aGVyZSBtZW1iZXJzaGlwX2xldmVsX2lkPSd7JHRoaXMtPmlkfScgIjsKCQkKCQkkcm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQoJCSRjYXRlZ29yaWVzID0gYXJyYXkoKTsKCQlpZihpc19hcnJheSgkcm93cykpewoJCQlmb3JlYWNoKCRyb3dzIGFzICRjYXRlZ29yeSkKCQkJewoJCQkJJGNhdGVnb3JpZXNbJGNhdGVnb3J5LT5pZF0gPSAkY2F0ZWdvcnktPmlkOwoJCQl9CgkJfQoJCSR0aGlzLT5zZXRDYXRlZ29yeUlkcygkY2F0ZWdvcmllcyk7Cgl9CgkKCQoJLyoqIEJVTkRMRS1SRUxBVEVEIE1FVEhPRFMgKiovCgkKCXByaXZhdGUgZnVuY3Rpb24gYWRkQnVuZGxlcygpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCSR0aGlzLT5idW5kbGVzID0gKCFpc19hcnJheSgkdGhpcy0+YnVuZGxlcykpID8gYXJyYXkoJHRoaXMtPmJ1bmRsZXMpIDogJHRoaXMtPmJ1bmRsZXM7CgkJCgkJJHRoaXMtPnJlbW92ZUJ1bmRsZXMoKTsKCQkKCQlpZighZW1wdHkoJHRoaXMtPmJ1bmRsZXMpICYmIGNvdW50KCR0aGlzLT5idW5kbGVzKSA+IDApIAoJCXsKCQkJZm9yZWFjaCgkdGhpcy0+YnVuZGxlcyBhcyAkYnVuZGxlSWQpCgkJCXsKCQkJCWlmKCRidW5kbGVJZCAhPSAibnVsbCIpIAoJCQkJewoJCQkJCSRzcWwgPSAiaW5zZXJ0IGludG8gIi5NTV9UQUJMRV9BUFBMSUVEX0JVTkRMRVMuIiBzZXQgIiAuCgkJCQkJCQkiCWFjY2Vzc190eXBlPSciLk1NX0FwcGxpZWRCdW5kbGU6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQLiInLCIgLgoJCQkJCQkJIglidW5kbGVfaWQ9J3skYnVuZGxlSWR9JywiIC4KCQkJCQkJCSIJYWNjZXNzX3R5cGVfaWQ9J3skdGhpcy0+aWR9JyAiOwoJCQkJCQoJCQkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCQkJCX0KCQkJfQoJCX0KCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiByZW1vdmVCdW5kbGVzKCkgCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCWlmKGlzc2V0KCR0aGlzLT5pZCkpIAoJCXsKCQkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUy4iIHdoZXJlIGFjY2Vzc190eXBlPSciLk1NX0FwcGxpZWRCdW5kbGU6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQLiInIGFuZCBhY2Nlc3NfdHlwZV9pZD0neyR0aGlzLT5pZH0nIjsKCQkJJHdwZGItPnF1ZXJ5KCRzcWwpOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEJ1bmRsZXMoKQoJewoJCSRidW5kbGVzID0gYXJyYXkoKTsKCQkKCQlpZigkdGhpcy0+YnVuZGxlcyA9PSAiIikKCQl7CgkJCWdsb2JhbCAkd3BkYjsKCQkJCgkJCSRzcWwgPSAic2VsZWN0IGEuKiBmcm9tICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTLiIgYXQsICIuTU1fVEFCTEVfQlVORExFUy4iIGEgd2hlcmUgYXQuYWNjZXNzX3R5cGU9JyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX01FTUJFUlNISVAuIicgYW5kIGF0LmFjY2Vzc190eXBlX2lkPSd7JHRoaXMtPmlkfScgYW5kIGF0LmJ1bmRsZV9pZD1hLmlkIjsKCQkJCQoJCQkkcm93cz0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQkKCQkJaWYoISRyb3dzKSB7CgkJCQlyZXR1cm4gYXJyYXkoKTsKCQkJfQoJCQkKCQkJaWYoY291bnQoJHJvd3MpID4gMCkKCQkJewoJCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KSAKCQkJCXsKCQkJCQkkYnVuZGxlc1skcm93LT5pZF0gPSAkcm93LT5uYW1lOwoJCQkJfQoJCQl9CgkJCQoJCQkkdGhpcy0+YnVuZGxlcyA9ICRidW5kbGVzOwoJCX0KCQkKCQlyZXR1cm4gJGJ1bmRsZXM7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZW5kV2VsY29tZUVtYWlsKCR1c2VySWQpCgl7ICAgCgkJaWYoJHRoaXMtPmRvU2VuZFdlbGNvbWVFbWFpbCgpKQoJCXsKCQkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdXNlcklkKTsKCQkJJGVtcGxveWVlID0gbmV3IE1NX0VtcGxveWVlKCR0aGlzLT5lbWFpbEZyb21JZCk7CgkJCSRjb250ZXh0ID0gbmV3IE1NX0NvbnRleHQoJHVzZXIsICRlbXBsb3llZSk7CgkJCQoJCQkkZW1haWwgPSBuZXcgTU1fRW1haWwoKTsKCQkJJGVtYWlsLT5zZXRDb250ZXh0KCRjb250ZXh0KTsKCQkJJGVtYWlsLT5zZXRTdWJqZWN0KCR0aGlzLT5lbWFpbFN1YmplY3QpOwoJCQkkZW1haWwtPnNldEJvZHkoJHRoaXMtPmVtYWlsQm9keSk7CgkJCSRlbWFpbC0+c2V0VG9OYW1lKCR1c2VyLT5nZXRGaXJzdE5hbWUoKSk7CgkJCSRlbWFpbC0+c2V0VG9BZGRyZXNzKCR1c2VyLT5nZXRFbWFpbCgpKTsKCQkJJGVtYWlsLT5zZXRGcm9tTmFtZSgkZW1wbG95ZWUtPmdldERpc3BsYXlOYW1lKCkpOwoJCQkkZW1haWwtPnNldEZyb21BZGRyZXNzKCRlbXBsb3llZS0+Z2V0RW1haWwoKSk7CgkJCQoJCQkkcmVzcG9uc2UgPSAkZW1haWwtPnNlbmQoKTsKCQkJCgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIldlbGNvbWUgZW1haWwgbm90IGVuYWJsZWQgZm9yIHRoaXMgbWVtYmVyc2hpcCBsZXZlbCIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRBdmFpbGFibGVNZW1iZXJzaGlwTGV2ZWxzKCRjb3JlX3BhZ2VfdHlwZV9pZCwgJHBhZ2VfaWQpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRzcWwgPSAic2VsZWN0ICogZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLiIgbXQgd2hlcmUgbXQuaWQgTk9UIElOIChzZWxlY3QgcmVmX2lkIGZyb20gIi5NTV9UQUJMRV9DT1JFX1BBR0VTLiIgY3Agd2hlcmUgY29yZV9wYWdlX3R5cGVfaWQ9J3skY29yZV9wYWdlX3R5cGVfaWR9JyBhbmQgcmVmX3R5cGU9J21lbWJlcl90eXBlJyBhbmQgcGFnZV9pZCE9J3skcGFnZV9pZH0nIGFuZCByZWZfaWQ+MCkiOwoJCXJldHVybiAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7Cgl9CgkKCQoJLyoqIEdFVFRFUlMvU0VUVEVSUyAqKi8KCQoJcHVibGljIGZ1bmN0aW9uIGdldFJlZmVyZW5jZUtleSgpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCgkJaWYoZW1wdHkoJHRoaXMtPnJlZmVyZW5jZUtleSkpCgkJewoJCQkvLyBnZW5lcmF0ZSBhIHJhbmRvbSA2IGFscGhudW1lcmljIHN0cmluZwoJCQlkbyB7CgkJCQkkbmV3S2V5ID0gIm0iOwoJCQkJZm9yICgkaT0wOyAkaTw1OyAkaSsrKQoJCQkJewoJCQkJCSR0eXBlID0gcmFuZCgxLDMpOwoJCQkJCXN3aXRjaCAoJHR5cGUpIAoJCQkJCXsKCQkJCQkJY2FzZSAxOiAvL251bWVyaWMKCQkJCQkJCSRuZXdLZXkuPWNocihyYW5kKDQ4LDU3KSk7CgkJCQkJCQlicmVhazsKCQkJCQkJY2FzZSAyOiAvL3VwcGVyIGFscGhhCgkJCQkJCQkkbmV3S2V5Lj1jaHIocmFuZCg2NSw5MCkpOwoJCQkJCQkJYnJlYWs7CgkJCQkJCWNhc2UgMzogLy9sb3dlciBhbHBoYQoJCQkJCQlkZWZhdWx0OgoJCQkJCQkJJG5ld0tleS49Y2hyKHJhbmQoOTcsMTIyKSk7CgkJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCQkJCgkJCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkd3BkYi0+cHJlcGFyZSgic2VsZWN0ICogZnJvbSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLiIgd2hlcmUgcmVmZXJlbmNlX2tleT0nJXMnIiwgJG5ld0tleSkpOwoJCQl9IHdoaWxlIChjb3VudCgkcmVzdWx0cykgPiAwKTsgLy9pdGVyYXRlIHdoaWxlIGtleSBpcyBub3QgdW5pcXVlLgoJCQkJCQoJCQkkdGhpcy0+cmVmZXJlbmNlS2V5ID0gJG5ld0tleTsKCQkJCQkKCQkJLy8gc2F2ZSByZWZlcmVuY2Uga2V5CgkJCWlmKCR0aGlzLT5pZCA+IDApCgkJCXsKCQkJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCJpZCIgPT4gJHRoaXMtPmlkKTsKCQkJCSRkYXRhID0gYXJyYXkoInJlZmVyZW5jZV9rZXkiPT4kdGhpcy0+cmVmZXJlbmNlS2V5KTsKCQkJCSRyZXN1bHQgPSAkd3BkYi0+dXBkYXRlKE1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLCAkZGF0YSwgJHdoZXJlQ2xhdXNlKTsKCQkJCQkKCQkJCWlmKCRyZXN1bHQgPT09IGZhbHNlKQoJCQkJewoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIHNhdmluZyBtZW1iZXJzaGlwIGxldmVsIHJlZmVyZW5jZSBrZXk6ICIuJHdwZGItPmxhc3RfZXJyb3IsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQkJfQoJCQl9CgkJfQoJCgkJcmV0dXJuICR0aGlzLT5yZWZlcmVuY2VLZXk7Cgl9CgkJCQkKCXB1YmxpYyBmdW5jdGlvbiBzZXRXZWxjb21lRW1haWxFbmFibGVkKCRzdHIpIAoJewoJCSR0aGlzLT53ZWxjb21lRW1haWxFbmFibGVkID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRvU2VuZFdlbGNvbWVFbWFpbCgpCgl7CgkJcmV0dXJuICgkdGhpcy0+d2VsY29tZUVtYWlsRW5hYmxlZCA9PSAiMSIpID8gdHJ1ZSA6IGZhbHNlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0TmFtZSgkc3RyKSAKCXsKCQkkdGhpcy0+bmFtZSA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXROYW1lKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm5hbWU7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRXUFJvbGUoJHN0cikgCgl7CgkJJHRoaXMtPndwUm9sZSA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRXUFJvbGUoKQoJewoJCXJldHVybiAkdGhpcy0+d3BSb2xlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0SXNGcmVlKCRzdHIpIAoJewoJCSR0aGlzLT5pc0ZyZWVGbGFnID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGlzRnJlZSgpCgl7CgkJaWYoJHRoaXMtPmlzRnJlZUZsYWcgPT0gIjEiKSAKCQl7CgkJCXJldHVybiB0cnVlOwoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGRvZXNFeHBpcmUoKQoJewoJCWlmKCR0aGlzLT5leHBpcmVzID09ICIxIikKCQl7CgkJCXJldHVybiB0cnVlOwoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRFeHBpcmVzKCRzdHIpCgl7CgkJJHRoaXMtPmV4cGlyZXMgPSAkc3RyOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RXhwaXJlcygpCgl7CgkJcmV0dXJuICR0aGlzLT5leHBpcmVzOwoJfQogCQoJcHVibGljIGZ1bmN0aW9uIHNldElzRGVmYXVsdCgkc3RyKSAKCXsKCQkkdGhpcy0+aXNEZWZhdWx0RmxhZyA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBpc0RlZmF1bHQoKQoJewoJCXJldHVybiAkdGhpcy0+aXNEZWZhdWx0RmxhZzsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEV4cGlyZVBlcmlvZCgkc3RyKSAKCXsKCQkkdGhpcy0+ZXhwaXJlUGVyaW9kID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEV4cGlyZVBlcmlvZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5leHBpcmVQZXJpb2Q7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRFeHBpcmVBbW91bnQoJHN0cikgCgl7CgkJJHRoaXMtPmV4cGlyZUFtb3VudCA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRFeHBpcmVBbW91bnQoKQoJewoJCXJldHVybiAkdGhpcy0+ZXhwaXJlQW1vdW50OwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RXhwaXJhdGlvbkRhdGUoJHN0YXJ0RGF0ZSkKCXsKCQkkZXhwaXJhdGlvbkRhdGUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkKCQlpZigkdGhpcy0+ZG9lc0V4cGlyZSgpKQoJCXsKCQkJJGFtb3VudCA9ICR0aGlzLT5nZXRFeHBpcmVBbW91bnQoKTsKCQkJJHBlcmlvZCA9ICR0aGlzLT5nZXRFeHBpcmVQZXJpb2QoKTsKCQkJCgkJCXN3aXRjaCgkcGVyaW9kKQoJCQl7CgkJCQljYXNlICJkYXlzIjoKCQkJCQkkZXhwaXJhdGlvbkRhdGUgPSBEYXRlKCJZLW0tZCBIOmk6cyIsIHN0cnRvdGltZSgkc3RhcnREYXRlLiIgKyAiLiRhbW91bnQuIiBkYXkiKSk7CgkJCQkJYnJlYWs7CgkJCQkJCQoJCQkJY2FzZSAid2Vla3MiOgoJCQkJCSRleHBpcmF0aW9uRGF0ZSA9IERhdGUoIlktbS1kIEg6aTpzIiwgc3RydG90aW1lKCRzdGFydERhdGUuIiArICIuJGFtb3VudC4iIHdlZWsiKSk7CgkJCQkJYnJlYWs7CgkJCQkJCQoJCQkJY2FzZSAibW9udGhzIjoKCQkJCQkkZXhwaXJhdGlvbkRhdGUgPSBEYXRlKCJZLW0tZCBIOmk6cyIsIHN0cnRvdGltZSgkc3RhcnREYXRlLiIgKyAiLiRhbW91bnQuIiBtb250aCIpKTsKCQkJCQlicmVhazsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gJGV4cGlyYXRpb25EYXRlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0RGVzY3JpcHRpb24oJHN0cikgCgl7CgkJJHRoaXMtPmRlc2NyaXB0aW9uID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmRlc2NyaXB0aW9uOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0UHJvZHVjdElkcygkcHJvZHVjdElkcykgCgl7CgkJaWYoaXNfYXJyYXkoJHByb2R1Y3RJZHMpKQoJCXsJCgkJCSR0aGlzLT5sYXN0UHJvZHVjdElkcyA9ICR0aGlzLT5wcm9kdWN0SWRzOwoJCQkkdGhpcy0+cHJvZHVjdElkcyA9ICRwcm9kdWN0SWRzOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFByb2R1Y3RJZHMoKQoJewoJCXJldHVybiAkdGhpcy0+cHJvZHVjdElkczsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldENhdGVnb3J5SWRzKCRjYXRlZ29yeUlkcykgCgl7CgkJaWYoaXNfYXJyYXkoJGNhdGVnb3J5SWRzKSkKCQl7CQoJCQkkdGhpcy0+Y2F0ZWdvcnlJZHMgPSAkY2F0ZWdvcnlJZHM7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlJZHMoKQoJewoJCXJldHVybiAkdGhpcy0+Y2F0ZWdvcnlJZHM7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRTdGF0dXMoJHN0cikgCgl7CgkJJHRoaXMtPnN0YXR1cyA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRTdGF0dXMoKQoJewoJCXJldHVybiAkdGhpcy0+c3RhdHVzOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gaXNBY3RpdmUoKQoJewoJCXJldHVybiAoJHRoaXMtPnN0YXR1cyA9PSAiMSIpID8gdHJ1ZSA6IGZhbHNlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGVmYXVsdFByb2R1Y3QoKQoJewoJCXJldHVybiAkdGhpcy0+ZGVmYXVsdFByb2R1Y3RJZDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldERlZmF1bHRQcm9kdWN0KCRzdHIpIAoJewoJCSR0aGlzLT5kZWZhdWx0UHJvZHVjdElkID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFN0YXR1c05hbWUoKQoJewoJCXJldHVybiBNTV9TdGF0dXM6OmdldE5hbWUoJHRoaXMtPnN0YXR1cyk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRFbWFpbFN1YmplY3QoJHN0cikgCgl7CgkJJHRoaXMtPmVtYWlsU3ViamVjdCA9ICRzdHI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRFbWFpbFN1YmplY3QoKQoJewoJCWlmKCFlbXB0eSgkdGhpcy0+ZW1haWxTdWJqZWN0KSkKCQl7CgkJCXJldHVybiAkdGhpcy0+ZW1haWxTdWJqZWN0OwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gTU1fTWVtYmVyc2hpcExldmVsOjokREZMVF9FTUFJTF9TVUJKRUNUOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIHNldEVtYWlsQm9keSgkc3RyKSAKCXsKCQkkdGhpcy0+ZW1haWxCb2R5ID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEVtYWlsQm9keSgpCgl7CgkJaWYoIWVtcHR5KCR0aGlzLT5lbWFpbEJvZHkpKQoJCXsKCQkJcmV0dXJuICR0aGlzLT5lbWFpbEJvZHk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBNTV9NZW1iZXJzaGlwTGV2ZWw6OiRERkxUX0VNQUlMX0JPRFk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0RW1haWxGcm9tSWQoJHN0cikgCgl7CgkJJHRoaXMtPmVtYWlsRnJvbUlkID0gJHN0cjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEVtYWlsRnJvbUlkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmVtYWlsRnJvbUlkOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0QnVuZGxlcygkc3RyKSAKCXsKCQkkdGhpcy0+YnVuZGxlcyA9ICRzdHI7Cgl9CgkKCQoJLyoqIFVUSUxJVEVTICoqLwoJCgkvKioKCSAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGRlZmF1bHQgbWVtYmVyc2hpcCBsZXZlbAoJICoKCSAqIEByZXR1cm4gTU1fTWVtYmVyc2hpcExldmVsIHRoZSBkZWZhdWx0IG1lbWJlcnNoaXAgbGV2ZWwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXREZWZhdWx0TWVtYmVyc2hpcCgpCgl7CgkJJGRmbHRNZW1iZXJzaGlwID0gbmV3IE1NX01lbWJlcnNoaXBMZXZlbCgpOwoJCgkJZ2xvYmFsICR3cGRiOwoJCgkJJHNxbCA9ICJTRUxFQ1QgaWQgRlJPTSAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLiIgV0hFUkUgaXNfZGVmYXVsdD0nMScgTElNSVQgMTsiOwoJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQoJCWlmKCRyZXN1bHQpCgkJewoJCQkkZGZsdE1lbWJlcnNoaXAgPSBuZXcgTU1fTWVtYmVyc2hpcExldmVsKCRyZXN1bHQtPmlkKTsKCQl9CgkKCQlyZXR1cm4gJGRmbHRNZW1iZXJzaGlwOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldE1lbWJlcnNoaXBMZXZlbFBvc3RBY2Nlc3MoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkY2FjaGVLZXkgPSBzZWxmOjokR0VUX01FTUJFUlNISVBfTEVWRUxfUE9TVF9BQ0NFU1NfQ0FDSEVfS0VZOwoJCSRjYWNoZWQgPSBmYWxzZTsKCQkkdHlwZXMgPSBNTV9PYmplY3RDYWNoZTo6Z2V0KCRjYWNoZUtleSwkY2FjaGVkKTsKCQkJCgkJaWYgKCEkY2FjaGVkIHx8ICFpc19hcnJheSgkdHlwZXMpKQoJCXsKCSAJCSRzcWwgPSAiU0VMRUNUIG10LmlkLCBtdC5uYW1lIEZST00gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMUy4iIG10LCAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHBhIAoJIAkJCQkJV0hFUkUgCgkgCQkJCQkJbXQuc3RhdHVzID0nMScgYW5kIAoJIAkJCQkJCW10LmlkID0gcGEuYWNjZXNzX2lkIGFuZCAKCSAJCQkJCQlwYS5hY2Nlc3NfdHlwZT0nbWVtYmVyX3R5cGUnCgkgCQkJCQkJIjsKCSAKCSAJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJIAkJCgkgCQkkdHlwZXMgPSBhcnJheSgpOwoJIAkJaWYoJHJvd3M9PT1mYWxzZSkKCSAJCXsKCSAJCQlyZXR1cm4gJHR5cGVzOwoJIAkJfQoJIAkJaWYoJHJvd3MpIAoJIAkJewoJCSAJCWZvcmVhY2goJHJvd3MgYXMgJHJvdykKCQkJCXsKCQkJCQkkdHlwZXNbJHJvdy0+aWRdID0gJHJvdy0+bmFtZTsKCQkJCX0KCSAJCX0KIAkJCU1NX09iamVjdENhY2hlOjpzZXQoc2VsZjo6JEdFVF9NRU1CRVJTSElQX0xFVkVMX1BPU1RfQUNDRVNTX0NBQ0hFX0tFWSwkdHlwZXMpOwoJCX0KIAkJCiAJCXJldHVybiAkdHlwZXM7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0TWVtYmVyc2hpcExldmVsc0xpc3QoJGFjdGl2ZVN0YXR1c09ubHk9ZmFsc2UsICRmaWx0ZXJCeVN1YlR5cGU9IiIpCgl7CgkJZ2xvYmFsICR3cGRiOwogCQlnbG9iYWwgJGN1cnJlbnRfdXNlcjsKIAkJCiAJCSRjYWNoZUtleSA9IHNlbGY6OiRHRVRfTUVNQkVSU0hJUF9MRVZFTFNfQ0FDSEVfS0VZLiJ8eyRhY3RpdmVTdGF0dXNPbmx5fXwiLihpc3NldCgkY3VycmVudF91c2VyLT5JRCk/JGN1cnJlbnRfdXNlci0+SUQ6MCkuInx7JGZpbHRlckJ5U3ViVHlwZX0iOwogCQkkY2FjaGVkID0gZmFsc2U7CiAJCSR0eXBlcyA9IE1NX09iamVjdENhY2hlOjpnZXQoJGNhY2hlS2V5LCRjYWNoZWQpOwogCQkKIAkJaWYgKCEkY2FjaGVkIHx8ICFpc19hcnJheSgkdHlwZXMpKQogCQl7CgkgCQkkdHlwZXMgPSBhcnJheSgpOwoJIAkJJHdoZXJlU3FsID0gYXJyYXkoKTsKCSAJCQoJIAkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfTUVNQkVSU0hJUF9MRVZFTFM7CgkgCQkKCSAJCWlmKCRhY3RpdmVTdGF0dXNPbmx5KSAKCSAJCXsKCSAJCQlhcnJheV9wdXNoKCR3aGVyZVNxbCwgInN0YXR1cyA9JzEnIik7CgkgCQl9CgkgCQkKCSAJCWlmKCRmaWx0ZXJCeVN1YlR5cGUgPT0gc2VsZjo6JFNVQl9UWVBFX0ZSRUUpIAoJIAkJewoJIAkJCWFycmF5X3B1c2goJHdoZXJlU3FsLCAiaXNfZnJlZSA9ICcxJyIpOwoJIAkJfQoJIAkJZWxzZSBpZigkZmlsdGVyQnlTdWJUeXBlID09IHNlbGY6OiRTVUJfVFlQRV9QQUlEKSAKCSAJCXsKCSAJCQlhcnJheV9wdXNoKCR3aGVyZVNxbCwgImlzX2ZyZWUgIT0gJzEnIik7CgkgCQl9CgkgCQkKCSAJCWlmKGNvdW50KCR3aGVyZVNxbCkgPiAwKQoJIAkJewoJIAkJCSRzcWwgLj0gIiBXSEVSRSAiLmpvaW4oIiBBTkQgIiwgJHdoZXJlU3FsKTsKCSAJCX0KCSAJCQoJIAkJJHNxbCAuPSAiIG9yZGVyIGJ5IG5hbWUgYXNjICI7CgkgCQkKCSAJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJIAkJCgkgCQlpZigkcm93cz09PWZhbHNlKQoJIAkJewoJIAkJCXJldHVybiAkdHlwZXM7CgkgCQl9CgkgCQkKCSAJCWlmKCRyb3dzKSAKCSAJCXsKCSAJCQlmb3JlYWNoKCRyb3dzIGFzICRyb3cpCgkgCQkJewoJIAkJCQkkdHlwZXNbJHJvdy0+aWRdID0gJHJvdy0+bmFtZTsKCSAJCQl9CgkgCQkJCgkgCQkJLy8gZGV0ZXJtaW5lIGlmIGxpc3Qgc2hvdWxkIGJlIGZpbHRlcmVkIGZvciB0aGUgY3VycmVudCBlbXBsb3llZQoJIAkJCWlmKGlzX2FkbWluKCkgJiYgaXNzZXQoJGN1cnJlbnRfdXNlci0+SUQpKQoJIAkJCXsKCSAJCQkJJGVtcGxveWVlID0gTU1fRW1wbG95ZWU6OmZpbmRCeVVzZXJJZCgkY3VycmVudF91c2VyLT5JRCk7CgkgCQkJCWlmKCRlbXBsb3llZS0+aXNWYWxpZCgpKQoJIAkJCQl7CgkgCQkJCQkkZmlsdGVyZWRMaXN0ID0gYXJyYXkoKTsKCSAJCQkKCSAJCQkJCWZvcmVhY2goJHR5cGVzIGFzICRpZD0+JG5hbWUpCgkgCQkJCQl7CgkgCQkJCQkJaWYoJGVtcGxveWVlLT5oYXNBY2Nlc3MoTU1fRW1wbG95ZWU6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQLCAkaWQpKQoJIAkJCQkJCXsKCSAJCQkJCQkJJGZpbHRlcmVkTGlzdFskaWRdID0gJG5hbWU7CgkgCQkJCQkJfQoJIAkJCQkJfQoJIAkJCQoJIAkJCQkJJHR5cGVzID0gJGZpbHRlcmVkTGlzdDsKCSAJCQkJfQoJIAkJCX0KCSAJCX0KCSAJCU1NX09iamVjdENhY2hlOjpzZXQoJGNhY2hlS2V5LCAkdHlwZXMpOwogCQl9CiAJCQogCQlyZXR1cm4gJHR5cGVzOwoJfQp9Cg==', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(166, 'chargifyservice', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(167, 'abstractform', 'Y2xhc3MgTU1fQWJzdHJhY3RGb3JtCnsKCXB1YmxpYyBzdGF0aWMgJFRZUEVfTE9HSU4gPSAibG9naW4iOwoJcHVibGljIHN0YXRpYyAkVFlQRV9GT1JHT1RfUEFTU1dPUkQgPSAiZm9yZ290cGFzc3dvcmQiOwoJcHVibGljIHN0YXRpYyAkVFlQRV9SRVNFVF9QQVNTV09SRCA9ICJyZXNldHBhc3N3b3JkIjsKCXB1YmxpYyBzdGF0aWMgJFRZUEVfQ0hFQ0tPVVQgPSAiY2hlY2tvdXQiOwoJcHVibGljIHN0YXRpYyAkVFlQRV9NWUFDQ09VTlQgPSAibXlhY2NvdW50IjsKCXB1YmxpYyBzdGF0aWMgJFRZUEVfMUNMSUNLX1BVUkNIQVNFID0gIjFjbGlja3B1cmNoYXNlIjsKCXB1YmxpYyBzdGF0aWMgJFRZUEVfQ1VTVE9NID0gImN1c3RvbSI7CgkKCQoJcHJvdGVjdGVkICRpc1ZhbGlkID0gZmFsc2U7CglwdWJsaWMgJGVycm9yID0gIiI7CgkKCQoJLy8gYWJzdHJhY3QgZnVuY3Rpb25zCglwdWJsaWMgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHsgfQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRm9ybUhlYWRlcigpIHsgfQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRm9ybUZvb3RlcigpIHsgfQoJcHVibGljIGZ1bmN0aW9uIG1tX2Zvcm1fc2VjdGlvbigkY29udGVudCwgJGF0dHMsICRjb2RlKSB7IH0gCglwdWJsaWMgZnVuY3Rpb24gbW1fZm9ybV9maWVsZCgkY29udGVudCwgJGF0dHMsICRjb2RlKSB7IH0KCXB1YmxpYyBmdW5jdGlvbiBtbV9mb3JtX2RhdGEoJGNvbnRlbnQsICRhdHRzLCAkY29kZSkgeyB9CglwdWJsaWMgZnVuY3Rpb24gbW1fZm9ybV9tZXNzYWdlKCRjb250ZW50LCAkYXR0cywgJGNvZGUpIHsgfQoJcHVibGljIGZ1bmN0aW9uIG1tX2Zvcm1fYnV0dG9uKCRjb250ZW50LCAkYXR0cywgJGNvZGUpIHsgfQoJCgkKCS8qKgoJICogVGhpcyBmYWN0b3J5IGZ1bmN0aW9uIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlIGluc3RhbmNlIG9mIHRoZSBNTV9BYnN0cmFjdEZvcm0gY2xhc3MgYmFzZWQgb24gCgkgKiB0aGUgdHlwZSBwYXNzZWQuCgkgKiBAcGFyYW0gU3RyaW5nICR0eXBlIEluZGljYXRlcyB0aGUgdHlwZSBvZiBmb3JtIChpLmUuIGNoZWNrb3V0LCBsb2dpbiwgY3VzdG9tZmllbGQsIGV0YykKCSAqIEBwYXJhbSBBcnJheSAkcGFyYW1zIAoJICogQHJldHVybiBhcHByb3ByaWF0ZSBpbnN0YW5jZSBvZiBNTV9BYnN0cmFjdEZvcm0gY2xhc3MgYmFzZWQgb24gdGhlIHR5cGUgcGFyYW1ldGVyCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0Rm9ybSgkdHlwZSwgJHBhcmFtcykKCXsKCQlzd2l0Y2goc3RydG9sb3dlcigkdHlwZSkpCgkJewoJCQljYXNlIHNlbGY6OiRUWVBFX0NIRUNLT1VUOgoJCQkJcmV0dXJuIG5ldyBNTV9DaGVja291dEZvcm0oJHBhcmFtcyk7CgkJCQlicmVhazsKCQkJCQoJCQljYXNlIHNlbGY6OiRUWVBFX01ZQUNDT1VOVDoKCQkJCXJldHVybiBuZXcgTU1fTXlBY2NvdW50Rm9ybSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCQkJCgkJCWNhc2Ugc2VsZjo6JFRZUEVfTE9HSU46CgkJCQlyZXR1cm4gbmV3IE1NX0xvZ2luRm9ybSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCQkJCgkJCWNhc2Ugc2VsZjo6JFRZUEVfRk9SR09UX1BBU1NXT1JEOgoJCQkJcmV0dXJuIG5ldyBNTV9Gb3Jnb3RQYXNzd29yZEZvcm0oJHBhcmFtcyk7CgkJCQlicmVhazsKCQkJCQogICAgICBjYXNlIHNlbGY6OiRUWVBFX1JFU0VUX1BBU1NXT1JEOgoJCQkJcmV0dXJuIG5ldyBNTV9SZXNldFBhc3N3b3JkRm9ybSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCQkJCgkJCWNhc2Ugc2VsZjo6JFRZUEVfMUNMSUNLX1BVUkNIQVNFOgoJCQkJcmV0dXJuIG5ldyBNTV8xQ2xpY2tQdXJjaGFzZUZvcm0oJHBhcmFtcyk7CgkJCQlicmVhazsKCQkJCQoJCQljYXNlIHNlbGY6OiRUWVBFX0NVU1RPTToKCQkJCXJldHVybiBuZXcgTU1fQ3VzdG9tRm9ybSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCQkJCgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gbmV3IE1NX0Fic3RyYWN0Rm9ybSgkcGFyYW1zKTsKCQkJCWJyZWFrOwoJCX0KCX0KCQoJLyoqCgkgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIGZvciBhbGwgZm9ybXMuCgkgKiBAcGFyYW0gQXJyYXkgJHBhcmFtcyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBmb3JtIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycwoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHBhcmFtcykKCXsKCQkkdGhpcy0+aXNWYWxpZCA9IGZhbHNlOwoJCSR0aGlzLT5pbml0aWFsaXplKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBpc1ZhbGlkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmlzVmFsaWQ7Cgl9Cn0KCg==', 0, '2018-11-21 06:38:54'),
(168, 'releaseverificationutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1JlbGVhc2VWZXJpZmljYXRpb25VdGlscwp7CQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRWZXJzaW9uSW5mbygpCgl7CgkJcmV0dXJuICIyMDE4LTA1LTE2IDE2NTEgMi4yLjgtMTAxIjsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(169, 'obj', 'Y2xhc3MgTU1fUGhwT2JqIGV4dGVuZHMgTU1fU3luYwp7CQoJcHVibGljIGZ1bmN0aW9uIGltcG9ydEZpbGUoJGZpbGVQYXRoLCAkc2hvdWxkQmFzZTY0PWZhbHNlKQoJewoJCWlmKCFmaWxlX2V4aXN0cygkZmlsZVBhdGgpKQoJCXsKCQkJJHRoaXMtPnNob3dEZWJ1ZygiQ291bGQgbm90IGZpbmQgZmlsZSIpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCSRjb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlUGF0aCk7CgkKCQlpZigkc2hvdWxkQmFzZTY0KQoJCXsKCQkJJGNvbnRlbnRzID0gYmFzZTY0X2RlY29kZSgkY29udGVudHMpOwoJCX0KCQkKCQkkb2JqID0gdW5zZXJpYWxpemUoJGNvbnRlbnRzKTsKCQlpZigkb2JqPT09ZmFsc2UpCgkJewoJCQkkdGhpcy0+c2hvd0RlYnVnKCJDb3VsZCBub3QgdW5zZXJpYWxpemUgZmlsZSIpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCSRxdWVyaWVzID0gYXJyYXkoKTsKCQkkbGFzdENvbHVtbiA9ICIiOwoJCWZvcmVhY2goJG9iaiBhcyAkdGFibGU9PiRjb2x1bW5zKQoJCXsKCQkJaWYocHJlZ19tYXRjaCgiL14od3BfKS8iLCAkdGFibGUpICYmIGlzc2V0KCR0aGlzLT5kYi0+cHJlZml4KSkKCQkJewoJCQkJJG5ld1RhYmxlID0gcHJlZ19yZXBsYWNlKCIvXih3cF8pLyIsICIiLCAkdGFibGUpOwoJCQkJJHRhYmxlID0gJHRoaXMtPmRiLT5wcmVmaXguJG5ld1RhYmxlOwoJCQl9CgkJCWlmKCR0aGlzLT50YWJsZUV4aXN0cygkdGFibGUpKQoJCQl7CgkJCQlmb3JlYWNoKCRjb2x1bW5zIGFzICRjb2x1bW4pCgkJCQl7CgkJCQkJaWYoJHRoaXMtPmlzVmFsaWRDb2x1bW5PYmplY3QoJGNvbHVtbikpCgkJCQkJewoJCQkJCQlpZighJHRoaXMtPmZpZWxkRXhpc3RzKCRjb2x1bW4tPkZpZWxkLCAkdGFibGUpKQoJCQkJCQl7CgkJCQkJCQkkbGFzdENvbHVtblNxbCA9ICghZW1wdHkoJGxhc3RDb2x1bW4pKT8iIEFGVEVSIHskbGFzdENvbHVtbn0iOiIiOwoJCQkJCQkJJHF1ZXJpZXNbXSA9ICR0aGlzLT5hbHRlclRhYmxlU3FsKCR0YWJsZSwgJGNvbHVtbiwgJGxhc3RDb2x1bW5TcWwpOwoJCQkJCQl9CgkJCQkJCSRsYXN0Q29sdW1uID0gJGNvbHVtbi0+RmllbGQ7CQoJCQkJCX0KCQkJCX0KCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRxdWVyaWVzW10gPSAkdGhpcy0+Y3JlYXRlVGFibGVTcWwoJHRhYmxlLCAkY29sdW1ucyk7CgkJCX0KCQl9CQoJCQoJCWZvcmVhY2goJHF1ZXJpZXMgYXMgJHF1ZXJ5KQoJCXsKCQkJaWYoJHRoaXMtPmRiLT5xdWVyeSgkcXVlcnkpPT09ZmFsc2UpCgkJCXsKCQkJCSR0aGlzLT5zaG93RGVidWcoIkNvdWxkIG5vdCBleGVjdXRlIHF1ZXJ5IHskcXVlcnl9ICIpOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoJCXJldHVybiB0cnVlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gaW1wb3J0U2NyZWVuKCRmaWxlUGF0aCkKCXsKCQlpZighZmlsZV9leGlzdHMoJGZpbGVQYXRoKSkKCQl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkNvdWxkIG5vdCBmaW5kIGZpbGUiKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkkY29udGVudHMgPSBmaWxlX2dldF9jb250ZW50cygkZmlsZVBhdGgpOwoJCSRvYmogPSB1bnNlcmlhbGl6ZSgkY29udGVudHMpOwoJCWlmKCRvYmo9PT1mYWxzZSkKCQl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkNvdWxkIG5vdCB1bnNlcmlhbGl6ZSBmaWxlIik7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJJHF1ZXJpZXMgPSBhcnJheSgpOwoJCSRsYXN0Q29sdW1uID0gIiI7CgkJZm9yZWFjaCgkb2JqIGFzICR0YWJsZT0+JGNvbHVtbnMpCgkJewoJCQlpZihwcmVnX21hdGNoKCIvXih3cF8pLyIsICR0YWJsZSkgJiYgaXNzZXQoJHRoaXMtPmRiLT5wcmVmaXgpKQoJCQl7CgkJCQkkbmV3VGFibGUgPSBwcmVnX3JlcGxhY2UoIi9eKHdwXykvIiwgIiIsICR0YWJsZSk7CgkJCQkkdGFibGUgPSAkdGhpcy0+ZGItPnByZWZpeC4kbmV3VGFibGU7CgkJCX0KCQkJaWYoJHRoaXMtPnRhYmxlRXhpc3RzKCR0YWJsZSkpCgkJCXsKCQkJCWZvcmVhY2goJGNvbHVtbnMgYXMgJGNvbHVtbikKCQkJCXsKCQkJCQlpZigkdGhpcy0+aXNWYWxpZENvbHVtbk9iamVjdCgkY29sdW1uKSkKCQkJCQl7CgkJCQkJCWlmKCEkdGhpcy0+ZmllbGRFeGlzdHMoJGNvbHVtbi0+RmllbGQsICR0YWJsZSkpCgkJCQkJCXsKCQkJCQkJCSRsYXN0Q29sdW1uU3FsID0gKCFlbXB0eSgkbGFzdENvbHVtbikpPyIgQUZURVIgeyRsYXN0Q29sdW1ufSI6IiI7CgkJCQkJCQkkcXVlcmllc1tdID0gJHRoaXMtPmFsdGVyVGFibGVTcWwoJHRhYmxlLCAkY29sdW1uLCAkbGFzdENvbHVtblNxbCk7CgkJCQkJCX0KCQkJCQkJJGxhc3RDb2x1bW4gPSAkY29sdW1uLT5GaWVsZDsJCgkJCQkJfQoJCQkJfQoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJHF1ZXJpZXNbXSA9ICR0aGlzLT5jcmVhdGVUYWJsZVNxbCgkdGFibGUsICRjb2x1bW5zKTsKCQkJfQoJCX0JCgkJCgkJZWNobyAiPHByZT4iOwoJCWVjaG8gdmFyX2R1bXAoJHF1ZXJpZXMpOwoJCWVjaG8gIjwvcHJlPiI7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBleHBvcnRGaWxlKCRkaXIsICRuZXdGaWxlTmFtZT0iIikKCXsKCQlpZigkdGhpcy0+aXNTYWZlKCRkaXIpKQoJCXsKCQkJJHRoaXMtPmdldFRhYmxlcygpOwoJCX0KCQkkY29udGVudHMgPSAkdGhpcy0+Z2V0VGFibGVzKCk7CgkJCgkJJGZpbGVOYW1lID0gKGVtcHR5KCRuZXdGaWxlTmFtZSkpPyJtZW1iZXJtb3VzZV9zY2hlbWEuc3FsIjokbmV3RmlsZU5hbWU7CgkJJGZpbGVQYXRoID0gJGRpci4iLyIuJGZpbGVOYW1lLiIiOwoJCSRmaCA9IGZvcGVuKCRmaWxlUGF0aCwgJ3cnKTsKCQkKCQlpZighJGZoKQoJCXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJZndyaXRlKCRmaCwgc2VyaWFsaXplKCRjb250ZW50cykpOwoJCWZjbG9zZSgkZmgpOwoJCQoJCXJldHVybiB0cnVlOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZXhwb3J0U2NyZWVuKCkKCXsKCQlpZighJHRoaXMtPnZhbGlkYXRlRGJSZWYoKSkKCQl7CgkJCSR0aGlzLT5zaG93RGVidWcoIkRCIEFkYXB0ZXIgZG9lcyBub3QgaGF2ZSB0aGUgcHJvcGVyIGZ1bmN0aW9ucyIpOwoJCQlyZXR1cm4gZmFsc2U7CQoJCX0KCQkKCQkkY29udGVudHMgPSAkdGhpcy0+Z2V0VGFibGVzKCk7CgkJCgkJZWNobyAiPHByZT4iOwoJCWVjaG8gdmFyX2R1bXAoJGNvbnRlbnRzKTsKCQllY2hvICI8L3ByZT4iOwoJfQp9', 0, '2018-11-21 06:38:54'),
(170, 'paymentserviceresponse', 'LyoqCiAqCiAqCiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwoKLyoqCiAqIE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UgaXMgYSBjb250YWluZXIgbWVhbnQgdG8gYWJzdHJhY3QgYSByZXNwb25zZSBmcm9tIGEgc3BlY2lmaWMgcGF5bWVudCBzZXJ2aWNlL2dhdGV3YXkgaW50byBhIHN0YXR1cy9tZXNzYWdlCiAqIHRoYXQgTWVtYmVyTW91c2UgdW5kZXJzdGFuZHMgb24gYSBoaWdoZXIgbGV2ZWwuCiAqLwoKY2xhc3MgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSAKewoJcHVibGljIHN0YXRpYyAkU1VDQ0VTUyA9IDE7CglwdWJsaWMgc3RhdGljICRGQUlMRUQgPSAyOwoJcHVibGljIHN0YXRpYyAkUEVORElORyA9IDM7CglwdWJsaWMgc3RhdGljICRFUlJPUiA9IDQ7CgkKCXB1YmxpYyAkc3RhdHVzOwoJcHVibGljICRtZXNzYWdlOwoJcHVibGljICR1cmwgPSAiIjsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRtZXNzYWdlPSIiLCRzdGF0dXM9MSkKCXsKCQkkdGhpcy0+bWVzc2FnZSA9ICRtZXNzYWdlOwoJCSR0aGlzLT5zdGF0dXMgPSAkc3RhdHVzOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBnZXRTdGF0dXMoKQoJewoJCXJldHVybiAkdGhpcy0+c3RhdHVzOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRTdGF0dXMoJHN0YXR1cykKCXsKCQkkdGhpcy0+c3RhdHVzID0gJHN0YXR1czsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0TWVzc2FnZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5tZXNzYWdlOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRNZXNzYWdlKCRtZXNzYWdlKQoJewoJCSR0aGlzLT5tZXNzYWdlID0gJG1lc3NhZ2U7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNFcnJvcigkcmVzcG9uc2UpCgl7CgkJaWYoKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UpICYmICgkcmVzcG9uc2UtPmdldFN0YXR1cygpID09IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUikpCgkJewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJCQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc1N1Y2Nlc3MoJHJlc3BvbnNlKQoJewoJCWlmKCgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKSAmJiAoJHJlc3BvbnNlLT5nZXRTdGF0dXMoKSA9PSBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokU1VDQ0VTUykpCgkJewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJCQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc0ZhaWxlZCgkcmVzcG9uc2UpCgl7CgkJaWYoKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UpICYmICgkcmVzcG9uc2UtPmdldFN0YXR1cygpID09IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRGQUlMRUQpKQoJCXsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiB0cmFuc2xhdGUoTU1fUmVzcG9uc2UgJG1tUmVzcG9uc2UpCgl7CgkJJHBheW1lbnRTZXJ2aWNlUmVzcG9uc2UgPSBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgkbW1SZXNwb25zZS0+bWVzc2FnZSwoJG1tUmVzcG9uc2UtPnR5cGU9PU1NX1Jlc3BvbnNlOjokU1VDQ0VTUyk/TU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JFNVQ0NFU1M6TU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQlpZiAoaXNzZXQoJG1tUmVzcG9uc2UtPnVybCkpCgkJewoJCQkkcGF5bWVudFNlcnZpY2VSZXNwb25zZS0+dXJsID0gJG1tUmVzcG9uc2UtPnVybDsKCQl9CgkJcmV0dXJuICRwYXltZW50U2VydmljZVJlc3BvbnNlOwoJfQoKfQ==', 0, '2018-11-21 06:38:54'),
(171, 'affiliateprovider', '', 0, '2018-11-21 06:38:54'),
(172, 'context', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0NvbnRleHQKewkKCXByaXZhdGUgJHVzZXIgPSBudWxsOwoJcHJpdmF0ZSAkZW1wbG95ZWUgPSBudWxsOwoJcHJpdmF0ZSAkb3JkZXIgPSBudWxsOwoJcHJpdmF0ZSAkb3JkZXJBdHRyaWJ1dGVzID0gbnVsbDsKCXByaXZhdGUgJHByb2R1Y3QgPSBudWxsOwoJcHJpdmF0ZSAkYWZmaWxpYXRlID0gbnVsbDsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCR1c2VyPW51bGwsICRlbXBsb3llZT1udWxsLCAkb3JkZXI9bnVsbCkgCiAJewogCQlpZighaXNfbnVsbCgkdXNlcikpCiAJCXsKIAkJCSR0aGlzLT51c2VyID0gJHVzZXI7CiAJCX0KIAkJZWxzZQogCQl7CiAJCQkkdGhpcy0+dXNlciA9IG5ldyBNTV9Vc2VyKCk7CiAJCX0KIAkJCiAJCWlmKCFpc19udWxsKCRlbXBsb3llZSkpCiAJCXsKIAkJCSR0aGlzLT5lbXBsb3llZSA9ICRlbXBsb3llZTsKIAkJfQogCQllbHNlCiAJCXsKIAkJCSR0aGlzLT5lbXBsb3llZSA9IG5ldyBNTV9FbXBsb3llZSgpOwogCQl9CiAJCQogCQlpZighaXNfbnVsbCgkb3JkZXIpKQogCQl7CiAJCQkkdGhpcy0+b3JkZXIgPSAkb3JkZXI7CiAJCX0KIAkJZWxzZQogCQl7CiAJCQkkdGhpcy0+b3JkZXIgPSBuZXcgTU1fT3JkZXIoKTsKIAkJfQogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0VXNlcigkdXNlcikKIAl7CiAJCSR0aGlzLT51c2VyID0gJHVzZXI7CiAJfQogCQogCS8qKgogCSAqIEByZXR1cm4gTU1fVXNlcgogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRVc2VyKCkKIAl7CiAJCXJldHVybiAkdGhpcy0+dXNlcjsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNldEVtcGxveWVlKCRlbXBsb3llZSkKIAl7CiAJCSR0aGlzLT5lbXBsb3llZSA9ICRlbXBsb3llZTsKIAl9CiAJCiAJLyoqCiAJICogQHJldHVybiBNTV9FbXBsb3llZQogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRFbXBsb3llZSgpCiAJewogCQlyZXR1cm4gJHRoaXMtPmVtcGxveWVlOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0T3JkZXIoJG9yZGVyKQogCXsKIAkJJHRoaXMtPm9yZGVyID0gJG9yZGVyOwogCX0KIAkKIAkvKioKIAkgKiBAcmV0dXJuIE1NX09yZGVyCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGdldE9yZGVyKCkKIAl7CiAJCXJldHVybiAkdGhpcy0+b3JkZXI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXRPcmRlckF0dHJpYnV0ZXMoJG9yZGVyQXR0cmlidXRlcykKIAl7CiAJCSR0aGlzLT5vcmRlckF0dHJpYnV0ZXMgPSAkb3JkZXJBdHRyaWJ1dGVzOwogCX0KIAkKIAkvKioKIAkgKiBAcmV0dXJuIGFycmF5IHdpdGggdGhlIHBhcmFtZXRlcnM6IGlzX3JlYmlsbAogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRPcmRlckF0dHJpYnV0ZXMoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5vcmRlckF0dHJpYnV0ZXM7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXRQcm9kdWN0KCRwcm9kdWN0KQogCXsKIAkJJHRoaXMtPnByb2R1Y3QgPSAkcHJvZHVjdDsKIAl9CiAJCiAJLyoqCiAJICogQHJldHVybiBNTV9Qcm9kdWN0CiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGdldFByb2R1Y3QoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5wcm9kdWN0OwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0QWZmaWxpYXRlKCRhZmZpbGlhdGUpCiAJewogCQkkdGhpcy0+YWZmaWxpYXRlID0gJGFmZmlsaWF0ZTsKIAl9CiAJCiAJLyoqCiAJICogQHJldHVybiBNTV9BZmZpbGlhdGVWTwogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRBZmZpbGlhdGUoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5hZmZpbGlhdGU7CiAJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(173, 'affiliatetagprocessor', 'Y2xhc3MgTU1fQWZmaWxpYXRlVGFnUHJvY2Vzc29yCnsJCglwdWJsaWMgc3RhdGljICRUQUdfQUZGSUxJQVRFX0RBVEEgPSAibW1fYWZmaWxpYXRlX2RhdGEiOwoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgaXMgcmVsYXRlZCB0byBhZmZpbGlhdGVzLgoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRzbWFydFRhZyB0aGUgbmFtZSBvZiB0aGUgU21hcnRUYWcKCSAqIEByZXR1cm4gQm9vbGVhbiByZXR1cm5zIHRydWUgaWYgdGhlIFNtYXJ0VGFnIHBhc3NlZCBpcyByZWxhdGVkIHRvIGFmZmlsaWF0ZXMuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNBZmZpbGlhdGVTbWFydFRhZygkc21hcnRUYWcpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfQUZGSUxJQVRFX0RBVEE6CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgbmFtZSBhbmQgYSBudW1iZXIgb2YgcHJvcGVydGllcyByZWxhdGVkIHRvIHRoZSBTbWFydFRhZyBhbmQgbWFrZXMgYSBjYWxsIHRvIAoJICogdGhlIGFwcHJvcHJpYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBTbWFydFRhZyBuYW1lLgoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IHRvIHByb2Nlc3MKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcHJvY2Vzc1NtYXJ0VGFnKCRzbWFydFRhZywgJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQlzd2l0Y2goJHNtYXJ0VGFnKSAKCQl7CgkJCWNhc2Ugc2VsZjo6JFRBR19BRkZJTElBVEVfREFUQToKCQkJCXJldHVybiBzZWxmOjptbV9hZmZpbGlhdGVfZGF0YSgkY29udGVudCwgJGF0dHMsICRjb2RlKTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuICJJbnZhbGlkIEFmZmlsaWF0ZSBTbWFydFRhZyB7JHNtYXJ0VGFnfSBmb3VuZCI7CgkJfQoJfQoJCgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0FmZmlsaWF0ZV9EYXRhIHRhZy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIAoJICogcmV0dXJuaW5nIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBhZmZpbGlhdGUgaW4gdGhlIGNvbnRleHQuCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIFNtYXJ0VGFnIChpZiBhbnkpCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG1tX2FmZmlsaWF0ZV9kYXRhKCRjb250ZW50LCAkYXR0cywgJGNvZGUpCgl7CgkJaWYoaXNfYXJyYXkoJGF0dHMpICYmIGNvdW50KCRhdHRzKT4wKQoJCXsKCQkJZm9yZWFjaCgkYXR0cyBhcyAkaz0+JHYpCgkJCXsKCQkJCSRrZXkgPSBzdHJ0b2xvd2VyKCRrKTsKCQkJCSQka2V5PSR2OwoJCQl9CgkJfQoJCQoJCSRhZmZpbGlhdGUgPSBudWxsOwoJCQoJCS8vIGdldCBhZmZpbGlhdGUgZnJvbSBjb250ZXh0CgkJJGFmZmlsaWF0ZSA9IE1NX1NtYXJ0VGFnVXRpbDo6Z2V0Q3VycmVudEFmZmlsaWF0ZVZPKCk7CgkJCgkJaWYoISRhZmZpbGlhdGUtPmlzVmFsaWQoKSkKCQl7CgkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb250ZXh0OiBBZmZpbGlhdGUgU21hcnRUYWdzIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGNvbnRleHQgb2YgYW4gYWZmaWxpYXRlIGFjY291bnQgd2VsY29tZSBlbWFpbCI7CgkJfQoJCQoJCS8vIGVuc3VyZSB0aGF0IHRoZSBuYW1lIGF0dHJpYnV0ZSBpcyBzZXQJCQoJCWlmKGlzc2V0KCRuYW1lKSkKCQl7CQoJCQlzd2l0Y2goc3RydG9sb3dlcigkbmFtZSkpCgkJCXsJCgkJCQkJCgkJCQljYXNlICJ1c2VybmFtZSI6CgkJCQkJcmV0dXJuICRhZmZpbGlhdGUtPmdldFVzZXJuYW1lKCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJwYXNzd29yZCI6CgkJCQkJcmV0dXJuICRhZmZpbGlhdGUtPmdldFBhc3N3b3JkKCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJ1cmwiOgoJCQkJCXJldHVybiAkYWZmaWxpYXRlLT5nZXRVcmwoKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgbmFtZSBhdHRyaWJ1dGUgJ3skbmFtZX0nIHBhc3NlZCB0byBTbWFydFRhZyB7JGNvZGV9IjsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gIkludmFsaWQgU21hcnRUYWcgQ29uZmlndXJhdGlvbjogJ25hbWUnIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCBmb3IgU21hcnRUYWcgeyRjb2RlfSI7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(174, 'producttagprocessor', 'Y2xhc3MgTU1fUHJvZHVjdFRhZ1Byb2Nlc3Nvcgp7CQoJcHVibGljIHN0YXRpYyAkVEFHX1BST0RVQ1RfREFUQSA9ICJtbV9wcm9kdWN0X2RhdGEiOwoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgaXMgcmVsYXRlZCB0byBwcm9kdWN0cy4KCSAqIAoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcmV0dXJuIEJvb2xlYW4gcmV0dXJucyB0cnVlIGlmIHRoZSBTbWFydFRhZyBwYXNzZWQgaXMgcmVsYXRlZCB0byBwcm9kdWN0cy4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc1Byb2R1Y3RTbWFydFRhZygkc21hcnRUYWcpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfUFJPRFVDVF9EQVRBOgoJCQkJcmV0dXJuIHRydWU7CgkJCQkKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBmYWxzZTsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBUYWtlcyBhIFNtYXJ0VGFnIG5hbWUgYW5kIGEgbnVtYmVyIG9mIHByb3BlcnRpZXMgcmVsYXRlZCB0byB0aGUgU21hcnRUYWcgYW5kIG1ha2VzIGEgY2FsbCB0byAKCSAqIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgU21hcnRUYWcgbmFtZS4KCSAqIEBwYXJhbSBTdHJpbmcgJHNtYXJ0VGFnIHRoZSBuYW1lIG9mIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29udGVudCB0aGUgY29udGVudCB0byBwcm9jZXNzCgkgKiBAcGFyYW0gQXJyYXkgJGF0dHMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb2RlIHRoZSByYXcgdmVyc2lvbiBvZiB0aGUgU21hcnRUYWcgbmFtZSAoaS5lLiBub3QgY2FzZS1pbnNlbnRpdmUsIG5vdCBicm9rZW4gdXAgaW50byBwYXJ0cykKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSAkY29udGVudCBwYXNzZWQgd2l0aCBhbGwgU21hcnRUYWdzIHByb2Nlc3NlZAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHByb2Nlc3NTbWFydFRhZygkc21hcnRUYWcsICRjb250ZW50LCAkYXR0cywgJGNvZGUpCgl7CgkJc3dpdGNoKCRzbWFydFRhZykgCgkJewoJCQljYXNlIHNlbGY6OiRUQUdfUFJPRFVDVF9EQVRBOgoJCQkJcmV0dXJuIHNlbGY6Om1tX3Byb2R1Y3RfZGF0YSgkY29udGVudCwgJGF0dHMsICRjb2RlKTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuICJJbnZhbGlkIFByb2R1Y3QgU21hcnRUYWcgeyRzbWFydFRhZ30gZm91bmQiOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gcHJvY2Vzc2VzIHRoZSBNTV9Qcm9kdWN0X0RhdGEgdGFnLiBJdCBpcyByZXNwb25zaWJsZSBmb3IgCgkgKiByZXR1cm5pbmcgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIHByb2R1Y3QgSUQgcGFzc2VkLgoJICogQHBhcmFtIFN0cmluZyAkY29udGVudCB0aGUgY29udGVudCBjb250YWluZWQgd2l0aGluIHRoZSBTbWFydFRhZyAoaWYgYW55KQoJICogQHBhcmFtIEFycmF5ICRhdHRzIGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIGF0dHJpYnV0ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBTbWFydFRhZwoJICogQHBhcmFtIFN0cmluZyAkY29kZSB0aGUgcmF3IHZlcnNpb24gb2YgdGhlIFNtYXJ0VGFnIG5hbWUgKGkuZS4gbm90IGNhc2UtaW5zZW50aXZlLCBub3QgYnJva2VuIHVwIGludG8gcGFydHMpCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyBiYXNlZCBvbiB0aGUgJGNvbnRlbnQgcGFzc2VkIHdpdGggYWxsIFNtYXJ0VGFncyBwcm9jZXNzZWQKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBtbV9wcm9kdWN0X2RhdGEoJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQlpZihpc19hcnJheSgkYXR0cykgJiYgY291bnQoJGF0dHMpPjApCgkJewoJCQlmb3JlYWNoKCRhdHRzIGFzICRrPT4kdikKCQkJewoJCQkJJGtleSA9IHN0cnRvbG93ZXIoJGspOwoJCQkJJCRrZXk9JHY7CgkJCX0KCQl9CgkJCgkJJHByb2R1Y3QgPSBudWxsOwoJCQoJCS8vIGVuc3VyZSB0aGF0IHRoZSBpZCBhdHRyaWJ1dGUgaXMgc2V0CgkJaWYoaXNzZXQoJGlkKSkKCQl7CgkJCSRwcm9kdWN0ID0gbmV3IE1NX1Byb2R1Y3QoJGlkKTsKCQkJCgkJCWlmKCEkcHJvZHVjdC0+aXNWYWxpZCgpKQoJCQl7CgkJCQlyZXR1cm4gIkludmFsaWQgU21hcnRUYWcgQ29uZmlndXJhdGlvbjogSW52YWxpZCBwcm9kdWN0IElEIG9mICd7JGlkfScgcGFzc2VkIHRvIFNtYXJ0VGFnIHskY29kZX0iOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAiSW52YWxpZCBTbWFydFRhZyBDb25maWd1cmF0aW9uOiAnaWQnIGF0dHJpYnV0ZXMgaXMgcmVxdWlyZWQgZm9yIFNtYXJ0VGFnIHskY29kZX0iOwoJCX0KCQkKCQkvLyBlbnN1cmUgdGhhdCB0aGUgbmFtZSBhdHRyaWJ1dGUgaXMgc2V0CQkKCQlpZihpc3NldCgkbmFtZSkpCgkJewkKCQkJc3dpdGNoKHN0cnRvbG93ZXIoJG5hbWUpKQoJCQl7CQoJCQkJY2FzZSAiaWQiOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0SWQoKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgIm5hbWUiOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0TmFtZSgpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAiZGVzY3JpcHRpb24iOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0RGVzY3JpcHRpb24oKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgImJpbGxpbmdkZXNjcmlwdGlvbiI6CgkJCQkJcmV0dXJuICRwcm9kdWN0LT5nZXRCaWxsaW5nRGVzY3JpcHRpb24odHJ1ZSwgZmFsc2UpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAicHJpY2UiOgoJCQkJCXJldHVybiAoaXNzZXQoJGRvZm9ybWF0KSYmKCRkb2Zvcm1hdCA9PSAiZmFsc2UiKSk/JHByb2R1Y3QtPmdldFByaWNlKGZhbHNlKTokcHJvZHVjdC0+Z2V0UHJpY2UodHJ1ZSk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJpc3N1YnNjcmlwdGlvbiI6CgkJCQkJcmV0dXJuICRwcm9kdWN0LT5pc1JlY3VycmluZygpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAicmViaWxsZHVyYXRpb24iOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0UmViaWxsUGVyaW9kKCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJyZWJpbGxmcmVxdWVuY3kiOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0UmViaWxsRnJlcXVlbmN5KCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJoYXN0cmlhbCI6CgkJCQkJcmV0dXJuICRwcm9kdWN0LT5oYXNUcmlhbCgpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAidHJpYWxwcmljZSI6CgkJCQkJcmV0dXJuIChpc3NldCgkZG9mb3JtYXQpJiYoJGRvZm9ybWF0ID09ICJmYWxzZSIpKT8kcHJvZHVjdC0+Z2V0VHJpYWxBbW91bnQoZmFsc2UpOiRwcm9kdWN0LT5nZXRUcmlhbEFtb3VudCh0cnVlKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgInRyaWFsZHVyYXRpb24iOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0VHJpYWxEdXJhdGlvbigpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSAidHJpYWxmcmVxdWVuY3kiOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0VHJpYWxGcmVxdWVuY3koKTsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgImhhc3NoaXBwaW5nIjoKCQkJCQlyZXR1cm4gJHByb2R1Y3QtPmlzU2hpcHBhYmxlKCk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlICJza3UiOgoJCQkJCXJldHVybiAkcHJvZHVjdC0+Z2V0U2t1KCk7CgkJCQkJYnJlYWs7CgkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuICJJbnZhbGlkIFNtYXJ0VGFnIENvbmZpZ3VyYXRpb246IEludmFsaWQgbmFtZSBhdHRyaWJ1dGUgJ3skbmFtZX0nIHBhc3NlZCB0byBTbWFydFRhZyB7JGNvZGV9IjsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gIkludmFsaWQgU21hcnRUYWcgQ29uZmlndXJhdGlvbjogJ25hbWUnIGF0dHJpYnV0ZSBpcyByZXF1aXJlZCBmb3IgU21hcnRUYWcgeyRjb2RlfSI7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(175, 'messages', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fTWVzc2FnZXMKewoJcHVibGljIHN0YXRpYyAkS0VZX0hJREVfQ09NTUFORCA9ICJtbS1oaWRlLW1lc3NhZ2UiOwoJcHVibGljIHN0YXRpYyAkSElERV9PUFRJT05fUFJFRklYID0gIm1tLWhpZGUtbWVzc2FnZS0iOwoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFkZEVycm9yKCRzdHIpCgl7CgkJJGVycm9ycyA9IE1NX1Nlc3Npb246OnZhbHVlKE1NX1Nlc3Npb246OiRLRVlfRVJST1JTKTsKCQoJCQoJCWlmKGVtcHR5KCRlcnJvcnMpIHx8ICFpc19hcnJheSgkZXJyb3JzKSkgCgkJewoJCQkkZXJyb3JzID0gYXJyYXkoKTsKCQl9CgkJCgkJaWYoIWluX2FycmF5KCRzdHIsICRlcnJvcnMpICYmICFlbXB0eSgkc3RyKSkKCQl7CgkJCSRlcnJvcnNbXSA9ICRzdHI7CgkJfQoJCQoJCU1NX1Nlc3Npb246OnZhbHVlKE1NX1Nlc3Npb246OiRLRVlfRVJST1JTLCAkZXJyb3JzKTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRNZXNzYWdlKCRzdHIpCgl7CgkJJG1zZ3MgPSBNTV9TZXNzaW9uOjp2YWx1ZShNTV9TZXNzaW9uOjokS0VZX01FU1NBR0VTKTsKCQkJCgkJaWYoISRtc2dzKSB7CgkJCSRtc2dzID0gYXJyYXkoKTsKCQl9CgkJCgkJJG1zZ3NbXSA9ICRzdHI7CgkJCgkJTU1fU2Vzc2lvbjo6dmFsdWUoTU1fU2Vzc2lvbjo6JEtFWV9NRVNTQUdFUywgJG1zZ3MpOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldCgka2V5KQoJewoJCXJldHVybiBNTV9TZXNzaW9uOjp2YWx1ZSgka2V5KTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjbGVhcigpCgl7CgkJTU1fU2Vzc2lvbjo6Y2xlYXIoTU1fU2Vzc2lvbjo6JEtFWV9FUlJPUlMpOwoJCU1NX1Nlc3Npb246OmNsZWFyKE1NX1Nlc3Npb246OiRLRVlfTUVTU0FHRVMpOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldEhpZGVNZXNzYWdlVXJsKCR1cmwsICRrZXkpCgl7CgkJcmV0dXJuIE1NX1V0aWxzOjphcHBlbmRVcmxQYXJhbSgkdXJsLCBzZWxmOjokS0VZX0hJREVfQ09NTUFORCwgJGtleSk7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNNZXNzYWdlSGlkZGVuKCRrZXkpCgl7CgkJJGlzSGlkZGVuID0gIjAiOwoJCQoJCS8vIHN0b3JlIGhpZGUgbWVzc2FnZSBjb21tYW5kCgkJaWYoaXNzZXQoJF9HRVRbc2VsZjo6JEtFWV9ISURFX0NPTU1BTkRdKSkKCQl7CgkJCXVwZGF0ZV9vcHRpb24oc2VsZjo6JEhJREVfT1BUSU9OX1BSRUZJWC4kX0dFVFtzZWxmOjokS0VZX0hJREVfQ09NTUFORF0sICIxIik7CgkJCSRrZXkgPSAkX0dFVFtzZWxmOjokS0VZX0hJREVfQ09NTUFORF07CgkJfQoJCQoJCSRpc0hpZGRlbiA9IGdldF9vcHRpb24oc2VsZjo6JEhJREVfT1BUSU9OX1BSRUZJWC4ka2V5KTsKCQkKCQlpZigkaXNIaWRkZW4gPT0gIjEiKQoJCXsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCXJldHVybiBmYWxzZTsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(176, 'ordernumbergenerator', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogVGhlIE9yZGVyTnVtYmVyR2VuZXJhdG9yIGNsYXNzIGlzIGFuIGFic3RyYWN0IGNsYXNzIG91dGxpbmluZyB0aGUgaW50ZXJmYWNlIGZvciB0aGUgb3JkZXIgbnVtYmVyIGdlbmVyYXRpb24gc3lzdGVtCiAqIFRoaXMgaXMgbWVhbnQgdG8gYmUgZXh0ZW5zaWJsZSBzbyB0aGF0IGluIHRoZSBmdXR1cmUgY3VzdG9tZXJzIGNhbiBoYXZlIG1vcmUgY29udHJvbCBvdmVyIHRoZSBwdWJsaWMgZmFjaW5nIG9yZGVyIG51bWJlcnMKICogc2hvd24gdG8gdXNlcnMgYW5kIHRocm91Z2ggdGhlIGFkbWluaXN0cmF0aW9uIGludGVyZmFjZQogKi8KCmFic3RyYWN0IGNsYXNzIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yCnsKCXB1YmxpYyBTVEFUSUMgJERFRkFVTFQgPSAiZGVmYXVsdCI7IC8vdGhlIGRlZmF1bHQgdG9rZW4KCQoJLyoqCgkgKiBHZW5lcmF0ZXMgYW4gb3JkZXIgbnVtYmVyIHByaW9yIHRvIHRoZSBjb21taXQgdGFraW5nIHBsYWNlCgkgKiAKCSAqIEBwYXJhbSBNTV9PcmRlciAkb3JkZXIgVGhlIG9yZGVyIHRvIGdlbmVyYXRlIGFuIG9yZGVyIG51bWJlciBmb3IKCSAqIEByZXR1cm4gU3RyaW5nIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhbiBvcmRlciBudW1iZXIKCSAqLwoJcHVibGljIGFic3RyYWN0IGZ1bmN0aW9uIHByZUNvbW1pdChNTV9PcmRlciAkb3JkZXIpOwoJCgkvKioKCSAqIEdlbmVyYXRlcyBhbiBvcmRlciBudW1iZXIgYWZ0ZXIgdGhlIGNvbW1pdCB0YWtpbmcgcGxhY2UuIFVzZWZ1bCBpZiB0aGUgZmluYWwgb3JkZXIgbnVtYmVyIG5lZWRzIHRvIGJlIGJhc2VkIG9uIHRoZSBvcmRlciBpZAoJICogCgkgKiBAcGFyYW0gTU1fT3JkZXIgJG9yZGVyIFRoZSBvcmRlciB0byBnZW5lcmF0ZSBhbiBvcmRlciBudW1iZXIgZm9yCgkgKiBAcmV0dXJuIFN0cmluZyBhIHN0cmluZyByZXByZXNlbnRpbmcgYW4gb3JkZXIgbnVtYmVyCgkgKi8KCXB1YmxpYyBhYnN0cmFjdCBmdW5jdGlvbiBwb3N0Q29tbWl0KE1NX09yZGVyICRvcmRlcik7Cn0KCgo=', 0, '2018-11-21 06:38:54'),
(177, 'shippingmethodsview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJtb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKi8KCmNsYXNzIE1NX1NoaXBwaW5nTWV0aG9kc1ZpZXcgZXh0ZW5kcyBNTV9SQkFDQWRtaW5WaWV3CnsKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpCgl7CgkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pCgkJCXsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NBVkU6CgkJCQkJcmV0dXJuICR0aGlzLT5zYXZlU2hpcHBpbmdPcHRpb24oJHBvc3QpOwoJCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZVNoaXBwaW5nT3B0aW9uKCRwb3N0KTsKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzYXZlU2hpcHBpbmdPcHRpb24oJHBvc3QpCgl7CgkJaWYgKCFpc3NldCgkcG9zdFsibW1faWQiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJJRCBpcyByZXF1aXJlZCIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoZW1wdHkoJHBvc3RbIm1tX25hbWUiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJOYW1lIGlzIHJlcXVpcmVkIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmICghaXNzZXQoJHBvc3RbIm1tX3JhdGUiXSkgfHwgIWlzX251bWVyaWMoJHBvc3RbIm1tX3JhdGUiXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJSYXRlIGlzIHJlcXVpcmVkIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRzaGlwcGluZ01ldGhvZCA9IG5ldyBNTV9GbGF0UmF0ZVNoaXBwaW5nTWV0aG9kKCk7CgkJaWYgKGVtcHR5KCRwb3N0WyJtbV9pZCJdKSkKCQl7CgkJCXJldHVybiAkc2hpcHBpbmdNZXRob2QtPmFkZE9wdGlvbigkcG9zdFsibW1fbmFtZSJdLCRwb3N0WyJtbV9yYXRlIl0pOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gJHNoaXBwaW5nTWV0aG9kLT51cGRhdGVPcHRpb24oJHBvc3RbIm1tX25hbWUiXSwkcG9zdFsibW1fcmF0ZSJdLCRwb3N0WyJtbV9pZCJdKTsKCQl9Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbW92ZVNoaXBwaW5nT3B0aW9uKCRwb3N0KQoJewoJCWlmICghaXNzZXQoJHBvc3RbImlkIl0pIHx8ICFpc19udW1lcmljKCRwb3N0WyJpZCJdKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIklEIGlzIHJlcXVpcmVkIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRmbGF0UmF0ZU1ldGhvZCA9IG5ldyBNTV9GbGF0UmF0ZVNoaXBwaW5nTWV0aG9kKCk7CgkJcmV0dXJuICRmbGF0UmF0ZU1ldGhvZC0+ZGVsZXRlT3B0aW9uKCRwb3N0WyJpZCJdKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Vmlld0RhdGEoTU1fRGF0YUdyaWQgJGRnKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcm93cyA9IHBhcmVudDo6Z2V0RGF0YShNTV9UQUJMRV9GTEFUUkFURV9TSElQUElOR19PUFRJT05TLCBudWxsLCAkZGcpOwoJCXJldHVybiAkcm93czsKCX0KfQoK', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(178, 'customervaluereport', '', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(179, 'paymentutilsview', '', 0, '2018-11-21 06:38:54'),
(180, 'transaction', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fVHJhbnNhY3Rpb24KewoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBiZWdpbigpCgl7CgkJX21tbXEoIkJFR0lOIik7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcm9sbGJhY2soKQoJewoJCV9tbW1xKCJST0xMQkFDSyIpOwoJfQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNvbW1pdCgpCgl7CgkJX21tbXEoIkNPTU1JVCIpOwoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(181, 'smartwidget', 'LyoqCiAqIFNtYXJ0VGFnIFdpZGdldCBDbGFzcwogKi8KY2xhc3MgTU1fU21hcnRXaWRnZXQgZXh0ZW5kcyBXUF9XaWRnZXQgCnsKICAgIC8qKiBjb25zdHJ1Y3RvciAqLwogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSAKICAgIHsKICAgIAkkd2lkZ2V0X29wcyA9IGFycmF5KCdjbGFzc25hbWUnID0+ICdtbV9zbWFydHdpZGdldCcsICdkZXNjcmlwdGlvbicgPT4gJ1VzZSB0aGlzIHdpZGdldCB0byB1c2UgTWVtYmVyTW91c2UgU21hcnRUYWdzIGFyb3VuZCB5b3VyIHNpdGUnKTsKICAgIAkkY29udHJvbF9vcHRpb25zID0gYXJyYXkoJ2hlaWdodCc9PjUwMCwgJ3dpZHRoJyA9PjYwMCk7CiAgICAgICAgcGFyZW50OjpfX2NvbnN0cnVjdChmYWxzZSwgJG5hbWUgPSAnTU0gU21hcnRXaWRnZXQnLCAkd2lkZ2V0X29wcywgJGNvbnRyb2xfb3B0aW9ucyk7CQogICAgfQoKICAgIC8qKiBAc2VlIFdQX1dpZGdldDo6Zm9ybSAqLwogICAgZnVuY3Rpb24gZm9ybSgkaW5zdGFuY2UpIAogICAgewkKICAgIAkvLyBzZXQgZGVmYXVsdCB2YWx1ZXMKICAgIAkkY29udGVudCA9ICIiOwogICAgCQogICAgCS8vIHNldCBjdXJyZW50IHZhbHVlcwogICAgCWlmKGlzc2V0KCRpbnN0YW5jZVsnY29udGVudCddKSkKICAgIAl7CiAgICAJCSRjb250ZW50ID0gZXNjX2F0dHIoJGluc3RhbmNlWydjb250ZW50J10pOwogICAgCX0KICAgIAk/PgogICAgCTxwPgoJICAgIAk8P3BocCBlY2hvIE1NX1NtYXJ0VGFnTGlicmFyeVZpZXc6OnNtYXJ0VGFnTGlicmFyeUJ1dHRvbnMoJHRoaXMtPmdldF9maWVsZF9pZCgnY29udGVudCcpKTsgPz4KCSAgICAJPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxMnB4OyBjb2xvcjojNjY2NjY2OyBtYXJnaW4tbGVmdDoxMHB4OyI+RW50ZXIgYW55IHZhbGlkIEhUTUwsIEphdmFTY3JpcHQgYW5kIFNtYXJ0VGFncyBiZWxvdzo8L3NwYW4+CiAgICAJPC9wPgogICAgCTxwPgogICAgCQk8dGV4dGFyZWEgY2xhc3M9IndpZGVmYXQiIGNvbHM9IjIwIiByb3dzPSIxNiIgc3R5bGU9ImZvbnQtZmFtaWx5OmNvdXJpZXI7IGZvbnQtc2l6ZToxMXB4OyIgaWQ9Ijw/cGhwIGVjaG8gJHRoaXMtPmdldF9maWVsZF9pZCgnY29udGVudCcpOyA/PiIgbmFtZT0iPD9waHAgZWNobyAkdGhpcy0+Z2V0X2ZpZWxkX25hbWUoJ2NvbnRlbnQnKTsgPz4iPjw/cGhwIGVjaG8gJGNvbnRlbnQ7ID8+PC90ZXh0YXJlYT4KICAgIAk8L3A+CiAgICAJPD9waHAgCiAgICB9CgogICAgLyoqIEBzZWUgV1BfV2lkZ2V0Ojp1cGRhdGUgKi8KICAgIGZ1bmN0aW9uIHVwZGF0ZSgkbmV3X2luc3RhbmNlLCAkb2xkX2luc3RhbmNlKSAKICAgIHsJCQoJCSRpbnN0YW5jZSA9ICRvbGRfaW5zdGFuY2U7CgkJJGluc3RhbmNlWydjb250ZW50J10gPSAkbmV3X2luc3RhbmNlWydjb250ZW50J107CgkgICAgcmV0dXJuICRpbnN0YW5jZTsKICAgIH0KCiAgICAvKiogQHNlZSBXUF9XaWRnZXQ6OndpZGdldCAqLwogICAgZnVuY3Rpb24gd2lkZ2V0KCRhcmdzLCAkaW5zdGFuY2UpIAogICAgewkKICAgICAgICBleHRyYWN0KCAkYXJncyApOwoJCgkgICAgZWNobyAkYmVmb3JlX3dpZGdldDsKCSAgICAKCSAgICAkY29udGV4dCA9IG5ldyBNTV9Db250ZXh0KCk7CgkgICAgJGNvbnRlbnQgPSBNTV9TbWFydFRhZ1V0aWw6OnByb2Nlc3NDb250ZW50KCRpbnN0YW5jZVsiY29udGVudCJdLCAkY29udGV4dCk7CgkgICAgZWNobyBkb19zaG9ydGNvZGUoJGNvbnRlbnQpOwogICAgICAgIAoJCWVjaG8gJGFmdGVyX3dpZGdldDsKICAgIH0KfQ==', 0, '2018-11-21 06:38:54'),
(182, 'reportpiechartmodel', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBUaGlzIGNsYXNzIHNlcnZlcyBhcyBhIGRhdGEgbW9kZWwgZm9yIHRoZSBNTV9SZXBvcnRQaWVjaGFydCBjbGFzcywgYW5kIGFueSBmdXR1cmUgcGllY2hhcnQtbGlrZSB2aXN1YWwgZWxlbWVudHMgCiAqIFRoZSBwaWVjaGFydCBkYXRhIG1vZGVsIGlzIHZlcnkgc2ltcGxlOyBZb3UgaGF2ZSBhIGNvbGxlY3Rpb24gb2Ygc2xpY2VzIHRoYXQgZWFjaCBoYXZlIGEgbnVtZXJpYyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlbS4KICogVGhlc2Ugc2xpY2VzIGFyZSB0aGVuIHBhc3NlZCB0byB0aGUgcGllY2hhcnQgdmlzdWFsIGVsZW1lbnQgd2hpY2ggdGhlbiByZW5kZXJzIHRob3NlIHNsaWNlcyBhY2NvcmRpbmcgdG8gd2hhdCBwZXJjZW50YWdlIHRoZSBzbGljZSB2YWx1ZSBpcyAKICogb2YgdGhlIHdob2xlLiBTbyBpZiB5b3UgaGF2ZSA0IHNsaWNlcywgZWFjaCB3aXRoIGEgbnVtZXJpYyB2YWx1ZSBvZiA1MCwgZWFjaCBzbGljZSB3aWxsIGJlIHJlbmRlcmVkIGFzIDI1JSBvZiB0aGUgcGllLiAKICovCmNsYXNzIE1NX1JlcG9ydFBpZWNoYXJ0TW9kZWwKewoJCglwcm90ZWN0ZWQgJHNsaWNlcyA9IGFycmF5KCk7CgkKCS8qKgoJICogQ3JlYXRlcyB0aGUgbW9kZWwgZnJvbSBhIHdwZGIgcmVzdWx0c2V0LCB3aGljaCBpcyBlaXRoZXIgYW4gYXJyYXkgb2Ygb2JqZWN0cyBvciBhbiBhcnJheSBvciBhcnJheXMuIFRoZSBtZXRob2QgaW50ZXJuYWxseSBkZXRlY3RzCgkgKiB3aGF0IGZvcm1hdCB0aGUgcmVzdWx0c2V0IGlzIGluIGFuZCBjcmVhdGVzIHRoZSBtb2RlbAoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHJlc3VsdFNldAoJICogQHBhcmFtIFN0cmluZyAkdGl0bGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBjb2x1bW4gaW4gdGhlIHJlc3VsdHNldCB0byB1c2UgYXMgdGhlIHRpdGxlIGZvciBlYWNoIHNsaWNlCgkgKiBAcGFyYW0gU3RyaW5nICR2YWx1ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbHVtbiBpbiB0aGUgcmVzdWx0c2V0IHRvIHVzZSBhcyB0aGUgdmFsdWUgZm9yIGVhY2ggc2xpY2UKCSAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIG9yIGZhbHNlIGlmIHRoZSBtb2RlbCB3YXMgY3JlYXRlZCBwcm9wZXJseS4gSXQgSVMgcG9zc2libGUgZm9yIHRoZSBtb2RlbCB0byBiZSBwYXJ0aWFsbHkgY3JlYXRlZCBhbmQgZXJyb3Igb3V0IGluIHRoZSBtaWRkbGUKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldFNsaWNlc0Zyb21SZXN1bHRzZXQoJHJlc3VsdFNldCwkdGl0bGVOYW1lLCR2YWx1ZU5hbWUpCgl7CgkJaWYgKCFpc19hcnJheSgkcmVzdWx0U2V0KSkKCQl7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJZm9yZWFjaCAoJHJlc3VsdFNldCBhcyAkc2xpY2VWYWx1ZXMpCgkJewoJCQlpZiAoaXNfb2JqZWN0KCRzbGljZVZhbHVlcykgJiYgaXNzZXQoJHNsaWNlVmFsdWVzLT4kdGl0bGVOYW1lKSAmJiBpc3NldCgkc2xpY2VWYWx1ZXMtPiR2YWx1ZU5hbWUpKQoJCQl7CgkJCQkkdGhpcy0+YWRkU2xpY2UoJHNsaWNlVmFsdWVzLT4kdGl0bGVOYW1lLCAkc2xpY2VWYWx1ZXMtPiR2YWx1ZU5hbWUpOwoJCQl9CgkJCWVsc2UgaWYgKGlzX2FycmF5KCRzbGljZVZhbHVlcykgJiYgIWVtcHR5KCRzbGljZVZhbHVlc1skdGl0bGVOYW1lXSkgJiYgIWVtcHR5KCRzbGljZVZhbHVlc1skdmFsdWVOYW1lXSkpCgkJCXsKCQkJCSR0aGlzLT5hZGRTbGljZSgkc2xpY2VWYWx1ZXNbJHRpdGxlTmFtZV0sICRzbGljZVZhbHVlc1skdmFsdWVOYW1lXSk7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJcmV0dXJuIGZhbHNlOyAvL25vdCBhIHByb3BlciByZXN1bHRzZXQKCQkJfQoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0KCQoJCgkvKioKCSAqIEFkZCB0aGUgZGF0YSBmb3IgYSBzbGljZSBvZiB0aGUgcGllY2hhcnQgdG8gdGhlIG1vZGVsCgkgKiAKCSAqIEBwYXJhbSBTdHJpbmcgJHRpdGxlIFRoZSB0aXRsZSBvZiB0aGUgc2xpY2UKCSAqIEBwYXJhbSBTdHJpbmcgJG51bWVyaWNWYWx1ZSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiB0aGUgc2xpY2UgdG8gdXNlIGluIGRldGVybWluaW5nIHRoZSBzbGljZSBwcm9wb3J0aW9ucwoJICovCglwdWJsaWMgZnVuY3Rpb24gYWRkU2xpY2UoJHRpdGxlLCAkbnVtZXJpY1ZhbHVlKQoJewoJCSRzbGljZU9iaiA9IG5ldyBzdGRDbGFzcygpOwoJCSRzbGljZU9iai0+dGl0bGUgPSAkdGl0bGU7CgkJJHNsaWNlT2JqLT52YWx1ZSA9ICRudW1lcmljVmFsdWU7CgkJJHRoaXMtPnNsaWNlc1tdID0gJHNsaWNlT2JqOwkKCX0KCQoJCgkvKioKCSAqIFJldHVybnMgYWxsIHRoZSBzbGljZSBpbiB0aGUgbW9kZWwgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cy4gRWFjaCBvYmplY3QgaGFzIGEgJ3RpdGxlJyBhbmQgYSAndmFsdWUnIHByb3BlcnR5CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRTbGljZXMoKQoJewoJCXJldHVybiAkdGhpcy0+c2xpY2VzOwoJfQp9Cg==', 0, '2018-11-21 06:38:54'),
(183, 'emailserviceproviderdialog', 'Y2xhc3MgTU1fRW1haWxTZXJ2aWNlUHJvdmlkZXJEaWFsb2cgewoJCglwdWJsaWMgJGRpYWxvZyA9ICIiOwoJcHVibGljICRjb250cm9scyA9ICIiOwoKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJJHRoaXMtPmNvbnRyb2xzID0gPDw8Q29udHJvbHMKCQkJPGJ1dHRvbiBpZD0iZW1haWwtc2VydmljZS1wcm92aWRlci1jb25maWd1cmUiIGNsYXNzPSJtbS11aS1idXR0b24gYmx1ZSIgb25DbGljaz0ibW1qcy5zaG93TGlzdE1hcHBpbmdEaWFsb2coalF1ZXJ5KCcjcHJvdmlkZXItY29uZmlnLWZvcm0gOmlucHV0Jykuc2VyaWFsaXplQXJyYXkoKSk7IHJldHVybiBmYWxzZTsiIHN0eWxlPSJjdXJzb3I6cG9pbnRlcjsiPkNvbmZpZ3VyZTwvYnV0dG9uPgoJCQk8YnV0dG9uIGlkPSJyZXNldCIgY2xhc3M9Im1tLXVpLWJ1dHRvbiIgc3R5bGU9ImRpc3BsYXk6bm9uZSIgb25DbGljaz0ibW1qcy5wcm92aWRlck9wdGlvbnNSZXNldCgpOyByZXR1cm4gZmFsc2U7IiBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7Ij5SZXNldDwvYnV0dG9uPgpDb250cm9sczsKCX0KCQkKfQoK', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(184, 'newmembersreport', '', 0, '2018-11-21 06:38:54'),
(185, 'apiview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fQXBpVmlldyBleHRlbmRzIE1NX1JCQUNBZG1pblZpZXcKewoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TQVZFOgoJCQkJCXJldHVybiAkdGhpcy0+c2F2ZUFwaSgkcG9zdCk7CgkJCQkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9SRU1PVkU6CgkJCQkJcmV0dXJuICR0aGlzLT5yZW1vdmVBcGlTZXQoJHBvc3QpOwoJCQkJCQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRyZXNwb25zZSk7CgkJCX0KCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiAkcmVzcG9uc2U7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Vmlld0RhdGEoTU1fRGF0YUdyaWQgJGRnKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkcm93cyA9IHBhcmVudDo6Z2V0RGF0YShNTV9UQUJMRV9BUElfS0VZUywgbnVsbCwgJGRnKTsKCQkKCQlyZXR1cm4gJHJvd3M7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiByZW1vdmVBcGlTZXQoJHBvc3QpewoJCWlmKGlzc2V0KCRwb3N0WyJpZCJdKSAmJiBpbnR2YWwoJHBvc3RbImlkIl0pID4gMCkKCQl7CgkJCSRhcGlTZXQgPSBuZXcgTU1fQXBpKCRwb3N0WyJpZCJdLCBmYWxzZSk7CgkJCSRyZXN1bHQgPSAkYXBpU2V0LT5kZWxldGUoKTsKCQkJCgkJCWlmKCRyZXN1bHQpIHsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCQkJfSAKCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSBhcGkgc2V0LiBObyBpZCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCQoJcHJpdmF0ZSBmdW5jdGlvbiBzYXZlQXBpKCRwb3N0KQoJewoJCSRyZXEgPSBhcnJheSgnYXBpX2tleScsJ2FwaV9zZWNyZXQnLCAnc3RhdHVzJywgJ25hbWUnKTsKCQlmb3JlYWNoKCRyZXEgYXMgJGtleSl7CgkJCWlmKCFpc3NldCgkcG9zdFsibW1fIi4ka2V5XSkpewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ291bGQgbm90IGZpbmQgbW1feyRrZXl9IGZpZWxkIHdoaWNoIGlzIHJlcXVpcmVkLiIuanNvbl9lbmNvZGUoJHBvc3QpLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQkKCQkkYXBpID0gbmV3IE1NX0FwaSgpOwoJCQoJCWlmKGlzc2V0KCRwb3N0WyJtbV9pZCJdKSAmJiBpbnR2YWwoJHBvc3RbIm1tX2lkIl0pPjApIHsKCQkJJGFwaS0+c2V0SWQoJHBvc3RbIm1tX2lkIl0pOwoJCX0KCQkKCQkkYXBpLT5zZXRBcGlLZXkoJHBvc3RbIm1tX2FwaV9rZXkiXSk7CgkJJGFwaS0+c2V0QXBpU2VjcmV0KCRwb3N0WyJtbV9hcGlfc2VjcmV0Il0pOwoJCSRhcGktPnNldE5hbWUoJHBvc3RbIm1tX25hbWUiXSk7CgkJJGFwaS0+c2V0U3RhdHVzKCRwb3N0WyJtbV9zdGF0dXMiXSk7CgkJcmV0dXJuICRhcGktPmNvbW1pdERhdGEoKTsKCX0KfQo=', 0, '2018-11-21 06:38:54'),
(186, 'extension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmFic3RyYWN0IGNsYXNzIE1NX0V4dGVuc2lvbgp7CQoJcHVibGljIHN0YXRpYyAkT1BUSU9OX1BSRUZJWCAgICAgICAJCT0gIm1tLWV4dGVuc2lvbi0iOwoJcHVibGljIHN0YXRpYyAkVVNFUlZPSUNFX1RPS0VOICAgICAgCT0gIlVTRVJWT0lDRSI7CglwdWJsaWMgc3RhdGljICRGQUNFQk9PS19MT0dJTl9UT0tFTiAJPSAiRmFjZWJvb2siOwoJcHVibGljIHN0YXRpYyAkTElOS0VESU5fTE9HSU5fVE9LRU4gCT0gIkxpbmtlZEluIjsKCXB1YmxpYyBzdGF0aWMgJEdPT0dMRV9MT0dJTl9UT0tFTiAgIAk9ICJHb29nbGUiOyAvL3NvY2lhbCBsb2dpbiB0b2tlbnMgbXVzdCBzdGFydCB3aXRoIGFuIHVwcGVyY2FzZSBsZXR0ZXIsIGZvbGxvd2VkIGJ5IGFsbCBsb3dlcmNhc2UhCglwdWJsaWMgc3RhdGljICRUV0lUVEVSX0xPR0lOX1RPS0VOICAJPSAiVHdpdHRlciI7CglwdWJsaWMgc3RhdGljICRHT09HTEVfRUNPTU1FUkNFX1RPS0VOCT0gImdvb2dsZV9lY29tbWVyY2UiOwoJcHVibGljIHN0YXRpYyAkQkJQUkVTU19UT0tFTiAgICAgIAkJPSAiYmJwcmVzcyI7CgoJcHJvdGVjdGVkICR0b2tlbiA9ICIiOwoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGF1dG9sb2FkRGVwZW5kZW5jaWVzPXRydWUsJGNvbmZpZ0RhdGE9IiIpIHt9CgkKCS8qKgoJICogQWxsb3cgZXh0ZW5zaW9ucyB0byBleGVjdXRlIGNvZGUgaW4gcmVzcG9uc2UgdG8gdGhlIFdvcmRQcmVzcyBpbml0IGhvb2sKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGRvSW5pdEhvb2soKSB7IH0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwZXJmb3JtSW5pdEFjdGlvbnMoKQoJewoJCWlmIChjbGFzc19leGlzdHMoIk1NX0V4dGVuc2lvbnNGYWN0b3J5IikpCgkJewoJCQkkc29jaWFsTG9naW5Qcm92aWRlcnMgPSBhcnJheSgpOwoJCQkkYWN0aXZlRXh0ZW5zaW9ucyA9IE1NX0V4dGVuc2lvbnNGYWN0b3J5OjpnZXRBY3RpdmVFeHRlbnNpb25zKCk7CgkJCWZvcmVhY2ggKCRhY3RpdmVFeHRlbnNpb25zIGFzICRhY3RpdmVFeHRlbnNpb24pCgkJCXsKCQkJCWlmICghKCRhY3RpdmVFeHRlbnNpb24gaW5zdGFuY2VvZiBNTV9BYnN0cmFjdFNvY2lhbExvZ2luRXh0ZW5zaW9uKSkKCQkJCXsKCQkJCQkkYWN0aXZlRXh0ZW5zaW9uLT5kb0luaXRIb29rKCk7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCSRzb2NpYWxMb2dpblByb3ZpZGVyc1tdID0gJGFjdGl2ZUV4dGVuc2lvbjsKCQkJCX0KCQkJfQoJCQkKCQkJaWYgKGNvdW50KCRzb2NpYWxMb2dpblByb3ZpZGVycykgPiAwKQoJCQl7CgkJCQkvL2RvSW5pdEhvb2sgb25seSBuZWVkcyB0byBiZSBjYWxsZWQgZm9yIG9uZSBvZiB0aGUgc29jaWFsIGxvZ2luIHByb3ZpZGVycywgYmVjYXVzZSBhcyBhIGdyb3VwIHRoZXkgc2hhcmUgdGhlIHNhbWUgaW5pdCBob29rCgkJCQkkaG9va0hhc1J1biA9IGZhbHNlOwoJCQkJZG8gCgkJCQl7CgkJCQkJJHNscCA9IGFycmF5X3NoaWZ0KCRzb2NpYWxMb2dpblByb3ZpZGVycyk7CgkJCQkJaWYgKCRzbHAtPmlzQWN0aXZlKCkgJiYgJHNscC0+aGFzUGVybWlzc2lvbigpKQoJCQkJCXsKCQkJCQkJJHNscC0+ZG9Jbml0SG9vaygpOwoJCQkJCQkkaG9va0hhc1J1biA9IHRydWU7CgkJCQkJfQoJCQkJfSB3aGlsZSAoKGNvdW50KCRzb2NpYWxMb2dpblByb3ZpZGVycykgPjApICYmICghJGhvb2tIYXNSdW4pKTsKCQkJfQoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGhhc1Blcm1pc3Npb24oKSB7IHJldHVybiBmYWxzZTsgfQoJCglwdWJsaWMgZnVuY3Rpb24gZGlzcGxheUxpc3RpbmdJdGVtKCkgeyByZXR1cm4gIiI7IH0KCQoJcHVibGljIGZ1bmN0aW9uIGRpc3BsYXlDb25maWdTY3JlZW4oKSB7IHJldHVybiAiIjsgfQoJCglwdWJsaWMgZnVuY3Rpb24gaXNBY3RpdmUoKSB7IHJldHVybiBmYWxzZTsgfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0T3B0aW9uKCRuYW1lKSAKCXsKCQlyZXR1cm4gZ2V0X29wdGlvbihzZWxmOjokT1BUSU9OX1BSRUZJWC5zdHJ0b2xvd2VyKCR0aGlzLT50b2tlbikuIi17JG5hbWV9IiwgIiIpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0T3B0aW9uKCRuYW1lLCAkdmFsdWUpCgl7CgkJdXBkYXRlX29wdGlvbihzZWxmOjokT1BUSU9OX1BSRUZJWC5zdHJ0b2xvd2VyKCR0aGlzLT50b2tlbikuIi17JG5hbWV9IiwgJHZhbHVlKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGxvYWREZXBlbmRlbmNpZXMoKSB7IH0KfQ==', 0, '2018-11-21 06:38:54'),
(187, 'moduleutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX01vZHVsZVV0aWxzCnsKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0UGFnZSgpCiAJewogCQlyZXR1cm4gaXNzZXQoJF9SRVFVRVNUWyJwYWdlIl0pID8gJF9SRVFVRVNUWyJwYWdlIl0gOiAiIjsKIAl9CiAJCiAJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRQcmltYXJ5VGFiKCkKIAl7CiAJCXJldHVybiBzZWxmOjpnZXRQYXJlbnRUYWIoc2VsZjo6Z2V0TW9kdWxlKCkpOwogCX0KIAkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0UGFyZW50VGFiKCR0YWIpIAoJewoJCXN3aXRjaCgkdGFiKSAKCQl7CQoJCQljYXNlIE1NX01PRFVMRV9BQ1RJVklUWV9MT0c6CgkJCWNhc2UgTU1fTU9EVUxFX1BBWVBBTF9JUE5fTE9HOgoJCQkJcmV0dXJuIE1NX01PRFVMRV9MT0dTOwoJCQkJCgkJCWNhc2UgTU1fTU9EVUxFX0FQSToKCQkJY2FzZSBNTV9NT0RVTEVfUFVTSF9OT1RJRklDQVRJT05TOgoJCQljYXNlIE1NX01PRFVMRV9QSFBfSU5URVJGQUNFOgoJCQljYXNlIE1NX01PRFVMRV9XT1JEUFJFU1NfSE9PS1M6CgkJCQlyZXR1cm4gTU1fTU9EVUxFX0RFVkVMT1BFUl9UT09MUzsKCQkJCQoJCQljYXNlIE1NX01PRFVMRV9QQVlNRU5UX01FVEhPRFM6CgkJCWNhc2UgTU1fTU9EVUxFX1RFU1RfREFUQToKCQkJY2FzZSBNTV9NT0RVTEVfQ0FOQ0VMTEFUSU9OX01FVEhPRDoKCQkJCXJldHVybiBNTV9NT0RVTEVfUEFZTUVOVF9TRVRUSU5HUzsKCQkJCQoJCQljYXNlIE1NX01PRFVMRV9BRkZJTElBVEVfSU5URUdSQVRJT046CgkJCWNhc2UgTU1fTU9EVUxFX0FGRklMSUFURV9UUkFDS0lORzoKCQkJY2FzZSBNTV9NT0RVTEVfQ09NTUlTU0lPTl9QUk9GSUxFUzogCgkJCQlyZXR1cm4gTU1fTU9EVUxFX0FGRklMSUFURV9TRVRUSU5HUzsKCQkJCQoJCQljYXNlIE1NX01PRFVMRV9FTUFJTF9JTlRFR1JBVElPTjoKCQkJY2FzZSBNTV9FTUFJTF9URU1QTEFURVM6CgkJCQlyZXR1cm4gTU1fTU9EVUxFX0VNQUlMX1NFVFRJTkdTOwoJCQkJCgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUlNISVBfTEVWRUxTOgoJCQljYXNlIE1NX01PRFVMRV9CVU5ETEVTOgoJCQljYXNlIE1NX01PRFVMRV9QUk9EVUNUUzoKCQkJY2FzZSBNTV9NT0RVTEVfQ09VUE9OUzoKCQkJY2FzZSBNTV9NT0RVTEVfRFJJUF9DT05URU5UX1NDSEVEVUxFOgoJCQljYXNlIE1NX01PRFVMRV9MSU1FTElHSFRfUFJPRFVDVFM6CgkJCWNhc2UgTU1fTU9EVUxFX0xJTUVMSUdIVF9TSElQUElOR19NRVRIT0RTOgoJCQkJcmV0dXJuIE1NX01PRFVMRV9QUk9EVUNUX1NFVFRJTkdTOwoJCQkJCgkJCWNhc2UgTU1fTU9EVUxFX0NVU1RPTV9GSUVMRFM6CgkJCWNhc2UgTU1fTU9EVUxFX0NPVU5UUklFUzoKCQkJY2FzZSBNTV9NT0RVTEVfU0hJUFBJTkc6CgkJCWNhc2UgTU1fTU9EVUxFX0NIRUNLT1VUX09USEVSX1NFVFRJTkdTOgoJCQkJcmV0dXJuIE1NX01PRFVMRV9DSEVDS09VVF9TRVRUSU5HUzsKCQkJCQoJCQljYXNlIE1NX01PRFVMRV9GUkVFX01FTUJFUl9GT1JNOgoJCQljYXNlIE1NX01PRFVMRV9MT0dJTl9GT1JNOgoJCQkJcmV0dXJuIE1NX01PRFVMRV9XRUJGT1JNUzsKCQkJCQoJCQljYXNlIE1NX01PRFVMRV9WRVJTSU9OX0hJU1RPUlk6CgkJCWNhc2UgTU1fTU9EVUxFX1JFUEFJUl9NRU1CRVJNT1VTRToKCQkJY2FzZSBNTV9NT0RVTEVfUkVQQUlSX0lOU1RBTEw6CgkJCWNhc2UgTU1fTU9EVUxFX0VNUExPWUVFUzoKCQkJY2FzZSBNTV9NT0RVTEVfRFVQTElDQVRFX1NVQlNDUklQVElPTl9UT09MOgoJCQljYXNlIE1NX01PRFVMRV9FWFRFTlNJT05TOgoJCQljYXNlIE1NX01PRFVMRV9PVEhFUl9TRVRUSU5HUzoKCQkJY2FzZSBNTV9NT0RVTEVfU0FGRV9NT0RFOgoJCQljYXNlIE1NX01PRFVMRV9ESUFHTk9TVElDUzoKCQkJY2FzZSBNTV9NT0RVTEVfU1VQUE9SVDoKCQkJCXJldHVybiBNTV9NT0RVTEVfR0VORVJBTF9TRVRUSU5HUzsKCQkJCgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUl9ERVRBSUxTX0dFTkVSQUw6CgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUl9ERVRBSUxTX0FDQ0VTU19SSUdIVFM6CgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUl9ERVRBSUxTX1RSQU5TQUNUSU9OX0hJU1RPUlk6CgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUl9ERVRBSUxTX1NVQlNDUklQVElPTlM6CgkJCWNhc2UgTU1fTU9EVUxFX01FTUJFUl9ERVRBSUxTX0dJRlRfSElTVE9SWToKCQkJY2FzZSBNTV9NT0RVTEVfTUVNQkVSX0RFVEFJTFNfQ1VTVE9NX0ZJRUxEUzoKCQkJY2FzZSBNTV9NT0RVTEVfTUVNQkVSX0RFVEFJTFNfQUNUSVZJVFlfTE9HOgoJCQljYXNlIE1NX01PRFVMRV9NRU1CRVJfREVUQUlMU19VU0VSX0RFRklORUQ6CgkJCWNhc2UgTU1fTU9EVUxFX0lNUE9SVF9XSVpBUkQ6CgkJCWNhc2UgTU1fTU9EVUxFX1VTRVJfREVGSU5FRF9QQUdFUzoKCQkJCXJldHVybiBNTV9NT0RVTEVfTUVNQkVSX0RFVEFJTFM7CgkJCQkKCQkJZGVmYXVsdDoKCQkJCXJldHVybiAiIjsKCQl9Cgl9CiAJCiAJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRNb2R1bGUoKQogCXsKIAkJJHBhZ2VOYW1lID0gc2VsZjo6Z2V0UGFnZSgpOwogCQkKIAkJJG1vZHVsZSA9IGlzc2V0KCRfUkVRVUVTVFsibW9kdWxlIl0pID8gJF9SRVFVRVNUWyJtb2R1bGUiXSA6ICIiOwoJCQoJCWlmKCFpc3NldCgkbW9kdWxlKSB8fCAkbW9kdWxlID09ICIiKQoJCXsKCQkJc3dpdGNoKCRwYWdlTmFtZSkKCQkJewkKCQkJCWNhc2UgTU1fTU9EVUxFX0xPR1M6CgkJCQkJJG1vZHVsZSA9IE1NX01PRFVMRV9BQ1RJVklUWV9MT0c7CgkJCQkJYnJlYWs7CgkJCQkKCQkJCWNhc2UgTU1fTU9EVUxFX0RFVkVMT1BFUl9UT09MUzoKCQkJCQkkbW9kdWxlID0gTU1fTU9EVUxFX1BVU0hfTk9USUZJQ0FUSU9OUzsKCQkJCQlicmVhazsKCQkJCQoJCQkJY2FzZSBNTV9NT0RVTEVfUEFZTUVOVF9TRVRUSU5HUzoKCQkJCQkkbW9kdWxlID0gTU1fTU9EVUxFX1BBWU1FTlRfTUVUSE9EUzsKCQkJCQlicmVhazsKCQkJCQoJCQkJY2FzZSBNTV9NT0RVTEVfQUZGSUxJQVRFX1NFVFRJTkdTOgoJCQkJCSRtb2R1bGUgPSBNTV9NT0RVTEVfQUZGSUxJQVRFX0lOVEVHUkFUSU9OOwoJCQkJCWJyZWFrOwoJCQkJCgkJCQljYXNlIE1NX01PRFVMRV9FTUFJTF9TRVRUSU5HUzoKCQkJCQkkbW9kdWxlID0gTU1fTU9EVUxFX0VNQUlMX0lOVEVHUkFUSU9OOwoJCQkJCWJyZWFrOwoJCQkJCgkJCQljYXNlIE1NX01PRFVMRV9QUk9EVUNUX1NFVFRJTkdTOgoJCQkJCSRtb2R1bGUgPSBNTV9NT0RVTEVfUFJPRFVDVFM7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlIE1NX01PRFVMRV9DSEVDS09VVF9TRVRUSU5HUzoKCQkJCQkkbW9kdWxlID0gTU1fTU9EVUxFX0NVU1RPTV9GSUVMRFM7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlIE1NX01PRFVMRV9XRUJGT1JNUzoKCQkJCQkkbW9kdWxlID0gTU1fTU9EVUxFX0ZSRUVfTUVNQkVSX0ZPUk07CgkJCQkJYnJlYWs7CgkJCQkKCQkJCWNhc2UgTU1fTU9EVUxFX0dFTkVSQUxfU0VUVElOR1M6CgkJCQkJJG1vZHVsZSA9IE1NX01PRFVMRV9FTVBMT1lFRVM7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCSAJY2FzZSBNTV9NT0RVTEVfREFTSEJPQVJEOgoJCQkgCQkkbW9kdWxlID0gTU1fTU9EVUxFX0RBU0hCT0FSRDsKCQkJCQlicmVhazsKCQkJCQkKCQkJCWNhc2UgTU1fTU9EVUxFX01BTkFHRV9NRU1CRVJTOgoJCQkgCQkkbW9kdWxlID0gTU1fTU9EVUxFX0JST1dTRV9NRU1CRVJTOwoJCQkJCWJyZWFrOwoJCQkJCgkJCQljYXNlIE1NX01PRFVMRV9NQU5BR0VfVFJBTlNBQ1RJT05TOgoJCQkJCSRtb2R1bGUgPSBNTV9NT0RVTEVfTUFOQUdFX1RSQU5TQUNUSU9OUzsKCQkJCQlicmVhazsKCQkJCQoJCQkJY2FzZSBNTV9NT0RVTEVfUkVQT1JUSU5HOgoJCQkJY2FzZSBNTV9NT0RVTEVfTkVXX01FTUJFUlNfUkVQT1JUOgoJCQkJY2FzZSBNTV9NT0RVTEVfTkVXX01FTUJFUlNfQ09NUEFSSVNPTl9SRVBPUlQ6CgkJCQljYXNlIE1NX01PRFVMRV9TQUxFU19CWV9QQVlNRU5UX1NFUlZJQ0VfUkVQT1JUOgoJCQkJY2FzZSBNTV9NT0RVTEVfVE9UQUxfVkFMVUVfUkVQT1JUOgoJCQkJY2FzZSBNTV9NT0RVTEVfU0FMRVNfQllfUFJPRFVDVF9SRVBPUlQ6CgkJCQljYXNlIE1NX01PRFVMRV9TSU1QTEVfQVZFUkFHRV9SRVBPUlQ6CgkJCQljYXNlIE1NX01PRFVMRV9DVVNUT01FUl9WQUxVRV9SRVBPUlQ6CgkJCQljYXNlIE1NX01PRFVMRV9BRkZJTElBVEVfUkVQT1JUOgoJCQkJY2FzZSBNTV9NT0RVTEVfU0FMRVNfQllfTUVNQkVSU0hJUF9SRVBPUlQ6CgkJCQlDQVNFIE1NX01PRFVMRV9HRVRfUkVQT1JUSU5HOgoJCQkJCSRtb2R1bGUgPSBNTV9NT0RVTEVfUkVQT1JUSU5HOwoJCQkJCWJyZWFrOwoJCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJJG1vZHVsZSA9ICIiOwoJCQkJCWJyZWFrOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkbW9kdWxlOwogCX0KIAkKIAlwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFVybCgkcGFnZSwgJG1vZHVsZT0iIikKIAl7CiAJCSR1cmwgPSBhZG1pbl91cmwoImFkbWluLnBocCIpOwogCQkkdXJsIC49ICI/cGFnZT0iLiRwYWdlOwogCQkKIAkJaWYoIWVtcHR5KCRtb2R1bGUpKQogCQl7CiAJCQkkdXJsIC49ICImbW9kdWxlPSIuJG1vZHVsZTsKIAkJfQogCQkKIAkJcmV0dXJuICR1cmw7CiAJfQogCQogCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNNZW1iZXJNb3VzZVBhZ2UoJHBhZ2UpCiAJewogCQkkdmFsaWRQYWdlcyA9IGFycmF5KAogCQkJTU1fTU9EVUxFX0RBU0hCT0FSRCwgTU1fTU9EVUxFX01BTkFHRV9NRU1CRVJTLCBNTV9NT0RVTEVfUFJPRFVDVF9TRVRUSU5HUywgTU1fTU9EVUxFX0NIRUNLT1VUX1NFVFRJTkdTLCBNTV9NT0RVTEVfUEFZTUVOVF9TRVRUSU5HUywKIAkJCU1NX01PRFVMRV9BRkZJTElBVEVfU0VUVElOR1MsIE1NX01PRFVMRV9FTUFJTF9TRVRUSU5HUywgTU1fTU9EVUxFX0RFVkVMT1BFUl9UT09MUywgTU1fTU9EVUxFX0xPR1MsIE1NX01PRFVMRV9XRUJGT1JNUywgCiAJCQkJTU1fTU9EVUxFX0dFTkVSQUxfU0VUVElOR1MsTU1fTU9EVUxFX1JFUE9SVElORyxNTV9NT0RVTEVfU1VQUE9SVAogCQkpOwogCQlyZXR1cm4gaW5fYXJyYXkoJHBhZ2UsICR2YWxpZFBhZ2VzKTsKIAl9Cn0K', 0, '2018-11-21 06:38:54'),
(188, 'paymenttoken', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKgogKiBNTV9QYXltZW50VG9rZW4gaXMgYSB2YWx1ZS1vYmplY3QgbWVhbnQgdG8gc3RvcmUgYSBwYXltZW50IHRva2VuIHJlcHJlc2VudGluZyBjcmVkaXQgY2FyZCBpbmZvcm1hdGlvbgogKiBJdCBleHRlbmRzIE1NX0NhcmRJbmZvIHNvIHRoYXQgdGhlIG1hc2tlZCBjYXJkIG51bWJlciBhbmQgZXhwaXJhdGlvbiBkYXRlIGNhbiBiZSB1dGlsaXplZCBpZiBuZWVkZWQKICoKICovCmNsYXNzIE1NX1BheW1lbnRUb2tlbiBleHRlbmRzIE1NX0NhcmRJbmZvCnsKCQoJcHJvdGVjdGVkICR0b2tlbjsKCgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRwYXltZW50VG9rZW49IiIpCgl7CgkJJHRoaXMtPnRva2VuID0gJHBheW1lbnRUb2tlbjsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VG9rZW4oKQoJewoJCXJldHVybiAkdGhpcy0+dG9rZW47Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRUb2tlbigkdG9rZW4pCgl7CgkJJHRoaXMtPnRva2VuID0gJHRva2VuOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiB2YWxpZGF0ZSgpCgl7CgkJaWYgKCR0aGlzLT50ZXN0Q2FyZCkKCQl7CgkJCS8vYnlwYXNzIHZhbGlkYXRpb24gdG8gYWxsb3cgYm9ndXMgdmFsdWVzIGZvciB0ZXN0aW5nCgkJCXJldHVybiB0cnVlOwoJCX0KCQkKCQkkdG9rZW5FcnJvciA9ICIiOwoJCWlmIChlbXB0eSgkdGhpcy0+dG9rZW4pKQoJCXsKCQkJJHRva2VuRXJyb3IuPSAiUGF5bWVudCBpbmZvcm1hdGlvbiBub3Qgc3VwcGxpZWQiOwkKCQl9CgkJcmV0dXJuIChlbXB0eSgkdG9rZW5FcnJvcikpP3RydWU6JHRva2VuRXJyb3I7Cgl9Cn0=', 0, '2018-11-21 06:38:54'),
(189, 'bundlesview', 'LyoqCiAqIAogKiAKICogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwpjbGFzcyBNTV9CdW5kbGVzVmlldyBleHRlbmRzIE1NX1JCQUNQcm9kdWN0TWFuYWdlclZpZXcKewkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcGVyZm9ybUFjdGlvbigkcG9zdCkgCgl7CQoJCSRyZXNwb25zZSA9IHBhcmVudDo6cGVyZm9ybUFjdGlvbigkcG9zdCk7CgkJCgkJaWYoISgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSkpCgkJewoJCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkgCgkJCXsKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NBVkU6CgkJCQkJcmV0dXJuICR0aGlzLT5zYXZlQnVuZGxlKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUJ1bmRsZSgkcG9zdCk7CgkJCQkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TSE9XX0JVWV9OT1dfTElOS1M6CgkJCQkJcmV0dXJuICR0aGlzLT5zaG93UHVyY2hhc2VMaW5rcygkcG9zdCk7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YSgkcG9zdCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHJvd3MgPSBwYXJlbnQ6OmdldERhdGEoTU1fVEFCTEVfQlVORExFUywgbnVsbCwgJHBvc3QpOwoJCQoJCWZvcmVhY2goJHJvd3MgYXMgJHJvdykKCQl7IAoJCQkkc3FsID0gInNlbGVjdCBjb3VudCgqKSBhcyB0b3RhbCBmcm9tICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTLiIgd2hlcmUgYWNjZXNzX3R5cGU9JyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX1VTRVIuIicgYW5kIGJ1bmRsZV9pZD0neyRyb3ctPmlkfScgYW5kIChzdGF0dXM9JyIuTU1fU3RhdHVzOjokQUNUSVZFLiInIE9SIHN0YXR1cz0nIi5NTV9TdGF0dXM6OiRQRU5ESU5HX0NBTkNFTExBVElPTi4iJykiOwoJCQkkb2JqID0kd3BkYi0+Z2V0X3Jvdygkc3FsKTsKCQkJJHJvdy0+bWVtYmVyX2NvdW50ID0gJG9iai0+dG90YWw7CgkJCQoJCQkkc3FsID0gInNlbGVjdCBwLiogZnJvbSAiLk1NX1RBQkxFX0JVTkRMRV9QUk9EVUNUUy4iIGF0cCwgIi5NTV9UQUJMRV9QUk9EVUNUUy4iIHAgd2hlcmUgYXRwLmJ1bmRsZV9pZD0neyRyb3ctPmlkfScgYW5kIGF0cC5wcm9kdWN0X2lkPXAuaWQiOwoJCQkkcm93LT5wcm9kdWN0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQl9CgkJCgkJcmV0dXJuICRyb3dzOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHNhdmVCdW5kbGUoJHBvc3QpCgl7CgkJJGJ1bmRsZSA9IG5ldyBNTV9CdW5kbGUoKTsKCQkKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJpZCJdKSA+IDApIAoJCXsKCQkJJGJ1bmRsZSA9IG5ldyBNTV9CdW5kbGUoJHBvc3RbImlkIl0pOwoJCQkKCQkJaWYoISRidW5kbGUtPmlzVmFsaWQoKSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ2Fubm90IHVwZGF0ZSBidW5kbGUuIEludmFsaWQgSUQgJ3skcG9zdFsnaWQnXX0nIHBhc3NlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQkKCQkvLyBjaGVjayBpZiBzaG9ydCBuYW1lIGlzIHVuaXF1ZQoJCSRidW5kbGVJZCA9ICgkYnVuZGxlLT5pc1ZhbGlkKCkpID8gJGJ1bmRsZS0+Z2V0SWQoKSA6IDA7CgkJaWYgKCFNTV9CdW5kbGU6OmNoZWNrU2hvcnROYW1lSXNVbmlxdWUoJHBvc3RbIm1tX3Nob3J0X25hbWUiXSwgJGJ1bmRsZUlkKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNhbm5vdCB1cGRhdGUgYnVuZGxlLiBTaG9ydCBuYW1lICd7JHBvc3RbIm1tX3Nob3J0X25hbWUiXX0nIGlzIG5vdCB1bmlxdWUuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKGlzc2V0KCRwb3N0WyJtbV9zdWJzY3JpcHRpb25fdHlwZSJdKSAmJiAkcG9zdFsibW1fc3Vic2NyaXB0aW9uX3R5cGUiXT09ImZyZWUiKSB7IAoJIAkJJHBvc3RbIm1tX3N1YnNjcmlwdGlvbl90eXBlIl0gPSAnMSc7CgkgCX0gZWxzZSB7IAoJIAkJJHBvc3RbIm1tX3N1YnNjcmlwdGlvbl90eXBlIl09ICAnMCc7CgkgCX0KCSAJCgkgCWlmKCRwb3N0WyJtbV9zdGF0dXMiXT09ImFjdGl2ZSIpIHsKCSAJCSRwb3N0WyJtbV9zdGF0dXMiXSA9ICIxIjsKCSAJfSBlbHNlIHsKCSAJCSRwb3N0WyJtbV9zdGF0dXMiXSA9ICIwIjsKCSAJfQoJIAkKCSAJJGJ1bmRsZS0+c2V0SXNGcmVlKCRwb3N0WyJtbV9zdWJzY3JpcHRpb25fdHlwZSJdKTsKCSAJJGJ1bmRsZS0+c2V0U3RhdHVzKCRwb3N0WyJtbV9zdGF0dXMiXSk7CgkgCSRidW5kbGUtPnNldERmbHRNZW1iZXJzaGlwSWQoJHBvc3RbIm1tX2RmbHRfbWVtYmVyc2hpcF9zZWxlY3RvciJdKTsKCQkkYnVuZGxlLT5zZXROYW1lKCRwb3N0WyJtbV9kaXNwbGF5X25hbWUiXSk7CgkgCSRidW5kbGUtPnNldERlc2NyaXB0aW9uKCRwb3N0WyJtbV9kZXNjcmlwdGlvbiJdKTsJCgkgCSRidW5kbGUtPnNldFNob3J0TmFtZShzdHJ0b3VwcGVyKCRwb3N0WyJtbV9zaG9ydF9uYW1lIl0pKTsKCQoJIAlpZihpc3NldCgkcG9zdFsic2hvdWxkX2V4cGlyZSJdKSAmJiBzdHJ0b2xvd2VyKCRwb3N0WyJzaG91bGRfZXhwaXJlIl0pPT0iMSIpewoJIAkJJGJ1bmRsZS0+c2V0RXhwaXJlcygiMSIpOwoJIAkJJGJ1bmRsZS0+c2V0RXhwaXJlQW1vdW50KCRwb3N0WyJleHBpcmVfYW1vdW50Il0pOwoJIAkJJGJ1bmRsZS0+c2V0RXhwaXJlUGVyaW9kKCRwb3N0WyJleHBpcmVfcGVyaW9kIl0pOwkKCSAJfQoJIAllbHNlewoJIAkJJGJ1bmRsZS0+c2V0RXhwaXJlcygiMCIpOwoJIAl9CgkgCQoJCS8vIHVwZGF0ZSBwcm9kdWN0IHJlbGF0aW9uc2hpcHMKCSAJaWYoaXNzZXQoJHBvc3RbIm1tX3Byb2R1Y3RzIl0pICYmIGlzX2FycmF5KCRwb3N0WyJtbV9wcm9kdWN0cyJdKSAmJiBjb3VudCgkcG9zdFsibW1fcHJvZHVjdHMiXSkgPiAwKQoJIAl7CgkJIAkkYnVuZGxlLT5zZXRQcm9kdWN0cygkcG9zdFsibW1fcHJvZHVjdHMiXSk7CgkJfQoJCWVsc2UKCQl7CgkJCSRidW5kbGUtPnNldFByb2R1Y3RzKGFycmF5KCkpOwoJCX0KCSAJCgkgCWlmKCFlbXB0eSgkcG9zdFsibW1fY2F0ZWdvcmllcyJdKSAmJiBpc19hcnJheSgkcG9zdFsibW1fY2F0ZWdvcmllcyJdKSAmJiBjb3VudCgkcG9zdFsibW1fY2F0ZWdvcmllcyJdKSA+IDApCgkgCXsKCSAJCSRidW5kbGUtPnNldENhdGVnb3JpZXMoJHBvc3RbIm1tX2NhdGVnb3JpZXMiXSk7CgkgCX0KCSAJZWxzZQoJIAl7CgkgCQkkYnVuZGxlLT5zZXRDYXRlZ29yaWVzKGFycmF5KCkpOwoJIAl9CgkJCgkJcmV0dXJuICRidW5kbGUtPmNvbW1pdERhdGEoKTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiByZW1vdmVCdW5kbGUoJHBvc3QpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCWlmKGlzc2V0KCRwb3N0WyJpZCJdKSAmJiBpbnR2YWwoJHBvc3RbImlkIl0pID4gMCkKCQl7CgkJCSRidW5kbGUgPSBuZXcgTU1fQnVuZGxlKCRwb3N0WyJpZCJdLCBmYWxzZSk7CgkJCSRyZXN1bHQgPSAkYnVuZGxlLT5kZWxldGUoKTsKCQkJCgkJCWlmKCRyZXN1bHQpIHsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCQkJfSAKCQkJZWxzZSB7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJUaGlzIGJ1bmRsZSBoYXMgZXhpc3RpbmcgYXNzb2NpYXRpb25zIGFuZCBjYW4ndCBiZSByZW1vdmVkLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBkZWxldGUgYnVuZGxlLiBObyBpZCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gc2hvd1B1cmNoYXNlTGlua3MoJHBvc3QpCgl7CgkJaWYoaXNzZXQoJHBvc3RbImFjY2Vzc190eXBlX2lkIl0pICYmIGlzc2V0KCRwb3N0WyJhY2Nlc3NfdHlwZV9uYW1lIl0pKQoJCXsKCQkJJGRhdGEgPSBuZXcgc3RkQ2xhc3MoKTsKCQkJJGRhdGEtPmFjY2Vzc1R5cGVJZCA9ICRwb3N0WyJhY2Nlc3NfdHlwZV9pZCJdOwoJCQkkZGF0YS0+YWNjZXNzVHlwZU5hbWUgPSBzdHJpcHNsYXNoZXMoJHBvc3RbImFjY2Vzc190eXBlX25hbWUiXSk7CgkJCQoJCQlpZihpc3NldCgkcG9zdFsicHJvZHVjdF9pZHMiXSkgJiYgIWVtcHR5KCRwb3N0WyJwcm9kdWN0X2lkcyJdKSkKCQkJewoJCQkJJGRhdGEtPnByb2R1Y3RJZHMgPSBleHBsb2RlKCIsIiwgJHBvc3RbInByb2R1Y3RfaWRzIl0pOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJGRhdGEtPnByb2R1Y3RJZHMgPSBhcnJheSgpOwoJCQl9CgkJCQoJCQkkY29udGVudCA9IE1NX1RFTVBMQVRFOjpnZW5lcmF0ZShNTV9NT0RVTEVTLiIvIi5NTV9NT0RVTEVfQlVORExFUy4iLiIuTU1fTU9EVUxFX1BVUkNIQVNFX0xJTktTLiIuZGlhbG9nLnBocCIsICRkYXRhKTsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkY29udGVudCk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkJ1bmRsZSBJRCBhbmQgbmFtZSBhcmUgcmVxdWlyZWQgdG8gZGlzcGxheSBwdXJjaGFzZSBsaW5rcyIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KfQo=', 0, '2018-11-21 06:38:54'),
(190, 'preview', 'Y2xhc3MgTU1fUHJldmlldwp7Cglwcml2YXRlICRhY2Nlc3NUYWdzID0gYXJyYXkoKTsKCXByaXZhdGUgJHVzZXI7Cglwcml2YXRlICRkYXlzID0wOwoJcHJpdmF0ZSAkbWVtYmVyVHlwZUlkPTA7Cglwcml2YXRlICRhY2Nlc3NUYWdBcHBsaWVkPWFycmF5KCk7CgkKCQogCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpe30KIAkKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCR1c2VySWQsICRkYXlzPTAsICRtZW1iZXJUeXBlSWQ9bnVsbCwgJGFjY2Vzc1RhZ3M9bnVsbCkKCXsKCQkkdXNlck9iaiA9IG5ldyBNTV9Vc2VyKCR1c2VySWQpOwoJCSR1c2VyT2JqLT5zZXRJZCgkdXNlcklkKTsKCQkkdXNlck9iai0+c2V0TWVtYmVyc2hpcElkKCRtZW1iZXJUeXBlSWQpOwoJCSR1c2VyT2JqLT5zZXRGaXJzdE5hbWUoIkFkbWluIik7CgkJJHVzZXJPYmotPnNldExhc3ROYW1lKCJUZXN0Iik7CgkJJHVzZXJPYmotPnNldFBob25lKCIoNTU1KSA1NTUtNTU1NSIpOwoJCSR1c2VyT2JqLT5zZXRFbWFpbCgic2FtcGxlQHRlc3QuY29tIik7CgkJJHVzZXJPYmotPnNldFBhc3N3b3JkKCJhZG1pbjEyMzEiKTsKCQkkdXNlck9iai0+c2V0VXNlcm5hbWUoInNhbXBsZXVzZXJuYW1lIik7CgkJJHVzZXJPYmotPnNldFN0YXR1cygiMSIpOwoJCSR1c2VyT2JqLT5zZXRCaWxsaW5nQWRkcmVzcygiMTIzIEZha2UgU3QuIik7CgkJJHVzZXJPYmotPnNldEJpbGxpbmdDaXR5KCJOb3doZXJlIik7CgkJJHVzZXJPYmotPnNldEJpbGxpbmdTdGF0ZSgiVFgiKTsKCQkkdXNlck9iai0+c2V0QmlsbGluZ1ppcENvZGUoIjU1NTU1Iik7CgkJJHVzZXJPYmotPnNldEJpbGxpbmdDb3VudHJ5KE1NX0NvdW50cnlVdGlsczo6JERGTFRfQ09VTlRSWV9JU08pOwoJCSR1c2VyT2JqLT5zZXRTaGlwcGluZ0FkZHJlc3MoIjEyMyBGYWtlIFN0LiIpOwoJCSR1c2VyT2JqLT5zZXRTaGlwcGluZ0NpdHkoIk5vd2hlcmUiKTsKCQkkdXNlck9iai0+c2V0U2hpcHBpbmdTdGF0ZSgiVFgiKTsKCQkkdXNlck9iai0+c2V0U2hpcHBpbmdaaXBDb2RlKCI1NTU1NSIpOwoJCSR1c2VyT2JqLT5zZXRTaGlwcGluZ0NvdW50cnkoTU1fQ291bnRyeVV0aWxzOjokREZMVF9DT1VOVFJZX0lTTyk7CgkJJHVzZXJPYmotPnZhbGlkYXRlKCk7CgkJJHRoaXMtPnVzZXIgPSAkdXNlck9iajsKCQkKCQkkdGhpcy0+YWNjZXNzVGFncyA9IChpc19hcnJheSgkYWNjZXNzVGFncykpP2FycmF5X2tleXMoJGFjY2Vzc1RhZ3MpOmFycmF5KCk7CgkJJHRoaXMtPmFjY2Vzc1RhZ0FwcGxpZWQgPSAkYWNjZXNzVGFnczsKCQkkdGhpcy0+ZGF5cyA9ICRkYXlzOwoJCU1NX1Nlc3Npb246OnZhbHVlKE1NX1Nlc3Npb246OiRLRVlfUFJFVklFV19NT0RFLCBzZXJpYWxpemUoJHRoaXMpKTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXREYXRhKCkKCXsKCQlnbG9iYWwgJGN1cnJlbnRfdXNlcjsKCQkkcHJldmlld09iaiA9IHVuc2VyaWFsaXplKE1NX1Nlc3Npb246OnZhbHVlKE1NX1NFU1NJT046OiRLRVlfUFJFVklFV19NT0RFKSk7CgkJJG1lbWJlclR5cGVMaXN0ID0gTU1fTWVtYmVyc2hpcExldmVsOjpnZXRNZW1iZXJzaGlwTGV2ZWxQb3N0QWNjZXNzKCk7CgkKCQlpZihpc19vYmplY3QoJHByZXZpZXdPYmopKQoJCXsJCgkJCXJldHVybiAkcHJldmlld09iajsKCQl9CgkJaWYoaXNfYXJyYXkoJG1lbWJlclR5cGVMaXN0KSkKCQl7CgkJCSRtZW1iZXJUeXBlSWQgPSBrZXkoJG1lbWJlclR5cGVMaXN0KTsKCQl9IAoJCQoJCSRvYmogPSBuZXcgTU1fUHJldmlldygpOwoJCSRvYmotPnNldERhdGEoJGN1cnJlbnRfdXNlci0+SUQsIDAsICRtZW1iZXJUeXBlSWQpOwoJCSRwcmV2aWV3T2JqID0gdW5zZXJpYWxpemUoTU1fU2Vzc2lvbjo6dmFsdWUoTU1fU0VTU0lPTjo6JEtFWV9QUkVWSUVXX01PREUpKTsKCQlpZihpc19vYmplY3QoJHByZXZpZXdPYmopKQoJCXsKCQkJcmV0dXJuICRwcmV2aWV3T2JqOwoJCX0KCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2xlYXJQcmV2aWV3TW9kZSgpCgl7CgkJTU1fU2Vzc2lvbjo6Y2xlYXIoTU1fU0VTU0lPTjo6JEtFWV9QUkVWSUVXX01PREUpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0QXBwbGllZERheXMoJGFjY2Vzc1RhZ0lkKQoJewoJCWlmKGlzc2V0KCR0aGlzLT5hY2Nlc3NUYWdBcHBsaWVkWyRhY2Nlc3NUYWdJZF0pKSAKCQl7CgkJCXJldHVybiAkdGhpcy0+YWNjZXNzVGFnQXBwbGllZFskYWNjZXNzVGFnSWRdOwoJCX0KCQkKCQlyZXR1cm4gMDsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFVzZXIoKQoJewoJCXJldHVybiAkdGhpcy0+dXNlcjsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldERheXMoKQoJewoJCXJldHVybiAkdGhpcy0+ZGF5czsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEJ1bmRsZXMoKQoJewoJCXJldHVybiAkdGhpcy0+YWNjZXNzVGFnczsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldE1lbWJlcnNoaXBJZCgpCgl7CgkJJHVzZXIgPSAkdGhpcy0+dXNlcjsKCQlyZXR1cm4gJHVzZXItPmdldE1lbWJlcnNoaXBJZCgpOwoJfQp9Cg==', 0, '2018-11-21 06:38:54');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(191, 'acapi', 'Y2xhc3MgTU1fQUNBUEkKewoJcHJvdGVjdGVkICR2ZXJzaW9uID0gJzEuMCc7Cglwcm90ZWN0ZWQgJGVycm9yQ29kZTsKCXByb3RlY3RlZCAkZXJyb3JNZXNzYWdlOwoKCS8qKgoJICogQVBJIGxvY2F0aW9uIG9uIHRoZSBzZXJ2ZXIKCSAqLwoJcHJvdGVjdGVkICRhcGlVcmw7CgoJLyoqCgkgKiBVc2VyIEFQSSBLZXkgc28gd2Ugb25seSBoYXZlIHRvIGxvZyBpbiBvbmNlIHBlciBjbGllbnQgaW5zdGFudGlhdGlvbgoJICovCglwcm90ZWN0ZWQgJGFwaUtleTsKCgkvKioKCSAqIERlZmF1bHQgdG8gYSAzMDAgc2Vjb25kIHRpbWVvdXQgb24gc2VydmVyIGNhbGxzCgkgKi8KCXByb3RlY3RlZCAkdGltZW91dCA9IDMwMDsgCgoJLyoqCgkgKiBDb25uZWN0IHRvIHRoZSBBY3RpdmVDYW1wYWlnbiBBUEkgZm9yIGEgZ2l2ZW4gbGlzdC4KCSAqIAoJICogQHBhcmFtIHN0cmluZyAkYXBpVXJsIFlvdXIgQWN0aXZlQ2FtcGFpZ24gYXBpIHVybAoJICogQHBhcmFtIHN0cmluZyAkYXBpS2V5IFlvdXIgQWN0aXZlQ2FtcGFpZ24gQVBJIGtleQoJICogQHBhcmFtIGludCAkdGltZW91dCBzZWNvbmRzIHRpbWVvdXQgb24gc2VydmVyIGNhbGxzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkYXBpVXJsID0gbnVsbCwgJGFwaUtleSA9IG51bGwsICR0aW1lb3V0ID0gbnVsbCkKCXsKCQlpZiAoJGFwaVVybCAhPT0gbnVsbCkKCQkJJHRoaXMtPnNldEFwaVVybCgkYXBpVXJsKTsKCQlpZiAoJGFwaUtleSAhPT0gbnVsbCkKCQkJJHRoaXMtPnNldEFwaUtleSgkYXBpS2V5KTsKCQlpZiAoJHRpbWVvdXQgIT09IG51bGwpCgkJCSR0aGlzLT5zZXRUaW1lb3V0KCR0aW1lb3V0KTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0VmVyc2lvbigpCgl7CgkJcmV0dXJuICR0aGlzLT52ZXJzaW9uOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRWZXJzaW9uKCR2ZXJzaW9uKQoJewoJCSR0aGlzLT52ZXJzaW9uID0gJHZlcnNpb247CgkJcmV0dXJuICR0aGlzOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBnZXRFcnJvckNvZGUoKQoJewoJCXJldHVybiAkdGhpcy0+ZXJyb3JDb2RlOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRFcnJvckNvZGUoJGVycm9yQ29kZSkKCXsKCQkkdGhpcy0+ZXJyb3JDb2RlID0gJGVycm9yQ29kZTsKCQlyZXR1cm4gJHRoaXM7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZSgpCgl7CgkJcmV0dXJuICR0aGlzLT5lcnJvck1lc3NhZ2U7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIHNldEVycm9yTWVzc2FnZSgkZXJyb3JNZXNzYWdlKQoJewoJCSR0aGlzLT5lcnJvck1lc3NhZ2UgPSAkZXJyb3JNZXNzYWdlOwoJCXJldHVybiAkdGhpczsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZ2V0QXBpVXJsKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmFwaVVybDsKCX0KCglwdWJsaWMgZnVuY3Rpb24gc2V0QXBpVXJsKCRhcGlVcmwpCgl7CgkJJHRoaXMtPmFwaVVybCA9ICRhcGlVcmw7CgkJcmV0dXJuICR0aGlzOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBnZXRBcGlLZXkoKQoJewoJCXJldHVybiAkdGhpcy0+YXBpS2V5OwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXRBcGlLZXkoJGFwaUtleSkKCXsKCQkkdGhpcy0+YXBpS2V5ID0gJGFwaUtleTsKCQlyZXR1cm4gJHRoaXM7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGdldFRpbWVvdXQoKQoJewoJCXJldHVybiAkdGhpcy0+dGltZW91dDsKCX0KCglwdWJsaWMgZnVuY3Rpb24gc2V0VGltZW91dCgkdGltZW91dCkKCXsKCQkkdGhpcy0+dGltZW91dCA9IChpbnQpJHRpbWVvdXQ7CgkJcmV0dXJuICR0aGlzOwoJfQoKCS8qKgoJICogR2V0IHVzZXIgaW5mbyBmcm9tIEFjdGl2ZUNhbXBhaWduCgkgKgoJICogQGxpbmsgaHR0cDovL3d3dy5hY3RpdmVjYW1wYWlnbi5jb20vYXBpL2V4YW1wbGUucGhwP2NhbGw9Y29udGFjdF92aWV3X2VtYWlsCgkgKgoJICogQHBhcmFtIHN0cmluZyAkZW1haWwgRW1haWwgYWRkcmVzcwoJICogQHJldHVybiBtaXhlZAoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q29udGFjdCgkZW1haWwpCgl7CgkJc3RhdGljICRyZXNwb25zZSA9IGFycmF5KCk7CgkJaWYgKCFpc3NldCgkcmVzcG9uc2VbJGVtYWlsXSkpCgkJCSRyZXNwb25zZVskZW1haWxdID0gJHRoaXMtPmNhbGxTZXJ2ZXIoJ2NvbnRhY3Rfdmlld19lbWFpbCcsIGFycmF5KCdlbWFpbCcgPT4gJGVtYWlsKSk7Ci8vZXJyb3JfbG9nKCJDT05UQUNUW3skZW1haWx9XTogIi5wcmludF9yKCRyZXNwb25zZVskZW1haWxdLCB0cnVlKSk7CgkJcmV0dXJuICRyZXNwb25zZVskZW1haWxdOwoJfQoKCS8qKgoJICogUmVtb3ZlIHRhZ3MKCSAqCgkgKiBAbGluayBodHRwOi8vd3d3LmFjdGl2ZWNhbXBhaWduLmNvbS9hcGkvZXhhbXBsZS5waHA/Y2FsbD1jb250YWN0X3RhZ19yZW1vdmUKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRlbWFpbCBFbWFpbCBhZGRyZXNzCgkgKiBAcGFyYW0gbWl4ZWQgJHRhZ3MgTGlzdCBvZiB0YWdzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiB0YWdSZW1vdmUoJGVtYWlsLCAkdGFncykKCXsKCQkkdGFncyA9ICFpc19hcnJheSgkdGFncykgPyBleHBsb2RlKCcsJywgJHRhZ3MpIDogJHRhZ3M7CgkJJHJlc3VsdCA9ICR0aGlzLT5nZXRDb250YWN0KCRlbWFpbCk7CgkJJGNsZWFuVGFncyA9IGFycmF5KCk7CgkJaWYgKCRyZXN1bHQgJiYgaXNzZXQoJHJlc3VsdFsndGFncyddKSkgewoJCQkvLyByZW1vdmUgb25seSB0aG9zZSB0YWdzIGF0dGFjaGVkIHRvIHVzZXIKCQkJZm9yZWFjaCAoJHJlc3VsdFsndGFncyddIGFzICR0YWcpIHsKCQkJCWlmIChpbl9hcnJheSgkdGFnLCAkdGFncykpCgkJCQkJJGNsZWFuVGFnc1tdID0gJHRhZzsKCQkJfQoJCX0KCgkJaWYgKCEkY2xlYW5UYWdzKQoJCQlyZXR1cm4gZmFsc2U7CgoJCSRwYXJhbXMgPSBhcnJheSgKCQkJJ2VtYWlsJyA9PiAkZW1haWwsCgkJCSd0YWdzJyA9PiBpbXBsb2RlKCcsICcsICRjbGVhblRhZ3MpLAoJCSk7CgkJcmV0dXJuICR0aGlzLT5jYWxsU2VydmVyKCdjb250YWN0X3RhZ19yZW1vdmUnLCAkcGFyYW1zLCB0cnVlKTsKCX0KCgkvKioKCSAqIFJldHJpZXZlIGFsbCBvZiB0aGUgbGlzdHMgZGVmaW5lZCBmb3IgeW91ciB1c2VyIGFjY291bnQKCSAqCgkgKiBAbGluayBodHRwOi8vd3d3LmFjdGl2ZWNhbXBhaWduLmNvbS9hcGkvZXhhbXBsZS5waHA/Y2FsbD1saXN0X2xpc3QKCSAqCgkgKiBAcGFyYW0gYXJyYXkgJGZpbHRlcnMgYSBoYXNoIG9mIGZpbHRlcnMgdG8gYXBwbHkgdG8gdGhpcyBxdWVyeSAtIGFsbCBhcmUgb3B0aW9uYWw6CgkJc3RyaW5nIGlkcyBvcHRpb25hbCAtIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2Ygc3Vic2NyaXB0aW9uIGZvcm0gSUQncyBvZiBsaXN0cyB5b3Ugd2lzaCB0byB2aWV3LiBQYXNzICJhbGwiIHRvIHZpZXcgYWxsIGxpc3RzLiBEZWZhdWx0OiAiYWxsIgoJCXN0cmluZyBmaWx0ZXJzIG9wdGlvbmFsIC0gRmlsdGVyOiBQZXJmb3JtIGEgcGF0dGVybiBtYXRjaCAoTElLRSkgZm9yIExpc3QgTmFtZS4KCQlib29sZWFuIGdsb2JhbF9maWVsZHMgb3B0aW9uYWwgLSBXaGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlIGdsb2JhbCBjdXN0b20gZmllbGRzLiAoc2V0IHRvIHRydWUgZm9yIHllcywgYW5kIGZhbHNlIGZvciBubykuIERlZmF1bHQ6IGZhbHNlCgkJYm9vbGVhbiBmdWxsIG9wdGlvbmFsIC0gV2hldGhlciBvciBub3QgdG8gcmV0dXJuIEFMTCBkYXRhLCBvciBhbiBhYmJyZXZpYXRlZCBwb3J0aW9uIChzZXQgdG8gMSBmb3IgQUxMIGRhdGEsIGFuZCAwIGZvciBhYmJyZXZpYXRlZCkuIERlZmF1bHQ6IGZhbHNlCgkgKiBAcGFyYW0gaW50ICRzdGFydCBvcHRpb25hbCAtIGNvbnRyb2wgcGFnaW5nIG9mIGxpc3RzLCBzdGFydCByZXN1bHRzIGF0IHRoaXMgbGlzdCAjLCBkZWZhdWx0cyB0byAxc3QgcGFnZSBvZiBkYXRhICAocGFnZSAwKQoJICogQHBhcmFtIGludCAkbGltaXQgb3B0aW9uYWwgLSBjb250cm9sIHBhZ2luZyBvZiBsaXN0cywgbnVtYmVyIG9mIGxpc3RzIHRvIHJldHVybiB3aXRoIGVhY2ggY2FsbCwgZGVmYXVsdHMgdG8gMjUgKG1heD0xMDApCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IHdpdGgga2V5cyBsaXN0ZWQgaW4gUmV0dXJuZWQgRmllbGRzIGJlbG93CgkgKiBAcmV0dXJuZiBpbnQgdG90YWwgdGhlIHRvdGFsIG51bWJlciBvZiBsaXN0cyB3aGljaCBtYXRjaGVkIHRoZSBwcm92aWRlZCBmaWx0ZXJzCgkgKiBAcmV0dXJuZiBhcnJheSBkYXRhIHRoZSBsaXN0cyB3aGljaCBtYXRjaGVkIHRoZSBwcm92aWRlZCBmaWx0ZXJzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBsaXN0cygkZmlsdGVycyA9IGFycmF5KCksICRzdGFydCA9IDAsICRsaW1pdCA9IDI1KQoJewoJCSRwYXJhbXMgPSBhcnJheSgpOwoJCSRwYXJhbXNbJ2lkcyddID0gaXNzZXQoJGZpbHRlcnNbJ2lkcyddKSA/ICRmaWx0ZXJzWydpZHMnXSA6ICdhbGwnOwoJCS8vJHBhcmFtc1snc3RhcnQnXSA9ICRzdGFydDsKCQkvLyRwYXJhbXNbJ2xpbWl0J10gPSAkbGltaXQ7CgkJJGxpc3RzID0gYXJyYXkoKTsKCQlpZiAoJHJlc3VsdCA9ICR0aGlzLT5jYWxsU2VydmVyKCdsaXN0X2xpc3QnLCAkcGFyYW1zKSkgewoJCQlmb3JlYWNoICgkcmVzdWx0IGFzICRrZXkgPT4gJHZhbHVlKSB7CgkJCQlpZiAoIWlzX251bWVyaWMoJGtleSkpIAoJCQkJCWNvbnRpbnVlOwoJCQkJJGxpc3RzWyR2YWx1ZVsnaWQnXV0gPSAkdmFsdWVbJ25hbWUnXTsgCgkJCX0KCQl9CgkJcmV0dXJuICRsaXN0czsKCX0KCgkvKioKCSAqIFN1YnNjcmliZSB0aGUgcHJvdmlkZWQgZW1haWwgdG8gYSBsaXN0LgoJICoKCSAqIEBsaW5rIGh0dHA6Ly93d3cuYWN0aXZlY2FtcGFpZ24uY29tL2FwaS9leGFtcGxlLnBocD9jYWxsPWNvbnRhY3Rfc3luYwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGlkIHRoZSBsaXN0IGlkIHRvIGNvbm5lY3QgdG8uIEdldCBieSBjYWxsaW5nIGxpc3RzKCkKCSAqIEBwYXJhbSBzdHJpbmcgJGVtYWlsIHRoZSBlbWFpbCBhZGRyZXNzIHRvIHN1YnNjcmliZQoJICogQHBhcmFtIGFycmF5ICR2YXJzIG9wdGlvbmFsIG1lcmdlcyBmb3IgdGhlIGVtYWlsIChGTkFNRSwgTE5BTUUsIGV0Yy4pIChzZWUgZXhhbXBsZXMgYmVsb3cgZm9yIGhhbmRsaW5nICJibGFuayIgYXJyYXlzKS4gTm90ZSB0aGF0IGEgbWVyZ2UgZmllbGQgY2FuIG9ubHkgaG9sZCB1cCB0byAyNTUgYnl0ZXMuIEFsc28sIHRoZXJlIGFyZSBhIGZldyAic3BlY2lhbCIga2V5czoKCSAqIEBwYXJhbSBib29sICR1cGRhdGVfZXhpc3Rpbmcgb3B0aW9uYWwgZmxhZyB0byBjb250cm9sIHdoZXRoZXIgYSBleGlzdGluZyBzdWJzY3JpYmVycyBzaG91bGQgYmUgdXBkYXRlZCBpbnN0ZWFkIG9mIHRocm93aW5nIGFuZCBlcnJvciwgZGVmYXVsdHMgdG8gZmFsc2UKCgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlLgoJICovCglwdWJsaWMgZnVuY3Rpb24gbGlzdFN1YnNjcmliZSgkaWQsICRlbWFpbCwgJHZhcnMgPSBudWxsLCAkdXBkYXRlX2V4aXN0aW5nID0gZmFsc2UpCgl7CgkJJHBhcmFtcyA9IGFycmF5KAoJCQknZW1haWwnID0+ICRlbWFpbCwKCQkJJ3BbJy4kaWQuJ10nID0+ICRpZCwKCQkJJ3N0YXR1c1snLiRpZC4nXScgPT4gMSwgLy8gMSA9IGFjdGl2ZSwgMiB1bnN1YnNjcmliZWQKCQkpOwoJCWlmICgkdXBkYXRlX2V4aXN0aW5nKSB7CgkJCSRwYXJhbXMgPSAkdGhpcy0+bWVyZ2VWYXJzKCRwYXJhbXMsICR2YXJzKTsKCQkJaWYgKCRwYXJhbXNbJ3VudGFncyddKSB7CgkJCQkkdGhpcy0+dGFnUmVtb3ZlKCRlbWFpbCwgJHBhcmFtc1sndW50YWdzJ10pOwovL2Vycm9yX2xvZygnVU5UQUdTOiAnLnByaW50X3IoJHBhcmFtc1sndW50YWdzJ10sdHJ1ZSkpOwoJCQkJdW5zZXQoJHBhcmFtc1sndW50YWdzJ10pOwoJCQl9CgkJfQoJCXJldHVybiAkdGhpcy0+Y2FsbFNlcnZlcignY29udGFjdF9zeW5jJywgJHBhcmFtcywgdHJ1ZSk7Cgl9CgoJcHJvdGVjdGVkIGZ1bmN0aW9uIG1lcmdlVmFycyhBcnJheSAkZGF0YSwgQXJyYXkgJHZhcnMpCgl7CgkJaWYgKGlzc2V0KCR2YXJzWydGTkFNRSddKSkgewoJCQkkZGF0YVsnZmlyc3RfbmFtZSddID0gJHZhcnNbJ0ZOQU1FJ107CgkJCXVuc2V0KCR2YXJzWydGTkFNRSddKTsKCQl9CgkJaWYgKGlzc2V0KCR2YXJzWydMTkFNRSddKSkgewoJCQkkZGF0YVsnbGFzdF9uYW1lJ10gPSAkdmFyc1snTE5BTUUnXTsKCQkJdW5zZXQoJHZhcnNbJ0xOQU1FJ10pOwoJCX0KCgkJJGRhdGFbJ3RhZ3MnXSA9IGFycmF5KCk7CgkJJGRhdGFbJ3VudGFncyddID0gYXJyYXkoKTsKCQlmb3JlYWNoICgkdmFycyBhcyAka2V5ID0+ICR2YWx1ZSkgewoJCQkkcHJlZml4ID0gKCR2YWx1ZSkgPyAnJyA6ICd1bic7CgkJCSRkYXRhWyRwcmVmaXguJ3RhZ3MnXVtdID0gJGtleTsKCQl9CgoJCXJldHVybiAkZGF0YTsKCX0KCgkvKioKCSAqIFVuc3Vic2NyaWJlIHRoZSBnaXZlbiBlbWFpbCBhZGRyZXNzIGZyb20gdGhlIGxpc3QKCSAqCgkgKiBAbGluayBodHRwOi8vd3d3LmFjdGl2ZWNhbXBhaWduLmNvbS9hcGkvZXhhbXBsZS5waHA/Y2FsbD1jb250YWN0X3N5bmMKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRpZCB0aGUgbGlzdCBpZCB0byBjb25uZWN0IHRvLiBHZXQgYnkgY2FsbGluZyBsaXN0cygpCgkgKiBAcGFyYW0gc3RyaW5nICRlbWFpbCB0aGUgZW1haWwgYWRkcmVzcyB0byB1bnN1YnNjcmliZSAgT1IgdGhlIGVtYWlsICJpZCIgcmV0dXJuZWQgZnJvbSBsaXN0TWVtYmVySW5mbywgV2ViaG9va3MsIGFuZCBDYW1wYWlnbnMKCSAqIEBwYXJhbSBib29sZWFuICRkZWxldGVfbWVtYmVyIGZsYWcgdG8gY29tcGxldGVseSBkZWxldGUgdGhlIG1lbWJlciBmcm9tIHlvdXIgbGlzdCBpbnN0ZWFkIG9mIGp1c3QgdW5zdWJzY3JpYmluZywgZGVmYXVsdCB0byBmYWxzZQoJICogQHJldHVybiBib29sZWFuIHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb24gZmFpbHVyZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGxpc3RVbnN1YnNjcmliZSgkaWQsICRlbWFpbCwgJGRlbGV0ZV9tZW1iZXIgPSBmYWxzZSkKCXsKCQkkcmVzdWx0ID0gJHRoaXMtPmdldENvbnRhY3QoJGVtYWlsKTsKCQlpZiAoISRyZXN1bHQgfHwgIWlzc2V0KCRyZXN1bHRbJ2xpc3RzJ11bJGlkXSkpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJJHBhcmFtcyA9IGFycmF5KAoJCQknZW1haWwnID0+ICRlbWFpbCwKCQkJJ3BbJy4kaWQuJ10nID0+ICRpZCwKCQkJJ3N0YXR1c1snLiRpZC4nXScgPT4gMiwgLy8gMSA9IGFjdGl2ZSwgMiB1bnN1YnNjcmliZWQKCQkpOwoJCXJldHVybiAkdGhpcy0+Y2FsbFNlcnZlcignY29udGFjdF9zeW5jJywgJHBhcmFtcywgdHJ1ZSk7Cgl9CgoJLyoqCgkgKiBFZGl0IHRoZSBlbWFpbCBhZGRyZXNzLCBtZXJnZSBmaWVsZHMsIGFuZCBpbnRlcmVzdCBncm91cHMgZm9yIGEgbGlzdCBtZW1iZXIuIElmIHlvdSBhcmUgZG9pbmcgYSBiYXRjaCB1cGRhdGUgb24gbG90cyBvZiB1c2VycywgCgkgKgoJICogQHBhcmFtIHN0cmluZyAkaWQgdGhlIGxpc3QgaWQgdG8gY29ubmVjdCB0by4gR2V0IGJ5IGNhbGxpbmcgbGlzdHMoKQoJICogQHBhcmFtIHN0cmluZyAkZW1haWwgdGhlIGN1cnJlbnQgZW1haWwgYWRkcmVzcyBvZiB0aGUgbWVtYmVyIHRvIHVwZGF0ZSBPUiB0aGUgImlkIiBmb3IgdGhlIG1lbWJlciByZXR1cm5lZCBmcm9tIGxpc3RNZW1iZXJJbmZvLCBXZWJob29rcywgYW5kIENhbXBhaWducwoJICogQHBhcmFtIGFycmF5ICR2YXJzIGFycmF5IG9mIG5ldyBmaWVsZCB2YWx1ZXMgdG8gdXBkYXRlIHRoZSBtZW1iZXIgd2l0aC4gIFNlZSB2YXJzIGluIGxpc3RTdWJzY3JpYmUoKSBmb3IgZGV0YWlscy4KCSAqIEByZXR1cm4gYm9vbGVhbiB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBsaXN0VXBkYXRlTWVtYmVyKCRpZCwgJGVtYWlsLCAkdmFycykKCXsKCQlyZXR1cm4gJHRoaXMtPmxpc3RTdWJzY3JpYmUoJGlkLCAkZW1haWwsICR2YXJzLCB0cnVlKTsKCX0KCgkvKioKCSAqIEFkZCBhIG5ldyBtZXJnZSB0YWcgdG8gYSBnaXZlbiBsaXN0CgkgKgoJICogQHBhcmFtIHN0cmluZyAkaWQgdGhlIGxpc3QgaWQgdG8gY29ubmVjdCB0by4gR2V0IGJ5IGNhbGxpbmcgbGlzdHMoKQoJICogQHBhcmFtIHN0cmluZyAkdGFnIFRoZSBtZXJnZSB0YWcgdG8gYWRkLCBlLmcuIEZOQU1FCgkgKiBAcGFyYW0gc3RyaW5nICRuYW1lIFRoZSBsb25nIGRlc2NyaXB0aW9uIG9mIHRoZSB0YWcgYmVpbmcgYWRkZWQsIHVzZWQgZm9yIHVzZXIgZGlzcGxheXMKCSAqIEBwYXJhbSBhcnJheSAkb3B0aW9ucyBvcHRpb25hbCBWYXJpb3VzIG9wdGlvbnMgZm9yIHRoaXMgbWVyZ2UgdmFyLiA8ZW0+bm90ZTo8L2VtPiBmb3IgaGlzdG9yaWNhbCBwdXJwb3NlcyB0aGlzIGNhbiBhbHNvIHRha2UgYSAiYm9vbGVhbiIKCQkJc3RyaW5nIGZpZWxkX3R5cGUgb3B0aW9uYWwgb25lIG9mOiB0ZXh0LCBudW1iZXIsIHJhZGlvLCBkcm9wZG93biwgZGF0ZSwgYWRkcmVzcywgcGhvbmUsIHVybCwgaW1hZ2V1cmwgLSBkZWZhdWx0cyB0byB0ZXh0CgkJCWJvb2xlYW4gcmVxIG9wdGlvbmFsIGluZGljYXRlcyB3aGV0aGVyIHRoZSBmaWVsZCBpcyByZXF1aXJlZCAtIGRlZmF1bHRzIHRvIGZhbHNlCgkJCWJvb2xlYW4gcHVibGljIG9wdGlvbmFsIGluZGljYXRlcyB3aGV0aGVyIHRoZSBmaWVsZCBpcyBkaXNwbGF5ZWQgaW4gcHVibGljIC0gZGVmYXVsdHMgdG8gdHJ1ZQoJCQlib29sZWFuIHNob3cgb3B0aW9uYWwgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZpZWxkIGlzIGRpc3BsYXllZCBpbiB0aGUgYXBwJ3MgbGlzdCBtZW1iZXIgdmlldyAtIGRlZmF1bHRzIHRvIHRydWUKCQkJc3RyaW5nIGRlZmF1bHRfdmFsdWUgb3B0aW9uYWwgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBmaWVsZC4gU2VlIGxpc3RTdWJzY3JpYmUoKSBmb3IgZm9ybWF0dGluZyBpbmZvLiBEZWZhdWx0cyB0byBibGFuawoJCQlhcnJheSBjaG9pY2VzIG9wdGlvbmFsIGtpbmQgb2YgLSBhbiBhcnJheSBvZiBzdHJpbmdzIHRvIHVzZSBhcyB0aGUgY2hvaWNlcyBmb3IgcmFkaW8gYW5kIGRyb3Bkb3duIHR5cGUgZmllbGRzCgoJICogQHJldHVybiBib29sIHRydWUgaWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIG90aGVyd2lzZSBhbiBlcnJvciB3aWxsIGJlIHRocm93bgoJICovCglwdWJsaWMgZnVuY3Rpb24gbGlzdE1lcmdlVmFyQWRkKCRpZCwgJHRhZywgJG5hbWUsICRvcHRpb25zID0gYXJyYXkoKSkKCXsKCQkkcGFyYW1zID0gYXJyYXkoKTsKCQlyZXR1cm4gJHBhcmFtczsKCQkkcGFyYW1zWydpZCddID0gJGlkOwoJCSRwYXJhbXNbJ3RhZyddID0gJHRhZzsKCQkkcGFyYW1zWyduYW1lJ10gPSAkbmFtZTsKCQkkcGFyYW1zWydvcHRpb25zJ10gPSAkb3B0aW9uczsKCQlyZXR1cm4gJHRoaXMtPmNhbGxTZXJ2ZXIoJ2xpc3RNZXJnZVZhckFkZCcsICRwYXJhbXMpOwoJfQoKCS8qKgoJICogR2V0IHRoZSBsaXN0IG9mIG1lcmdlIHRhZ3MgZm9yIGEgZ2l2ZW4gbGlzdCwgaW5jbHVkaW5nIHRoZWlyIG5hbWUsIHRhZywgYW5kIHJlcXVpcmVkIHNldHRpbmcKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRpZCB0aGUgbGlzdCBpZCB0byBjb25uZWN0IHRvLiBHZXQgYnkgY2FsbGluZyBsaXN0cygpCgkgKiBAcmV0dXJuIGFycmF5IGxpc3Qgb2YgbWVyZ2UgdGFncyBmb3IgdGhlIGxpc3QKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGxpc3RNZXJnZVZhcnMoJGlkKQoJewoJCSRwYXJhbXMgPSBhcnJheSgpOwoJCXJldHVybiAkcGFyYW1zOwoJCSRwYXJhbXNbJ2lkJ10gPSAkaWQ7CgkJcmV0dXJuICR0aGlzLT5jYWxsU2VydmVyKCdsaXN0TWVyZ2VWYXJzJywgJHBhcmFtcyk7Cgl9CgoJLyoqCgkgKiBBY3R1YWxseSBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIgYW5kIGNhbGwgdGhlIHJlcXVlc3RlZCBtZXRob2RzLCBwYXJzaW5nIHRoZSByZXN1bHQKCSAqIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSB0byBjYWxsIHRoaXMgZnVuY3Rpb24gbWFudWFsbHkKCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIGNhbGxTZXJ2ZXIoJG1ldGhvZCwgJHBhcmFtcywgJGlzUG9zdCA9IGZhbHNlKQoJewovL2Vycm9yX2xvZygkbWV0aG9kLicgPSAnLnByaW50X3IoJHBhcmFtcywgdHJ1ZSkpOwoJCSRxdWVyeSA9IGFycmF5KAoJCQknYXBpX2tleScgPT4gJHRoaXMtPmdldEFQSUtleSgpLAoJCQknYXBpX2FjdGlvbicgPT4gJG1ldGhvZCwKCQkJJ2FwaV9vdXRwdXQnID0+ICdzZXJpYWxpemUnLCAvLyBqc29uCgkJKTsKCQkkcG9zdERhdGEgPSAkcXVlcnk7CgoJCWZvcmVhY2ggKCRwYXJhbXMgYXMgJGtleSA9PiAkdmFsdWUpIHsKCQkJaWYgKCRpc1Bvc3QpCgkJCQkkcG9zdERhdGFbJGtleV0gPSAkdmFsdWU7CgkJCWVsc2UKCQkJCSRxdWVyeVska2V5XSA9ICR2YWx1ZTsKCQl9CgoJCSR0aGlzLT5zZXRFcnJvck1lc3NhZ2UoJycpOwoJCSR0aGlzLT5zZXRFcnJvckNvZGUoJycpOwoKCQkkdXJsID0gJHRoaXMtPmdldEFQSVVSTCgpOwoJCS8vIGNsZWFuIHVwIHRoZSB1cmwKCQkkdXJsID0gcnRyaW0oJHVybCwgJy8gJyk7CgoJCWlmICghZnVuY3Rpb25fZXhpc3RzKCdjdXJsX2luaXQnKSkgewoJCQkkdGhpcy0+c2V0RXJyb3JNZXNzYWdlKCdDVVJMIG5vdCBzdXBwb3J0ZWQuIChpbnRyb2R1Y2VkIGluIFBIUCA0LjAuMiknKTsKCQkJJHRoaXMtPnNldEVycm9yQ29kZSgnNDA1Jyk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIGRlZmluZSBhIGZpbmFsIEFQSSByZXF1ZXN0IC0gR0VUCgkJJGFwaSA9ICR1cmwgLiAnL2FkbWluL2FwaS5waHAnOwoJCWlmICghJGlzUG9zdCkKCQkJJGFwaSAuPSAnPycgLiBodHRwX2J1aWxkX3F1ZXJ5KCRxdWVyeSk7CgoJCSRyZXF1ZXN0ID0gY3VybF9pbml0KCRhcGkpOyAvLyBpbml0aWF0ZSBjdXJsIG9iamVjdAoJCWN1cmxfc2V0b3B0KCRyZXF1ZXN0LCBDVVJMT1BUX0hFQURFUiwgMCk7IC8vIHNldCB0byAwIHRvIGVsaW1pbmF0ZSBoZWFkZXIgaW5mbyBmcm9tIHJlc3BvbnNlCgkJY3VybF9zZXRvcHQoJHJlcXVlc3QsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIDEpOyAvLyBSZXR1cm5zIHJlc3BvbnNlIGRhdGEgaW5zdGVhZCBvZiBUUlVFKDEpCgkJaWYgKCRpc1Bvc3QpIHsKCQkJLy8gVGhpcyBzZWN0aW9uIHRha2VzIHRoZSBpbnB1dCBkYXRhIGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgcHJvcGVyIGZvcm1hdAoJCQljdXJsX3NldG9wdCgkcmVxdWVzdCwgQ1VSTE9QVF9QT1NURklFTERTLCBodHRwX2J1aWxkX3F1ZXJ5KCRwb3N0RGF0YSkpOyAvLyB1c2UgSFRUUCBQT1NUIHRvIHNlbmQgZm9ybSBkYXRhCgkJfQoKCQljdXJsX3NldG9wdCgkcmVxdWVzdCwgQ1VSTE9QVF9GT0xMT1dMT0NBVElPTiwgdHJ1ZSk7CgkJJHJlc3BvbnNlID0gKHN0cmluZyljdXJsX2V4ZWMoJHJlcXVlc3QpOyAvLyBleGVjdXRlIGN1cmwgcG9zdCBhbmQgc3RvcmUgcmVzdWx0cyBpbiAkcmVzcG9uc2UKCQljdXJsX2Nsb3NlKCRyZXF1ZXN0KTsgLy8gY2xvc2UgY3VybCBvYmplY3QKCgkJaWYgKCEkcmVzcG9uc2UpIHsKCQkJJHRoaXMtPnNldEVycm9yTWVzc2FnZSgnTm90aGluZyB3YXMgcmV0dXJuZWQuIERvIHlvdSBoYXZlIGEgY29ubmVjdGlvbiB0byBFbWFpbCBNYXJrZXRpbmcgc2VydmVyPycpOwoJCQkkdGhpcy0+c2V0RXJyb3JDb2RlKCc1MjInKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQkvLyBjaGVjayBpZiByZXNwb25zZSBpcyBqc29uCgkJJGpzb25SZXNwb25zZSA9IGpzb25fZGVjb2RlKCRyZXNwb25zZSk7IAoJCQoJCWlmIChqc29uX2xhc3RfZXJyb3IoKSA9PSBKU09OX0VSUk9SX05PTkUpCgkJewoJCQlpZihpc3NldCgkanNvblJlc3BvbnNlLT5yZXN1bHRfbWVzc2FnZSkpCgkJCXsKCQkJCSR0aGlzLT5zZXRFcnJvck1lc3NhZ2UoIkVycm9yIG1lc3NhZ2UgZnJvbSBBY3RpdmVDYW1wYWlnbjogIi4kanNvblJlc3BvbnNlLT5yZXN1bHRfbWVzc2FnZSk7CgkJCQkkdGhpcy0+c2V0RXJyb3JDb2RlKCcwJyk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJCgkJCSR0aGlzLT5zZXRFcnJvck1lc3NhZ2UoIkVycm9yIG1lc3NhZ2UgZnJvbSBBY3RpdmVDYW1wYWlnbjogIi4kcmVzcG9uc2UpOwoJCQkkdGhpcy0+c2V0RXJyb3JDb2RlKCcwJyk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJcmV0dXJuIHVuc2VyaWFsaXplKCRyZXNwb25zZSk7Cgl9Cgp9', 0, '2018-11-21 06:38:54'),
(192, 'forgotpasswordform', '', 0, '2018-11-21 06:38:54'),
(193, 'email', 'Y2xhc3MgTU1fRW1haWwKewoJcHVibGljIHN0YXRpYyAkQlIgPSAiPGJyPiI7CgkKCXByaXZhdGUgJHN1YmplY3Q7Cglwcml2YXRlICRib2R5OwoJcHJpdmF0ZSAkdG9OYW1lOwoJcHJpdmF0ZSAkY2NBZGRyZXNzID0gYXJyYXkoKTsKCXByaXZhdGUgJGNjQWRkcmVzc1N0cmluZ3MgPSBhcnJheSgpOwoJcHJpdmF0ZSAkdG9BZGRyZXNzOwoJcHJpdmF0ZSAkZnJvbU5hbWU7Cglwcml2YXRlICRmcm9tQWRkcmVzczsKCXByaXZhdGUgJGNvbnRleHQ7CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNlbmQoKQogCXsKIAkJJHJlcSA9IGFycmF5KCk7CgogCQlpZihlbXB0eSgkdGhpcy0+dG9BZGRyZXNzKSkgCiAJCXsKIAkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIk5vdCBhIHZhbGlkICd0byBhZGRyZXNzJy4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsJCiAJCX0KIAkJCiAJCWlmKGVtcHR5KCR0aGlzLT5mcm9tQWRkcmVzcykpIAogCQl7CiAJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJOb3QgYSB2YWxpZCAnZnJvbSBhZGRyZXNzJyBlbWFpbCBhZGRyZXNzLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwkKIAkJfQogCQkKIAkJaWYoZW1wdHkoJHRoaXMtPmZyb21OYW1lKSkgCiAJCXsKIAkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIk5vICdmcm9tIG5hbWUnIHN1cHBsaWVkLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwkKIAkJfQogCQkKIAkJaWYoZW1wdHkoJHRoaXMtPnN1YmplY3QpKSAKIAkJewogCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiU3ViamVjdCBtYXkgbm90IGJlIGVtcHR5LiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwkKIAkJfQogCQlpZigkdGhpcy0+Y29udGV4dCBpbnN0YW5jZW9mIE1NX0NvbnRleHQpIAogCQl7CiAJCQkkc3ViamVjdCA9IE1NX1NtYXJ0VGFnVXRpbDo6cHJvY2Vzc0NvbnRlbnQoJHRoaXMtPnN1YmplY3QsICR0aGlzLT5jb250ZXh0KTsKIAkJCSRib2R5ID0gTU1fU21hcnRUYWdVdGlsOjpwcm9jZXNzQ29udGVudCgkdGhpcy0+Ym9keSwgJHRoaXMtPmNvbnRleHQpOyAKIAkJfQogCQllbHNlIAogCQl7CQogCQkJJHN1YmplY3QgPSAkdGhpcy0+c3ViamVjdDsKIAkJCSRib2R5ID0gJHRoaXMtPmJvZHk7CiAJCX0KIAkJCgkJLy8gZXhlY3V0ZSBzaG9ydCBjb2RlcyB0aGF0IGFyZW4ndCBzbWFydCB0YWdzLgoJCSRib2R5ID0gZG9fc2hvcnRjb2RlKCRib2R5KTsKCQkkc3ViamVjdD0gZG9fc2hvcnRjb2RlKCRzdWJqZWN0KTsKCgkJJGhlYWRlcnMgID0gIk1JTUUtVmVyc2lvbjogMS4wXHJcbiI7CgkJJGhlYWRlcnMgLj0gIkNvbnRlbnQtdHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XHJcbiI7CgkJCgkJLy8gQWRkaXRpb25hbCBIZWFkZXJzCgkJaWYoaXNfYXJyYXkoJHRoaXMtPmNjQWRkcmVzcykgJiYgY291bnQoJHRoaXMtPmNjQWRkcmVzcyk+MCkKCQl7CgkJCWZvcmVhY2goJHRoaXMtPmNjQWRkcmVzcyBhcyAkZW1haWw9PiRuYW1lKQoJCQl7CgkJCQkkbmFtZSA9IChlbXB0eSgkbmFtZSkpID8gJGVtYWlsIDogJG5hbWU7CgkJCQkkaGVhZGVycyAuPSAiQ2M6IHskbmFtZX0gPHskZW1haWx9PlxyXG4iOwoJCQkJCgkJCQkkdGhpcy0+Y2NBZGRyZXNzU3RyaW5nc1tdID0gJGVtYWlsOwoJCQl9CgkJfQoJCQoJCSRoZWFkZXJzIC49ICJGcm9tOiB7JHRoaXMtPmZyb21OYW1lfSA8eyR0aGlzLT5mcm9tQWRkcmVzc30+XHJcbiI7CgkJCgkJQHdwX21haWwoJHRoaXMtPnRvQWRkcmVzcywgJHN1YmplY3QsIG5sMmJyKCRib2R5KSwgJGhlYWRlcnMsIGFycmF5KCkpOwoJCQoJCS8vIGxvZyBlbWFpbCBiZWluZyBzZW50CgkJaWYoJHRoaXMtPmNvbnRleHQgaW5zdGFuY2VvZiBNTV9Db250ZXh0ICYmICFpc19udWxsKCR0aGlzLT5jb250ZXh0LT5nZXRVc2VyKCkpKQoJCXsKCQkJJHBhcmFtcyA9IGFycmF5KCk7CgkJCSRwYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9FTUFJTF9UT19BRERSRVNTXSA9ICR0aGlzLT50b0FkZHJlc3M7CgkJCSRwYXJhbXNbTU1fQWN0aXZpdHlMb2c6OiRQQVJBTV9FTUFJTF9DQ19BRERSRVNTRVNdID0gKGlzX2FycmF5KCR0aGlzLT5jY0FkZHJlc3NTdHJpbmdzKSAmJiBjb3VudCgkdGhpcy0+Y2NBZGRyZXNzU3RyaW5ncyk+MCkgPyBpbXBsb2RlKCIsICIsICR0aGlzLT5jY0FkZHJlc3NTdHJpbmdzKSA6ICIiOwoJCQkkcGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fRU1BSUxfRlJPTV9BRERSRVNTXSA9ICR0aGlzLT5mcm9tQWRkcmVzczsKCQkJJHBhcmFtc1tNTV9BY3Rpdml0eUxvZzo6JFBBUkFNX0VNQUlMX1NVQkpFQ1RdID0gJHN1YmplY3Q7CgkJCQoJCQkvLyByZW1vdmUgcGFzc3dvcmQgZnJvbSBlbWFpbCBmb3Igc2VjdXJpdHkgcmVhc29ucwoJCQkkdGhpcy0+Ym9keSA9IHN0cl9pcmVwbGFjZSgiW21tX21lbWJlcl9kYXRhIG5hbWU9J3Bhc3N3b3JkJ10iLCAiIyMgcGFzc3dvcmQgaGlkZGVuIGZvciBzZWN1cml0eSAjIyIsICR0aGlzLT5ib2R5KTsKCQkJJHRoaXMtPmJvZHkgPSBzdHJfaXJlcGxhY2UoJ1ttbV9tZW1iZXJfZGF0YSBuYW1lPSJwYXNzd29yZCJdJywgIiMjIHBhc3N3b3JkIGhpZGRlbiBmb3Igc2VjdXJpdHkgIyMiLCAkdGhpcy0+Ym9keSk7CgkJCQoJCQkkcGFyYW1zW01NX0FjdGl2aXR5TG9nOjokUEFSQU1fRU1BSUxfQk9EWV0gPSBNTV9TbWFydFRhZ1V0aWw6OnByb2Nlc3NDb250ZW50KCR0aGlzLT5ib2R5LCAkdGhpcy0+Y29udGV4dCk7CgkJCQoJCQlNTV9BY3Rpdml0eUxvZzo6bG9nKCR0aGlzLT5jb250ZXh0LT5nZXRVc2VyKCksIE1NX0FjdGl2aXR5TG9nOjokRVZFTlRfVFlQRV9FTUFJTCwgJHBhcmFtcyk7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsJCiAJfQogCiAgLyoqCiAgICogSG9vayBmb3IgUEhQTWFpbGVyIHRvIGRldGVjdCBmb3IgYW55IFNNVFAgcGx1Z2lucyB0aGF0IG1pZ2h0IGJlIGNvbmZpZ3VyZWQgdG8gc2VuZCBtYWlsIHZpYSBTU0wgKEV4LiBBV1MgU0VTKS4gSWYgc28sIHJlbW92ZSAKICAgKiBwcmV2aW91c2x5IGFkZGVkIGN1c3RvbSBoZWFkZXIgb2YgTUlNRS1WZXJzaW9uOiAxIHNldCBieSB1cyBiZWNhdXNlIFBIUE1haWxlciB3aWxsIGFkZCBpdCBhZ2FpbiBhbmQgY2FuIHJlc3VsdCBpcyBhIGZhaWxlZCAKICAgKiBtYWlsIGRlbGl2ZXJ5CiAgKiovCiAgLyoKICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG1tX3BocE1haWxlcigkcGhwbWFpbGVyKQogIHsKICAgICRwaHBNYWlsZXJEdW1wID0gcHJpbnRfcigkcGhwbWFpbGVyLDEpOwogICAgcHJlZ19tYXRjaCgiL1xbc2lnbl9rZXlfZmlsZTpwcm90ZWN0ZWRcXSA9PiAoLiopL2kiLCAkcGhwTWFpbGVyRHVtcCwgJG1hdGNoZXMpOwogICAgCiAgICBpZigoaW50KSRtYXRjaGVzWzFdICE9IDEpCiAgICB7CiAgICAgICRwaHBtYWlsZXItPmNsZWFyQ3VzdG9tSGVhZGVycygpOyAgICAKICAgIH0KICB9CiAgKi8KICAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0U3ViamVjdCgkc3RyKQogCXsKIAkJJHRoaXMtPnN1YmplY3QgPSAkc3RyOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U3ViamVjdCgpCiAJewogCQlyZXR1cm4gJHRoaXMtPnN1YmplY3Q7CiAJfQogCiAJcHVibGljIGZ1bmN0aW9uIHNldEJvZHkoJHN0cikKIAl7CiAJCSR0aGlzLT5ib2R5ID0gJHN0cjsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldEJvZHkoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5ib2R5OwogCX0KIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRUb05hbWUoJHN0cikKIAl7CiAJCSR0aGlzLT50b05hbWUgPSAkc3RyOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0VG9OYW1lKCkKIAl7CiAJCXJldHVybiAkdGhpcy0+dG9OYW1lOwogCX0KIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRUb0FkZHJlc3MoJHN0cikKIAl7CiAJCSR0aGlzLT50b0FkZHJlc3MgPSAkc3RyOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0VG9BZGRyZXNzKCkKIAl7CiAJCXJldHVybiAkdGhpcy0+dG9BZGRyZXNzOwogCX0KIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRGcm9tTmFtZSgkc3RyKQogCXsKIAkJJHRoaXMtPmZyb21OYW1lID0gJHN0cjsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldENDKCkKIAl7CiAJCXJldHVybiAkdGhpcy0+Y2NBZGRyZXNzOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gYWRkQ0MoJGVtYWlsLCAkbmFtZT0iIikKIAl7CiAJCSR0aGlzLT5jY0FkZHJlc3NbJGVtYWlsXSA9ICRuYW1lOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0RnJvbU5hbWUoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5mcm9tTmFtZTsKIAl9CiAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0RnJvbUFkZHJlc3MoJHN0cikKIAl7CiAJCSR0aGlzLT5mcm9tQWRkcmVzcyA9ICRzdHI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRGcm9tQWRkcmVzcygpCiAJewogCQlyZXR1cm4gJHRoaXMtPmZyb21BZGRyZXNzOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0Q29udGV4dChNTV9Db250ZXh0ICRjb250ZXh0KQogCXsKIAkJJHRoaXMtPmNvbnRleHQgPSAkY29udGV4dDsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldENvbnRleHQoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5jb250ZXh0OwogCX0KIAkKfQoK', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(194, 'paymentservice', '', 0, '2018-11-21 06:38:55'),
(195, 'supportutils', '', 0, '2018-11-21 06:38:55'),
(196, 'aweberresponseerror', 'LyoqCiAqIE1NX0FXZWJlclJlc3BvbnNlRXJyb3IKICoKICogVGhpcyBpcyByYWlzZWQgd2hlbiB0aGUgc2VydmVyIHJldHVybnMgYSBub24tSlNPTiByZXNwb25zZS4gVGhpcwogKiBzaG91bGQgb25seSBvY2N1ciB3aGVuIHRoZXJlIGlzIGEgc2VydmVyIG9yIHNvbWUgdHlwZSBvZiBjb25uZWN0aXZpdHkKICogaXNzdWUuCiAqCiAqIEB1c2VzIE1NX0FXZWJlckV4Y2VwdGlvbgogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJSZXNwb25zZUVycm9yIGV4dGVuZHMgTU1fQVdlYmVyRXhjZXB0aW9uIHsKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHVyaSkgewoJCSR0aGlzLT51cmkgPSAkdXJpOwoJCXBhcmVudDo6X19jb25zdHJ1Y3QoIlJlcXVlc3QgZm9yIHskdXJpfSBkaWQgbm90IHJlc3BvbmQgcHJvcGVybHkuIik7Cgl9Cgp9Cg==', 0, '2018-11-21 06:38:55'),
(197, 'response', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVzcG9uc2UKewoJcHVibGljIHN0YXRpYyAkU1VDQ0VTUyA9ICJzdWNjZXNzIjsKCXB1YmxpYyBzdGF0aWMgJEVSUk9SID0gImVycm9yIjsKCQoJcHVibGljIHN0YXRpYyAkREFUQV9LRVlfVVJMID0gInVybCI7CgkKCXB1YmxpYyAkbWVzc2FnZSA9ICIiOwoJcHVibGljICR0eXBlID0gIiI7CglwdWJsaWMgJHVybCA9ICIiOwoJcHVibGljICRkYXRhOwoJCgkvL2RpYWdub3N0aWMgZmxhZwoJCgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkbXNnPSIiLCAkdHlwZT0ic3VjY2VzcyIsICRleGNsdWRlRnJvbURpYWdub3N0aWNMb2cgPSBmYWxzZSkgCiAJewogCQlpZiAoISRleGNsdWRlRnJvbURpYWdub3N0aWNMb2cgJiYgY2xhc3NfZXhpc3RzKCJNTV9EaWFnbm9zdGljTG9nIikgJiYgTU1fRGlhZ25vc3RpY0xvZzo6aXNFbmFibGVkKCkpCiAJCXsKIAkJCSRkaWFnRXZlbnRUeXBlID0gKCR0eXBlID09PSBzZWxmOjokRVJST1IpP01NX0RpYWdub3N0aWNMb2c6OiRNTV9FUlJPUjpNTV9EaWFnbm9zdGljTG9nOjokTU1fU1VDQ0VTUzsKIAkJCU1NX0RpYWdub3N0aWNMb2c6OmxvZ1Jlc3BvbnNlKCRkaWFnRXZlbnRUeXBlLCAkbXNnKTsJCiAJCX0KIAkJCiAJCSR0aGlzLT5tZXNzYWdlID0gJG1zZzsKIAkJJHRoaXMtPnR5cGUgPSAkdHlwZTsKIAkJCiAJCSR0aGlzLT5kYXRhID0gYXJyYXkoKTsKIAl9CiAJCiAJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc0Vycm9yKCRyZXNwb25zZSkKIAl7CiAJCWlmKCgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXNwb25zZSkgJiYgKCRyZXNwb25zZS0+dHlwZSA9PSBNTV9SZXNwb25zZTo6JEVSUk9SKSkKIAkJewogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJCiAJCXJldHVybiBmYWxzZTsKIAl9CiAJCiAJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc1N1Y2Nlc3MoJHJlc3BvbnNlKQogCXsKIAkJaWYoKCRyZXNwb25zZSBpbnN0YW5jZW9mIE1NX1Jlc3BvbnNlKSAmJiAoJHJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokU1VDQ0VTUykpCiAJCXsKIAkJCXJldHVybiB0cnVlOwogCQl9CiAJCQogCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBhZGREYXRhKCRuYW1lLCAkdmFsdWUpCiAJewogCQkkdGhpcy0+ZGF0YVskbmFtZV0gPSAkdmFsdWU7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXREYXRhKCRuYW1lKQogCXsKIAkJaWYoaXNzZXQoJHRoaXMtPmRhdGFbJG5hbWVdKSkKIAkJewogCQkJcmV0dXJuICR0aGlzLT5kYXRhWyRuYW1lXTsKIAkJfQogCQlyZXR1cm4gIiI7CiAJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(198, 'awebermethodnotimplemented', 'LyoqCiAqIE1NX0FXZWJlck1ldGhvZE5vdEltcGxlbWVudGVkCiAqCiAqIFRocm93biB3aGVuIGF0dGVtcHRpbmcgdG8gY2FsbCBhIG1ldGhvZCB0aGF0IGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgYSByZXNvdXJjZQogKiAvIGNvbGxlY3Rpb24uICBEaWZmZXJzIGZyb20gc3RhbmRhcmQgbWV0aG9kIG5vdCBkZWZpbmVkIGVycm9ycywgYXMgdGhpcyB3aWxsCiAqIGJlIHRocm93biB3aGVuIHRoZSBtZXRob2QgaXMgaW5mYWN0IGltcGxlbWVudGVkIG9uIHRoZSBiYXNlIGNsYXNzLCBidXQgdGhlCiAqIGN1cnJlbnQgcmVzb3VyY2UgdHlwZSBkb2VzIG5vdCBwcm92aWRlIGFjY2VzcyB0byB0aGF0IG1ldGhvZCAoaWUgY2FsbGluZwogKiBnZXRCeU1lc3NhZ2VOdW1iZXIgb24gYSB3ZWJfZm9ybXMgY29sbGVjdGlvbikuCiAqCiAqIEB1c2VzIE1NX0FXZWJlckV4Y2VwdGlvbgogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJNZXRob2ROb3RJbXBsZW1lbnRlZCBleHRlbmRzIE1NX0FXZWJlckV4Y2VwdGlvbiB7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRvYmplY3QpIHsKCQkkdGhpcy0+b2JqZWN0ID0gJG9iamVjdDsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCJUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQgYnkgdGhlIGN1cnJlbnQgcmVzb3VyY2UuIik7CgoJfQp9Cg==', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(199, 'abstractsocialloginextension', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(200, 'transactionhistoryview', '', 0, '2018-11-21 06:38:55'),
(201, 'paymentservicefeatures', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBNTV9QYXltZW50U2VydmljZUZlYXR1cmVzIGlzIGEgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgYSBjb250YWluZXIgZm9yIGEgc2V0IG9mIGNvbnN0YW50cyByZXByZXNlbnRpbmcgZmVhdHVyZXMKICogdGhhdCBtYXkgYmUgaW1wbGVtZW50ZWQgYnkgaW5kaXZpZHVhbCBwYXltZW50IHNlcnZpY2VzCiAqLwpjbGFzcyBNTV9QYXltZW50U2VydmljZUZlYXR1cmVzIAp7Cgljb25zdCBDQVJEX09OX0ZJTEUgCQkJCT0gMTsKCWNvbnN0IE9OU0lURV9TRVJWSUNFICAgIAkJPSAyOwoJY29uc3QgT0ZGU0lURV9TRVJWSUNFICAgCQk9IDM7Cgljb25zdCBDT1VQT05TIAkgICAgCQkJPSA0OwoJY29uc3QgVFJBTlNBQ1RJT05fUEFHRV9BQ1RJT05TICA9IDU7IC8vIGN1c3RvbSBhY3Rpb25zIG9uIHRoZSB0cmFuc2FjdGlvbnMgcGFnZQoJY29uc3QgVE9LRU5fRVhDSEFOR0UJCQk9IDY7IC8vIHN1cHBvcnRzIGphdmFzY3JpcHQgdG9rZW4tZXhjaGFuZ2UgZnJvbSBjaGVja291dCBwcm9jZXNzCgljb25zdCBURVNUX01PREUJCQkJCT0gNzsgLy8gd2hldGhlciB0aGUgZ2F0ZXdheSBzdXBwb3J0cyBhIHRlc3Qvc2FuZGJveCBtb2RlCgljb25zdCBNT0RJRllfUkVCSUxMX0RBVEUJCT0gODsKfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(202, 'stripeservice', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICogTU1fU3RyaXBlU2VydmljZSBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgTU1fUGF5bWVudFNlcnZpY2UgaW50ZXJmYWNlIHVzaW5nIFN0cmlwZSAod3d3LnN0cmlwZS5jb20pCiAqLwoKY2xhc3MgTU1fU3RyaXBlU2VydmljZSBleHRlbmRzIE1NX1NjaGVkdWxlZFBheW1lbnRTZXJ2aWNlCnsKCXByb3RlY3RlZCAkdG9rZW4gPSAiU1RSSVBFIjsgCgkKCXByb3RlY3RlZCAkdGVzdEFQSUtleSA9ICIiOwoJcHJvdGVjdGVkICRsaXZlQVBJS2V5ID0gIiI7CgkKCXByb3RlY3RlZCAkdGVzdFB1Ymxpc2hhYmxlS2V5ID0gIiI7Cglwcm90ZWN0ZWQgJGxpdmVQdWJsaXNoYWJsZUtleSA9ICIiOwoJCglwcm90ZWN0ZWQgJHRlc3RNb2RlID0gZmFsc2U7CQoJCglwcm90ZWN0ZWQgJHN0cmlwZUpTRW5hYmxlZCA9IGZhbHNlOwoJCglwcm90ZWN0ZWQgJHN1cHBvcnRlZEN1cnJlbmNpZXMgPSBhcnJheSgiQUVEIiwgIkFGTiIsICJBTEwiLCAiQU1EIiwgIkFORyIsICJBT0EiLCAiQVJTIiwgIkFVRCIsICJBV0ciLCAiQVpOIiwgCgkJCSJCQU0iLCAiQkJEIiwgIkJEVCIsICJCR04iLCAiQk1EIiwgIkJORCIsICJCT0IiLCAiQlJMIiwgIkJTRCIsICJCV1AiLCAiQlpEIiwgIkNBRCIsICJDREYiLCAiQ0hGIiwgCgkJCSJDTlkiLCAiQ09QIiwgIkNSQyIsICJDVkUiLCAiQ1pLIiwgIkRLSyIsICJET1AiLCAiRFpEIiwgIkVFSyIsICJFR1AiLCAiRVRCIiwgIkVVUiIsICJGSkQiLCAKCQkJIkZLUCIsICJHQlAiLCAiR0VMIiwgIkdJUCIsICJHTUQiLCAiR1RRIiwgIkdZRCIsICJIS0QiLCAiSE5MIiwgIkhSSyIsICJIVEciLCAiSFVGIiwgIklEUiIsICJJTFMiLCAKCQkJIklOUiIsICJJU0siLCAiSk1EIiwgIktFUyIsICJLR1MiLCAiS0hSIiwgIktZRCIsICJLWlQiLCAiTEFLIiwgIkxCUCIsICJMS1IiLCAiTFJEIiwgCgkJCSJMU0wiLCAiTFRMIiwgIkxWTCIsICJNQUQiLCAiTURMIiwgIk1LRCIsICJNTlQiLCAiTU9QIiwgIk1STyIsICJNVVIiLCAiTVZSIiwgIk1XSyIsICJNWE4iLCAiTVlSIiwgCgkJCSJNWk4iLCAiTkFEIiwgIk5HTiIsICJOSU8iLCAiTk9LIiwgIk5QUiIsICJOWkQiLCAiUEFCIiwgIlBFTiIsICJQR0siLCAiUEhQIiwgIlBLUiIsICJQTE4iLCAiUUFSIiwgCgkJCSJST04iLCAiUlNEIiwgIlJVQiIsICJTQVIiLCAiU0JEIiwgIlNDUiIsICJTRUsiLCAiU0dEIiwgIlNIUCIsICJTTEwiLCAiU09TIiwgIlNSRCIsICJTVEQiLCAiU1ZDIiwgCgkJCSJTWkwiLCAiVEhCIiwgIlRKUyIsICJUT1AiLCAiVFJZIiwgIlRURCIsICJUV0QiLCAiVFpTIiwgIlVBSCIsICJVR1giLCAiVVNEIiwgIlVZVSIsICJVWlMiLCAiVkVGIiwgCgkJCSJXU1QiLCAiWENEIiwgIllFUiIsICJaQVIiLCAiWk1XIiwgLy9lbmQgb2YgZGVjaW1hbCBiYXNlZCBjdXJyZW5jaWVzCgkJCQoJCQkvL3RoZSBmb2xsb3dpbmcgY3VycmVuY2llcyBhcmUgemVyby1kZWNpbWFsIGN1cnJlbmNpZXMKCQkJIkJJRiIsICJDTFAiLCAiREpGIiwgIkdORiIsICJKUFkiLCAiS01GIiwgIktSVyIsICJNR0EiLCAiUFlHIiwgIlJXRiIsICJWTkQiLCAiVlVWIiwgIlhBRiIsICJYT0YiLCAiWFBGIik7CgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkYXV0b2xvYWQ9dHJ1ZSkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCRhdXRvbG9hZCk7CgkJCgkJaWYoJGF1dG9sb2FkKQoJCXsKCQkJJHRoaXMtPnNldHVwU3RyaXBlKCk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBsb2FkRGVwZW5kZW5jaWVzKCkKCXsKCQlyZXF1aXJlX29uY2UoTU1fTElCX0RJUi4iL3N0cmlwZS9pbml0LnBocCIpOwoJfQoJCgkKCS8qKgoJICogSW5pdGlhbGl6ZXMgdGhlIFN0cmlwZSBsaWJyYXJpZXMKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBzZXR1cFN0cmlwZSgpCgl7CgkJaWYgKCR0aGlzLT50ZXN0TW9kZSAmJiAhZW1wdHkoJHRoaXMtPnRlc3RBUElLZXkpKQoJCXsKCQkJXFN0cmlwZVxTdHJpcGU6OnNldEFwaUtleSgkdGhpcy0+dGVzdEFQSUtleSk7CgkJfQoJCWVsc2UgaWYgKCFlbXB0eSgkdGhpcy0+bGl2ZUFQSUtleSkpCgkJewoJCQlcU3RyaXBlXFN0cmlwZTo6c2V0QXBpS2V5KCR0aGlzLT5saXZlQVBJS2V5KTsKCQl9Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGluc3RhbGwoKSAKCXsgCgkJcGFyZW50OjppbnN0YWxsKCk7CgkJCgkJJHNxbCA9ICJDUkVBVEUgVEFCTEUgIi5NTV9UQUJMRV9TVFJJUEVfQ1VTVE9NRVJfTElOS1MuIiAoXG4iLgoJCQkJInN0cmlwZV9jdXN0b21lcl9pZCBWQVJDSEFSKDI1NSkgQ09MTEFURSB1dGY4X2JpbiBOT1QgTlVMTCxcbiIuCgkJCQkibWVtYmVybW91c2VfY3VzdG9tZXJfaWQgYmlnaW50KDIwKSBOT1QgTlVMTCxcbiIuCgkJCQkiVU5JUVVFIEtFWSBzdHJpcGVfY3VzdG9tZXJfaWQgKHN0cmlwZV9jdXN0b21lcl9pZCksXG4iLgoJCQkJIlVOSVFVRSBLRVkgbWVtYmVybW91c2VfY3VzdG9tZXJfaWQgKG1lbWJlcm1vdXNlX2N1c3RvbWVyX2lkKVxuIi4KCQkJCSIpIERFRkFVTFQgQ0hBUkFDVEVSIFNFVCB1dGY4IENPTExBVEUgdXRmOF91bmljb2RlX2NpO1xuIjsKCQkKCQkkc3FsLj0gIkNSRUFURSBUQUJMRSAiLk1NX1RBQkxFX1NUUklQRV9DSEFSR0VTLiIgKFxuIi4KCQkJCSJpZCBiaWdpbnQoMjApIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULFxuIi4KCQkJCSJvcmRlcl9pZCBiaWdpbnQoMjApIE5PVCBOVUxMLFxuIi4KCQkJCSJvcmRlcl9pdGVtX2lkIGJpZ2ludCgyMCkgTlVMTCxcbiIuCgkJCQkiY2hhcmdlX2lkIHZhcmNoYXIoMjU1KSBDT0xMQVRFIHV0ZjhfYmluLFxuIi4KCQkJCSJsYXN0X2ZvdXIgdmFyY2hhcig0KSBOVUxMLFxuIi4KCQkJCSJhbW91bnQgZGVjaW1hbCgxMCwyKSBOT1QgTlVMTCxcbiIuCgkJCQkiY3VycmVuY3kgY2hhcigzKSBOT1QgTlVMTCBERUZBVUxUICd1c2QnLFxuIi4KCQkJCSJ0cmFuc2FjdGlvbl9kYXRlIGRhdGV0aW1lIE5PVCBOVUxMLFxuIi4KCQkJCSJQUklNQVJZIEtFWSAgKGlkKSxcbiIuCgkJCQkiS0VZIG1tX3N0cmlwZV9jaGFyZ2VfY2hhcmdlX2lkX2lkeCAoY2hhcmdlX2lkKVxuIi4KCQkJCSIpIERFRkFVTFQgQ0hBUkFDVEVSIFNFVCB1dGY4IENPTExBVEUgdXRmOF91bmljb2RlX2NpO1xuIjsKCQkKCQkkc3FsLj0gIkNSRUFURSBUQUJMRSAiLk1NX1RBQkxFX1NUUklQRV9XRUJIT09LUy4iIChcbiIuCgkJCQkiaWQgYmlnaW50KDIwKSBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCxcbiIuCgkJCQkid2ViaG9va19pZCB2YXJjaGFyKDI1NSksXG4iLgoJCQkJImRhdGVfcmVjZWl2ZWQgZGF0ZXRpbWUgTk9UIE5VTEwsXG4iLgoJCQkJIlBSSU1BUlkgS0VZICAoaWQpXG4iLgoJCQkJIikgREVGQVVMVCBDSEFSQUNURVIgU0VUIHV0ZjggQ09MTEFURSB1dGY4X3VuaWNvZGVfY2k7XG4iOwoJCQoJCWRiRGVsdGEoJHNxbCk7Cgl9CgkKCQoJLyoqCgkgKiBSZXBvcnQgdGhlIGZlYXR1cmVzIHRoZSBTdHJpcGUgc2VydmljZSBzdXBwb3J0cwoJICogQHNlZSBNTV9QYXltZW50U2VydmljZTo6c3VwcG9ydHNGZWF0dXJlKCkKCSAqCgkgKiBAcGFyYW0gaW50ZWdlciAkZmVhdHVyZUNvbnN0IGEgY29uc3QgYXMgZGVmaW5lZCBpbiBNTV9QYXltZW50U2VydmljZUZlYXR1cmVzCgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBzdXBwb3J0ZWQsIGZhbHNlIGlmIG5vdCBzdXBwb3J0ZWQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHN1cHBvcnRzRmVhdHVyZSgkZmVhdHVyZUNvbnN0KQoJewoJCSRzdXBwb3J0ZWRbXSA9IE1NX1BheW1lbnRTZXJ2aWNlRmVhdHVyZXM6Ok9OU0lURV9TRVJWSUNFOwoJCSRzdXBwb3J0ZWRbXSA9IE1NX1BheW1lbnRTZXJ2aWNlRmVhdHVyZXM6OkNBUkRfT05fRklMRTsKCQkkc3VwcG9ydGVkW10gPSBNTV9QYXltZW50U2VydmljZUZlYXR1cmVzOjpDT1VQT05TOwoJCSRzdXBwb3J0ZWRbXSA9IE1NX1BheW1lbnRTZXJ2aWNlRmVhdHVyZXM6OlRPS0VOX0VYQ0hBTkdFOwoJCSRzdXBwb3J0ZWRbXSA9IE1NX1BheW1lbnRTZXJ2aWNlRmVhdHVyZXM6OlRFU1RfTU9ERTsKCQkkc3VwcG9ydGVkW10gPSBNTV9QYXltZW50U2VydmljZUZlYXR1cmVzOjpNT0RJRllfUkVCSUxMX0RBVEU7CgkJcmV0dXJuIGluX2FycmF5KCRmZWF0dXJlQ29uc3QsJHN1cHBvcnRlZCx0cnVlKTsKCX0KCQoJCgkvKioKCSAqIFJldHVybnMgdGhlIGh0bWwgdGhhdCB3aWxsIGJlIHVzZWQgb24gdGhlIHBheW1lbnQgbWV0aG9kIHNldHRpbmdzIHNjcmVlbiBmb3IgY29uZmlndXJpbmcgU3RyaXBlCgkgKiBAc2VlIE1NX1BheW1lbnRTZXJ2aWNlOjpkaXNwbGF5Q29uZmlnT3B0aW9ucygpCgkgKiAKCSAqIEByZXR1cm4gU3RyaW5nIGNvbnRhaW5pbmcgdGhlIGNvbmZpZ3VyYXRpb24gZGlhbG9nIGh0bWwKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGRpc3BsYXlDb25maWdPcHRpb25zKCkKCXsKCQkkY29uZmlnX29wdGlvbnMgPSBNTV9URU1QTEFURTo6Z2VuZXJhdGUoInskdGhpcy0+Z2V0VGVtcGxhdGVEaXIoKX0vc3RyaXBlX2NvbmZpZy5odG1sLnBocCIsJHRoaXMpOwoJCXJldHVybiAkY29uZmlnX29wdGlvbnM7Cgl9CgkKCQoJLyoqCgkgKiBWYWxpZGF0ZXMgYW5kIGNvbmZpZ3VyZXMgdGhlIG9iamVjdCB3aXRoIHRoZSBzZXR0aW5ncyBpbmZvcm1hdGlvbiBnZW5lcmF0ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgY29uZmlndXJhdGlvbiBkaWFsb2cKCSAqIEBzZWUgTU1fUGF5bWVudFNlcnZpY2U6OnByb2Nlc3NDb25maWdPcHRpb25zKCkKCSAqCgkgKiBAcGFyYW0gJHBvc3QgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZGF0YSBwb3N0ZWQgZnJvbSB0aGUgcGF5bWVudCBtZXRob2RzIHNldHRpbmdzIHNjcmVlbgoJICogQHJldHVybiBBbiBNTV9SZXNwb25zZSBvZiB0eXBlIE1NX1Jlc3BvbnNlOjpTVUNDRVNTIGluZGljYXRpbmcgc3VjY2Vzc2Z1bCB2YWxpZGF0aW9uIGFuZCBhc3NpZ21lbnQuIE9uIGVycm9yLCB0aGUgdHlwZSB3aWxsIGJlIE1NX1Jlc3BvbnNlOjpFUlJPUiBhbmQgdGhlIG1lc3NhZ2Ugd2lsbCBjb250YWluIHRoZSBlcnJvciBtZXNzYWdlcwoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJvY2Vzc0NvbmZpZ09wdGlvbnMoJHBvc3QpIAoJeyAKCQkkYWN0aXZlID0gKGlzc2V0KCRwb3N0WydvbnNpdGVfcGF5bWVudF9zZXJ2aWNlJ10pICYmIChzdHJ0b2xvd2VyKCR0aGlzLT5nZXRUb2tlbigpKSA9PSAkcG9zdFsnb25zaXRlX3BheW1lbnRfc2VydmljZSddKSk7CgkJJHRoaXMtPnNldEFjdGl2ZSgkYWN0aXZlKTsKCQkKCQlpZiAoJGFjdGl2ZSkKCQl7CgkJCSR0aGlzLT5pbnN0YWxsKCk7CgkJCSRjb25maWcgPSBpc3NldCgkcG9zdFsncGF5bWVudF9zZXJ2aWNlJ11bJ3N0cmlwZSddKT8kcG9zdFsncGF5bWVudF9zZXJ2aWNlJ11bJ3N0cmlwZSddOmFycmF5KCk7CgkJCSRlbXB0eUVycm9ycyA9ICIiOwoJCQkkY29uZmlnWyd0ZXN0X21vZGUnXSA9IGlzc2V0KCRjb25maWdbJ3Rlc3RfbW9kZSddKT8oYm9vbCkkY29uZmlnWyd0ZXN0X21vZGUnXTpmYWxzZTsKCQkJJGNvbmZpZ1snc3RyaXBlX2pzX2VuYWJsZWQnXSA9IGlzc2V0KCRjb25maWdbJ3N0cmlwZV9qc19lbmFibGVkJ10pPyhib29sKSRjb25maWdbJ3N0cmlwZV9qc19lbmFibGVkJ106ZmFsc2U7CgkJCQoJCQlpZiAoJGNvbmZpZ1sndGVzdF9tb2RlJ10pCgkJCXsKCQkJCWlmIChlbXB0eSgkY29uZmlnWyd0ZXN0X2FwaV9rZXknXSkpCgkJCQl7CgkJCQkJJGVtcHR5RXJyb3JzIC49ICJTdHJpcGU6IFBsZWFzZSBlbnRlciBhIHZhbHVlIGZvciB0aGUgVGVzdCBTZWNyZXQgQVBJIEtleSI7CgkJCQl9CgkJCQkKCQkJCWlmICgoJGNvbmZpZ1snc3RyaXBlX2pzX2VuYWJsZWQnXSkgJiYgZW1wdHkoJGNvbmZpZ1sndGVzdF9wdWJsaXNoYWJsZV9rZXknXSkpCgkJCQl7CgkJCQkJJGVtcHR5RXJyb3JzIC49ICJTdHJpcGU6IFBsZWFzZSBlbnRlciBhIHZhbHVlIGZvciB0aGUgVGVzdCBQdWJsaXNoYWJsZSBLZXkiOwoJCQkJfQoJCQl9CgkJCWVsc2UgCgkJCXsKCQkJCWlmIChlbXB0eSgkY29uZmlnWydsaXZlX2FwaV9rZXknXSkpCgkJCQl7CgkJCQkJJGVtcHR5RXJyb3JzIC49ICJTdHJpcGU6IFBsZWFzZSBlbnRlciBhIHZhbHVlIGZvciB0aGUgTGl2ZSBTZWNyZXQgQVBJIEtleSI7CgkJCQl9CgkJCQkKCQkJCWlmICgoJGNvbmZpZ1snc3RyaXBlX2pzX2VuYWJsZWQnXSkgJiYgZW1wdHkoJGNvbmZpZ1snbGl2ZV9wdWJsaXNoYWJsZV9rZXknXSkpCgkJCQl7CgkJCQkJJGVtcHR5RXJyb3JzIC49ICJTdHJpcGU6IFBsZWFzZSBlbnRlciBhIHZhbHVlIGZvciB0aGUgTGl2ZSBQdWJsaXNoYWJsZSBLZXkiOwoJCQkJfQoJCQl9CgkJCQkJCgkJCWlmICgkZW1wdHlFcnJvcnMgIT0gIiIpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGVtcHR5RXJyb3JzLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCS8vaWYgaGVyZSwgdGhhdCBtZWFucyB0aGV5IGFyZSBhbGwgb2sKCQkJCgkJCSR0aGlzLT5zZXRUZXN0TW9kZSgkY29uZmlnWyd0ZXN0X21vZGUnXSk7CgkJCSR0aGlzLT5zZXRTdHJpcGVKU0VuYWJsZWQoJGNvbmZpZ1snc3RyaXBlX2pzX2VuYWJsZWQnXSk7CgkJCQoJCQlpZiAoJHRoaXMtPnRlc3RNb2RlKQoJCQl7CgkJCQkkdGhpcy0+c2V0VGVzdEFQSUtleSgkY29uZmlnWyd0ZXN0X2FwaV9rZXknXSk7CgkJCQlpZiAoJHRoaXMtPnN0cmlwZUpTRW5hYmxlZCkKCQkJCXsKCQkJCQkkY29uZmlnWyd0ZXN0X3B1Ymxpc2hhYmxlX2tleSddID0gdHJpbSgkY29uZmlnWyd0ZXN0X3B1Ymxpc2hhYmxlX2tleSddKTsgLy9yZW1vdmUgd2hpdGVzcGFjZQoJCQkJCSR0aGlzLT5zZXRUZXN0UHVibGlzaGFibGVLZXkoJGNvbmZpZ1sndGVzdF9wdWJsaXNoYWJsZV9rZXknXSk7CgkJCQl9CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkdGhpcy0+c2V0TGl2ZUFQSUtleSgkY29uZmlnWydsaXZlX2FwaV9rZXknXSk7CgkJCQlpZiAoJHRoaXMtPnN0cmlwZUpTRW5hYmxlZCkKCQkJCXsKCQkJCQkkY29uZmlnWydsaXZlX3B1Ymxpc2hhYmxlX2tleSddID0gdHJpbSgkY29uZmlnWydsaXZlX3B1Ymxpc2hhYmxlX2tleSddKTsgLy9yZW1vdmUgd2hpdGVzcGFjZQoJCQkJCSR0aGlzLT5zZXRMaXZlUHVibGlzaGFibGVLZXkoJGNvbmZpZ1snbGl2ZV9wdWJsaXNoYWJsZV9rZXknXSk7CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQkJCgoJCgkvKioKCSAqIENyZWF0ZXMgYSBjdXN0b21lciBpbiB0aGUgU3RyaXBlIFN5c3RlbQoJICogCgkgKiBAcGFyYW0gTU1fVXNlciAkdXNlciBUaGUgTWVtYmVyTW91c2UgdXNlcgoJICogQHBhcmFtIE1NX0N1c3RvbWVyQWRkcmVzcyAkYmlsbGluZ0FkZHJlc3MgVGhlIGJpbGxpbmcgYWRkcmVzcyBvZiB0aGUgY3VzdG9tZXIgY3JlZGl0IGNhcmQKCSAqIEBwYXJhbSBNTV9DYXJkSW5mbyAkY2FyZEluZm8gVGhlIGN1c3RvbWVyJ3MgY3JlZGl0IGNhcmQgaW5mb3JtYXRpb24sIG9yIGEgcGF5bWVudCB0b2tlbiBpZiAkY2FyZEluZm8gaXMgb2YgdHlwZSBNTV9QYXltZW50VG9rZW4KCSAqIEBwYXJhbSAkb3JpZ2luYWxPcmRlcklkIChvcHRpb25hbCkgVGhlIG9yZGVyIGlkIHRvIGxpbmsgdGhlIGxvY2FsIGNhcmQgb24gZmlsZSBpbmZvcm1hdGlvbiB0bwoJICogCgkgKiBAcmV0dXJuIE1NX1Jlc3BvbnNlIGluZGljYXRpbmcgd2hldGhlciB0aGUgY3VzdG9tZXIgd2FzIGNyZWF0ZWQgaW4gdGhlIFN0cmlwZSBzeXN0ZW0gc3VjY2Vzc2Z1bGx5CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBjcmVhdGVDdXN0b21lcihNTV9Vc2VyICR1c2VyLCBNTV9DdXN0b21lckFkZHJlc3MgJGJpbGxpbmdBZGRyZXNzLCBNTV9DYXJkSW5mbyAkY2FyZEluZm8sICRvcmlnaW5hbE9yZGVySWQ9bnVsbCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJdHJ5IAoJCXsKCQkJaWYgKCRjYXJkSW5mbyBpbnN0YW5jZW9mIE1NX1BheW1lbnRUb2tlbikKCQkJewoJCQkJJHNvdXJjZVBhcmFtZXRlciA9ICRjYXJkSW5mby0+Z2V0VG9rZW4oKTsKCQkJfQoJCQllbHNlIAoJCQl7CgkJCQkkc291cmNlUGFyYW1ldGVyID0gYXJyYXkoCgkJCQkJCQkJICJvYmplY3QiCQkJPT4gImNhcmQiLAoJCQkJCQkJCSAibmFtZSIJCQkJPT4gJHVzZXItPmdldEZ1bGxOYW1lKCksCgkJCQkJCQkJICJudW1iZXIiICAgIAkJPT4gJGNhcmRJbmZvLT5nZXRDYXJkTnVtYmVyKCksCgkJCQkJCQkJICJleHBfbW9udGgiIAkJPT4gJGNhcmRJbmZvLT5nZXRFeHBpcmF0aW9uTW9udGgoKSwKCQkJCQkJCQkgImV4cF95ZWFyIiAgCQk9PiAkY2FyZEluZm8tPmdldEV4cGlyYXRpb25ZZWFyKCksCgkJCQkJCQkJICJjdmMiICAgICAgIAkJPT4gJGNhcmRJbmZvLT5nZXRDVlYoKSwKCQkJCQkJCQkgImFkZHJlc3NfbGluZTEiICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0QWRkcmVzc0xpbmUxKCksCgkJCQkJCQkJICJhZGRyZXNzX2xpbmUyIiAgICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldEFkZHJlc3NMaW5lMigpLAoJCQkJCQkJCSAiYWRkcmVzc196aXAiCSAgICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldFBvc3RhbENvZGUoKSwKCQkJCQkJCQkgImFkZHJlc3Nfc3RhdGUiICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0U3RhdGUoKSwKCQkJCQkJCQkgImFkZHJlc3NfY2l0eSIgICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0Q2l0eSgpLAoJCQkJCQkJCSAiYWRkcmVzc19jb3VudHJ5IiAgPT4gJGJpbGxpbmdBZGRyZXNzLT5nZXRDb3VudHJ5KCkKCQkJCQkJICAgKTsKCQkJfQoJCQkkY3VzdG9tZXJEYXRhID0gYXJyYXkoCgkJCQkiZGVzY3JpcHRpb24iID0+IGdldF9ibG9naW5mbygpLiIgQ3VzdG9tZXIgSUQjIHskdXNlci0+Z2V0SWQoKX0gKHskdXNlci0+Z2V0RW1haWwoKX0pIiwKCQkJCSJlbWFpbCIgPT4gJHVzZXItPmdldEVtYWlsKCksCgkJCQkic291cmNlIiA9PiAkc291cmNlUGFyYW1ldGVyLAoJCQkJIm1ldGFkYXRhIiA9PiBhcnJheSgKCQkJCQkibmFtZSIgPT4gJHVzZXItPmdldEZ1bGxOYW1lKCksCgkJCQkpLAoJCQkpOwoJCQkKCQkJJHN0cmlwZUN1c3RvbWVyID0gXFN0cmlwZVxDdXN0b21lcjo6Y3JlYXRlKCRjdXN0b21lckRhdGEpOwoJCQkKCQkJLy9jcmVhdGUgbGluayB0byBzdHJpcGUgY3VzdG9tZXIKCQkJJHJlc3VsdCA9ICR3cGRiLT5pbnNlcnQoTU1fVEFCTEVfU1RSSVBFX0NVU1RPTUVSX0xJTktTLGFycmF5KCJzdHJpcGVfY3VzdG9tZXJfaWQiPT4kc3RyaXBlQ3VzdG9tZXItPmlkLCAibWVtYmVybW91c2VfY3VzdG9tZXJfaWQiPT4kdXNlci0+Z2V0SWQoKSkpOwoJCQlpZighJHJlc3VsdCkKCQkJewoJCQkJLy9UT0RPOiBkbyBzb21ldGhpbmcgaWYgdGhpcyBmYWlscyBpbiB0aGUgZnV0dXJlLCBpZSBsb2cuIE5vdCBhIGNyaXRpY2FsIGVub3VnaCBlcnJvciB0byBzdG9wIHRoZSBwcm9jZXNzLCBidXQgd2Ugd291bGQgYmUgaW50ZXJlc3RlZCB0byBrbm93IGl0IGhhcHBlbmVkCgkJCX0KCQkJCgkJCS8vY3JlYXRlIGVudHJ5IGluIGNhcmQgb24gZmlsZSB0YWJsZQoJCQkkY29mRGF0YSA9IGFycmF5KCJ1c2VyX2lkIj0+JHVzZXItPmdldElkKCksICJwYXltZW50X3NlcnZpY2VfaWQiPT4kdGhpcy0+Z2V0SWQoKSwgInBheW1lbnRfc2VydmljZV9pZGVudGlmaWVyIj0+JHN0cmlwZUN1c3RvbWVyLT5pZCk7CgkJCWlmICghaXNfbnVsbCgkb3JpZ2luYWxPcmRlcklkKSkKCQkJewoJCQkJJGNvZkRhdGFbJ29yaWdpbmFsX29yZGVyX2lkJ10gPSAkb3JpZ2luYWxPcmRlcklkOwoJCQl9CgkJCSRyZXN1bHQgPSAkd3BkYi0+aW5zZXJ0KE1NX1RBQkxFX0NBUkRfT05fRklMRSwgJGNvZkRhdGEpOwoJCQlpZighJHJlc3VsdCkKCQkJewoJCQkJLy9UT0RPOiBzYW1lIGRlYWwgYXMgYWJvdmU6IGRvIHNvbWV0aGluZyBpZiB0aGlzIGZhaWxzIGluIHRoZSBmdXR1cmUsIGllIGxvZy4gTm90IGNyaXRpY2FsIGVub3VnaCBlcnJvciB0byBzdG9wIAoJCQl9CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHN0cmlwZUN1c3RvbWVyLT5pZCk7CgkJfQoJCWNhdGNoIChFeGNlcHRpb24gJGUpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRlLT5nZXRNZXNzYWdlKCksIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgcHJvZHVjdCdzIHRyaWFsIGRlZmluaXRpb24gYW5kIGNvbnZlcnRzIGl0IGludG8gZGF5cwoJICogCgkgKiBAcGFyYW0gTU1fUHJvZHVjdCAkcHJvZHVjdCBUaGUgcHJvZHVjdCB0byBjb252ZXJ0IHRoZSB0cmlhbCBvZgoJICogQHJldHVybiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGRheXMsIDAgb24gZXJyb3IKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBjb252ZXJ0VHJpYWxUb0RheXMoTU1fUHJvZHVjdCAkcHJvZHVjdCkKCXsKCQlpZiAoISRwcm9kdWN0LT5oYXNUcmlhbCgpKQoJCXsKCQkJcmV0dXJuIDA7CgkJfQoJCQoJCSRudW1Vbml0cyA9ICRwcm9kdWN0LT5nZXRUcmlhbER1cmF0aW9uKCk7CgkJJHVuaXRUeXBlID0gJHByb2R1Y3QtPmdldFRyaWFsRnJlcXVlbmN5KCk7CgkJc3dpdGNoICgkdW5pdFR5cGUpCgkJewoJCQljYXNlICdkYXlzJzoKCQkJCXJldHVybiAkbnVtVW5pdHM7CgkJCQlicmVhazsKCQkJY2FzZSAnd2Vla3MnOgoJCQkJcmV0dXJuICgkbnVtVW5pdHMqNyk7CgkJCQlicmVhazsKCQkJY2FzZSAneWVhcnMnOgoJCQkJcmV0dXJuICgkbnVtVW5pdHMqMzY1KTsKCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIDA7CgkJfQoJfQoJCgkKCS8qKgoJICogUmVzcG9uZCB0byBTdHJpcGUgd2ViaG9va3MuIFVzZWQgdG8gZGV0ZWN0IHJlZnVuZHMgaXNzdWVkIGJ5IHRoZSBvdGhlciBzaWRlCgkgKiBAc2VlIE1NX1BheW1lbnRTZXJ2aWNlOjpwcm9jZXNzTm90aWZpY2F0aW9uKCkKCSAqCgkgKiBAcGFyYW0gYXJyYXkgJHJlcXVlc3QgVGhlICRfUE9TVCBzdXBlcmdsb2JhbCBpZiBpdCBleGlzdHMsIGEgYmxhbmsgYXJyYXkgaWYgbm90LiBJZ25vcmVkIGluIHRoaXMgaW1wbGVtZW50YXRpb24gaW4gZmF2b3Igb2YgcGhwOi8vaW5wdXQKCSAqIEByZXR1cm4gTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSBpbmRpY2F0aW5nIHRoZSBzdGF0dXMgb2YgYW55IG9wZXJhdGlvbnMgcGVyZm9ybWVkIGluIHRoZSBtZXRob2QuIFRoZSBtZXNzYWdlIGZpZWxkIG9mIHRoZSByZXNwb25zZSB3aWxsIGJlIGVjaG9lZCB0byB0aGUgc2NyaXB0IGNhbGxlciB2ZXJiYXRpbQoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJvY2Vzc05vdGlmaWNhdGlvbigkcmVxdWVzdCkgCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRyYXdSZXF1ZXN0ID0gZmlsZV9nZXRfY29udGVudHMoInBocDovL2lucHV0Iik7CgkJJHdlYmhvb2sgPSBqc29uX2RlY29kZSgkcmF3UmVxdWVzdCk7CgkJCgkJaWYgKCR3ZWJob29rID09PSBmYWxzZSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiSW52YWxpZCB3ZWJob29rIGZvcm1hdDogQ291bGQgbm90IGRlY29kZSBKU09OIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoaXNzZXQoJHdlYmhvb2stPmlkKSAmJiAkdGhpcy0+aXNEdXBsaWNhdGVXZWJob29rKCR3ZWJob29rLT5pZCkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIkR1cGxpY2F0ZSB3ZWJob29rIik7CgkJfQoJCQoJCS8vbG9nIHRoZSB3ZWJob29rCgkJJHdwZGItPmluc2VydChNTV9UQUJMRV9TVFJJUEVfV0VCSE9PS1MsYXJyYXkoIndlYmhvb2tfaWQiPT4kd2ViaG9vay0+aWQsImRhdGVfcmVjZWl2ZWQiPT5NTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKSkpOwoJCQoJCWlmICghaXNzZXQoJHdlYmhvb2stPnR5cGUpKQoJCXsKCQkJLy93ZSBkb24ndCByZWNvZ25pemUgdGhpcyB3ZWJob29rLCBzbyBqdXN0IGlnbm9yZSBpdAoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoKTsKCQl9CgkJCgkJc3dpdGNoICgkd2ViaG9vay0+dHlwZSkKCQl7CgkJCWNhc2UgJ2NoYXJnZS5yZWZ1bmRlZCc6CgkJCQlpZiAoIWlzc2V0KCR3ZWJob29rLT5kYXRhKSB8fCAhaXNzZXQoJHdlYmhvb2stPmRhdGEtPm9iamVjdCkgfHwgIWlzc2V0KCR3ZWJob29rLT5kYXRhLT5vYmplY3QtPmlkKSB8fCAKCQkJCQkhaXNzZXQoJHdlYmhvb2stPmRhdGEtPm9iamVjdC0+cmVmdW5kZWQpIHx8ICgkd2ViaG9vay0+ZGF0YS0+b2JqZWN0LT5yZWZ1bmRlZCAhPSB0cnVlKSkKCQkJCXsKCQkJCQkvL25vdCByZWNvZ25pemluZyB0aGUgb2JqZWN0IGZvcm1hdCwgb3IgdGhpcyBpcyBhIHBhcnRpYWwgcmVmdW5kLCBpZ25vcmUKCQkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoKTsKCQkJCX0KCQkJCSR0cmFuc2FjdGlvbkxvb2t1cFNRTCA9ICJTRUxFQ1QgdC5pZCBhcyB0cmFuc2FjdGlvbl9pZCBGUk9NICIuTU1fVEFCTEVfVFJBTlNBQ1RJT05fTE9HLiIgdCwgIi5NTV9UQUJMRV9TVFJJUEVfQ0hBUkdFUy4iIGMgIi4KCQkJCQkJCQkJCSJXSEVSRSB0LnBheW1lbnRfc2VydmljZV9pZD0lcyBBTkQgKCh0LnRyYW5zYWN0aW9uX3R5cGU9JXMpIE9SICh0LnRyYW5zYWN0aW9uX3R5cGU9JXMpKSBBTkQgdC5wYXltZW50X3NlcnZpY2VfZGV0YWlsX2lkPWMuaWQgQU5EIGMuY2hhcmdlX2lkPSVzIEFORCB0LnJlZnVuZF9pZCBJUyBOVUxMIjsKCQkJCSRjaGFyZ2VJbmZvID0gJHdwZGItPmdldF9yb3coJHdwZGItPnByZXBhcmUoJHRyYW5zYWN0aW9uTG9va3VwU1FMLCR0aGlzLT5nZXRJZCgpLE1NX1RyYW5zYWN0aW9uTG9nOjokVFJBTlNBQ1RJT05fVFlQRV9QQVlNRU5ULCBNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUkVDVVJSSU5HX1BBWU1FTlQsJHdlYmhvb2stPmRhdGEtPm9iamVjdC0+aWQpKTsKCQkJCWlmICgkY2hhcmdlSW5mbyAhPSBudWxsKQoJCQkJewoJCQkJCS8vZm91bmQgdGhlIGNoYXJnZQoJCQkJCSRyZWZ1bmRSZXNwb25zZSA9ICR0aGlzLT5fcmVmdW5kVHJhbnNhY3Rpb24oJGNoYXJnZUluZm8tPnRyYW5zYWN0aW9uX2lkLGZhbHNlKTsKCQkJCQkvL2RvZXNudCByZWFsbHkgbWF0dGVyIHdoYXQgdGhlIHJlc3BvbnNlIGlzLCB3ZSBhcmUgb3V0IG9mIG1vdmVzIGlmIHRoZSByZWZ1bmQgZmFpbHMKCQkJCX0KCQkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgpOwoJCQkJYnJlYWs7CgkJCWRlZmF1bHQ6CgkJCQkvL3dlIGRvbid0IHJlY29nbml6ZSB0aGlzIHdlYmhvb2ssIHNvIGp1c3QgaWdub3JlIGl0CgkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoKTsKCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCk7Cgl9CgkKCQoJLyoqCgkgKiBEZXRlY3RzIGlmIHRoZSB3ZWJob29rIHdpdGggdGhlIHN1cHBsaWVkIGlkIGhhcyBiZWVuIHByb2Nlc3NlZCBiZWZvcmUKCSAqIAoJICogQHBhcmFtIHN0cmluZyAkd2ViaG9va0lkCgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiB0aGlzIGlzIGEgZHVwbGljYXRlIGlkLCBmYWxzZSBvdGhlcndpc2UKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBpc0R1cGxpY2F0ZVdlYmhvb2soJHdlYmhvb2tJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJGNvdW50ID0gJHdwZGItPmdldF92YXIoJHdwZGItPnByZXBhcmUoIlNFTEVDVCBjb3VudCgqKSBGUk9NICIuTU1fVEFCTEVfU1RSSVBFX1dFQkhPT0tTLiIgV0hFUkUgd2ViaG9va19pZD0lcyIsJHdlYmhvb2tJZCkpOwoJCXJldHVybiAoIWlzX251bGwoJGNvdW50KSAmJiAoJGNvdW50PjApKTsKCX0KCQoJcHJpdmF0ZSBmdW5jdGlvbiBnZXRPcmRlckRlc2NyaXB0b3IoTU1fT3JkZXIgJG9yZGVyLCAkZGVmYXVsdFRleHQ9bnVsbCkKCXsgIAoJCWlmKGlzX251bGwoJGRlZmF1bHRUZXh0KSl7CgkJCSRkZWZhdWx0VGV4dD0gIlBheW1lbnQgZm9yIG9yZGVyIyB7JG9yZGVyLT5nZXRPcmRlck51bWJlcigpfSI7CgkJfSAKCQkKCQlyZXR1cm4gYXBwbHlfZmlsdGVycyhNTV9GaWx0ZXJzOjokU1RSSVBFX0JJTExJTkdfU1RBVEVNRU5UX0RFU0NSSVBUT1IsJGRlZmF1bHRUZXh0LCAkb3JkZXItPmdldERhdGFBc1N0ZENsYXNzKCkpOwoJfQoJCgkKCS8qKgoJICogQ2hhcmdlIGFuIG9yZGVyCgkgKiAKCSAqIEBwYXJhbSBNTV9PcmRlciAkb3JkZXIgVGhlIG9yZGVyIHRvIGNoYXJnZQoJICogQHBhcmFtIE1NX0NhcmRJbmZvICRjYXJkSW5mbyBUaGUgY3JlZGl0IGNhcmQgaW5mb3JtYXRpb24gdG8gdXNlIGluIGNoYXJnaW5nIHRoZSBvcmRlcgoJICogQHJldHVybiBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHN0YXR1cyBvZiB0aGUgY2hhcmdlIGF0dGVtcHQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGNoYXJnZU9yZGVyKE1NX09yZGVyICRvcmRlciwgTU1fQ2FyZEluZm8gJGNhcmRJbmZvPW51bGwsICR2YWxpZGF0ZT10cnVlKSAKCXsgCgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRwYXJlbnRSZXNwb25zZSA9IHBhcmVudDo6Y2hhcmdlT3JkZXIoJG9yZGVyLCRjYXJkSW5mbywkdmFsaWRhdGUpOwoJCWlmICghTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6aXNTdWNjZXNzKCRwYXJlbnRSZXNwb25zZSkpCgkJewoJCQkkb3JkZXItPnNhdmVPcmRlclN0YXR1cyhNTV9PcmRlcjo6JEVSUk9SX0ZBSUxFRCk7CgkJCXJldHVybiAkcGFyZW50UmVzcG9uc2U7ICAKCQl9CgkJCgkJJHRyeUNhcmRPbkZpbGUgPSBpc19udWxsKCRjYXJkSW5mbyk7CgkJaWYgKCEkdHJ5Q2FyZE9uRmlsZSkgCgkJewoJCQkkY2FyZFZhbGlkYXRpb24gPSAkY2FyZEluZm8tPnZhbGlkYXRlKCk7CgkJCWlmICgkY2FyZFZhbGlkYXRpb24gIT09IHRydWUpCgkJCXsgCgkJCQkkb3JkZXItPnNhdmVPcmRlclN0YXR1cyhNTV9PcmRlcjo6JEVSUk9SX0ZBSUxFRCk7CgkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIlVuYWJsZSB0byBjaGFyZ2Ugb3JkZXI6IHskY2FyZFZhbGlkYXRpb259IixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOyAgCgkJCX0KCQl9CQkJCgkJCgkJLy9UaGlzIG5leHQgc2VjdGlvbiBsb29rcyB1cCB0aGUgY3VzdG9tZXIgb24gU3RyaXBlIGFuZCBkb2VzIHRoZSBmb2xsb3dpbmcKCQkvLzEuIGlmIGNhcmQgb24gZmlsZSBpcyBzdXBwb3NlZCB0byBiZSB1c2VkLCBidXQgbm8gY3VzdG9tZXIgd2FzIGZvdW5kLCBpdCBleGl0cyB3aXRoIGFuIGVycm9yCgkJLy8yLiBpZiBhIGNhcmQgd2FzIHN1cHBsaWVkLCBhbmQgbm8gY3VzdG9tZXIgd2FzIGZvdW5kLCBjcmVhdGUgYSBuZXcgY3VzdG9tZXIgb24gU3RyaXBlIGFuZCBhdHRhY2ggdGhlIGNhcmQgdG8gaXQKCQkvLzMuIGlmIGEgY2FyZCB3YXMgc3VwcGxpZWQgQU5EIHRoZSBjdXN0b21lciBhbHJlYWR5IGV4aXN0cyBpbiBTdHJpcGUsIHRoYXQgY3VzdG9tZXIgaXMgdXBkYXRlZCB3aXRoIHRoZSBuZXcgY2FyZCBpbmZvcm1hdGlvbgoJCS8vCSBhbmQgdGhlbiByZXVzZWQuIFRoaXMgbWVhbnMgYW55IHByZXZpb3VzIHN1YnNjcmlwdGlvbnMgZ2V0IHVwZGF0ZWQgdG8gdXNlIHRoZSBuZXcgY2FyZC4gTm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgZGVzaXJlZCBiZWhhdmlvcgoJCQoJCSRzdHJpcGVDdXN0b21lcklkID0gJHRoaXMtPmxvb2t1cEN1c3RvbWVyKCRvcmRlci0+Z2V0Q3VzdG9tZXIoKS0+Z2V0SWQoKSk7CgkJCgkJJHByb2R1Y3RJdGVtcyA9ICRvcmRlci0+Z2V0UHJvZHVjdHMoKTsKCQlpZiAoJHN0cmlwZUN1c3RvbWVySWQgPT09IGZhbHNlKQoJCXsKCQkJaWYgKCR0cnlDYXJkT25GaWxlKQoJCQl7CgkJCQkkb3JkZXItPnNhdmVPcmRlclN0YXR1cyhNTV9PcmRlcjo6JEVSUk9SX0ZBSUxFRCk7CgkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIkludmFsaWQgY3JlZGl0IGNhcmQgaW5mb3JtYXRpb24iLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7ICAKCQkJfQoJCQkkY2NSZXNwb25zZSA9ICR0aGlzLT5jcmVhdGVDdXN0b21lcigkb3JkZXItPmdldEN1c3RvbWVyKCksICRvcmRlci0+Z2V0QmlsbGluZ0FkZHJlc3MoKSwgJGNhcmRJbmZvLCAkb3JkZXItPmlkKTsKCQkJaWYgKE1NX1Jlc3BvbnNlOjppc0Vycm9yKCRjY1Jlc3BvbnNlKSkKCQkJeyAKCQkJCSRvcmRlci0+c2F2ZU9yZGVyU3RhdHVzKE1NX09yZGVyOjokRVJST1JfRkFJTEVEKTsKCQkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiRXJyb3I6IHskY2NSZXNwb25zZS0+bWVzc2FnZX0iLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7ICAgCgkJCX0KCQkJJHN0cmlwZUN1c3RvbWVySWQgPSAkY2NSZXNwb25zZS0+bWVzc2FnZTsKCQl9CgkJZWxzZSAKCQl7CgkJCWlmICghJHRyeUNhcmRPbkZpbGUpCgkJCXsKCQkJCS8vdGhlcmUgaXMgYSBjYXJkIG9uIGZpbGUsIGJ1dCBjcmVkaXQgY2FyZCBpbmZvIHdhcyBzZW50IGFzIHdlbGwuIFVwZGF0ZSB0aGUgY2FyZCBvbiBmaWxlIHRvIGJlIHRoZSBjYXJkIHRoYXQgd2FzIHNlbnQKCQkJCSRhUHJvZHVjdEl0ZW0gPSByZXNldCgkcHJvZHVjdEl0ZW1zKTsKCQkJCSR1cGRhdGVSZXNwb25zZSA9ICR0aGlzLT51cGRhdGVTdWJzY3JpcHRpb25JbmZvKCRhUHJvZHVjdEl0ZW0sJGNhcmRJbmZvLCRvcmRlci0+Z2V0QmlsbGluZ0FkZHJlc3MoKSk7CgkJCQlpZiAoTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6aXNFcnJvcigkdXBkYXRlUmVzcG9uc2UpKQoJCQkJeyAKCQkJCQkkb3JkZXItPnNhdmVPcmRlclN0YXR1cyhNTV9PcmRlcjo6JEVSUk9SX0ZBSUxFRCk7CgkJCQkJcmV0dXJuICR1cGRhdGVSZXNwb25zZTsgICAKCQkJCX0KCQkJfQoJCX0KCQkKCQkvL25vdyBzZXR1cCBzY2hlZHVsZXMgZm9yIHRoZSByZWN1cnJpbmcgcHJvZHVjdHMKCQkkY3JlYXRlU2NoZWR1bGVkUmVzdWx0ID0gJHRoaXMtPmNyZWF0ZVNjaGVkdWxlc0Zyb21Qcm9kdWN0cygkcHJvZHVjdEl0ZW1zKTsKCQkKCQlpZihNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjppc0Vycm9yKCRjcmVhdGVTY2hlZHVsZWRSZXN1bHQpKQoJCXsKCQkJJG9yZGVyLT5zYXZlT3JkZXJTdGF0dXMoTU1fT3JkZXI6OiRFUlJPUl9GQUlMRUQpOwoJCQlyZXR1cm4gJGNyZWF0ZVNjaGVkdWxlZFJlc3VsdDsgICAgCgkJfQoJCQoJCWlmICgkb3JkZXItPmdldFRvdGFsKCkgPiAwLjAwKQoJCXsKCQkJJGNoYXJnZVJlc3BvbnNlID0gJHRoaXMtPnNlbmRTdHJpcGVDaGFyZ2UoJG9yZGVyLT5nZXRUb3RhbCgpLCAkb3JkZXItPmdldEN1cnJlbmN5KCksICR0aGlzLT5nZXRPcmRlckRlc2NyaXB0b3IoJG9yZGVyKSwkc3RyaXBlQ3VzdG9tZXJJZCk7CgkJCQoJCQlpZiAoTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6aXNFcnJvcigkY2hhcmdlUmVzcG9uc2UpIHx8IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OmlzRmFpbGVkKCRjaGFyZ2VSZXNwb25zZSkpCgkJCXsKCQkJCSRjcmVhdGVkU3Vic2NyaXB0aW9ucyA9ICRjcmVhdGVTY2hlZHVsZWRSZXN1bHQtPm1lc3NhZ2U7CgkJCQlpZiAoaXNfYXJyYXkoJGNyZWF0ZWRTdWJzY3JpcHRpb25zKSAmJiAoY291bnQoJGNyZWF0ZWRTdWJzY3JpcHRpb25zKSA+IDApKQoJCQkJewoJCQkJCSR0aGlzLT5jYW5jZWxTY2hlZHVsZWRTdWJzY3JpcHRpb25zKCRjcmVhdGVkU3Vic2NyaXB0aW9ucyk7CgkJCQl9CgkJCQkkb3JkZXItPnNhdmVPcmRlclN0YXR1cyhNTV9PcmRlcjo6JEVSUk9SX0ZBSUxFRCk7CgkJCQlyZXR1cm4gJGNoYXJnZVJlc3BvbnNlOyAgICAKCQkJfQoJCQkKCQkJLy9sb2cgdG8gdHJhbnNhY3Rpb25zIHRhYmxlcwoJCQkkcHJvZHVjdEl0ZW1zID0gJG9yZGVyLT5nZXRQcm9kdWN0cygpOwoJCQkkb3JkZXJJdGVtSWQgPSBudWxsOwoJCQlpZiAoY291bnQoJHByb2R1Y3RJdGVtcykgPT0gMSkKCQkJewoJCQkJJG9yZGVySXRlbSA9IHJlc2V0KCRwcm9kdWN0SXRlbXMpOwoJCQkJJG9yZGVySXRlbUlkID0gJG9yZGVySXRlbS0+Z2V0SWQoKTsKCQkJfQoJCQkKCQkJJGNoYXJnZU9iamVjdCA9ICRjaGFyZ2VSZXNwb25zZS0+Z2V0TWVzc2FnZSgpOwoJCQkkdHJhbnNhY3Rpb25EZXNjcmlwdGlvbiA9ICJQYXltZW50IGZvciBvcmRlciMgeyRvcmRlci0+Z2V0T3JkZXJOdW1iZXIoKX0iOwoJCQkkdHJhbnNhY3Rpb25EYXRlID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCSRpbnNlcnREYXRhID0gYXJyYXkoICJvcmRlcl9pZCIgICAgICAgICAgPT4gJG9yZGVyLT5nZXRJZCgpLAoJCQkJCQkJCSAib3JkZXJfaXRlbV9pZCIgICAgID0+ICRvcmRlckl0ZW1JZCwKCQkJCQkJCQkgImNoYXJnZV9pZCIgICAgIAkgPT4gJGNoYXJnZU9iamVjdC0+aWQsCgkJCQkJCQkJICJsYXN0X2ZvdXIiICAgICAgICAgPT4gIWVtcHR5KCRjaGFyZ2VPYmplY3QtPmNhcmQtPmxhc3Q0KT9zdWJzdHIoJGNoYXJnZU9iamVjdC0+Y2FyZC0+bGFzdDQsLTQpOiIiLAoJCQkJCQkJCSAiYW1vdW50IiAgICAgICAgICAgID0+ICRvcmRlci0+Z2V0VG90YWwoKSwKCQkJCQkJCQkgImN1cnJlbmN5IiAgICAgICAgICA9PiAkb3JkZXItPmdldEN1cnJlbmN5KCksCgkJCQkJCQkJICJ0cmFuc2FjdGlvbl9kYXRlIiAgPT4gJHRyYW5zYWN0aW9uRGF0ZQoJCQkpOwoJCQkkd3BkYi0+aW5zZXJ0KE1NX1RBQkxFX1NUUklQRV9DSEFSR0VTLCRpbnNlcnREYXRhKTsKCQkJJHN0cmlwZUNoYXJnZUlkID0gJHdwZGItPmluc2VydF9pZDsKCQkJCgkJCS8vbm93IGxvZyB0aGUgcGF5bWVudCBpbiB0aGUgdHJhbnNhY3Rpb25zIHRhYmxlCgkJCWlmICgkdGhpcy0+dGVzdE1vZGUpCgkJCXsKCQkJCSRyZXMgPSBNTV9UcmFuc2FjdGlvbkxvZzo6Y3JlYXRlVGVzdFRyYW5zYWN0aW9uRW50cnkoJG9yZGVyLT5nZXRJZCgpLCAkb3JkZXJJdGVtSWQsJG9yZGVyLT5nZXRUb3RhbCgpLCAkb3JkZXItPmdldEN1cnJlbmN5KCksJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24sIE1NX1RyYW5zYWN0aW9uTG9nOjokVFJBTlNBQ1RJT05fVFlQRV9QQVlNRU5ULHRydWUsJHRoaXMtPmlkLCRzdHJpcGVDaGFyZ2VJZCwkdHJhbnNhY3Rpb25EYXRlKTsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRyZXMgPSBNTV9UcmFuc2FjdGlvbkxvZzo6Y3JlYXRlVHJhbnNhY3Rpb25FbnRyeSgkb3JkZXItPmdldElkKCksICRvcmRlckl0ZW1JZCwkb3JkZXItPmdldFRvdGFsKCksICRvcmRlci0+Z2V0Q3VycmVuY3koKSwkdHJhbnNhY3Rpb25EZXNjcmlwdGlvbiwgTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX1BBWU1FTlQsdHJ1ZSwkdGhpcy0+aWQsJHN0cmlwZUNoYXJnZUlkLCR0cmFuc2FjdGlvbkRhdGUpOwoJCQl9CgkJfQoJCQoJCS8vZXJyb3JzIG9yIGZhaWx1cmVzIHJldHVybiBlYXJseSwgc28gcmVhY2hpbmcgdGhpcyBwb2ludCBtZWFucyBwYXltZW50IHdhcyBzdWNjZXNzZnVsIG9yIHRoZSBpbml0aWFsIHBheW1lbnQgaXMgMAoJCSRvcmRlci0+c2F2ZU9yZGVyU3RhdHVzKE1NX09yZGVyOjokUEFJRF9DT01QTEVURSk7CgkJCgkJLy9yZWFjaGluZyB0aGlzIHBvaW50IG1lYW5zIHRoZSBzdWJzY3JpcHRpb25zIHdlcmUgc2NoZWR1bGVkIGFuZCB0aGUgaW5pdGlhbCBjaGFyZ2Ugd2FzIHN1Y2Nlc3NmdWwKCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoKTsKCX0KCQoJCgkvKioKCSAqIFNlbmQgYSBjaGFyZ2UgdG8gU3RyaXBlLCBhbmQgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgdW5maWx0ZXJlZCByZXN1bHQuCgkgKiAKCSAqIEBwYXJhbSBpbnRlZ2VyICRhbW91bnQgVGhlIGFtb3VudCB0byBjaGFyZ2UuIFRoaXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdGhlIHNtYWxsZXN0IGluZGl2aXNpYmxlIHVuaXQgb2YgdGhlIGRlc2lnbmF0ZWQgY3VycmVuY3kKCSAqIEBwYXJhbSBzdHJpbmcgICRjdXJyZW5jeSBUaGUgY3VycmVuY3kgZGVzaWduYXRpb24gdG8gc2VuZC4gRGVmYXVsdHMgdG8gInVzZCIKCSAqIEBwYXJhbSBzdHJpbmcgICRkZXNjcmlwdGlvbiBUaGUgZGVzY3JpcHRpb24gdG8gYXR0YWNoIHRvIHRoZSBjaGFyZ2UKCSAqIEBwYXJhbSBzdHJpbmcgICRzdHJpcGVDdXN0b21lcklkIChvcHRpb25hbCkgVGhlIGFscGhhbnVtZXJpYyBTdHJpcGUgY3VzdG9tZXIgaWQgdG8gY2hhcmdlLiBFaXRoZXIgY3VzdG9tZXIgb3IgY2FyZEluZm8gc2hvdWxkIGJlIHN1cHBsaWVkLCBidXQgbm90IGJvdGgKCSAqIEBwYXJhbSBzdHJpbmcgICRjYXJkSW5mbyAob3B0aW9uYWwpIFRoZSBjcmVkaXQgY2FyZCB0byBjaGFyZ2UuIEVpdGhlciBjdXN0b21lciBvciBjYXJkSW5mbyBzaG91bGQgYmUgc3VwcGxpZWQsIGJ1dCBub3QgYm90aAoJICogCgkgKiBAcmV0dXJuIE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UgT24gc3VjY2VzcywgY29udGFpbnMgdGhlIHN0cmlwZSBjaGFyZ2Ugb2JqZWN0IHJldHVybmVkIGJ5IHRoZSBnYXRld2F5LCBvbiBmYWlsdXJlIGNvbnRhaW5zIGFuIGVycm9yIG1lc3NhZ2UKCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIHNlbmRTdHJpcGVDaGFyZ2UoJGFtb3VudCwgJGN1cnJlbmN5LCAkZGVzY3JpcHRpb24sICRzdHJpcGVDdXN0b21lcklkPW51bGwsICRjYXJkSW5mbz1udWxsLCAkYmlsbGluZ0FkZHJlc3M9bnVsbCkKCXsKCQlpZiAoaXNfbnVsbCgkY3VycmVuY3kpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIGNoYXJnZTogTm8gY3VycmVuY3kgd2FzIHNlbGVjdGVkIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoaXNfbnVsbCgkc3RyaXBlQ3VzdG9tZXJJZCkgJiYgaXNfbnVsbCgkY2FyZEluZm8pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIGNoYXJnZTogTm8gcGF5bWVudCBtZXRob2Qgd2FzIHByb3ZpZGVkIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoaXNfbnVsbCgkc3RyaXBlQ3VzdG9tZXJJZCkgJiYgIWlzX251bGwoJGNhcmRJbmZvKSAmJiBpc19udWxsKCRiaWxsaW5nQWRkcmVzcykpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIlVuYWJsZSB0byBjcmVhdGUgY2hhcmdlOiBObyBiaWxsaW5nIGFkZHJlc3Mgd2FzIHByb3ZpZGVkIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoIWlzX251bWVyaWMoJGFtb3VudCkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIlVuYWJsZSB0byBjcmVhdGUgY2hhcmdlOiBSZWNlaXZlZCBhIG5vbi1udW1lcmljIGFtb3VudCB0byBjaGFyZ2UiLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCS8vVkVSWSBJTVBPUlRBTlQ6IGludHZhbCgxOS45OSoxMDApIHlpZWxkcyAxOS45OCwgaW50dmFsKHN0cnZhbCgxOS45OSoxMDApKSB5aWVsZHMgMTkuOTkKCQkvL2NvbnZlcnQgdG8gaW50ZWdlciB0byBhdm9pZCBmbG9hdC1wb2ludCBhcml0aG1ldGljIHJvdW5kaW5nIGVycm9ycwoJCQoJCSRjdXJyZW5jeU1ldGEgPSBNTV9DdXJyZW5jeVV0aWw6OmdldEN1cnJlbmN5TWV0YWRhdGEoJGN1cnJlbmN5KTsKCQkkaW50TXVsdGlwbGllciA9IHBvdygxMCxpbnR2YWwoJGN1cnJlbmN5TWV0YVsnZnJhY19kaWdpdHMnXSkpOwoJCSRhbW91bnQgPSBpbnR2YWwoc3RydmFsKCRhbW91bnQgKiAkaW50TXVsdGlwbGllcikpOwoJCQoJCWlmICghaXNfaW50KCRhbW91bnQpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIGNoYXJnZTogUmVjZWl2ZWQgYW4gaW1wcm9wZXJseSBmb3JtYXR0ZWQgYW1vdW50IHRvIGNoYXJnZSIsTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJGNoYXJnZURhdGEgPSBhcnJheSgKCQkgICJhbW91bnQiICAgPT4gJGFtb3VudCwKICAgICAgCSAgImN1cnJlbmN5IiA9PiBzdHJ0b2xvd2VyKCRjdXJyZW5jeSksCQkJCQoJCSk7CgkJCgkJaWYgKCFlbXB0eSgkZGVzY3JpcHRpb24pKQoJCXsKCQkJJGNoYXJnZURhdGFbJ2Rlc2NyaXB0aW9uJ10gPSAkZGVzY3JpcHRpb247CgkJfQoJCQoJCWlmICghaXNfbnVsbCgkY2FyZEluZm8pKQoJCXsKICAJCQlpZiAoJGNhcmRJbmZvIGluc3RhbmNlb2YgTU1fUGF5bWVudFRva2VuKQoJCQl7CgkJCQkkY2hhcmdlRGF0YVsnc291cmNlJ10gPSAkY2FyZEluZm8tPmdldFRva2VuKCk7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJICAkY2hhcmdlRGF0YVsnc291cmNlJ10gPSBhcnJheSgKCQkJCSAgCQkib2JqZWN0IgkJICA9PiAiY2FyZCIsCgkJCQkgICAgCSJudW1iZXIiICAgCSAgICAgID0+ICRjYXJkSW5mby0+Z2V0Q2FyZE51bWJlcigpLAoJCQkJIAkJImV4cF9tb250aCIgCSAgPT4gJGNhcmRJbmZvLT5nZXRFeHBpcmF0aW9uTW9udGgoKSwKCQkJCSAJCSJleHBfeWVhciIgIAkgID0+ICRjYXJkSW5mby0+Z2V0RXhwaXJhdGlvblllYXIoKSwKCQkJICAgICAgICAgICAgImN2YyIgICAgICAgCSAgPT4gJGNhcmRJbmZvLT5nZXRDVlYoKSwKCQkJICAgICAgICAgICAgImFkZHJlc3NfbGluZTEiICAgPT4gJGJpbGxpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTEoKSwKCQkJICAgICAgICAgICAgImFkZHJlc3NfbGluZTIiICAgPT4gJGJpbGxpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTIoKSwKCQkJICAgICAgICAgICAgImFkZHJlc3NfemlwIgkgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0UG9zdGFsQ29kZSgpLAoJCQkgICAgICAgICAgICAiYWRkcmVzc19zdGF0ZSIgICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldFN0YXRlKCksCgkJCSAgICAgICAgICAgICJhZGRyZXNzX2NpdHkiICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0Q2l0eSgpLAoJCQkgICAgICAgICAgICAiYWRkcmVzc19jb3VudHJ5IiA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldENvdW50cnkoKQoJCQkgICAgICAgICk7CiAgICAgIAkJfQoJCX0KCQllbHNlIAoJCXsKCQkJJGNoYXJnZURhdGFbJ2N1c3RvbWVyJ10gPSAkc3RyaXBlQ3VzdG9tZXJJZDsKCQl9CgkJCgkJdHJ5IAoJCXsKCQkJJGNoYXJnZU9iamVjdCA9IFxTdHJpcGVcQ2hhcmdlOjpjcmVhdGUoJGNoYXJnZURhdGEpOwoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoJGNoYXJnZU9iamVjdCk7CgkJfQoJCWNhdGNoIChFeGNlcHRpb24gJGUpCgkJewoJCQkkc3RhdHVzID0gTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SOwoJCQlpZiAoc3RycG9zKCRlLT5nZXRNZXNzYWdlKCksIkludmFsaWQgY3VycmVuY3kiKSAhPT0gZmFsc2UpCgkJCXsKCQkJCSRzdGF0dXMgPSBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRkFJTEVEOwoJCQl9CgkJCQoJCQlpZiAoKCRlLT5nZXRDb2RlKCkgPT0gImNhcmRfZGVjbGluZWQiKSB8fCAoJGUtPmdldENvZGUoKSA9PSAiZXhwaXJlZF9jYXJkIikgfHwoJGUtPmdldENvZGUoKSA9PSAicHJvY2Vzc2luZ19lcnJvciIpKQoJCQl7CgkJCQkvL3RoZXNlIHN0YXR1c2VzIGluZGljYXRlIHRoYXQgdGhlIGZhaWx1cmUgaXMgb24gdGhlIHJlbW90ZSBzaWRlLCBhbmQgaXMgbm90IGFuIGVycm9yIGluIHRoZSB3YXkgdGhlIHJlcXVlc3QgaXMgY29uc3RydWN0ZWQuCgkJCQkkc3RhdHVzID0gTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEZBSUxFRDsKCQkJfQoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoJGUtPmdldE1lc3NhZ2UoKSwgJHN0YXR1cyk7CgkJfQoJfQoJCgkKCXByb3RlY3RlZCBmdW5jdGlvbiBleGVjdXRlU3Vic2NyaXB0aW9uUGF5bWVudChNTV9PcmRlckl0ZW0gJG9yZGVySXRlbSwgJGN1cnJlbnRSZWJpbGxOdW1iZXIpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCWlmICgkb3JkZXJJdGVtLT5nZXRTdGF0dXMoKSA9PSBNTV9PcmRlckl0ZW06OiRTVEFUVVNfUkVDVVJSSU5HX0NBTkNFTExFRCkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiU3Vic2NyaXB0aW9uIGZvciBvcmRlciBpdGVtIGlkICIuJG9yZGVySXRlbS0+Z2V0SWQoKS4iIHdhcyBub3QgY2hhcmdlZCBiZWNhdXNlIHRoZSBpdGVtIGlzIGNhbmNlbGxlZCIpOwoJCX0KCQkKCQlpZiAoJG9yZGVySXRlbS0+Z2V0U3RhdHVzKCkgPT0gTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklOR19DT01QTEVURSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiU3Vic2NyaXB0aW9uIGZvciBvcmRlciBpdGVtIGlkICIuJG9yZGVySXRlbS0+Z2V0SWQoKS4iIHdhcyBub3QgY2hhcmdlZCBiZWNhdXNlIGJpbGxpbmcgaXMgY29tcGxldGUgZm9yIHRoaXMgaXRlbSIpOwoJCX0KCQkKCQkkb3JkZXIgPSBuZXcgTU1fT3JkZXIoJG9yZGVySXRlbS0+Z2V0T3JkZXJJZCgpKTsKCQkKCQkkc3RyaXBlQ3VzdG9tZXJJZCA9ICR0aGlzLT5sb29rdXBDdXN0b21lcihNTV9PcmRlcjo6Z2V0VXNlcklkQnlPcmRlcklkKCRvcmRlci0+aWQpKTsKCQlpZiAoJHN0cmlwZUN1c3RvbWVySWQgPT09IGZhbHNlKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJJbnZhbGlkIGNhcmQgb24gZmlsZSBmb3IgdXNlciBpZCB7JHBheW1lbnRFdmVudC0+Z2V0VXNlcklkKCl9IixNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJGRlc2NyaXB0aW9uID0gIlBheW1lbnQgZm9yIG9yZGVyIyB7JG9yZGVyLT5nZXRPcmRlck51bWJlcigpfSwgaXRlbTogeyRvcmRlckl0ZW0tPmdldERlc2NyaXB0aW9uKCl9IjsKCQkkZGVzY3JpcHRvciA9ICR0aGlzLT5nZXRPcmRlckRlc2NyaXB0b3IoJG9yZGVyLCAkZGVzY3JpcHRpb24pOwoJCSRjaGFyZ2VSZXNwb25zZSA9ICR0aGlzLT5zZW5kU3RyaXBlQ2hhcmdlKCRvcmRlckl0ZW0tPmdldFJlY3VycmluZ0Ftb3VudCgpLCAkb3JkZXJJdGVtLT5nZXRDdXJyZW5jeSgpLCAkZGVzY3JpcHRvciwkc3RyaXBlQ3VzdG9tZXJJZCk7CgkJCgkJaWYgKE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OmlzRXJyb3IoJGNoYXJnZVJlc3BvbnNlKSB8fCBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjppc0ZhaWxlZCgkY2hhcmdlUmVzcG9uc2UpKQoJCXsKCQkJJG9yZGVySXRlbS0+c2V0U3RhdHVzKE1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkdfUkVCSUxMX0ZBSUxFRCk7CgkJCSRvcmRlckl0ZW0tPmNvbW1pdERhdGEoKTsKCQkJcGFyZW50OjpoYW5kbGVPdmVyZHVlU3Vic2NyaXB0aW9uSXRlbSgkb3JkZXJJdGVtKTsKCQkJcmV0dXJuICRjaGFyZ2VSZXNwb25zZTsKCQl9CgkJIAoJCS8vbG9nIHN1Y2Nlc3NmdWwgdHJhbnNhY3Rpb24KCQkkY2hhcmdlT2JqZWN0ID0gJGNoYXJnZVJlc3BvbnNlLT5nZXRNZXNzYWdlKCk7CgkJJHRyYW5zYWN0aW9uRGF0ZSA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCSRpbnNlcnREYXRhID0gYXJyYXkoICJvcmRlcl9pZCIgPT4gJG9yZGVyLT5nZXRJZCgpLAoJCQkJIm9yZGVyX2l0ZW1faWQiICAgICA9PiAkb3JkZXJJdGVtLT5nZXRJZCgpLAoJCQkJImNoYXJnZV9pZCIgICAgIAk9PiAkY2hhcmdlT2JqZWN0LT5pZCwKCQkJCSJsYXN0X2ZvdXIiICAgICAgICAgPT4gIWVtcHR5KCRjaGFyZ2VPYmplY3QtPmNhcmQtPmxhc3Q0KT9zdWJzdHIoJGNoYXJnZU9iamVjdC0+Y2FyZC0+bGFzdDQsLTQpOiIiLAoJCQkJImFtb3VudCIgICAgICAgICAgICA9PiAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKSwKCQkJCSJjdXJyZW5jeSIgICAgICAgICAgPT4gJG9yZGVyLT5nZXRDdXJyZW5jeSgpLAoJCQkJInRyYW5zYWN0aW9uX2RhdGUiICA9PiAkdHJhbnNhY3Rpb25EYXRlKTsKCQkKCQkKCQkkd3BkYi0+aW5zZXJ0KE1NX1RBQkxFX1NUUklQRV9DSEFSR0VTLCRpbnNlcnREYXRhKTsKCQkkc3RyaXBlVGFibGVDaGFyZ2VJZCA9ICR3cGRiLT5pbnNlcnRfaWQ7CgkJCgoJCWlmICgkdGhpcy0+dGVzdE1vZGUpCgkJewoJCQlNTV9UcmFuc2FjdGlvbkxvZzo6Y3JlYXRlVGVzdFRyYW5zYWN0aW9uRW50cnkoJG9yZGVySXRlbS0+Z2V0T3JkZXJJZCgpLCAkb3JkZXJJdGVtLT5nZXRJZCgpLCAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKSwgJG9yZGVyLT5nZXRDdXJyZW5jeSgpLCAkZGVzY3JpcHRpb24sIE1NX1RyYW5zYWN0aW9uTG9nOjokVFJBTlNBQ1RJT05fVFlQRV9SRUNVUlJJTkdfUEFZTUVOVCx0cnVlLCR0aGlzLT5nZXRJZCgpLCRzdHJpcGVUYWJsZUNoYXJnZUlkKTsJCQkKCQl9CgkJZWxzZSAKCQl7CgkJCU1NX1RyYW5zYWN0aW9uTG9nOjpjcmVhdGVUcmFuc2FjdGlvbkVudHJ5KCRvcmRlckl0ZW0tPmdldE9yZGVySWQoKSwgJG9yZGVySXRlbS0+Z2V0SWQoKSwgJG9yZGVySXRlbS0+Z2V0UmVjdXJyaW5nQW1vdW50KCksICRvcmRlci0+Z2V0Q3VycmVuY3koKSwgJGRlc2NyaXB0aW9uLCBNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUkVDVVJSSU5HX1BBWU1FTlQsdHJ1ZSwkdGhpcy0+Z2V0SWQoKSwkc3RyaXBlVGFibGVDaGFyZ2VJZCk7CgkJfQoKCQkKCQkvLyBzY2hlZHVsZSBhbm90aGVyIHBheW1lbnQgaWYgbmVjZXNzYXJ5CgkJcmV0dXJuICR0aGlzLT5zY2hlZHVsZU5leHRQYXltZW50Rm9yRXhpc3RpbmdTdWJzY3JpcHRpb24oJG9yZGVySXRlbSwgJG9yZGVyLT5nZXRDdXN0b21lcigpLCAkY3VycmVudFJlYmlsbE51bWJlcik7Cgl9CgkKCQoJCgkvKioKCSAqIExvb2tzIHVwIHRoZSBTdHJpcGUgY3VzdG9tZXIgaWQgbGlua2VkIHRvIGEgTWVtYmVyTW91c2UgdXNlcgoJICogCgkgKiBAcGFyYW0gaW50ICR1c2VySWQgVGhlIE1lbWJlck1vdXNlIHVzZXIgaWQKCSAqIEByZXR1cm4gVGhlIChzdHJpbmcpIFN0cmlwZSBjdXN0b21lciBpZCBpZiBmb3VuZCwgYm9vbGVhbiBmYWxzZSBpZiBub3QgZm91bmQgb3IgZXJyb3JlZAoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gbG9va3VwQ3VzdG9tZXIoJHVzZXJJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJGxvb2t1cFNRTCA9ICJTRUxFQ1Qgc3RyaXBlX2N1c3RvbWVyX2lkIGZyb20gIi5NTV9UQUJMRV9TVFJJUEVfQ1VTVE9NRVJfTElOS1MuIiBXSEVSRSBtZW1iZXJtb3VzZV9jdXN0b21lcl9pZD0neyR1c2VySWR9JyI7CgkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRsb29rdXBTUUwpOwoJCWlmIChpc19udWxsKCRyb3cpKQoJCXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlyZXR1cm4gJHJvdy0+c3RyaXBlX2N1c3RvbWVyX2lkOwoJfQoJCgkKCS8qKgoJICogVXBkYXRlcyB0aGUgcGF5bWVudCBnYXRld2F5IHdpdGggbmV3IGluZm9ybWF0aW9uLCBhbmQgdXBkYXRlIHRoZSBNZW1iZXJNb3VzZSBvcmRlciB3aXRoIHRoZSBuZXcgYmlsbGluZyBhZGRyZXNzCgkgKiBAc2VlIE1NX1BheW1lbnRTZXJ2aWNlOjp1cGRhdGVTdWJzY3JpcHRpb25JbmZvKCkKCSAqIAoJICogQHBhcmFtIE1NX09yZGVySXRlbSAkb3JkZXJJdGVtIFRoZSBvcmRlciBpdGVtIHJlcHJlc2VudGluZyB0aGUgc3Vic2NyaXB0aW9uIGJlaW5nIHVwZGF0ZWQKCSAqIEBwYXJhbSBNTV9DYXJkSW5mbyAkY2FyZEluZm8gKG9wdGlvbmFsKSBUaGUgbmV3IGNhcmQgdG8gc3RvcmUgb24gZmlsZQoJICogQHBhcmFtIE1NX0N1c3RvbWVyQWRkcmVzcyAkYmlsbGluZ0FkZHJlc3MgVGhlIG5ldyBiaWxsaW5nIGFkZHJlc3MgdG8gc3RvcmUuIFNob3VsZCBiZSB0aGUgYWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggdGhlIGN1c3RvbWVyJ3MgY2FyZCBvbiBmaWxlCgkgKiAKCSAqIEByZXR1cm4gTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSByZXByZXNlbnRpbmcgc3VjY2VzcyBvciBlcnJvci4gQ29udGFpbnMgYSBkZXNjcmlwdGl2ZSBlcnJvciBtZXNzYWdlIG9uIGVycm9yCgkgKiAKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZVN1YnNjcmlwdGlvbkluZm8oTU1fT3JkZXJJdGVtICRvcmRlckl0ZW0sIE1NX0NhcmRJbmZvICRjYXJkSW5mbz1udWxsLCBNTV9DdXN0b21lckFkZHJlc3MgJGJpbGxpbmdBZGRyZXNzPW51bGwpIAoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZiAoaXNfbnVsbCgkY2FyZEluZm8pIHx8IGlzX251bGwoJGJpbGxpbmdBZGRyZXNzKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiRXJyb3I6IEJvdGggYSBjcmVkaXQgY2FyZCBhbmQgYSBiaWxsaW5nIGFkZHJlc3MgbXVzdCBiZSBzdXBwbGllZCB0byB1cGRhdGUgYSBzdWJzY3JpcHRpb24iLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRjYXJkVmFsaWQgPSAkY2FyZEluZm8tPnZhbGlkYXRlKCk7CgkJaWYgKCRjYXJkVmFsaWQgIT09IHRydWUpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIkVycm9yOiB7JGNhcmRWYWxpZH0iLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRjdXN0b21lcklkID0gTU1fT3JkZXI6OmdldFVzZXJJZEJ5T3JkZXJJZCgkb3JkZXJJdGVtLT5nZXRPcmRlcklkKCkpOwoJCWlmICgkY3VzdG9tZXJJZCA9PSAtMSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiVW5hYmxlIHRvIHVwZGF0ZSBzdWJzY3JpcHRpb246IGN1c3RvbWVyIHdhcyBub3QgZm91bmQiLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRzdHJpcGVDdXN0b21lcklkID0gJHRoaXMtPmxvb2t1cEN1c3RvbWVyKCRjdXN0b21lcklkKTsKCQlpZiAoJHN0cmlwZUN1c3RvbWVySWQgPT09IGZhbHNlKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJVbmFibGUgdG8gdXBkYXRlIHN1YnNjcmlwdGlvbjogY3VzdG9tZXIgd2FzIG5vdCBmb3VuZCIsTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJJHVzZXIgPSBuZXcgTU1fVXNlcigkY3VzdG9tZXJJZCk7CgkJdHJ5IAoJCXsKCQkJJHN0cmlwZUN1c3RvbWVyID0gXFN0cmlwZVxDdXN0b21lcjo6cmV0cmlldmUoJHN0cmlwZUN1c3RvbWVySWQpOwoJCQkkc3RyaXBlQ3VzdG9tZXItPmRlc2NyaXB0aW9uID0gZ2V0X2Jsb2dpbmZvKCkuIiBjdXN0b21lciBpZCB7JHVzZXItPmdldElkKCl9ICh7JHVzZXItPmdldEVtYWlsKCl9KSI7CgkJCSRzdHJpcGVDdXN0b21lci0+ZW1haWwgPSAkdXNlci0+Z2V0RW1haWwoKTsKCQkJCgkJCWlmICgkY2FyZEluZm8gaW5zdGFuY2VvZiBNTV9QYXltZW50VG9rZW4pCgkJCXsKCQkJCSRzdHJpcGVDdXN0b21lci0+Y2FyZCA9ICRjYXJkSW5mby0+Z2V0VG9rZW4oKTsKCQkJfQoJCQllbHNlIAoJCQl7CiAgCQkJCSRzdHJpcGVDdXN0b21lci0+Y2FyZCA9IGFycmF5KAoJCSAgCQkJICAibnVtYmVyIiAgICAJCSAgID0+ICRjYXJkSW5mby0+Z2V0Q2FyZE51bWJlcigpLAoJCSAgICAJCSAgImV4cF9tb250aCIgCQkgICA9PiAkY2FyZEluZm8tPmdldEV4cGlyYXRpb25Nb250aCgpLAoJCSAgICAJCSAgImV4cF95ZWFyIiAgCQkgICA9PiAkY2FyZEluZm8tPmdldEV4cGlyYXRpb25ZZWFyKCksCgkJICAgIAkJICAiY3ZjIiAgICAgICAJCSAgID0+ICRjYXJkSW5mby0+Z2V0Q1ZWKCksCgkJICAgIAkJICAiYWRkcmVzc19saW5lMSIgICAgPT4gJGJpbGxpbmdBZGRyZXNzLT5nZXRBZGRyZXNzTGluZTEoKSwKCQkgICAgCQkgICJhZGRyZXNzX2xpbmUyIiAgICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldEFkZHJlc3NMaW5lMigpLAoJCSAgICAJCSAgImFkZHJlc3NfemlwIgkgICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0UG9zdGFsQ29kZSgpLAoJCSAgICAJCSAgImFkZHJlc3Nfc3RhdGUiICAgID0+ICRiaWxsaW5nQWRkcmVzcy0+Z2V0U3RhdGUoKSwKCQkgICAgCQkgICJhZGRyZXNzX2NpdHkiICAgICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldENpdHkoKSwKCQkgICAgCQkgICJhZGRyZXNzX2NvdW50cnkiICA9PiAkYmlsbGluZ0FkZHJlc3MtPmdldENvdW50cnkoKSwKCQkJICAgICAgICApOwoJCSAgICAgfQoJCSAgICAgIAoJCQkkc3RyaXBlQ3VzdG9tZXItPnNhdmUoKTsKCQkJcGFyZW50Ojp1cGRhdGVTdWJzY3JpcHRpb25JbmZvKCRvcmRlckl0ZW0sJGNhcmRJbmZvLCRiaWxsaW5nQWRkcmVzcyk7CgkJCWlmICgkb3JkZXJJdGVtLT5nZXRTdGF0dXMoKSA9PSBNTV9PcmRlckl0ZW06OiRTVEFUVVNfUkVDVVJSSU5HX1JFQklMTF9GQUlMRUQpCgkJCXsKCQkJCXJldHVybiAkdGhpcy0+cmVzdW1lU3Vic2NyaXB0aW9uKCRvcmRlckl0ZW0pOwoJCQl9CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgpOwoJCX0KCQljYXRjaCAoRXhjZXB0aW9uICRlKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCRlLT5nZXRNZXNzYWdlKCksIE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQkJCgl9CgkKCQoJLyoqCgkgKiBSZWZ1bmRzIGEgdHJhbnNhY3Rpb24KCSAqIAoJICogQHBhcmFtIGludGVnZXIgJHRyYW5zYWN0aW9uSWQgVGhlIE1lbWJlck1vdXNlIHRyYW5zYWN0aW9uIHRvIHJlZnVuZAoJICogQHJldHVybiBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlIGluZGljYXRpbmcgc3VjY2VzcywgZmFpbHVyZSwgb3IgZXJyb3IKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHJlZnVuZFRyYW5zYWN0aW9uKCR0cmFuc2FjdGlvbklkKQoJewoJCXJldHVybiAkdGhpcy0+X3JlZnVuZFRyYW5zYWN0aW9uKCR0cmFuc2FjdGlvbklkLHRydWUpOwoJfQoJCgkKCS8qKgoJICogSW50ZXJuYWwgcmVmdW5kIG1ldGhvZCB0aGF0IGFsbG93cyBhIHJlZnVuZCB0byBiZSBwcm9jZXNzZWQgdGhlIHNhbWUgd2F5LCBldmVuIGlmIGl0IGlzIGluaXRpYXRlZCBvbiBTdHJpcGUgYW5kIHNlbnQgdG8gdXMgdmlhIHdlYmhvb2sKCSAqIAoJICogQHBhcmFtIGludGVnZXIgJHRyYW5zYWN0aW9uSWQgVGhlIGlkIG9mIHRoZSBNZW1iZXJNb3VzZSB0cmFuc2FjdGlvbiBiZWluZyByZWZ1bmRlZAoJICogQHBhcmFtIGJvb2xlYW4gJHNob3VsZEF0dGVtcHRHYXRld2F5UmVmdW5kIChvcHRpb25hbCkgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1ldGhvZCBzaG91bGQgYXR0ZW1wdCB0byBpc3N1ZSBhIHJlZnVuZCB0aHJvdWdoIHRoZSBTdHJpcGUgYXBpLiBJZiBTdHJpcGUgbm90aWZpZXMgdXMgdmlhIHdlYmhvb2ssIHRoZSBjaGFyZ2UgaXMgYWxyZWFkeSByZWZ1bmRlZCwgc28gdGhpcyBzaG91bGQgYmUgZmFsc2UKCSAqIAoJICogQHJldHVybiBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlIGluZGljYXRpbmcgc3VjY2VzcyBvciBmYWlsdXJlCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBfcmVmdW5kVHJhbnNhY3Rpb24oJHRyYW5zYWN0aW9uSWQsJHNob3VsZEF0dGVtcHRHYXRld2F5UmVmdW5kPXRydWUpIAoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkvL21ha2Ugc3VyZSB3ZSBoYXZlIGEgdmFsaWQgdHJhbnNhY3Rpb24gaWQKCQlpZiAoZW1wdHkoJHRyYW5zYWN0aW9uSWQpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJVbmFibGUgdG8gcHJvY2VzcyByZWZ1bmQsIGludmFsaWQgdHJhbnNhY3Rpb24gaWQgc3VwcGxpZWQiLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCS8vbWFrZSBzdXJlIHRoZSB0cmFuc2FjdGlvbiBleGlzdHMKCQkkdHJhbnNhY3Rpb25Sb3cgPSAkd3BkYi0+Z2V0X3Jvdygkd3BkYi0+cHJlcGFyZSgiU0VMRUNUICogZnJvbSAiLk1NX1RBQkxFX1RSQU5TQUNUSU9OX0xPRy4iIHdoZXJlIGlkID0gJXMiLCR0cmFuc2FjdGlvbklkKSk7CgkJaWYgKGlzX251bGwoJHRyYW5zYWN0aW9uUm93KSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiVW5hYmxlIHRvIHByb2Nlc3MgcmVmdW5kLCB0cmFuc2FjdGlvbiBkb2VzIG5vdCBleGlzdCIsTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJLy9tYWtlIHN1cmUgaXRzIG5vdCBhbHJlYWR5IHJlZnVuZGVkCgkJaWYgKCFpc19udWxsKCR0cmFuc2FjdGlvblJvdy0+cmVmdW5kX2lkKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiVHJhbnNhY3Rpb24gaGFzIGFscmVhZHkgYmVlbiByZWZ1bmRlZCIsTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJLy9kZXRlcm1pbmUgd2hlcmUgdGhlIHRyYW5zYWN0aW9uIGluZm9ybWF0aW9uIGlzIHN0b3JlZCBiYXNlZCBvbiB0aGUgdHlwZQoJCSR0cmFuc2FjdGlvbkFtb3VudCA9IGFicygkdHJhbnNhY3Rpb25Sb3ctPmFtb3VudCk7CgkJJGdhdGV3YXlSZWZ1bmRSZXF1aXJlZCA9IGZhbHNlOwoJCXN3aXRjaCAoJHRyYW5zYWN0aW9uUm93LT50cmFuc2FjdGlvbl90eXBlKQoJCXsKCQkJY2FzZSBNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUEFZTUVOVDoKCQkJY2FzZSBNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUkVDVVJSSU5HX1BBWU1FTlQ6CgkJCQkkc3RyaXBlQ2hhcmdlUXVlcnkgPSAiU0VMRUNUICogZnJvbSAiLk1NX1RBQkxFX1NUUklQRV9DSEFSR0VTLiIgV0hFUkUgaWQgPSAlcyI7CgkJCQkkc3RyaXBlQ2hhcmdlSW5mbyA9ICR3cGRiLT5nZXRfcm93KCR3cGRiLT5wcmVwYXJlKCRzdHJpcGVDaGFyZ2VRdWVyeSwkdHJhbnNhY3Rpb25Sb3ctPnBheW1lbnRfc2VydmljZV9kZXRhaWxfaWQpKTsKCQkJCSRzdHJpcGVDaGFyZ2VJZCA9ICRzdHJpcGVDaGFyZ2VJbmZvLT5jaGFyZ2VfaWQ7CgkJCQkkZ2F0ZXdheVJlZnVuZFJlcXVpcmVkID0gdHJ1ZTsKCQkJCWJyZWFrOwoJCQljYXNlIE1NX1RyYW5zYWN0aW9uTG9nOjokVFJBTlNBQ1RJT05fVFlQRV9DSEFSR0U6CgkJCWNhc2UgTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX1JFQ1VSUklOR19DSEFSR0U6CgkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIlVuYWJsZSB0byByZWZ1bmQgdHJhbnNhY3Rpb246IE5vdCBhIHBheW1lbnQiLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJCQlicmVhazsKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiVW5rbm93biB0cmFuc2FjdGlvbiB0eXBlLCB1bmFibGUgdG8gcHJvY2VzcyByZWZ1bmQiLE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmICgkZ2F0ZXdheVJlZnVuZFJlcXVpcmVkICYmICRzaG91bGRBdHRlbXB0R2F0ZXdheVJlZnVuZCkKCQl7CgkJCWlmIChlbXB0eSgkc3RyaXBlQ2hhcmdlSWQpKSAvL25lY2Vzc2FyeSBmb3IgYm90aCB2b2lkcyBhbmQgY3JlZGl0cwoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoIkEgY29uZmlndXJhdGlvbiBlcnJvciB3YXMgZW5jb3VudGVyZWQgZHVyaW5nIHRoZSBhdHRlbXB0IHRvIHZvaWQgdGhlIHRyYW5zYWN0aW9uIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCXJldHVybiAkdGhpcy0+cmVmdW5kU3RyaXBlQ2hhcmdlSWQoJHN0cmlwZUNoYXJnZUlkLCR0cmFuc2FjdGlvbklkKTsKCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCk7IC8vc3VjY2VzcwoJfQkKCQoJCgkvKioKCSAqIFJlZnVuZHMgYSBTdHJpcGUgY2hhcmdlLCBhbmQgbG9ncyB0aGUgcmVmdW5kIGluIHRoZSB0cmFuc2FjdGlvbiB0YWJsZQoJICogCgkgKiBAcGFyYW0gc3RyaW5nICRzdHJpcGVDaGFyZ2VJZCBUaGUgU3RyaXBlIGlkZW50aWZpZXIgZm9yIHRoZSBjaGFyZ2UgdG8gYmUgcmVmdW5kZWQKCSAqIEBwYXJhbSBpbnQgJG9yaWdpbmFsVHJhbnNhY3Rpb25JZCBUaGUgaWRlbnRpZmllciBmb3IgdGhlIG1lbWJlcm1vdXNlIHRyYW5zYWN0aW9uCgkgKiAKCSAqIEByZXR1cm4gTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSBpbmRpY2F0aW5nIHN1Y2Nlc3Mgb3IgZmFpbHVyZQoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gcmVmdW5kU3RyaXBlQ2hhcmdlSWQoJHN0cmlwZUNoYXJnZUlkLCAkb3JpZ2luYWxUcmFuc2FjdGlvbklkKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkYWxyZWFkeVJlZnVuZGVkID0gZmFsc2U7CgkJdHJ5IAoJCXsKCQkJLy9kbyB0aGUgc3RyaXBlIHJlZnVuZAoJCQkkY2ggPSBcU3RyaXBlXENoYXJnZTo6cmV0cmlldmUoJHN0cmlwZUNoYXJnZUlkKTsKCQkJJGNoLT5yZWZ1bmQoKTsKCQl9CgkJY2F0Y2ggKEV4Y2VwdGlvbiAkZSkKCQl7CgkJCWlmIChzdHJwb3MoJGUtPmdldE1lc3NhZ2UoKSwiaGFzIGFscmVhZHkgYmVlbiByZWZ1bmRlZCIpICE9PSBmYWxzZSkKCQkJewoJCQkJJGFscmVhZHlSZWZ1bmRlZCA9IHRydWU7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9QYXltZW50U2VydmljZVJlc3BvbnNlKCJFcnJvciByZWZ1bmRpbmcgdHJhbnNhY3Rpb246IHskZS0+Z2V0TWVzc2FnZSgpfSIsTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQkJCgkJLy9nZXQgb3JpZ2luYWwgdHJhbnNhY3Rpb24gZGV0YWlscwoJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mbyA9ICR3cGRiLT5nZXRfcm93KCR3cGRiLT5wcmVwYXJlKCJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfVFJBTlNBQ1RJT05fTE9HLiIgV0hFUkUgaWQ9JXMiLCRvcmlnaW5hbFRyYW5zYWN0aW9uSWQpKTsKCQlpZiAoISRhbHJlYWR5UmVmdW5kZWQgfHwgKCRhbHJlYWR5UmVmdW5kZWQgJiYgaXNfbnVsbCgkb3JpZ2luYWxUcmFuc2FjdGlvbkluZm8tPnJlZnVuZF9pZCkpKQoJCXsKCQkJJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24gPSAiUmVmdW5kIGZvciB0cmFuc2FjdGlvbiMgeyRvcmlnaW5hbFRyYW5zYWN0aW9uSWR9IjsKCQkJJHRyYW5zYWN0aW9uRGF0ZSA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCQkKCQkJaWYgKCR0aGlzLT50ZXN0TW9kZSkKCQkJewoJCQkJJHJlc3BvbnNlID0gTU1fVHJhbnNhY3Rpb25Mb2c6OmNyZWF0ZVRlc3RUcmFuc2FjdGlvbkVudHJ5KCRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+b3JkZXJfaWQsCgkJCQkJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+b3JkZXJfaXRlbV9pZCwKCQkJCQkJJG9yaWdpbmFsVHJhbnNhY3Rpb25JbmZvLT5hbW91bnQsCgkJCQkJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+Y3VycmVuY3ksCgkJCQkJCSR0cmFuc2FjdGlvbkRlc2NyaXB0aW9uLAoJCQkJCQlNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUkVGVU5ELAoJCQkJCQlmYWxzZSwKCQkJCQkJJHRoaXMtPmdldElkKCksCgkJCQkJCW51bGwsCgkJCQkJCSR0cmFuc2FjdGlvbkRhdGUsCgkJCQkJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSWQpOwoJCQl9CgkJCWVsc2UgCgkJCXsKCQkJCSRyZXNwb25zZSA9IE1NX1RyYW5zYWN0aW9uTG9nOjpjcmVhdGVUcmFuc2FjdGlvbkVudHJ5KCRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+b3JkZXJfaWQsCgkJCQkJJG9yaWdpbmFsVHJhbnNhY3Rpb25JbmZvLT5vcmRlcl9pdGVtX2lkLAoJCQkJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+YW1vdW50LAoJCQkJCSRvcmlnaW5hbFRyYW5zYWN0aW9uSW5mby0+Y3VycmVuY3ksCgkJCQkJJHRyYW5zYWN0aW9uRGVzY3JpcHRpb24sCgkJCQkJTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX1JFRlVORCwKCQkJCQlmYWxzZSwKCQkJCQkkdGhpcy0+Z2V0SWQoKSwKCQkJCQludWxsLAoJCQkJCSR0cmFuc2FjdGlvbkRhdGUsCgkJCQkJJG9yaWdpbmFsVHJhbnNhY3Rpb25JZCk7CgkJCX0KCQkJaWYgKE1NX1Jlc3BvbnNlOjppc1N1Y2Nlc3MoJHJlc3BvbnNlKSkKCQkJewoJCQkJJHdwZGItPnF1ZXJ5KCR3cGRiLT5wcmVwYXJlKCJVUERBVEUgIi5NTV9UQUJMRV9UUkFOU0FDVElPTl9MT0cuIiBTRVQgcmVmdW5kX2lkID0gJXMgV0hFUkUgaWQgPSAlcyIsJHJlc3BvbnNlLT5tZXNzYWdlLCRvcmlnaW5hbFRyYW5zYWN0aW9uSWQpKTsKCQkJfQoJCX0KCQkKCQlpZiAoJGFscmVhZHlSZWZ1bmRlZCkKCQl7CgkJCXJldHVybiBuZXcgTU1fUGF5bWVudFNlcnZpY2VSZXNwb25zZSgiVGhpcyB0cmFuc2FjdGlvbiB3YXMgYWxyZWFkeSByZWZ1bmRlZCBieSBTdHJpcGUuIFRoZSBkYXRhYmFzZSBoYXMgYmVlbiB1cGRhdGVkIixNTV9QYXltZW50U2VydmljZVJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQlyZXR1cm4gbmV3IE1NX1BheW1lbnRTZXJ2aWNlUmVzcG9uc2UoKTsJCQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRUZXN0QVBJS2V5KCkKCXsKCQlyZXR1cm4gJHRoaXMtPnRlc3RBUElLZXk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFRlc3RBUElLZXkoJHRlc3RBUElLZXkpCgl7CgkJJHRoaXMtPnRlc3RBUElLZXkgPSAkdGVzdEFQSUtleTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TGl2ZUFQSUtleSgpCgl7CgkJcmV0dXJuICR0aGlzLT5saXZlQVBJS2V5OwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRMaXZlQVBJS2V5KCRsaXZlQVBJS2V5KQoJewoJCSR0aGlzLT5saXZlQVBJS2V5ID0gJGxpdmVBUElLZXk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldFN0cmlwZUpTRW5hYmxlZCgkc3RyaXBlSlNFbmFibGVkKQoJewoJCSR0aGlzLT5zdHJpcGVKU0VuYWJsZWQgPSAoYm9vbCkkc3RyaXBlSlNFbmFibGVkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBpc1N0cmlwZUpTRW5hYmxlZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5zdHJpcGVKU0VuYWJsZWQ7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRUZXN0UHVibGlzaGFibGVLZXkoKQoJewoJCXJldHVybiAkdGhpcy0+dGVzdFB1Ymxpc2hhYmxlS2V5OwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRUZXN0UHVibGlzaGFibGVLZXkoJHRlc3RQdWJsaXNoYWJsZUtleSkKCXsKCQkkdGhpcy0+dGVzdFB1Ymxpc2hhYmxlS2V5ID0gJHRlc3RQdWJsaXNoYWJsZUtleTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TGl2ZVB1Ymxpc2hhYmxlS2V5KCkKCXsKCQlyZXR1cm4gJHRoaXMtPmxpdmVQdWJsaXNoYWJsZUtleTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0TGl2ZVB1Ymxpc2hhYmxlS2V5KCRsaXZlUHVibGlzaGFibGVLZXkpCgl7CgkJJHRoaXMtPmxpdmVQdWJsaXNoYWJsZUtleSA9ICRsaXZlUHVibGlzaGFibGVLZXk7Cgl9CgkKCQoJLyoqCgkgKiBjaGVja291dEluaXQgaXMgY2FsbGVkIGZyb20gdGhlIGNoZWNrb3V0IGZvcm0gcHJpb3IgdG8gdGhlIHBhZ2UgYmVpbmcgcmVuZGVyZWQuCgkgKiBJZiBTdHJpcGUuanMgaXMgYmVpbmcgdXNlZCwgdGhlIGphdmFzY3JpcHQgbGlicmFyeSBpcyBlbnF1ZXVlZCwgYW5kIGN1c3RvbSAKCSAqIAoJICogQHNlZSBNTV9QYXltZW50U2VydmljZTo6Y2hlY2tvdXRJbml0KCkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGNoZWNrb3V0SW5pdCgpCgl7CgkJcmV0dXJuICR0aGlzLT5zdHJpcGVKU0luaXQoYXJyYXkoInN0cmlwZUpTIiwibWVtYmVybW91c2UtY2hlY2tvdXQtZm9ybSIpKTsKCX0JCgkKCQoJcHJvdGVjdGVkIGZ1bmN0aW9uIHN0cmlwZUpTSW5pdCgkYnJpZGdlRGVwZW5kZW5jaWVzPWFycmF5KCkpCgl7CgkJLy9UaGUgZnJvbnQtZW5kIHRhc2tzIGFyZSBvbmx5IHJlbGV2ZW50IGlmIFN0cmlwZS5qcyBpcyBlbmFibGVkCgkJaWYgKCR0aGlzLT5zdHJpcGVKU0VuYWJsZWQpCgkJewoJCQl3cF9lbnF1ZXVlX3NjcmlwdCgic3RyaXBlSlMiLCAiaHR0cHM6Ly9qcy5zdHJpcGUuY29tL3YyLyIsIGFycmF5KCksIE1lbWJlck1vdXNlOjpnZXRQbHVnaW5WZXJzaW9uKCksIHRydWUpOwoJCQl3cF9lbnF1ZXVlX3NjcmlwdCgibWVtYmVybW91c2Utc3RyaXBlSlMiLCBwbHVnaW5zX3VybChNTV9QTFVHSU5fTkFNRS4iL3Jlc291cmNlcy9qcy9jb21tb24vbW0tc3RyaXBlLXRva2VuLWV4Y2hhbmdlLmpzIiksICRicmlkZ2VEZXBlbmRlbmNpZXMsIE1lbWJlck1vdXNlOjpnZXRQbHVnaW5WZXJzaW9uKCksIHRydWUpOwoJCQl3cF9sb2NhbGl6ZV9zY3JpcHQoJ21lbWJlcm1vdXNlLXN0cmlwZUpTJywgJ3N0cmlwZUpTSW5mbycsIGFycmF5KCdzdHJpcGVQdWJsaXNoYWJsZUtleScgPT4gJHRoaXMtPmluVGVzdE1vZGUoKT8kdGhpcy0+Z2V0VGVzdFB1Ymxpc2hhYmxlS2V5KCk6JHRoaXMtPmdldExpdmVQdWJsaXNoYWJsZUtleSgpLAoJCQkJCSdpbXByb3BlclN0cmlwZVJlc3BvbnNlRXJyb3JNc2cnID0+IF9tbXQoIkFuIGltcHJvcGVyIHJlc3BvbnNlIHdhcyByZWNlaXZlZCBmcm9tIFN0cmlwZSwgcGxlYXNlIHRyeSBhZ2FpbiIpKSk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRUZXN0TW9kZSgkdGVzdE1vZGUpCgl7CgkJJHRlc3RNb2RlID0gKGJvb2wpJHRlc3RNb2RlOwoJCWlmICgkdGhpcy0+dGVzdE1vZGUgIT0gJHRlc3RNb2RlKQoJCXsKCQkJJHRoaXMtPnNldHVwU3RyaXBlKCk7IC8vYXR0ZW1wdCB0byBjYXRjaCBwcm9ncmFtbWF0aWMgbW9kZSBjaGFuZ2VzIGFuZCByZWluaXRpYWxpemUgU3RyaXBlCgkJfQoJCSR0aGlzLT50ZXN0TW9kZSA9ICR0ZXN0TW9kZTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VGVzdE1vZGUoKQoJewoJCXJldHVybiAkdGhpcy0+dGVzdE1vZGU7Cgl9CgkKCQoJLyoqCgkgKiBAc2VlIE1NX1BheW1lbnRTZXJ2aWNlOjppblRlc3RNb2RlKCkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGluVGVzdE1vZGUoKQoJewoJCXJldHVybiAkdGhpcy0+Z2V0VGVzdE1vZGUoKTsKCX0KCQoJCgkvKioKCSAqIEBzZWUgTU1fUGF5bWVudFNlcnZpY2U6OnN3aXRjaFRvVGVzdE1vZGUoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gc3dpdGNoVG9UZXN0TW9kZSgpCgl7CgkJJHRoaXMtPnNldFRlc3RNb2RlKHRydWUpOwoJCXJldHVybiB0cnVlOwoJfQoJCgkKCS8qKgoJICogTG9hZCBTdHJpcGUuanMgb24gbXkgYWNjb3VudCBwYWdlIHRvIHN1cHBvcnQgdGhlIGNhcmQgdXBkYXRlIG9wZXJhdGlvbgoJICoKCSAqIEBzZWUgTU1fUGF5bWVudFNlcnZpY2U6Om15QWNjb3VudEluaXQoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gbXlBY2NvdW50SW5pdCgpCgl7CgkJLy9jdXJyZW50bHkgdGhlIG15IGFjY291bnQgaW5pdCBwcm9jZXNzIGZvciBhY2NlcHQuanMgaXMgZXhhY3RseSB0aGUgc2FtZSBhcyB0aGUgY2hlY2tvdXQgaW5pdCBwcm9jZXNzCgkJcmV0dXJuICR0aGlzLT5zdHJpcGVKU0luaXQoYXJyYXkoInN0cmlwZUpTIiwibWVtYmVybW91c2UtbXlhY2NvdW50LWpzIikpOwoJfQp9', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(203, 'salesbyproductreport', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KY2xhc3MgTU1fU2FsZXNCeVByb2R1Y3RSZXBvcnQgZXh0ZW5kcyBNTV9BZHZhbmNlZFJlcG9ydEJhc2UgCnsKCQoJcHJvdGVjdGVkICR2aXN1YWxFbGVtZW50cyA9IGFycmF5KCJNTV9SZXBvcnREYXRhR3JpZCIsIk1NX1JlcG9ydENvbHVtbkNoYXJ0Iik7CgkKCXB1YmxpYyBzdGF0aWMgJFNBTEVTQllQUk9EVUNUX1JFUE9SVF9EQVRBR1JJRCA9ICJzYWxlc19ieV9wcm9kdWN0X2RhdGFncmlkIjsKCXB1YmxpYyBzdGF0aWMgJFNBTEVTQllQUk9EVUNUX1JFUE9SVF9DT0xVTU5fQ0hBUlQgPSAic2FsZXNfYnlfcHJvZHVjdF9jb2x1bW5fY2hhcnQiOwoJCgkvL3F1ZXJ5IGlkZW50aWZpZXJzCglwdWJsaWMgc3RhdGljICRTQUxFU19CWV9QUk9EVUNUX1FVRVJZID0gInNhbGVzX2J5X3Byb2R1Y3RfcXVlcnkiOwoJCgkKCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJWaXN1YWxFbGVtZW50KCRlbGVtZW50SWRlbnRpZmllciwgJHBhcmFtcyA9ICcnLCAkd2lkdGggPSAnJywgJGhlaWdodCA9ICcnLCAkZGlyZWN0aXZlcz1hcnJheSgpKSAKCXsKCQlzd2l0Y2ggKCRlbGVtZW50SWRlbnRpZmllcikKCQl7CgkJCWNhc2Ugc2VsZjo6JFNBTEVTQllQUk9EVUNUX1JFUE9SVF9EQVRBR1JJRDoKCQkJCXJldHVybiAkdGhpcy0+cmVuZGVyU2FsZXNCeVByb2R1Y3RSZXBvcnREYXRhZ3JpZCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMsICR3aWR0aCwgJGhlaWdodCwgJGRpcmVjdGl2ZXMpOwoJCQkJYnJlYWs7CgkJCWNhc2Ugc2VsZjo6JFNBTEVTQllQUk9EVUNUX1JFUE9SVF9DT0xVTU5fQ0hBUlQ6CgkJCQlyZXR1cm4gJHRoaXMtPnJlbmRlclNhbGVzQnlQcm9kdWN0UmVwb3J0Q29sdW1uQ2hhcnQoJGVsZW1lbnRJZGVudGlmaWVyLCAkcGFyYW1zLCAkd2lkdGgsICRoZWlnaHQsICRkaXJlY3RpdmVzKTsKCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgiVW5hYmxlIHRvIHJlbmRlciB2aXN1YWwgZWxlbWVudDogaWRlbnRpZmllciAiLigoIWlzX2FycmF5KCRlbGVtZW50SWRlbnRpZmllcikgJiYgIWlzX29iamVjdCgkZWxlbWVudElkZW50aWZpZXIpKT8ieyRlbGVtZW50SWRlbnRpZmllcn0gIjoiIikuInVua25vd24iLE1NX1JlcG9ydFJlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVuZGVyU2FsZXNCeVByb2R1Y3RSZXBvcnREYXRhZ3JpZCgkZWxlbWVudElkZW50aWZpZXIsICRwYXJhbXMgPSAnJywgJHdpZHRoID0gJycsICRoZWlnaHQgPSAnJywgJGRpcmVjdGl2ZXM9YXJyYXkoKSkKCXsKCQkkZGF0YVJlc3BvbnNlID0gTU1fUmVwb3J0RGF0YVJldHJpZXZlcjo6cmVxdWVzdERhdGEoZ2V0X2NsYXNzKCR0aGlzKSwgc2VsZjo6JFNBTEVTX0JZX1BST0RVQ1RfUVVFUlksICRwYXJhbXMpOwoJCWlmICghTU1fUmVwb3J0UmVzcG9uc2U6OmlzU3VjY2VzcygkZGF0YVJlc3BvbnNlKSkKCQl7CgkJCXJldHVybiAkZGF0YVJlc3BvbnNlOwoJCX0KCQkKCQkkZ3JpZEhlYWRlcnMgPSBhcnJheSgicHJvZHVjdCI9PmFycmF5KCdsYWJlbCc9PiJQcm9kdWN0IiksInVuaXRzIj0+YXJyYXkoJ2xhYmVsJz0+IlVuaXRzIiksInNhbGVzIj0+YXJyYXkoJ2xhYmVsJz0+IlNhbGVzIiwnY29sdW1uVHlwZSc9Pidtb25leScpKTsKCQkkZ3JpZCA9IE1NX1JlcG9ydERhdGFncmlkOjpjcmVhdGVGcm9tRGF0YShzZWxmOjokU0FMRVNCWVBST0RVQ1RfUkVQT1JUX0RBVEFHUklELCAkZ3JpZEhlYWRlcnMsICRkYXRhUmVzcG9uc2UsJGRpcmVjdGl2ZXMpOwoJCS8vJGdyaWQtPnNldEdyaWRUaXRsZSgiU2FsZXMgQnkgUHJvZHVjdCIpOwoJCSRncmlkLT5zZXRTaG93SGVhZGVyUm93KGZhbHNlKTsKCQkKCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCRncmlkLT5yZW5kZXIoKSk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHJlbmRlclNhbGVzQnlQcm9kdWN0UmVwb3J0Q29sdW1uQ2hhcnQoJGVsZW1lbnRJZGVudGlmaWVyLCAkcGFyYW1zID0gJycsICR3aWR0aCA9ICcnLCAkaGVpZ2h0ID0gJycsICRkaXJlY3RpdmVzPWFycmF5KCkpCgl7CgkJJGRhdGFSZXNwb25zZSA9IE1NX1JlcG9ydERhdGFSZXRyaWV2ZXI6OnJlcXVlc3REYXRhKGdldF9jbGFzcygkdGhpcyksIHNlbGY6OiRTQUxFU19CWV9QUk9EVUNUX1FVRVJZLCAkcGFyYW1zKTsKCQlpZiAoIU1NX1JlcG9ydFJlc3BvbnNlOjppc1N1Y2Nlc3MoJGRhdGFSZXNwb25zZSkpCgkJewoJCQlyZXR1cm4gJGRhdGFSZXNwb25zZTsKCQl9CgkJCgkJJGNvbHVtbiA9IE1NX1JlcG9ydENvbHVtbkNoYXJ0OjpjcmVhdGVGcm9tVG9wUmVzdWx0cygkZWxlbWVudElkZW50aWZpZXIsICJwcm9kdWN0IiwgInNhbGVzIiwgMTAsICRkYXRhUmVzcG9uc2UpOwoJCSRjb2x1bW4tPnNldEN1cnJlbmN5VmFsdWVzKHRydWUpOwoJCSRjb2x1bW4tPnNldFZhbHVlQXhpc1RpdGxlKCJTYWxlcyBpbiAiLk1NX0N1cnJlbmN5VXRpbDo6Z2V0QWN0aXZlQ3VycmVuY3koKSk7CgkJJGNvbHVtbi0+c2V0Q2F0ZWdvcnlBeGlzVGl0bGUoIlByb2R1Y3RzIik7CgkJLy9UT0RPOiBoYW5kbGUgbm8gZGF0YSBzY2VuYXJpbyAoaGVyZSwgb3IgbG93ZXI/KQoJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoJGNvbHVtbi0+cmVuZGVyKCkpOwoJfQoJCgkKCS8qKgoJICogR2VuZXJhdGUgdGhlIGRhdGEgZm9yIHRoZSBTYWxlcyBCeSBQcm9kdWN0IHJlcG9ydC4gCgkgKiBDb25zdHJhaW50OiBUaGUgc3VwcGxpZWQgcGFyYW1zIG11c3QgY29udGFpbiBhIHN0YXJ0IGFuZCBlbmQgZGF0ZQoJICogCgkgKiBAcGFyYW0gYXJyYXkgJHBhcmFtcwoJICogQHJldHVybiBNTV9SZXNwb25zZSBjb250YWluaW5nIHRoZSByZXN1bHRzCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2VuZXJhdGVTYWxlc0J5UHJvZHVjdFJlcG9ydERhdGEoJHBhcmFtcykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYgKCFpc19hcnJheSgkcGFyYW1zKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNvdWxkIG5vdCBnZW5lcmF0ZSBTYWxlcyBCeSBQcm9kdWN0IHJlcG9ydCBkYXRhOiBJbXByb3BlciBwYXJhbWV0ZXJzIGZvcm1hdCIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmICghaXNzZXQoJHBhcmFtc1snc3RhcnRfZGF0ZSddKSB8fCAhaXNzZXQoJHBhcmFtc1snZW5kX2RhdGUnXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDb3VsZCBub3QgZ2VuZXJhdGUgU2FsZXMgQnkgUHJvZHVjdCByZXBvcnQgZGF0YTogU3RhcnQgYW5kIEVuZCBkYXRlIG11c3QgYmUgc3VwcGxpZWQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkvL29wdGlvbmFsIHBhcmFtCgkJJGluY2x1ZGVfcmViaWxscyA9IChpc3NldCgkcGFyYW1zWydpbmNsdWRlX3JlYmlsbHMnXSkgJiYgKCRwYXJhbXNbJ2luY2x1ZGVfcmViaWxscyddID09ICJvbiIpKTsKCQkKCQkKCQkkdHJhbnNhY3Rpb25zVGFibGUgPSBNTV9UQUJMRV9UUkFOU0FDVElPTl9MT0c7CgkJJHByb2R1Y3RzVGFibGUgPSBNTV9UQUJMRV9QUk9EVUNUUzsKCQkkb3JkZXJJdGVtc1RhYmxlID0gTU1fVEFCTEVfT1JERVJfSVRFTVM7CgkJCgkJJHN0YXJ0VGltZSA9IHN0cnRvdGltZSgkcGFyYW1zWydzdGFydF9kYXRlJ10pOwoJCSRlbmRUaW1lID0gc3RydG90aW1lKCRwYXJhbXNbJ2VuZF9kYXRlJ10pOwoJCQoJCSRzdGFydERhdGUgPSBkYXRlKCJZLW0tZCAwMDowMCIsJHN0YXJ0VGltZSk7IC8vbXlzcWwgZm9ybWF0CgkJJGVuZERhdGUgPSAgIGRhdGUoIlktbS1kIDIzOjU5OjU5IiwkZW5kVGltZSk7CgkJCgkJJHRyYW5zYWN0aW9uVHlwZXMgPSBhcnJheShNTV9UcmFuc2FjdGlvbkxvZzo6JFRSQU5TQUNUSU9OX1RZUEVfUEFZTUVOVCk7CgkJaWYgKCRpbmNsdWRlX3JlYmlsbHMpCgkJewoJCQkkdHJhbnNhY3Rpb25UeXBlc1tdID0gTU1fVHJhbnNhY3Rpb25Mb2c6OiRUUkFOU0FDVElPTl9UWVBFX1JFQ1VSUklOR19QQVlNRU5UOwoJCX0KCQkkdHJhbnNhY3Rpb25UeXBlU3RyaW5nID0gaW1wbG9kZSgiLCIsJHRyYW5zYWN0aW9uVHlwZXMpOwoJCQoJCS8vZ2V0cyB0aGUgdW5pdHMgYW5kIHRvdGFsIHJldmVudWUgZnJvbSB0cmFuc2FjdGlvbnMgbGlua2VkIHRvIHByb2R1Y3Qgc2FsZXMgKG9wdGlvbmFsbHkgaW5jbHVkaW5nIHJlY3VycmluZyBwYXltZW50cykgZm9yIHRyYW5zYWN0aW9ucyB0aGF0IG9jY3VyIHdpdGhpbiBhIGRhdGUgcmFuZ2UKCQkvL3JlZnVuZCBpdGVtcyBkbyBub3QgY291bnQgYWdhaW5zdCB0aGUgdG90YWwuIElmIHRoZXJlIGlzIGEgZGF0YSBlcnJvciAoZm9yIGluc3RhbmNlIHRyYW5zYWN0aW9ucyBleGlzdCB3aGVyZSB0aGUgbGlua2VkIG9yZGVycy9pdGVtcyB3ZXJlIGRlbGV0ZWQpIHRoZW4gdGhlIHByb2R1Y3QgaXMKCQkvL2xpc3RlZCBhcyAnVW5rbm93biBQcm9kdWN0JwoJCQoJCSRzcWwgPSAiU0VMRUNUIElGTlVMTChwLm5hbWUsJzxVbmtub3duIFByb2R1Y3Q+JykgQVMgcHJvZHVjdCwgU1VNKElGTlVMTChvaS5xdWFudGl0eSwxKSkgQVMgdW5pdHMsIEFCUyhTVU0odC5hbW91bnQpKSBBUyBzYWxlcyBGUk9NIHskdHJhbnNhY3Rpb25zVGFibGV9IHQgTEVGVCBKT0lOIHskb3JkZXJJdGVtc1RhYmxlfSBvaSAiLgoJCQkgICAiT04gKHQub3JkZXJfaXRlbV9pZCA9IG9pLmlkKSBMRUZUIEpPSU4geyRwcm9kdWN0c1RhYmxlfSBwIE9OIChvaS5pdGVtX2lkID0gcC5pZCkgIi4KCQkJICAgIldIRVJFIHQudHJhbnNhY3Rpb25fdHlwZSBJTiAoeyR0cmFuc2FjdGlvblR5cGVTdHJpbmd9KSBBTkQgKHQudHJhbnNhY3Rpb25fZGF0ZSBCRVRXRUVOICVzIEFORCAlcykgIi4KCQkJICAgIkFORCB0LnJlZnVuZF9pZCBJUyBOVUxMIEdST1VQIEJZIHAuaWQgT1JERVIgQlkgc2FsZXMgREVTQzsiOwoJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCR3cGRiLT5wcmVwYXJlKCRzcWwsJHN0YXJ0RGF0ZSwkZW5kRGF0ZSksQVJSQVlfQSk7CgkJCgkJJGRhdGFzZXQgPSBNTV9SZXBvcnREYXRhc2V0OjpjcmVhdGVTaW5nbGVSZXBvcnREYXRhc2V0KCRwYXJhbXMsJHJlc3VsdHMpOwoJCXJldHVybiAkZGF0YXNldDsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YSgkcXVlcnlJZGVudGlmaWVyLCAkcGFyYW1zKQoJewoJCXN3aXRjaCAoJHF1ZXJ5SWRlbnRpZmllcikKCQl7CgkJCWNhc2Ugc2VsZjo6JFNBTEVTX0JZX1BST0RVQ1RfUVVFUlk6CgkJCQlyZXR1cm4gc2VsZjo6Z2VuZXJhdGVTYWxlc0J5UHJvZHVjdFJlcG9ydERhdGEoJHBhcmFtcyk7CgkJCQlicmVhazsKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIGdlbmVyYXRpbmcgZGF0YSBmb3IgdW5rbm93biBxdWVyeSBpZGVudGlmaWVyIHskcXVlcnlJZGVudGlmaWVyfSIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQoJCn0KCg==', 0, '2018-11-21 06:38:55'),
(204, 'webcontroller', 'Y2xhc3MgV2ViQ29udHJvbGxlciBpbXBsZW1lbnRzIFJlc3RDb250cm9sbGVyIHsKICAgIAogICAgZnVuY3Rpb24gZXhlY3V0ZShSZXN0U2VydmVyICRyZXN0KSAKICAgIHsKICAgICAgICByZXR1cm4gbmV3IEdlbmVyaWNWaWV3KCJob21lLnBocCIpOwogICAgfQp9Cg==', 0, '2018-11-21 06:38:55'),
(205, 'shoppingcart', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBNTV9TaG9wcGluZ0NhcnQgaXMgYW4gYWJzdHJhY3Rpb24gb2YgYSB1c2VyJ3MgY2FydCBkdXJpbmcgY2hlY2tvdXQvcmVnaXN0cmF0aW9uLiBJdCBmYWNpbGl0YXRlcyB0aGUgcGVyc2lzdGVuY2Ugb2YgbWVtYmVyc2hpcCBhbmQvb3IKICogcHJvZHVjdCBzZWxlY3Rpb25zICh1c2luZyB0aGUgc2Vzc2lvbikgYmV0d2VlbiBwYWdlIGxvYWRzCiAqLwpjbGFzcyBNTV9TaG9wcGluZ0NhcnQgewoJCglwcm90ZWN0ZWQgJGJpbGxpbmdBZGRyZXNzOyAvL3N0b3JlZCBoZXJlIHRvIGFsbG93IGVhc3kgdHJhbnNmZXIgdG8gb3JkZXIgb2JqZWN0Cglwcm90ZWN0ZWQgJHNoaXBwaW5nQWRkcmVzczsgLy9zdG9yZWQgaGVyZSB0byBhbGxvdyBlYXN5IHRyYW5zZmVyIHRvIG9yZGVyIG9iamVjdCwgYWxzbyBhbGxvd3Mgc2hpcHBpbmcgZXN0aW1hdGVzIHRvIGJlIGNhbGN1bGF0ZWQgb24gdGhlIGNhcnQgd2l0aG91dCBhbiBvcmRlcgoJCglwcm90ZWN0ZWQgJGNhcnRJdGVtcyA9IGFycmF5KCk7Cglwcm90ZWN0ZWQgJGNhcnRDb3Vwb25zID0gYXJyYXkoKTsJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRCaWxsaW5nQWRkcmVzcyhNTV9DdXN0b21lckFkZHJlc3MgJGJpbGxpbmdBZGRyZXNzKQoJewoJCSR0aGlzLT5iaWxsaW5nQWRkcmVzcyA9ICRiaWxsaW5nQWRkcmVzczsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldEJpbGxpbmdBZGRyZXNzKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmJpbGxpbmdBZGRyZXNzOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBpbmdBZGRyZXNzKE1NX0N1c3RvbWVyQWRkcmVzcyAkc2hpcHBpbmdBZGRyZXNzKQoJewoJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MgPSAkc2hpcHBpbmdBZGRyZXNzOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0U2hpcHBpbmdBZGRyZXNzKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnNoaXBwaW5nQWRkcmVzczsKCX0KCQoJLyoqCgkgKiBQb3B1bGF0ZSB0aGUgYmlsbGluZyBhZGRyZXNzIHVzaW5nIHRoZSBmaWVsZHMgaW4gYXJyYXkgZGF0YQoJICogQHBhcmFtIGFycmF5ICRkYXRhIEFuIGFycmF5IG9mIGtleS92YWx1ZSBwYWlycyByZXByZXNlbnRpbmcgZGF0YSBmcm9tIHRoZSByZWdpc3RyYXRpb24gcHJvY2VzcwoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ0FkZHJlc3NGcm9tRGF0YSgkZGF0YSkKCXsKCQkkYWRkcmVzcyA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoKTsKCQkkYWRkcmVzcy0+c2V0RnJvbUJpbGxpbmdBZGRyZXNzRGF0YSgkZGF0YSk7CgkJJHRoaXMtPnNldEJpbGxpbmdBZGRyZXNzKCRhZGRyZXNzKTsKCX0KCQoJLyoqCgkgKiBQb3B1bGF0ZSB0aGUgc2hpcHBpbmcgYWRkcmVzcyB1c2luZyB0aGUgZmllbGRzIGluIGFycmF5IGRhdGEgCgkgKiBAcGFyYW0gYXJyYXkgJGRhdGEgQW4gYXJyYXkgb2Yga2V5L3ZhbHVlIHBhaXJzIHJlcHJlc2VudGluZyBkYXRhIGZyb20gdGhlIHJlZ2lzdHJhdGlvbiBwcm9jZXNzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRTaGlwcGluZ0FkZHJlc3NGcm9tRGF0YSgkZGF0YSkKCXsKCQkkYWRkcmVzcyA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoKTsKCQkkYWRkcmVzcy0+c2V0RnJvbVNoaXBwaW5nQWRkcmVzc0RhdGEoJGRhdGEpOwoJCSR0aGlzLT5zZXRTaGlwcGluZ0FkZHJlc3MoJGFkZHJlc3MpOwoJfQoJCgkvKioKCSAqIFRoaXMgbWV0aG9kIHRha2VzIGFuIGFycmF5IG9mIGNhcnQgaXRlbXMgYW5kIGFkZHMgdGhlbSB0byB0aGUgY2FydC4gRm9yIGEgc2luZ2xlIGl0ZW0sIGl0IGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5IG9mIHNpemUgb25lCgkgKiBAcGFyYW0gQXJyYXkgJGNhcnRfaXRlbXMgQW4gYXJyYXkgb2Ygb2JqZWN0cyBvZiB0eXBlIE1NX1Nob3BwaW5nQ2FydEl0ZW1zLCB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNhcnQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGFkZEl0ZW1zVG9DYXJ0KCRjYXJ0X2l0ZW1zKQoJewoJCWlmIChpc19hcnJheSgkY2FydF9pdGVtcykpIAoJCXsKCQkJZm9yZWFjaCAoJGNhcnRfaXRlbXMgYXMgJGFuSXRlbSkKCQkJewoJCQkJaWYgKCRhbkl0ZW0gaW5zdGFuY2VvZiBNTV9TaG9wcGluZ0NhcnRJdGVtKQoJCQkJewoJCQkJCWlmICgkYW5JdGVtLT5nZXRJdGVtVHlwZSgpID09IE1NX1Nob3BwaW5nQ2FydEl0ZW06OiRDQVJUX1BST0RVQ1QpCgkJCQkJewoJCQkJCQlpZiAoaXNzZXQoJHRoaXMtPmNhcnRJdGVtc1skYW5JdGVtLT5nZXRJdGVtKCktPmdldElkKCldKSkKCQkJCQkJewoJCQkJCQkJLy9hbiBpdGVtIG9mIHRoaXMgdHlwZSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgY2FydCwgc28gaW5jcmVhc2UgdGhlIHF1YW50aXR5CgkJCQkJCQkkZXhpc3RpbmdfaXRlbSA9ICR0aGlzLT5jYXJ0SXRlbXNbJGFuSXRlbS0+Z2V0SXRlbSgpLT5nZXRJZCgpXTsKCQkJCQkJCSRleGlzdGluZ19pdGVtLT5zZXRRdWFudGl0eShpbnR2YWwoJGV4aXN0aW5nX2l0ZW0tPmdldFF1YW50aXR5KCkpICsgaW50dmFsKCRhbkl0ZW0tPmdldFF1YW50aXR5KCkpKTsKCQkJCQkJfQoJCQkJCQllbHNlIAoJCQkJCQl7CgkJCQkJCQkkdGhpcy0+Y2FydEl0ZW1zWyRhbkl0ZW0tPmdldEl0ZW0oKS0+Z2V0SWQoKV0gPSAkYW5JdGVtOwoJCQkJCQl9CgkJCQkJfQoJCQkJCWVsc2UgaWYgKCRhbkl0ZW0tPmdldEl0ZW1UeXBlKCkgPT0gTU1fU2hvcHBpbmdDYXJ0SXRlbTo6JENBUlRfQ09VUE9OKQoJCQkJCXsJCgkJCQkJCS8vZm9yIG5vdywgY291cG9ucyBvZiB0aGUgc2FtZSB0eXBlIGFyZSBub3Qgc3RhY2thYmxlCgkJCQkJCSR0aGlzLT5jYXJ0Q291cG9uc1skYW5JdGVtLT5nZXRJdGVtKCktPmdldElkKCldID0gJGFuSXRlbTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9Cgl9CgoJLyoqCgkgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBwcm9kdWN0cyBpbiB0aGUgY2FydAoJICogQHJldHVybiBBbiBhcnJheSBvZiBvYmplY3RzIG9mIHR5cGUgTU1fU2hvcHBpbmdDYXJ0SXRlbSByZXByZXNlbnRpbmcgdGhlIHByb2R1Y3RzIGluIHRoZSBjYXJ0CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9kdWN0c0luQ2FydCgpCgl7CgkJcmV0dXJuICR0aGlzLT5jYXJ0SXRlbXM7Cgl9CgkKCS8qKgoJICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgY291cG9ucyBpbiB0aGUgY2FydAoJICogQHJldHVybiBBbiBhcnJheSBvZiBvYmplY3RzIG9mIHR5cGUgTU1fU2hvcHBpbmdDYXJ0SXRlbSByZXByZXNlbnRpbmcgdGhlIGNvdXBvbnMgaW4gdGhlIGNhcnQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldENvdXBvbnNJbkNhcnQoKQoJewoJCXJldHVybiAkdGhpcy0+Y2FydENvdXBvbnM7Cgl9CgoJLyoqCgkgKiBUaGlzIG1ldGhvZCByZW1vdmVzIGl0ZW1zIGZyb20gdGhlIGNhcnQKCSAqIEBwYXJhbSBBcnJheSAkaXRlbUFycmF5IEFuIGFycmF5IG9mIG9iamVjdHMgb2YgdHlwZSBNTV9TaG9wcGluZ0NhcnRJdGVtLCByZXByZXNlbnRpbmcgdGhlIGl0ZW1zIG9yIGNvdXBvbnMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBjYXJ0CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiByZW1vdmVJdGVtc0Zyb21DYXJ0KCRpdGVtQXJyYXkpCgl7CgkJaWYgKGlzX2FycmF5KCRpdGVtQXJyYXkpKQoJCXsKCQkJZm9yZWFjaCAoJGl0ZW1BcnJheSBhcyAkYW5JdGVtKQoJCQl7CgkJCQlpZiAoJGFuSXRlbSBpbnN0YW5jZW9mIE1NX1Nob3BwaW5nQ2FydEl0ZW0pCgkJCQl7CgkJCQkJJGl0ZW1Ub1JlbW92ZSA9ICRhbkl0ZW0tPmdldEl0ZW0oKTsKCQkJCQlpZiAoKCRhbkl0ZW0tPmdldEl0ZW1UeXBlKCkgPT0gTU1fU2hvcHBpbmdDYXJ0SXRlbTo6JENBUlRfUFJPRFVDVCkgJiYgaXNzZXQoJHRoaXMtPmNhcnRJdGVtc1skaXRlbVRvUmVtb3ZlLT5nZXRJZCgpXSkpCgkJCQkJewoJCQkJCQkvL2lmIHRoZSBpdGVtIHJlcHJlc2VudHMgYSBwcm9kdWN0IGluIHRoZSBjYXJ0LCByZW1vdmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBpdGVtcyAKCQkJCQkJLy9pZiBxdWFudGl0eSBmYWxscyB0byAwIG9yIGxlc3MsIHJlbW92ZSBpdCBmcm9tIHRoZSBjYXJ0CgkJCQkJCSRpdGVtSW5DYXJ0ID0gJHRoaXMtPmNhcnRJdGVtc1skaXRlbVRvUmVtb3ZlLT5nZXRJZCgpXTsKCQkJCQkJJG5ld1F1YW50aXR5ID0gKGludHZhbCgkaXRlbUluQ2FydC0+Z2V0UXVhbnRpdHkpIC0gaW50dmFsKCRpdGVtVG9SZW1vdmUtPmdldFF1YW50aXR5KCkpKTsKCQkJCQkJaWYgKCRuZXdRdWFudGl0eSA+IDApCgkJCQkJCXsKCQkJCQkJCSRpdGVtSW5DYXJ0LT5zZXRRdWFudGl0eSgkbmV3UXVhbnRpdHkpOwoJCQkJCQl9CgkJCQkJCWVsc2UKCQkJCQkJewoJCQkJCQkJdW5zZXQoJHRoaXMtPmNhcnRJdGVtc1skaXRlbUluQ2FydC0+Z2V0SWQoKV0pOwoJCQkJCQl9CgkJCQkJfQoJCQkJCWVsc2UgaWYgKCgkYW5JdGVtLT5nZXRJdGVtVHlwZSgpID09IE1NX1Nob3BwaW5nQ2FydEl0ZW06OiRDQVJUX0NPVVBPTikgJiYgaXNzZXQoJHRoaXMtPmNhcnRDb3Vwb25zWyRpdGVtVG9SZW1vdmUtPmdldElkKCldKSkKCQkJCQl7CgkJCQkJCS8vaWYgdGhlIGl0ZW0gcmVwcmVzZW50cyBhIGNvdXBvbiBpbiB0aGUgY2FydCByZW1vdmUgaXQgKGNvdXBvbnMgbm90IGN1cnJlbnRseSBzdGFja2FibGUsIHNvIHF1YXRpdHkgc2hvdWxkIG5ldmVyIGJlID4xKQoJCQkJCQl1bnNldCgkdGhpcy0+Y2FydENvdXBvbnNbJGl0ZW1Ub1JlbW92ZS0+Z2V0SWQoKV0pOwoJCQkJCX0KCQkJCX0JCgkJCX0KCQl9Cgl9CgoJLyoqCgkgKiBUaGlzIGNvbnZlbmllbmNlIG1ldGhvZCByZXNldHMgdGhlIGNhcnQgKHJlbW92ZXMgYWxsIGl0ZW1zKQoJICovCglwdWJsaWMgZnVuY3Rpb24gY2xlYXJDYXJ0KCkKCXsKCQkkdGhpcy0+Y2FydFByb2R1Y3RzID0gYXJyYXkoKTsKCX0KCn0K', 0, '2018-11-21 06:38:55'),
(206, 'reportdataretriever', 'Y2xhc3MgTU1fUmVwb3J0RGF0YVJldHJpZXZlcgp7CgkKCS8vZGF0YSBnZW5lcmF0aW9uIHN0YXR1c2VzCglwdWJsaWMgc3RhdGljICREQVRBX1BFTkRJTkdfU1RBVFVTID0gInBlbmRpbmciOwoJcHVibGljIHN0YXRpYyAkREFUQV9QUk9DRVNTSU5HX1NUQVRVUyA9ICJwcm9jZXNzaW5nIjsKCXB1YmxpYyBzdGF0aWMgJERBVEFfUkVBRFlfU1RBVFVTID0gInJlYWR5IjsKCXB1YmxpYyBzdGF0aWMgJERBVEFfRVJST1JfU1RBVFVTID0gImVycm9yIjsKCQoJLy9kZWZhdWx0IHRpbWVvdXQKCXB1YmxpYyBzdGF0aWMgJERFRkFVTFRfQ0FDSEVfVElNRU9VVCA9IDEyMDA7CgkKCXB1YmxpYyBzdGF0aWMgJFJFU1VMVFNFVF9UWVBFX0NPTVBPVU5EID0gImNvbXBvdW5kIjsKCgkKCS8qKgoJICogUmVxdWVzdHMgZGF0YSB0byBiZSB1c2VkIHRvIHN1cHBseSBhIHZpc3VhbCBlbGVtZW50LiBJZiB0aGUgcmVxdWVzdGVkIGRhdGEgaXMgY2FjaGVkLCBpdCBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUgCgkgKiBhbmQgcmV0dXJuZWQsIG90aGVyd2lzZSBnZW5lcmF0aW9uIGlzIHN0YXJ0ZWQgaW4gdGhlIGJhY2tncm91bmQKCSAqIAoJICogQHBhcmFtIG1peGVkICRxdWVyeVRhcmdldCBUaGUgY2xhc3MgdGhhdCBoYXMgdGhlIGFiaWxpdHkgdG8gZ2VuZXJhdGUgdGhlIHJlcXVpcmVkIGRhdGEgaWYgaXRzIG5vdCBpbiB0aGUgY2FjaGUKCSAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5SWRlbnRpZmllciBBbiBpZGVudGlmaWVyIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIHF1ZXJ5IHRvIGJlIHJ1bgoJICogQHBhcmFtIGFycmF5ICRwYXJhbXMgVGhlIHBhcmFtcyB0byBzdXBwbHkgdG8gdGhlIG1ldGhvZCBnZW5lcmF0aW5nIHRoZSBxdWVyeQoJICogQHBhcmFtIHN0cmluZyAkdGltZW91dCAob3B0aW9uYWwpIFRoZSB0dGwgZm9yIHRoZSBjYWNoZWQgZGF0YSwgZGVmYXVsdHMgdG8gdGhlIGdsb2JhbCB0aW1lb3V0IGRlZmluZWQgaW4gdGhlIGRhdGEgcmV0cmlldmVyICgxMjAwIHNlY3MpCgkgKiBAcGFyYW0gYm9vbGVhbiAkYXN5bmNocm9ub3VzIChvcHRpb25hbCkgV2hldGhlciBvciBub3QgdGhlIGNhY2hlIHJlcXVlc3Qgc2hvdWxkIGJlIGhhbmRsZWQgYnkgYSBzZXBhcmF0ZSBwcm9jZXNzLCBkZWZhdWx0cyB0byB0cnVlCgkgKiAKCSAqIEByZXR1cm4gTU1fUmVwb3J0UmVzcG9uc2UgY29udGFpbmluZyB0aGUgcmVzdWx0cyBvbiBzdWNjZXNzLCBhIGRlc2NyaXB0aXZlIG1lc3NhZ2UgaWYgdGhlIHN0YXR1cyBpcyBlcnJvciBvciBub3QtcmVhZHkKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZXF1ZXN0RGF0YSgkcXVlcnlUYXJnZXQsICRxdWVyeUlkZW50aWZpZXIsJHBhcmFtcywkdGltZW91dD0iIiwkYXN5bmNocm9ub3VzPXRydWUpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCSRxdWVyeVRhcmdldCA9IGlzX29iamVjdCgkcXVlcnlUYXJnZXQpP2dldF9jbGFzcygkcXVlcnlUYXJnZXQpOiRxdWVyeVRhcmdldDsKCQkKCQkvL29yZGVyIHRoZSBwYXJhbWV0ZXJzIGFuZCBqc29uIGVuY29kZSB0aGVtCgkJJHBhcmFtU3RyaW5nID0gc2VsZjo6ZW5jb2RlUGFyYW1zKCRwYXJhbXMpOwoJCSRwYXJhbUhhc2ggPSBtZDUoJHBhcmFtU3RyaW5nKTsKCQkKCQkkY3VycmVudFRpbWUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkKCQkvL25vdyBjaGVjayB0aGUgZGF0YSBjYWNoZSBmb3Igbm9uLWV4cGlyZWQgZGF0YSBtYXRjaGluZyB0aGUgcmVxdWVzdAoJCSRjYWNoZVF1ZXJ5ID0gJHdwZGItPnByZXBhcmUoIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9SRVBPUlRfREFUQV9DQUNIRS4iIFdIRVJFIHF1ZXJ5X3RhcmdldD0lcyBBTkQgcXVlcnlfdG9rZW4gPSAlcyBBTkQgIi4KCQkJCQkgICJwYXJhbV9oYXNoID0gJXMgQU5EIGV4cGlyYXRpb25fZGF0ZSA+ICVzIiwkcXVlcnlUYXJnZXQsICRxdWVyeUlkZW50aWZpZXIsJHBhcmFtSGFzaCwkY3VycmVudFRpbWUpOwoJCQkJCQkJICAKCQkkY2FjaGVEYXRhID0gJHdwZGItPmdldF9yb3coJGNhY2hlUXVlcnkpOwoJCQoJCWlmIChpc19udWxsKCRjYWNoZURhdGEpKSAKCQl7CgkJCS8vY2FjaGUgbWlzcwoJCQkvL2lmICgkYXN5bmNocm9ub3VzKQoJCQlpZiAoZmFsc2UpCgkJCXsKCQkJCSRmcmVzaGx5Q2FjaGVkID0gZmFsc2U7CgkJCQlpZiAoaXNfbnVsbCgkY2FjaGVEYXRhKSkKCQkJCXsKCQkJCQkkY2FjaGVSZXNwb25zZSA9IHNlbGY6OmNyZWF0ZUNhY2hlUmVxdWVzdCgkcXVlcnlUYXJnZXQsICRxdWVyeUlkZW50aWZpZXIsJHBhcmFtcywkdGltZW91dCk7CgkJCQkJaWYgKE1NX1JlcG9ydFJlc3BvbnNlOjppc05vdFJlYWR5KCRjYWNoZVJlc3BvbnNlKSkKCQkJCQl7CgkJCQkJCS8vcmVxdWVzdCB3YXMganVzdCBjcmVhdGVkLi4gZGVsYXkgdG8gc2VlIGlmIHRoZSByZXN1bHRzIHdlcmUgaW1tZWRpYXRlbHkgcmVhZHkKCQkJCQkJJGZyZXNobHlDYWNoZWQgPSB0cnVlOwoJCQkJCQl1c2xlZXAoMjAwMDAwKTsKCQkJCQkJJGNhY2hlRGF0YSA9ICR3cGRiLT5nZXRfcm93KCRjYWNoZVF1ZXJ5KTsKCQkJCQl9CgkJCQkJZWxzZSAKCQkJCQl7CgkJCQkJCXJldHVybiAkY2FjaGVSZXNwb25zZTsKCQkJCQl9CgkJCQl9CgkJCgkJCQlpZiAoaXNfbnVsbCgkY2FjaGVEYXRhKSAmJiAkZnJlc2hseUNhY2hlZCkKCQkJCXsKCQkJCQkkcmV0dXJuVmFsID0gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCJDYWNoZSByZXF1ZXN0IHN1Y2NlZWRlZCIsIE1NX1JlcG9ydFJlc3BvbnNlOjokTk9UX1JFQURZKTsKCQkJCQlyZXR1cm4gICRyZXR1cm5WYWw7CgkJCQl9CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJLy9ub24tYXN5bmNocm9ub3VzIC0gZGF0YSBuZWVkcyB0byBiZSByZXRyaWV2ZWQgaW1tZWRpYXRlbHksIGFuZCB0aGVuIGNhY2hlZCBmb3IgbmV4dCBoaXQKCQkJCSRnZW5lcmF0aW9uUmVzcG9uc2UgPSBzZWxmOjpnZW5lcmF0ZURhdGEoJHF1ZXJ5VGFyZ2V0LCAkcXVlcnlJZGVudGlmaWVyLCAkcGFyYW1zLCAkdGltZW91dCk7CQoJCQkJaWYgKE1NX1JlcG9ydFJlc3BvbnNlOjppc1N1Y2Nlc3MoJGdlbmVyYXRpb25SZXNwb25zZSkpCgkJCQl7CgkJCQkJJGNhY2hlRGF0YSA9ICRnZW5lcmF0aW9uUmVzcG9uc2UtPm1lc3NhZ2U7CgkJCQl9CgkJCQllbHNlIGlmIChNTV9SZXBvcnRSZXNwb25zZTo6aGFzTm9EYXRhKCRnZW5lcmF0aW9uUmVzcG9uc2UpKQoJCQkJewoJCQkJCS8vd2UgY2FuIGJhaWwgZWFybHksIHRoZSBmcm9udC1lbmQga25vd3Mgd2hhdCB0byBkbyB3aXRoIHRoaXMgcmVzcG9uc2UKCQkJCQlyZXR1cm4gJGdlbmVyYXRpb25SZXNwb25zZTsKCQkJCX0KCQkJCWVsc2UgCgkJCQl7CgkJCQkJJGNhY2hlRGF0YSA9IG5ldyBzdGRDbGFzcygpOwoJCQkJCSRjYWNoZURhdGEtPnN0YXR1cyA9ICgkZ2VuZXJhdGlvblJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVwb3J0UmVzcG9uc2UpPyRnZW5lcmF0aW9uUmVzcG9uc2UtPnR5cGU6c2VsZjo6JERBVEFfRVJST1JfU1RBVFVTOwoJCQkJfQoJCQl9CgkJfQoJCQoJCS8vc2hvdWxkIGJlIGEgc3RhdHVzIGF0IHRoaXMgcG9pbnQKCQlpZiAoJGNhY2hlRGF0YS0+c3RhdHVzID09IHNlbGY6OiREQVRBX1JFQURZX1NUQVRVUykgCgkJewoJCQkkcmVzcG9uc2UgPSBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoKTsKCQkJJHJlc3BvbnNlLT5tZXNzYWdlID0gdW5zZXJpYWxpemUoJGNhY2hlRGF0YS0+cXVlcnlfZGF0YSk7CgkJCWlmICgoJHJlc3BvbnNlLT5tZXNzYWdlID09PSAiIikgfHwgKGlzX2FycmF5KCRyZXNwb25zZS0+bWVzc2FnZSkgJiYgKGNvdW50KCRyZXNwb25zZS0+bWVzc2FnZSkgPT0gMCkpKQoJCQl7CgkJCQkkcmVzcG9uc2UtPnR5cGUgPSBNTV9SZXBvcnRSZXNwb25zZTo6JE5PX0RBVEE7CgkJCX0KCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9CgkJZWxzZSBpZiAoKCRjYWNoZURhdGEtPnN0YXR1cyA9PSBzZWxmOjokREFUQV9QRU5ESU5HX1NUQVRVUykgfHwgKCRjYWNoZURhdGEtPnN0YXR1cyA9PSBzZWxmOjokREFUQV9QUk9DRVNTSU5HX1NUQVRVUykpCgkJewoJCQkvL25vdCByZWFkeSwgcmV0dXJuIHN0YXR1cwoJCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCJEYXRhIG5vdCB5ZXQgYXZhaWxhYmxlIixNTV9SZXBvcnRSZXNwb25zZTo6JE5PVF9SRUFEWSk7CgkJfQoJCQoJCS8vZXJyb3Igc3RhdHVzCgkJJG1zZyA9IGlzc2V0KCRjYWNoZURhdGEtPnF1ZXJ5X2RhdGEpPyRjYWNoZURhdGEtPnF1ZXJ5X2RhdGE6IkVycm9yIGdlbmVyYXRpbmcgZGF0YSI7CgkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgkbXNnLE1NX1JlcG9ydFJlc3BvbnNlOjokRVJST1IpOwoJfQoJCgkKCS8qKgoJICogQ3JlYXRlcyBhbiBlbnRyeSBpbiB0aGUgcmVwb3J0IGRhdGEgY2FjaGUgdGFibGUgd2l0aCBhIHBlbmRpbmcgc3RhdHVzLCBhbmQgdGhlbiBzdGFydHMgYSBiYWNrZ3JvdW5kIHByb2Nlc3MKCSAqIHJlc3BvbnNpYmxlIGZvciBwb3B1bGF0aW5nIHRoYXQgZGF0YQoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRxdWVyeUlkZW50aWZpZXIgQW4gaWRlbnRpZmllciBkZXNpZ25hdGluZyB0aGUgZGF0YSB0aGF0IHNob3VsZCBiZSBnZW5lcmF0ZWQKCSAqIEBwYXJhbSBhcnJheSAkcGFyYW1zIFRoZSBwYXJhbWV0ZXJzIHRvIHVzZSB3aGVuIGdlbmVyYXRpbmcgdGhlIHJlcXVlc3RlZCBkYXRhCgkgKiBAcGFyYW0gaW50ICR0aW1lb3V0IChvcHRpb25hbCkgaG93IGxvbmcgdGhlIGdlbmVyYXRlZCBkYXRhIGlzIHZhbGlkLiBJZiBub3Qgc2V0LCBkZWZhdWx0cyB0byAxMjAwIHNlY3MgKDIwIG1pbnMpCgkgKiAKCSAqIEByZXR1cm4gTU1fUmVwb3J0UmVzcG9uc2Ugc3VjY2VzcyBpZiBhbGwgb3BlcmF0aW9ucyBzdWNjZWVkLCBmYWlsdXJlIG90aGVyd2lzZQoJICovCglwcm90ZWN0ZWQgc3RhdGljIGZ1bmN0aW9uIGNyZWF0ZUNhY2hlUmVxdWVzdCgkcXVlcnlUYXJnZXQsICRxdWVyeUlkZW50aWZpZXIsJHBhcmFtcywkdGltZW91dD0iIikKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHRpbWVvdXQgPSBlbXB0eSgkdGltZW91dCk/c2VsZjo6JERFRkFVTFRfQ0FDSEVfVElNRU9VVDppbnR2YWwoJHRpbWVvdXQpOwoJCSRleHBpcmF0aW9uRGF0ZSA9IGdtZGF0ZSgiWS1tLWQgSDppIixzdHJ0b3RpbWUoIit7JHRpbWVvdXR9IHNlY29uZHMiLE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgidGltZXN0YW1wIikpKTsgLy9ieSBkZWZhdWx0IDEyMDAgc2VjcyAoMzAgbWlucykKCQkkZW5jb2RlZFBhcmFtcyA9IHNlbGY6OmVuY29kZVBhcmFtcygkcGFyYW1zKTsKCQkkcGFyYW1IYXNoID0gbWQ1KCRlbmNvZGVkUGFyYW1zKTsKCQkKCQkkY2FjaGVJZCA9ICR3cGRiLT5nZXRfdmFyKCIKICAJICBTRUxFQ1QgCiAgCSAgYGlkYCAKICAJICBGUk9NIGAiLk1NX1RBQkxFX1JFUE9SVF9EQVRBX0NBQ0hFLiJgIAogIAkgIFdIRVJFIGBxdWVyeV90YXJnZXRgID0gJ3skcXVlcnlUYXJnZXR9JwogIAkgIEFORCBgcXVlcnlfdG9rZW5gID0gJ3skcXVlcnlJZGVudGlmaWVyfScKICAJICBBTkQgYHBhcmFtX2hhc2hgID0gJ3skcGFyYW1IYXNofScKCQkiKTsKCQkKCQlpZigkY2FjaGVJZCkKCQl7CiAgCQkkcmVzID0gJHdwZGItPnVwZGF0ZSggCiAgICAgICAgTU1fVEFCTEVfUkVQT1JUX0RBVEFfQ0FDSEUsIAogICAgICAgIGFycmF5KCAKICAgICAgICAgICJxdWVyeV90YXJnZXQiICAgICA9PiAkcXVlcnlUYXJnZXQsCiAgCQkJCSJxdWVyeV90b2tlbiIgCSAgID0+ICRxdWVyeUlkZW50aWZpZXIsCiAgCQkJCSJxdWVyeV9wYXJhbXMiIAkgICA9PiAkZW5jb2RlZFBhcmFtcywKICAJCQkJInBhcmFtX2hhc2giIAkgICAgID0+ICRwYXJhbUhhc2gsCiAgCQkJCSJzdGF0dXMiIAkJICAgICAgID0+IHNlbGY6OiREQVRBX1BFTkRJTkdfU1RBVFVTLAogIAkJCQkiZXhwaXJhdGlvbl9kYXRlIiAgPT4gJGV4cGlyYXRpb25EYXRlCiAgICAgICAgKSwgCiAgICAgICAgYXJyYXkoCiAgICAgICAgICAnaWQnID0+ICRjYWNoZUlkCiAgICAgICAgKSAKICAgICAgKTsgCQoJCX0KCQllbHNlCgkJewogIAkJJHJlcyA9ICR3cGRiLT5pbnNlcnQoCiAgICAgCSAgTU1fVEFCTEVfUkVQT1JUX0RBVEFfQ0FDSEUsIAogICAgICAgIGFycmF5KCAKICAgICAgICAgICJxdWVyeV90YXJnZXQiICAgICA9PiAkcXVlcnlUYXJnZXQsCiAgCQkJCSJxdWVyeV90b2tlbiIgCSAgID0+ICRxdWVyeUlkZW50aWZpZXIsCiAgCQkJCSJxdWVyeV9wYXJhbXMiIAkgICA9PiAkZW5jb2RlZFBhcmFtcywKICAJCQkJInBhcmFtX2hhc2giIAkgICAgID0+ICRwYXJhbUhhc2gsCiAgCQkJCSJzdGF0dXMiIAkJICAgICAgID0+IHNlbGY6OiREQVRBX1BFTkRJTkdfU1RBVFVTLAogIAkJCQkiZXhwaXJhdGlvbl9kYXRlIiAgPT4gJGV4cGlyYXRpb25EYXRlCiAgICAgICAgKQogICAgICApOwogICAgICAKICAgICAgJGNhY2hlSWQgPSAkd3BkYi0+aW5zZXJ0X2lkOwoJCX0KCgkJaWYgKCRyZXMgPT09IGZhbHNlKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgiQ291bGQgbm90IGNyZWF0ZSByZXBvcnQgZGF0YSByZXF1ZXN0IixNTV9SZXBvcnRSZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJZWxzZSAKCQl7CgkJCXJldHVybiBzZWxmOjpzdGFydEJhY2tncm91bmRQcm9jZXNzKCRjYWNoZUlkKTsKCQl9Cgl9CgkKCQoJLyoqCgkgKiBDcmVhdGUgYSBiYWNrZ3JvdW5kIHByb2Nlc3MgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGRhdGEgYXR0YWNoZWQgdG8gYSBjYWNoZSBpZAoJICogCgkgKiBAcGFyYW0gaW50ICRjYWNoZUlkIFRoZSBpZCBvZiB0aGUgcmVwb3J0IGNhY2hlIGRhdGEgc2NhbiAKCSAqIEByZXR1cm4gTU1fUmVwb3J0UmVzcG9uc2UgJ25vdCByZWFkeScgc3RhdHVzIGlmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIHRvIHN0YXJ0IHRoZSBiYWNrZ3JvdW5kIHByb2Nlc3MsIGZhaWx1cmUgb3RoZXJ3aXNlCgkgKi8KCXByb3RlY3RlZCBzdGF0aWMgZnVuY3Rpb24gc3RhcnRCYWNrZ3JvdW5kUHJvY2VzcygkY2FjaGVJZCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJaWYgKGlzX251bGwoJGNhY2hlSWQpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgiVW5hYmxlIHRvIHN0YXJ0IGJhY2tncm91bmQgcHJvY2VzczogTm8gY2FjaGUgaWQgcHJvdmlkZWQiLE1NX1JlcG9ydFJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkkcmVwb3J0RGF0YUdlbmVyYXRvclVSTCA9IE1NX1BMVUdJTl9VUkwuIi9hc3luYy9yZXBvcnRkYXRhZ2VuZXJhdG9yLnBocCI7CgkJJGFwaVJvdyA9ICR3cGRiLT5nZXRfcm93KCJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfQVBJX0tFWVMuIiBXSEVSRSBTVEFUVVM9JzEnIExJTUlUIDEiKTsKCQlpZiAoaXNfbnVsbCgkYXBpUm93KSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoIlVuYWJsZSB0byBzdGFydCBiYWNrZ3JvdW5kIHByb2Nlc3M6IE5vIGFwaSBrZXlzIGF2YWlsYWJsZSIsTU1fUmVwb3J0UmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCSRyZXNwb25zZSA9IHdwX3JlbW90ZV9wb3N0KCRyZXBvcnREYXRhR2VuZXJhdG9yVVJMLGFycmF5KCdibG9ja2luZyc9PidmYWxzZScsCgkJCQkJCQkJCQkJCQkJCQknYm9keSc9PmFycmF5KCdhcGlrZXknICAgID0+ICRhcGlSb3ctPmFwaV9rZXksCgkJCQkJCQkJCQkJCQkJCQkJCQkgICdhcGlzZWNyZXQnID0+ICRhcGlSb3ctPmFwaV9zZWNyZXQsCgkJCQkJCQkJCQkJCQkJCQkJCQkgICdjYWNoZUlkJyAgID0+ICRjYWNoZUlkKQoJCQkJCQkJCQkJCQkJCQkJKQoJCQkJCQkJCQkpOwoJCWlmIChpc193cF9lcnJvcigkcmVzcG9uc2UpKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXBvcnRSZXNwb25zZSgiVW5hYmxlIHRvIHN0YXJ0IGJhY2tncm91bmQgcHJvY2VzczoiLiRyZXNwb25zZS0+Z2V0X2Vycm9yX21lc3NhZ2UoKSk7CgkJfQoJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoIkJhY2tncm91bmQgcHJvY2VzcyBzdGFydGVkIHN1Y2Nlc3NmdWxseSIsTU1fUmVwb3J0UmVzcG9uc2U6OiROT1RfUkVBRFkpOwoJfQoJCgkKCS8qKgoJICogUm91dGVzIHRvIHRoZSBjb3JyZWN0IGhhbmRsZXIgbWV0aG9kIGZvciB0aGUgcXVlcnkgd2l0aCB0aGUgaWQgJGNhY2hlSWQgYW5kIHRoZSBwYXJhbWV0ZXJzIGNvbnRhaW5lZCB3aXRoaW4gJHBhcmFtcwoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRxdWVyeVRhcmdldAoJICogQHBhcmFtIFN0cmluZyAkcXVlcnlJZGVudGlmaWVyCgkgKiBAcGFyYW0gYXJyYXkgJHBhcmFtcwoJICogQHBhcmFtIGludCAkdGltZW91dAoJICogCgkgKiBAcmV0dXJuIE1NX1JlcG9ydFJlc3BvbnNlIGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb24gc3VjY2Vzcywgb3IgYW4gZXJyb3IgbWVzc2FnZSBvbiBmYWlsdXJlCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2VuZXJhdGVEYXRhKCRxdWVyeVRhcmdldCwgJHF1ZXJ5SWRlbnRpZmllciwgJHBhcmFtcywkdGltZW91dD0xMjAwKQoJewoJCSRxdWVyeVRhcmdldCA9IGlzX29iamVjdCgkcXVlcnlUYXJnZXQpP2dldF9jbGFzcygkcXVlcnlUYXJnZXQpOiRxdWVyeVRhcmdldDsKCQkkcmVzdWx0c2V0UmVzcG9uc2UgPSBjYWxsX3VzZXJfZnVuYyhhcnJheSgkcXVlcnlUYXJnZXQsImdlbmVyYXRlRGF0YSIpLCRxdWVyeUlkZW50aWZpZXIsJHBhcmFtcyk7CgkJaWYgKE1NX1JlcG9ydERhdGFzZXQ6OmlzU3VjY2VzcygkcmVzdWx0c2V0UmVzcG9uc2UpKQoJCXsKCQkJJGRhdGFzZXQgPSAkcmVzdWx0c2V0UmVzcG9uc2UtPmdldFByaW1hcnlEYXRhc2V0KCk7CgkJCSRjYWNoZVJlcXVlc3RSZXNwb25zZSA9IHNlbGY6OmNhY2hlRGF0YXNldCgkcXVlcnlUYXJnZXQsJHF1ZXJ5SWRlbnRpZmllciwkZGF0YXNldC0+cGFyYW1zLCRkYXRhc2V0LT5kYXRhLCR0aW1lb3V0KTsKCQkJaWYgKCRyZXN1bHRzZXRSZXNwb25zZS0+ZGF0YXNldFR5cGUgPT0gTU1fUmVwb3J0RGF0YXNldDo6JENPTVBPVU5EX0RBVEFTRVQpCgkJCXsKCQkJCSRkc0FycmF5ID0gJHJlc3VsdHNldFJlc3BvbnNlLT5nZXRBZGRpdGlvbmFsRGF0YXNldHMoKTsKCQkJCWZvcmVhY2ggKCRkc0FycmF5IGFzICRkYXRhc2V0KQoJCQkJewoJCQkJCXNlbGY6OmNhY2hlRGF0YXNldCgkcXVlcnlUYXJnZXQsJHF1ZXJ5SWRlbnRpZmllciwkZGF0YXNldC0+cGFyYW1zLCRkYXRhc2V0LT5kYXRhLCR0aW1lb3V0KTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gJGNhY2hlUmVxdWVzdFJlc3BvbnNlOwoJCX0KCQllbHNlIGlmIChNTV9SZXBvcnREYXRhc2V0OjpoYXNOb0RhdGEoJHJlc3VsdHNldFJlc3BvbnNlKSkKCQl7CgkJCXJldHVybiAkcmVzdWx0c2V0UmVzcG9uc2U7CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCJFcnJvciBnZW5lcmF0aW5nIGRhdGEgZm9yIHF1ZXJ5IHskcXVlcnlUYXJnZXR9Ojp7JHF1ZXJ5SWRlbnRpZmllcn0gLSB7JHJlc3VsdHNldFJlc3BvbnNlLT5tZXNzYWdlfSIsTU1fUmVwb3J0UmVzcG9uc2U6OiRFUlJPUik7CgkJfQkJCQoJfQoJCgkKCXByb3RlY3RlZCBzdGF0aWMgZnVuY3Rpb24gY2FjaGVEYXRhc2V0KCRxdWVyeVRhcmdldCwgJHF1ZXJ5SWRlbnRpZmllciwgJHBhcmFtcywgJGRhdGEsICR0aW1lb3V0PTEyMDApCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSR0aW1lb3V0ID0gZW1wdHkoJHRpbWVvdXQpP3NlbGY6OiRERUZBVUxUX0NBQ0hFX1RJTUVPVVQ6JHRpbWVvdXQ7CgkJJGVuY29kZWRQYXJhbXMgPSBzZWxmOjplbmNvZGVQYXJhbXMoJHBhcmFtcyk7CgkJJGVuY29kZWREYXRhID0gc2VyaWFsaXplKCRkYXRhKTsKCQkkcGFyYW1IYXNoID0gbWQ1KCRlbmNvZGVkUGFyYW1zKTsKCQkkZXhwaXJhdGlvbiA9IGRhdGUoIlktbS1kIEg6aTpzIixzdHJ0b3RpbWUoIit7JHRpbWVvdXR9IHNlY29uZHMiLE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgidGltZXN0YW1wIikpKTsgLy9ieSBkZWZhdWx0IDEyMDAgc2VjcyAoMzAgbWlucykKICAgIAoJCSRjYWNoZUlkID0gJHdwZGItPmdldF92YXIoIgogIAkgIFNFTEVDVCAKICAJICBgaWRgIAogIAkgIEZST00gYCIuTU1fVEFCTEVfUkVQT1JUX0RBVEFfQ0FDSEUuImAgCiAgCSAgV0hFUkUgYHF1ZXJ5X3RhcmdldGAgPSAneyRxdWVyeVRhcmdldH0nCiAgCSAgQU5EIGBxdWVyeV90b2tlbmAgPSAneyRxdWVyeUlkZW50aWZpZXJ9JwogIAkgIEFORCBgcGFyYW1faGFzaGAgPSAneyRwYXJhbUhhc2h9JwoJCSIpOwoJCQoJCWlmKCRjYWNoZUlkKQoJCXsKICAJCSRyZXMgPSAkd3BkYi0+dXBkYXRlKCAKICAgICAgICBNTV9UQUJMRV9SRVBPUlRfREFUQV9DQUNIRSwgCiAgICAgICAgYXJyYXkoIAogICAgICAgICAgInF1ZXJ5X3RhcmdldCIgICAgID0+ICRxdWVyeVRhcmdldCwKICAJCQkJInF1ZXJ5X3Rva2VuIiAJICAgPT4gJHF1ZXJ5SWRlbnRpZmllciwKICAJCQkJInF1ZXJ5X3BhcmFtcyIgCSAgID0+ICRlbmNvZGVkUGFyYW1zLAogIAkJCQkicGFyYW1faGFzaCIgCSAgICAgPT4gJHBhcmFtSGFzaCwKICAJCQkJInF1ZXJ5X2RhdGEiICAgICAgID0+ICRlbmNvZGVkRGF0YSwKICAJCQkJInN0YXR1cyIgCQkgICAgICAgPT4gc2VsZjo6JERBVEFfUkVBRFlfU1RBVFVTLAogIAkJCQkiZXhwaXJhdGlvbl9kYXRlIiAgPT4gJGV4cGlyYXRpb24KICAgICAgICApLCAKICAgICAgICBhcnJheSgKICAgICAgICAgICdpZCcgPT4gJGNhY2hlSWQKICAgICAgICApIAogICAgICApOyAJCgkJfQoJCWVsc2UKCQl7CiAgCQkkcmVzID0gJHdwZGItPmluc2VydCgKICAgICAJICBNTV9UQUJMRV9SRVBPUlRfREFUQV9DQUNIRSwgCiAgICAgICAgYXJyYXkoIAogICAgICAgICAgInF1ZXJ5X3RhcmdldCIgICAgID0+ICRxdWVyeVRhcmdldCwKICAJCQkJInF1ZXJ5X3Rva2VuIiAJICAgPT4gJHF1ZXJ5SWRlbnRpZmllciwKICAJCQkJInF1ZXJ5X3BhcmFtcyIgCSAgID0+ICRlbmNvZGVkUGFyYW1zLAogIAkJCQkicGFyYW1faGFzaCIgCSAgICAgPT4gJHBhcmFtSGFzaCwKICAJCQkJInF1ZXJ5X2RhdGEiICAgICAgID0+ICRlbmNvZGVkRGF0YSwKICAJCQkJInN0YXR1cyIgCQkgICAgICAgPT4gc2VsZjo6JERBVEFfUkVBRFlfU1RBVFVTLAogIAkJCQkiZXhwaXJhdGlvbl9kYXRlIiAgPT4gJGV4cGlyYXRpb24KICAgICAgICApCiAgICAgICk7CiAgICAgIAogICAgICAkY2FjaGVJZCA9ICR3cGRiLT5pbnNlcnRfaWQ7CgkJfQoJCQoJCWlmICgkcmVzID09PSBmYWxzZSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoIkNvdWxkIG5vdCBzdG9yZSBnZW5lcmF0ZWQgcmVwb3J0IGRhdGFzZXQiLE1NX1JlcG9ydFJlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkkY3YgPSBuZXcgc3RkQ2xhc3MoKTsgLy9jYWNoZWQgdmFsdWVzCgkJJGN2LT5xdWVyeV90YXJnZXQgPSAkcXVlcnlUYXJnZXQ7CgkJJGN2LT5xdWVyeV90b2tlbiA9ICRxdWVyeUlkZW50aWZpZXI7CgkJJGN2LT5xdWVyeV9wYXJhbXMgPSAkZW5jb2RlZFBhcmFtczsKCQkkY3YtPnBhcmFtX2hhc2ggPSAkcGFyYW1IYXNoOwoJCSRjdi0+cXVlcnlfZGF0YSA9ICRlbmNvZGVkRGF0YTsKCQkkY3YtPnN0YXR1cyA9IE1NX1JlcG9ydERhdGFSZXRyaWV2ZXI6OiREQVRBX1JFQURZX1NUQVRVUzsKCQkkY3YtPmV4cGlyYXRpb25fZGF0ZSA9ICRleHBpcmF0aW9uOwoJCXJldHVybiBuZXcgTU1fUmVwb3J0UmVzcG9uc2UoJGN2KTsKCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgaGFzaGVkIGFycmF5IGFuZCBwcm9kdWNlcyBhIGpzb24tZW5jb2RlZCBzdHJpbmcuIAoJICogRXF1aXZhbGVudCBhcnJheXMgd2lsbCBwcm9kdWNlIHRoZSBzYW1lIHN0cmluZywgcmVnYXJkbGVzcyBvZiB0aGUgb3JkZXJpbmcgb2YgdGhlIGNvbnRlbnRzCgkgKiBUaGUgcGFyYW1zIGFycmF5IGNhbm5vdCBjb250YWluIHx8IChkb3VibGUgcGlwZSkgaW4gdGhlIGtleXMgb3IgdmFsdWVzCgkgKiAKCSAqIEBwYXJhbSBhcnJheSAkcGFyYW1zCgkgKiBAcmV0dXJuIFN0cmluZyBjb250YWluaW5nIHRoZSBqc29uLWVuY29kZWQgY29udGVudHMsIGZhbHNlIG9uIGVycm9yCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZW5jb2RlUGFyYW1zKCRwYXJhbXMpCgl7CgkJaWYgKCFpc19hcnJheSgkcGFyYW1zKSkKCQl7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJZm9yZWFjaCAoJHBhcmFtcyBhcyAmJHYpCgkJewoJCQlpZiAoaXNfYXJyYXkoJHYpKQoJCQl7CgkJCQlrc29ydCgkdik7CgkJCX0KCQl9CgkJa3NvcnQoJHBhcmFtcyk7CgkJcmV0dXJuIGpzb25fZW5jb2RlKCRwYXJhbXMpOwoJfQoJCgkKCS8qKgoJICogVGFrZXMgYSBzdHJpbmcgZW5jb2RlZCB3aXRoIE1NX1JlcG9ydERhdGFSZXRyaWV2ZXI6OmVuY29kZVBhcmFtcyguLikgYW5kIGRlY29kZXMgaXQgaW50byBhIGhhc2hlZCBhcnJheQoJICoKCSAqIEBwYXJhbSBTdHJpbmcgJHBhcmFtU3RyaW5nIFRoZSBlbmNvZGVkIHN0cmluZwoJICogQHJldHVybiBhcnJheSBvZiB0aGUgZGVjb2RlZCB2YWx1ZXMsIGZhbHNlIG9uIGVycm9yCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZGVjb2RlUGFyYW1zKCRwYXJhbVN0cmluZykKCXsKCQlyZXR1cm4ganNvbl9kZWNvZGUoJHBhcmFtU3RyaW5nLHRydWUpOwoJfQoKCQoJLyoqCgkgKiBEZWxldGVzIGVudHJpZXMgZnJvbSB0aGUgZGF0YSBjYWNoZQoJICogCgkgKiBAcGFyYW0gYm9vbGVhbiAkZXhwaXJlZE9ubHkgKG9wdGlvbmFsKSBEZXRlcm1pbmVzIHdoZXRoZXIgb25seSBleHBpcmVkIGVudHJpZXMgc2hvdWxkIGJlIGRlbGV0ZWQsIGRlZmF1bHRzIHRvIGZhbHNlCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2xlYXJEYXRhQ2FjaGUoJGV4cGlyZWRPbmx5PWZhbHNlKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfUkVQT1JUX0RBVEFfQ0FDSEUuKCgkZXhwaXJlZE9ubHkpPyIgV0hFUkUgZXhwaXJhdGlvbl9kYXRlIDw9ICciLk1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpLiInIjoiIik7CgkJJHdwZGItPnF1ZXJ5KCRzcWwpOwoJfQp9Cgo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(207, 'subscriptionsview', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(208, 'currencyutil', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(209, 'reportdatagrid', '', 0, '2018-11-21 06:38:55'),
(210, 'logintoken', '', 0, '2018-11-21 06:38:55'),
(211, 'formtagprocessor', '', 0, '2018-11-21 06:38:55'),
(212, 'limelightlogview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fTGltZWxpZ2h0TG9nVmlldyBleHRlbmRzIE1NX1JCQUNHZW5lcmFsRW1wbG95ZWVWaWV3CnsKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TRUFSQ0ggPSAic2VhcmNoIjsKCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TRUFSQ0g6CgkJCQkJcmV0dXJuICR0aGlzLT5nZW5lcmF0ZURhdGFHcmlkKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YUdyaWQoJHBvc3Q9bnVsbCkKCXsKCQlyZXR1cm4gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9saW1lbGlnaHRfbG9nLmRhdGFncmlkLnBocCIsICRwb3N0KTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKCRwb3N0LCBNTV9EYXRhR3JpZCAkZGcpCgl7CgkJJHdoZXJlQ2xhdXNlID0gYXJyYXkoKTsKCQkKCQlpZighZW1wdHkoJHBvc3RbIm1lbWJlcl9pZCJdKSAmJiBpbnR2YWwoJHBvc3RbIm1lbWJlcl9pZCJdKT4wKQoJCXsKCQkJYXJyYXlfcHVzaCgkd2hlcmVDbGF1c2UsICIoY3VzdG9tZXJfaWQ9JyIuaW50dmFsKCRwb3N0WyJtZW1iZXJfaWQiXSkuIicpIik7CgkJfQoJCQoJCWlmKCFlbXB0eSgkcG9zdFsiZnJvbV9kYXRlIl0pKQoJCXsKCQkJJGZyb21EYXRlID0gTU1fVXRpbHM6OmRhdGVUb1VUQygkcG9zdFsnZnJvbV9kYXRlJ10sIlktbS1kIiwiMDA6MDA6MDAiKTsKCQkJYXJyYXlfcHVzaCgkd2hlcmVDbGF1c2UsICIoZGF0ZV9yZWNlaXZlZCA+PSAneyRmcm9tRGF0ZX0nKSIpOwoJCQkKCQkJaWYoIWVtcHR5KCRwb3N0WyJ0b19kYXRlIl0pKQoJCQl7CQkKCQkJCSR0b0RhdGUgPSBNTV9VdGlsczo6ZGF0ZVRvVVRDKCRwb3N0Wyd0b19kYXRlJ10sIlktbS1kIiwiMjM6NTk6NTkiKTsKCQkJCWFycmF5X3B1c2goJHdoZXJlQ2xhdXNlLCAiKGRhdGVfcmVjZWl2ZWQgPD0gJ3skdG9EYXRlfScpIik7CgkJCX0KCQl9CgkKCQkkd2hlcmVDbGF1c2UgPSBqb2luKCIgQU5EICIsICR3aGVyZUNsYXVzZSk7CgkJCgkJJGxsSWRGaWVsZCA9IE1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLiIuaWQiOwoJCSRmaWVsZHMgPSBhcnJheSgKCQkJCQkkbGxJZEZpZWxkLCAnbWVzc2FnZScsICdsb2dfbGV2ZWwnLCAnb3JkZXJfdG90YWwnLCdkYXRlX3JlY2VpdmVkJywgJ29yZGVyX2lkJywgICdjdXN0b21lcl9pZCcsIE1NX1RBQkxFX09SREVSUy4nLnVzZXJfaWQnLAoJCQkJCU1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicub3JkZXJfc3RhdHVzJyxNTV9UQUJMRV9MSU1FTElHSFRfSVBOX0xPRy4nLnJlZnVuZF9hbW91bnQnLE1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicuZW1haWwnLAoJCQkJCU1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicucHJvZHVjdF9pZHMnLE1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicuc2hpcHBpbmdfaWQnLE1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicuc3Vic2NyaXB0aW9uc19hY3RpdmUnLAoJCQkJCU1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicuc3Vic2NyaXB0aW9uX2lkcycsTU1fVEFCTEVfTElNRUxJR0hUX0lQTl9MT0cuJy5hY3Rpb25faWQnLAoJCQkJCU1NX1RBQkxFX0xJTUVMSUdIVF9JUE5fTE9HLicuYWZmaWxpYXRlX2lkJyxNTV9UQUJMRV9MSU1FTElHSFRfSVBOX0xPRy4nLnN1YmFmZmlsaWF0ZV9pZCcsTU1fVEFCTEVfTElNRUxJR0hUX0lQTl9MT0cuJy5pcF9hZGRyZXNzJywKCQkJCQlNTV9UQUJMRV9MSU1FTElHSFRfSVBOX0xPRy4nLmRhdGVfcmVjZWl2ZWQnCgkJKTsKCQlyZXR1cm4gc2VsZjo6Z2V0RGF0YShNTV9UQUJMRV9MSU1FTElHSFRfSVBOX0xPRywgJGZpZWxkcywgJGRnLCAkd2hlcmVDbGF1c2UpOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgkdGFibGVOYW1lLCAkZmllbGRzPW51bGwsIE1NX0RhdGFHcmlkICRkZz1udWxsLCAkd2hlcmUgPSAiIiwgJGdldFRvdGFsPWZhbHNlKQoJewoJCWdsb2JhbCAkd3BkYjsKCQoJCSRjb2x1bW5zID0gKGlzX251bGwoJGZpZWxkcykpID8gInRibC4qIiA6IGltcGxvZGUoIiwiLCAkZmllbGRzKTsKCQoJCSRzcWxSZXN1bHRDb3VudCA9ICJTRUxFQ1QgY291bnQoZGlzdGluY3QgaWQpIGFzIHRvdGFsIEZST00gIi4kdGFibGVOYW1lOwoJCWlmKCFlbXB0eSgkd2hlcmUpKQoJCXsKCQkJaWYocHJlZ19tYXRjaCgiL14od2hlcmUpLyIsIHN0cnRvbG93ZXIodHJpbSgkd2hlcmUpKSkpCgkJCXsKCQkJCSRzcWxSZXN1bHRDb3VudC49ICIgeyR3aGVyZX0gIjsKCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRzcWxSZXN1bHRDb3VudC49ICIgd2hlcmUgeyR3aGVyZX0gIjsKCQkJfQoJCX0KCQoJCSRjb3VudFJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWxSZXN1bHRDb3VudCk7CgkKCQkkTGltZWxpZ2h0VGFibGUgPSBNTV9UQUJMRV9MSU1FTElHSFRfSVBOX0xPRzsKCQkkb3JkZXJzVGFibGUgPSBNTV9UQUJMRV9PUkRFUlM7CgkJJGZyb21DbGF1c2UgPSAieyRMaW1lbGlnaHRUYWJsZX0gTEVGVCBKT0lOIHskb3JkZXJzVGFibGV9IG9uICB7JExpbWVsaWdodFRhYmxlfS5vcmRlcl9pZCA9IHskb3JkZXJzVGFibGV9LmlkICI7CgkJCgkJaWYoJGNvdW50Um93KQoJCXsKCQkJJHNxbCA9ICJTRUxFQ1QgJ3skY291bnRSb3ctPnRvdGFsfScgYXMgdG90YWwsICIuJGNvbHVtbnMuIiBGUk9NIHskZnJvbUNsYXVzZX0gIjsKCQl9CgkJZWxzZQoJCXsKCQkJJHNxbCA9ICJTRUxFQ1QgIi4kY29sdW1ucy4iIEZST00geyRmcm9tQ2xhdXNlfSAiOwoJCX0KCQoJCWlmKCFlbXB0eSgkd2hlcmUpKQoJCXsKCQkJaWYocHJlZ19tYXRjaCgiL14od2hlcmUpLyIsIHN0cnRvbG93ZXIodHJpbSgkd2hlcmUpKSkpCgkJCXsKCQkJCSRzcWwuPSAiIHskd2hlcmV9ICI7CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkc3FsLj0gIiB3aGVyZSB7JHdoZXJlfSAiOwoJCQl9CgkJfQoJCgkJaWYoIWlzX251bGwoJGRnKSAmJiAhaXNfbnVsbCgkZGctPnNvcnRCeSkgJiYgIWVtcHR5KCRkZy0+c29ydEJ5KSkKCQl7CgkJCSRzcWwuPSAiT1JERVIgQlkgeyRkZy0+c29ydEJ5fSB7JGRnLT5zb3J0RGlyfSI7CgkJfQoJCQoJCWlmKCRnZXRUb3RhbCkKCQl7CgkJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCXJldHVybiAkcmVzdWx0OwoJCX0KCQoJCWlmKCFpc19udWxsKCRkZykpCgkJewoJCQkkc3FsIC49ICRkZy0+Z2V0TGltaXRTcWwoKTsKCQl9IAoJCSAKCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoKCQlpZighJHJlc3VsdCB8fCBpc19udWxsKCRyZXN1bHQpKQoJCXsKCQkJcmV0dXJuIGFycmF5KCk7CgkJfQoJCgkJcmV0dXJuICRyZXN1bHQ7Cgl9Cn0K', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(213, 'salesbymembershipreport', '', 0, '2018-11-21 06:38:55'),
(214, 'googleecommerceextension', '', 0, '2018-11-21 06:38:55'),
(215, 'cardinfo', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICogCiAqIAogKiBNTV9DYXJkSW5mbyBpcyBhIHZhbHVlLW9iamVjdCBtZWFudCB0byBzdG9yZSBbdHJhbnNpZW50XSBjcmVkaXQgY2FyZCBpbmZvcm1hdGlvbgogKgogKi8KY2xhc3MgTU1fQ2FyZEluZm8gCnsKCXB1YmxpYyBzdGF0aWMgJENBUkRfVFlQRV9JTlZBTElEID0gImludmFsaWQiOwoJcHVibGljIHN0YXRpYyAkQ0FSRF9UWVBFX1ZJU0EgPSAidmlzYSI7CglwdWJsaWMgc3RhdGljICRDQVJEX1RZUEVfTUFTVEVSQ0FSRCA9ICJtYXN0ZXIiOwoJcHVibGljIHN0YXRpYyAkQ0FSRF9UWVBFX0FNRVggPSAiYW1leCI7CglwdWJsaWMgc3RhdGljICRDQVJEX1RZUEVfRElTQ09WRVIgPSAiZGlzY292ZXIiOwoJcHVibGljIHN0YXRpYyAkQ0FSRF9UWVBFX0RJTkVSUyA9ICJkaW5lcnMiOwoJcHVibGljIHN0YXRpYyAkQ0FSRF9UWVBFX0pDQiA9ICJqY2IiOwoJCglwcml2YXRlICRjYXJkTnVtYmVyID0gIiI7Cglwcml2YXRlICRleHBpcmF0aW9uTW9udGggPSAiIjsKCXByaXZhdGUgJGV4cGlyYXRpb25ZZWFyID0gIiI7Cglwcml2YXRlICRjdnYgPSAiIjsKCQoJcHJvdGVjdGVkICR0ZXN0Q2FyZCA9IGZhbHNlOyAKCQoJCgkvKioKCSAqIENyZWF0ZXMgYSBuZXcgQ2FyZEluZm8gb2JqZWN0LiBPcHRpb25hbCBwYXJhbWV0ZXJzIGFsbG93IGl0IHRvIGJlIHBvcHVsYXRlZCB1cG9uIGNyZWF0aW9uCgkgKiAKCSAqIEBwYXJhbSBTdHJpbmcgKG9wdGlvbmFsKSAkY2FyZE51bWJlciBUaGUgY3JlZGl0IGNhcmQgbnVtYmVyCgkgKiBAcGFyYW0gU3RyaW5nIChvcHRpb25hbCkgJGV4cGlyYXRpb25Nb250aCBUaGUgY3JlZGl0IGNhcmQgZXhwaXJhdGlvbiBtb250aC4gVGhpcyB2YWx1ZSBpcyBub3QgY2FzdCB0byBpbnQKCSAqIEBwYXJhbSBTdHJpbmcgKG9wdGlvbmFsKSAkZXhwaXJhdGlvblllYXIgVGhlIGNyZWRpdCBjYXJkIGV4cGlyYXRpb24geWVhci4gVGhpcyB2YWx1ZSBpcyBub3QgY2FzdCB0byBpbnQKCSAqIEBwYXJhbSBTdHJpbmcgKG9wdGlvbmFsKSAkY3Z2IFRoZSBDVlYvQ1ZWMiBzZWN1cml0eSBjb2RlLiBUaGlzIHZhbHVlIGlzIG5vdCBjYXN0IHRvIGludAoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGNhcmROdW1iZXI9IiIsJGV4cGlyYXRpb25Nb250aD0iIiwkZXhwaXJhdGlvblllYXI9IiIsJGN2dj0iIikKCXsKCQkkZmllbGRzID0gYXJyYXkoImNhcmROdW1iZXIiLCJleHBpcmF0aW9uTW9udGgiLCJleHBpcmF0aW9uWWVhciIsImN2diIpOwoJCWZvcmVhY2ggKCRmaWVsZHMgYXMgJGZpZWxkKQoJCXsKCQkJaWYgKCFlbXB0eSgkJGZpZWxkKSkKCQkJewoJCQkJJHRoaXMtPiRmaWVsZCA9ICQkZmllbGQ7CgkJCX0KCQl9Cgl9CgkKCQoJLyoqIFJldHVybnMgdGhlIGNhcmQgdHlwZSBiYXNlZCBvbiB0aGUgY2FyZCBudW1iZXIKCSAqIAoJICogQHJldHVybiBTdHJpbmcgY29udGFpbmluZyB0aGUgY2FyZCB0eXBlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRDYXJkVHlwZSgpCgl7CQoJCWlmKCFlbXB0eSgkdGhpcy0+Y2FyZE51bWJlcikpCgkJewoJCQkkdmlzYVJlZ2V4ID0gIi9eNFswLTldezEyfSg/OlswLTldezN9KT8kLyI7CgkJCSRtYXN0ZXJSZWdleCA9ICIvXjVbMS01XVswLTldezE0fSQvIjsKCQkJJGFtZXhSZWdleCA9ICIvXjNbNDddWzAtOV17MTN9JC8iOwoJCQkkZGluZXJzUmVnZXggPSAiL14zKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX0kLyI7CgkJCSRkaXNjb3ZlclJlZ2V4ID0gIi9eNig/OjAxMXw1WzAtOV17Mn0pWzAtOV17MTJ9JC8iOwoJCQkkamNiUmVnZXggPSAiL14oPzoyMTMxfDE4MDB8MzVcZHszfSlcZHsxMX0kLyI7CgkJCgkJCWlmKHByZWdfbWF0Y2goJHZpc2FSZWdleCwgJHRoaXMtPmNhcmROdW1iZXIpKSAKCQkJewoJCQkJcmV0dXJuIHNlbGY6OiRDQVJEX1RZUEVfVklTQTsKCQkJfQoJCQkKCQkJaWYocHJlZ19tYXRjaCgkbWFzdGVyUmVnZXgsICR0aGlzLT5jYXJkTnVtYmVyKSkKCQkJewoJCQkJcmV0dXJuIHNlbGY6OiRDQVJEX1RZUEVfTUFTVEVSQ0FSRDsKCQkJfQoJCQkKCQkJaWYocHJlZ19tYXRjaCgkYW1leFJlZ2V4LCAkdGhpcy0+Y2FyZE51bWJlcikpCgkJCXsKCQkJCXJldHVybiBzZWxmOjokQ0FSRF9UWVBFX0FNRVg7CgkJCX0KCQkJCgkJCWlmKHByZWdfbWF0Y2goJGRpbmVyc1JlZ2V4LCAkdGhpcy0+Y2FyZE51bWJlcikpCgkJCXsKCQkJCXJldHVybiBzZWxmOjokQ0FSRF9UWVBFX0RJTkVSUzsKCQkJfQoJCQkKCQkJaWYocHJlZ19tYXRjaCgkZGlzY292ZXJSZWdleCwgJHRoaXMtPmNhcmROdW1iZXIpKQoJCQl7CgkJCQlyZXR1cm4gc2VsZjo6JENBUkRfVFlQRV9ESVNDT1ZFUjsKCQkJfQoJCQkKCQkJaWYocHJlZ19tYXRjaCgkamNiUmVnZXgsICR0aGlzLT5jYXJkTnVtYmVyKSkKCQkJewoJCQkJcmV0dXJuIHNlbGY6OiRDQVJEX1RZUEVfSkNCOwoJCQl9CgkJfQoJCQoJCXJldHVybiBzZWxmOjokQ0FSRF9UWVBFX0lOVkFMSUQ7Cgl9CgkKCQoJLyoqCgkgKiBSZXR1cm5zIHRoZSBjYXJkIG51bWJlcgoJICogCgkgKiBAcmV0dXJuIFN0cmluZyBjb250YWluaW5nIHRoZSBjYXJkIG51bWJlcgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q2FyZE51bWJlcigpCgl7CgkJcmV0dXJuICR0aGlzLT5jYXJkTnVtYmVyOwoJfQoJCgkKCS8qKgoJICogU2V0IHRoZSBjYXJkIG51bWJlcgoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRjYXJkTnVtYmVyIFRoZSBjcmVkaXQgY2FyZCBudW1iZXIKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldENhcmROdW1iZXIoJGNhcmROdW1iZXIpCgl7CgkJJHRoaXMtPmNhcmROdW1iZXIgPSAkY2FyZE51bWJlcjsKCX0KCQoJCgkvKioKCSAqIFJldHVybnMgdGhlIGV4cGlyYXRpb24gbW9udGgKCSAqIAoJICogQHJldHVybiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBleHBpcmF0aW9uIG1vbnRoCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRFeHBpcmF0aW9uTW9udGgoKQoJewoJCXJldHVybiAkdGhpcy0+ZXhwaXJhdGlvbk1vbnRoOwoJfQoJCgkKCS8qKgoJICogU2V0cyB0aGUgZXhwaXJhdGlvbiBtb250aAoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRleHBpcmF0aW9uTW9udGggVGhlIGV4cGlyYXRpb24gbW9udGgKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldEV4cGlyYXRpb25Nb250aCgkZXhwaXJhdGlvbk1vbnRoKQoJewoJCSR0aGlzLT5leHBpcmF0aW9uTW9udGggPSAkZXhwaXJhdGlvbk1vbnRoOwoJfQoJCgkKCS8qKgoJICogUmV0dXJucyB0aGUgZXhwaXJhdGlvbiB5ZWFyCgkgKiAKCSAqIEByZXR1cm4gU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXhwaXJhdGlvbiB5ZWFyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRFeHBpcmF0aW9uWWVhcigpCgl7CgkJcmV0dXJuICR0aGlzLT5leHBpcmF0aW9uWWVhcjsKCX0KCQoJCgkvKioKCSAqIFNldHMgdGhlIGV4cGlyYXRpb24geWVhcgoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRleHBpcmF0aW9uWWVhcgoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0RXhwaXJhdGlvblllYXIoJGV4cGlyYXRpb25ZZWFyKQoJewoJCSR0aGlzLT5leHBpcmF0aW9uWWVhciA9ICRleHBpcmF0aW9uWWVhcjsKCX0KCQoJCgkvKioKCSAqIFJldHVybnMgdGhlIGN2di9jdnYyIGNvZGUKCSAqIAoJICogQHJldHVybiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdnYvY29kZQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q1ZWKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmN2djsKCX0KCQoJCgkvKioKCSAqIFNldCB0aGUgY3Z2L2N2djIgY29kZQoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRjdnYKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldENWVigkY3Z2KQoJewoJCSR0aGlzLT5jdnYgPSAkY3Z2OwoJfQoJCgkvKioKCSAqIENoZWNrcyB0byBtYWtlIHN1cmUgdGhlIG9iamVjdCBoYXMgYWxsIG9mIHRoZSByZXF1aXJlZCBjcmVkaXQgY2FyZCBpbmZvcm1hdGlvbiB0byBjb25kdWN0IGEgdHJhbnNhY3Rpb24KCSAqIEBwYXJhbSBib29sZWFuICRyZXF1aXJlQ1ZWIChvcHRpb25hbCkgV2hldGhlciBvciBub3QgdGhlIGN2diBzaG91bGQgYmUgY29uc2lkZXJlZCByZXF1aXJlZC4gRGVmYXVsdHMgdG8gdHJ1ZQoJICogQHJldHVybiBib29sZWFuIHZhbHVlIG9mIHRydWUgaWYgYWxsIHJlcXVpcmVkIGluZm9ybWF0aW9uIGlzIHNldCwgZmFsc2Ugb3RoZXJ3aXNlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBoYXNSZXF1aXJlZEluZm8oJHJlcXVpcmVDVlY9ZmFsc2UpCgl7CgkJJGZpZWxkcyA9IGFycmF5KCJjYXJkTnVtYmVyIiwiZXhwaXJhdGlvbk1vbnRoIiwiZXhwaXJhdGlvblllYXIiKTsKCQlpZiAoJHJlcXVpcmVDVlYpCgkJewoJCQkkZmllbGRzW10gPSAiY3Z2IjsKCQl9CgkJZm9yZWFjaCAoJGZpZWxkcyBhcyAkZmllbGQpCgkJewoJCQlpZiAoZW1wdHkoJHRoaXMtPiRmaWVsZCkpCgkJCXsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0JCgkKCQoJLyoqCgkgKiBWYWxpZGF0ZXMgd2hldGhlciB0aGUgTU1fQ2FyZEluZm8gb2JqZWN0IGNvbnRhaW5zIHZhbGlkIHZhbHVlcyBmb3IgYSBjcmVkaXQgY2FyZAoJICogCgkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiB0aGUgaW5mb3JtYXRpb24gaXMgcHJlc2VudCBhbmQgdmFsaWQsIG9yIGEgc3RyaW5nIGVycm9yIG1lc3NhZ2UgaWYgaXQgZG9lcyBub3QKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHZhbGlkYXRlKCkKCXsKCQlpZiAoJHRoaXMtPnRlc3RDYXJkKQoJCXsKCQkJLy9ieXBhc3MgdmFsaWRhdGlvbiB0byBhbGxvdyBib2d1cyB2YWx1ZXMgZm9yIHRlc3RpbmcKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCWlmICghJHRoaXMtPmhhc1JlcXVpcmVkSW5mbygpKQoJCXsKCQkJcmV0dXJuICJOb3QgYWxsIGNyZWRpdCBjYXJkIGluZm9ybWF0aW9uIHdhcyBzdXBwbGllZCI7CgkJfQoJCQoJCSRjYXJkRXJyb3IgPSAiIjsKCQkkY3VycmVudFllYXIgPSBpbnR2YWwoZGF0ZSgnWScpKTsKCQlpZiAoZW1wdHkoJHRoaXMtPmV4cGlyYXRpb25Nb250aCkgfHwgKCR0aGlzLT5leHBpcmF0aW9uTW9udGggPiAxMikgfHwgKCR0aGlzLT5leHBpcmF0aW9uTW9udGggPCAxKQoJCQkJfHwgZW1wdHkoJHRoaXMtPmV4cGlyYXRpb25ZZWFyKSB8fCAoJHRoaXMtPmV4cGlyYXRpb25ZZWFyIDwgJGN1cnJlbnRZZWFyKSkKCQl7CgkJCSRjYXJkRXJyb3IuPSJQbGVhc2UgZW50ZXIgYSB2YWxpZCBleHBpcmF0aW9uIGRhdGVcbiI7CgkJfQoJCQoJCWlmIChzdHJsZW4oJHRoaXMtPmNhcmROdW1iZXIpIDwgMTApCgkJewoJCQkkY2FyZEVycm9yLj0iUGxlYXNlIGVudGVyIGEgdmFsaWQgY2FyZCBudW1iZXJcbiI7CgkJfQoJCQoJCXJldHVybiAoZW1wdHkoJGNhcmRFcnJvcikpP3RydWU6JGNhcmRFcnJvcjsKCX0KCQoJCgkvKioKCSAqIERlc2lnbmF0ZXMgdGhpcyBhcyB0ZXN0IGNhcmQgaW5mbywgd2hpY2ggcmVsYXhlcyB0aGUgdmFsaWRhdGlvbiByZXN0cmljdGlvbnMKCSAqIAoJICogQHBhcmFtIGJvb2xlYW4gJGlzVGVzdCBzZXQgdG8gdHJ1ZSBpZiB0aGlzIGlzIHRlc3QgY2FyZCBpbmZvLCBmYWxzZSBvdGhlcndpc2UKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldFRlc3RDYXJkKCRpc1Rlc3QpCgl7CgkJJHRoaXMtPnRlc3RDYXJkID0gKCRpc1Rlc3QgPT09IHRydWUpOwoJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(216, 'scheduledpaymentevent', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBNTV9TY2hlZHVsZWRQYXltZW50RXZlbnQgcmVwcmVzZW50cyBhIHJlY3VycmluZyBwYXltZW50IHRoYXQgd2FzIHNjaGVkdWxlZCBieSB0aGUgTWVtYmVyTW91c2Ugc2NoZWR1bGluZyBmcmFtZXdvcmsuIEl0IHNwZWNpZmljYWxseSByZXByZXNlbnRzIAogKiBhIHBheW1lbnQgZXZlbnQKICoKICovCmNsYXNzIE1NX1NjaGVkdWxlZFBheW1lbnRFdmVudCBleHRlbmRzIE1NX1NjaGVkdWxlZEV2ZW50CnsKCXByb3RlY3RlZCAkcGF5bWVudE51bWJlciAgICA9ICIiOwoJcHJpdmF0ZSAgICRvcmRlckl0ZW1JZCAgICAgID0gIiI7Cglwcml2YXRlICAgJHVzZXJJZCAgICAgICAgICAgPSAiIjsKCXByaXZhdGUgICAkcGF5bWVudFNlcnZpY2VJZCA9ICIiOwoJCglwcml2YXRlICRiaWxsaW5nU3RhdHVzID0gIiI7CgkKCS8vY29uc3RhbnRzIHJlcHJlc2VudGluZyByZW1vdGUgc3RhdHVzZXMKCXB1YmxpYyBzdGF0aWMgJEZJUlNUX1JFQklMTF9GQUlMRUQgPSAyOwoJcHVibGljIHN0YXRpYyAkU0VDT05EX1JFQklMTF9GQUlMRUQgPSAzOwoJcHVibGljIHN0YXRpYyAkVEhJUkRfUkVCSUxMX0ZBSUxFRCA9IDQ7CglwdWJsaWMgc3RhdGljICRQRVJNQU5FTlRMWV9GQUlMRUQgPSA1OwkKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRpZD0iIiwgJGdldERhdGE9dHJ1ZSkgCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgkaWQsJGdldERhdGEpOwoJCSR0aGlzLT5ldmVudFR5cGUgPSBNTV9TY2hlZHVsZWRFdmVudDo6JFBBWU1FTlRfU0VSVklDRV9FVkVOVDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF0YSgpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCXBhcmVudDo6Z2V0RGF0YSgpOwoJCgkJaWYgKGludHZhbCgkdGhpcy0+aWQpID4gMCkKCQl7CgkJCSRzcWwgPSAiU0VMRUNUICogZnJvbSAiLk1NX1RBQkxFX1NDSEVEVUxFRF9QQVlNRU5UUy4iIHdoZXJlIGlkPXskdGhpcy0+aWR9IjsKCQkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwoJCQlpZigkcmVzdWx0KQoJCQl7CgkJCQkkdGhpcy0+c2V0QWRkaXRpb25hbERhdGEoJHJlc3VsdCk7CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlwYXJlbnQ6OmludmFsaWRhdGUoKTsKCQl9Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldEFkZGl0aW9uYWxEYXRhKCRkYXRhKQoJewoJCSR0aGlzLT5vcmRlckl0ZW1JZCA9ICRkYXRhLT5vcmRlcl9pdGVtX2lkOwoJCSR0aGlzLT51c2VySWQgPSAkZGF0YS0+dXNlcl9pZDsKCQkkdGhpcy0+cGF5bWVudFNlcnZpY2VJZCA9ICRkYXRhLT5wYXltZW50X3NlcnZpY2VfaWQ7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGNvbW1pdERhdGEoJHVwZGF0ZVJlbW90ZWx5PXRydWUpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCS8vZmlndXJlIG91dCBpZiB0aGlzIGlzIGEgbmV3IHJlY29yZCBvciBhbiB1cGRhdGUKCQkkaXNVcGRhdGUgPSAoaW50dmFsKCR0aGlzLT5pZCkgPjApP3RydWU6ZmFsc2U7CgkJJG5ld1JlY29yZCA9ICEkaXNVcGRhdGU7CgkKCQkvL2NhbGwgdGhlIHBhcmVudCBjb21taXQgdG8gZ2VuZXJhdGUgdGhlIGV2ZW50CgkJJHJlc3BvbnNlID0gcGFyZW50Ojpjb21taXREYXRhKCR1cGRhdGVSZW1vdGVseSk7CgkJaWYgKE1NX1Jlc3BvbnNlOjppc0Vycm9yKCRyZXNwb25zZSkpCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCQkKCQkvL3ByaW1hcnkgdGFibGUgdXBkYXRlZCwgYW5kIHNjaGVkdWxlIGNyZWF0ZWQsIG5vdyBjcmVhdGUvdXBkYXRlIGRldGFpbHMgdGFibGUKCQkkc2NoZWR1bGVEZXRhaWxEYXRhID0gYXJyYXkoICAidXNlcl9pZCIgIAkJCT0+ICR0aGlzLT51c2VySWQsCgkJCQkJCQkJCSAgIm9yZGVyX2l0ZW1faWQiICAgIAk9PiAkdGhpcy0+b3JkZXJJdGVtSWQsCgkJCQkJCQkJCSAgInBheW1lbnRfc2VydmljZV9pZCIgID0+ICR0aGlzLT5wYXltZW50U2VydmljZUlkCgkJKTsKCQkKCQlpZiAoISRpc1VwZGF0ZSkKCQl7CgkJCS8vdGhpcyBpcyBhIG5ldyByZWNvcmQKCQkJJHNjaGVkdWxlRGV0YWlsRGF0YSA9IGFycmF5KCJpZCIgPT4gJHRoaXMtPmlkKSArICRzY2hlZHVsZURldGFpbERhdGE7CgkJCSRyZXN1bHQgPSAkd3BkYi0+aW5zZXJ0KE1NX1RBQkxFX1NDSEVEVUxFRF9QQVlNRU5UUywkc2NoZWR1bGVEZXRhaWxEYXRhKTsKCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVSUk9SOiB1bmFibGUgdG8gY3JlYXRlIHNjaGVkdWxlZCBldmVudDogZXJyb3IgPSAiLiR3cGRiLT5sYXN0X2Vycm9yLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQkkdXBkYXRlV2hlcmUgPSBhcnJheSgiaWQiPT4kdGhpcy0+aWQpOwoJCQkkcmVzdWx0ID0gJHdwZGItPnVwZGF0ZShNTV9UQUJMRV9TQ0hFRFVMRURfUEFZTUVOVFMsJHNjaGVkdWxlRGV0YWlsRGF0YSwkdXBkYXRlV2hlcmUpOwoJCQlpZigkcmVzdWx0ID09PSBmYWxzZSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRVJST1I6IHVuYWJsZSB0byB1cGRhdGUgc2NoZWR1bGVkIGV2ZW50OiBlcnJvciA9ICIuJHdwZGItPmxhc3RfZXJyb3IsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCQkKCQlwYXJlbnQ6OnZhbGlkYXRlKCk7CgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBkZWxldGUoJGRlbGV0ZVJlbW90ZWx5PXRydWUpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCgkJaWYgKGludHZhbCgkdGhpcy0+aWQpID4gMCkKCQl7CgkJCSR3cGRiLT5xdWVyeSgiREVMRVRFIEZST00gIi5NTV9UQUJMRV9TQ0hFRFVMRURfUEFZTUVOVFMuIiBXSEVSRSBpZD0neyR0aGlzLT5pZH0nIik7CgkJCSRyZXNwb25zZSA9IHBhcmVudDo6ZGVsZXRlKCRkZWxldGVSZW1vdGVseSk7CgkJCWlmIChNTV9SZXNwb25zZTo6aXNFcnJvcigkcmVzcG9uc2UpKQoJCQl7CgkJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCQl9CgkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBkZWxldGUgdGhpcyBzY2hlZHVsZWQgcGF5bWVudCBldmVudCBiZWNhdXNlIGl0IGlzIGludmFsaWQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gcHJlcGFyZVNldHRpbmdzKCRhZGRpdGlvbmFsRXhjbHVzaW9ucz1hcnJheSgpKQoJewoJCSRhZGRpdGlvbmFsRXhjbHVzaW9uc1tdID0gIm9yZGVySXRlbUlkIjsKCQkkYWRkaXRpb25hbEV4Y2x1c2lvbnNbXSA9ICJ1c2VySWQiOwoJCSRhZGRpdGlvbmFsRXhjbHVzaW9uc1tdID0gInBheW1lbnRTZXJ2aWNlSWQiOwoJCXJldHVybiBwYXJlbnQ6OnByZXBhcmVTZXR0aW5ncygkYWRkaXRpb25hbEV4Y2x1c2lvbnMpOwoJfQoJCgkKCS8qKgoJICogUmV0dXJucyB0aGUgcGF5bWVudCBudW1iZXIKCSAqIAoJICogQHJldHVybiBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgcGF5bWVudCBudW1iZXIKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldFBheW1lbnROdW1iZXIoKQoJewoJCXJldHVybiAkdGhpcy0+cGF5bWVudE51bWJlcjsKCX0KCQoJCgkvKioKCSAqIFNldHMgdGhlIHBheW1lbnQgbnVtYmVyCgkgKiAKCSAqIEBwYXJhbSBpbnQgJHBheW1lbnROdW1iZXIKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldFBheW1lbnROdW1iZXIoJHBheW1lbnROdW1iZXIpCgl7CgkJaWYgKGlzX251bWVyaWMoJHBheW1lbnROdW1iZXIpKQoJCXsKCQkJJHRoaXMtPnBheW1lbnROdW1iZXIgPSBpbnR2YWwoJHBheW1lbnROdW1iZXIpOwoJCX0KCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gc2V0RXZlbnRUeXBlKCRldmVudFR5cGUpCgl7CgkJLy9kb24ndCBhbGxvdyB0aGUgZXZlbnQgdHlwZSB0byBiZSBjaGFuZ2VkCgkJJHRoaXMtPmV2ZW50VHlwZSA9IE1NX1NjaGVkdWxlZEV2ZW50OjokUEFZTUVOVF9TRVJWSUNFX0VWRU5UOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRPcmRlckl0ZW1JZCgpCgl7CgkJcmV0dXJuICR0aGlzLT5vcmRlckl0ZW1JZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0T3JkZXJJdGVtSWQoJG9yZGVySXRlbUlkKQoJewoJCSR0aGlzLT5vcmRlckl0ZW1JZCA9ICRvcmRlckl0ZW1JZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0VXNlcklkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPnVzZXJJZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0VXNlcklkKCR1c2VySWQpCgl7CgkJJHRoaXMtPnVzZXJJZCA9ICR1c2VySWQ7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFBheW1lbnRTZXJ2aWNlSWQoKQoJewoJCXJldHVybiAkdGhpcy0+cGF5bWVudFNlcnZpY2VJZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0UGF5bWVudFNlcnZpY2VJZCgkcGF5bWVudFNlcnZpY2VJZCkKCXsKCQkkdGhpcy0+cGF5bWVudFNlcnZpY2VJZCA9ICRwYXltZW50U2VydmljZUlkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRCaWxsaW5nU3RhdHVzKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmJpbGxpbmdTdGF0dXM7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIHNldEJpbGxpbmdTdGF0dXMoJGJpbGxpbmdTdGF0dXMpCgl7CgkJJHRoaXMtPmJpbGxpbmdTdGF0dXMgPSAkYmlsbGluZ1N0YXR1czsKCX0KCQoJCgkvKioKCSAqIEZpbmRzIHRoZSBuZXh0IHNjaGVkdWxlZCBwYXltZW50IGV2ZW50IHVzaW5nIGFuIG9yZGVyIGl0ZW0gaWQgCgkgKiAKCSAqIEBwYXJhbSBzdHJpbmcgJG9yZGVySXRlbUlkIFRoZSBvcmRlciBpdGVtIGlkCgkgKiBAcmV0dXJuIE1NX1NjaGVkdWxlZFBheW1lbnRFdmVudCBmb3IgdGhlIG5leHQgc2NoZWR1bGVkIGV2ZW50IG9uIHRoYXQgb3JkZXIgaXRlbSBpZC4gUmV0dXJucyBib29sZWFuIGZhbHNlIGlmIG5vIG5leHQgZXZlbnQgZXhpc3RzCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZmluZE5leHRTY2hlZHVsZWRFdmVudEJ5T3JkZXJJdGVtSWQoJG9yZGVySXRlbUlkLCRmdXR1cmVPbmx5PXRydWUpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRjdXJyZW50RGF0ZXRpbWUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkkc3FsID0gIlNFTEVDVCBzcC5pZCBGUk9NICIuTU1fVEFCTEVfU0NIRURVTEVEX1BBWU1FTlRTLiIgc3AgTEVGVCBKT0lOICIuTU1fVEFCTEVfU0NIRURVTEVEX0VWRU5UUy4iIHNlIG9uIChzcC5pZCA9IHNlLmlkKSAiLgoJCQkJIldIRVJFIChvcmRlcl9pdGVtX2lkPSVzKSBBTkQgKHN0YXR1cyA9ICVzKSAiOwoJCWlmICgkZnV0dXJlT25seSkKCQl7CgkJCSRzcWwgLj0gIkFORCAoc2NoZWR1bGVkX2RhdGUgPiAneyRjdXJyZW50RGF0ZXRpbWV9JykgIjsKCQl9CgkJJHNxbCAuPSAiT1JERVIgQlkgaWQgQVNDIExJTUlUIDEiOwoJCSRzcWwgPSAkd3BkYi0+cHJlcGFyZSgkc3FsLCRvcmRlckl0ZW1JZCxNTV9TY2hlZHVsZWRFdmVudDo6JEVWRU5UX1BFTkRJTkcpOwoJCSRldmVudElkID0gJHdwZGItPmdldF92YXIoJHNxbCk7CgkJCgkJaWYgKCRldmVudElkICE9PSBmYWxzZSkKCQl7CgkJCXJldHVybiBuZXcgTU1fU2NoZWR1bGVkUGF5bWVudEV2ZW50KCRldmVudElkKTsKCQl9CgkJcmV0dXJuIGZhbHNlOwoJfQoJCn0=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(217, 'affiliatecontroller', '', 0, '2018-11-21 06:38:55'),
(218, 'corepagesview', '', 0, '2018-11-21 06:38:55'),
(219, 'reportingview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogVGhpcyBjbGFzcyByZXNwb25kcyB0byBhbGwgb2YgdGhlIGFqYXggY2FsbHMgZnJvbSAKICogCiAqLwpjbGFzcyBNTV9SZXBvcnRpbmdWaWV3IGV4dGVuZHMgTU1fUkJBQ0FuYWx5c3RWaWV3CnsKCQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fUE9MTF9SRVBPUlRfREFUQSA9ICJwb2xsUmVwb3J0RGF0YSI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9DSEFOR0VfVklTVUFMX0VMRU1FTlRfRElSRUNUSVZFID0gImNoYW5nZVZpc3VhbEVsZW1lbnREaXJlY3RpdmUiOwoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fQ0xFQVJfREFUQV9DQUNIRSA9ICJjbGVhckRhdGFDYWNoZSI7CiAJCgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9uKCRwb3N0KSAKCXsJCgkJb2Jfc3RhcnQoKTsKCQlzd2l0Y2goJHBvc3Rbc2VsZjo6JE1NX0pTQUNUSU9OXSkgCgkJewoJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9QT0xMX1JFUE9SVF9EQVRBOgoJCQkJJHJlc3BvbnNlID0gJHRoaXMtPnBvbGxSZXBvcnREYXRhKCRwb3N0KTsKCQkJCWJyZWFrOwoJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9DTEVBUl9EQVRBX0NBQ0hFOgoJCQkJJHJlc3BvbnNlID0gJHRoaXMtPmNsZWFyRGF0YUNhY2hlKCRwb3N0KTsKCQkJCWJyZWFrOwoJCQlkZWZhdWx0OgoJCQkJJHJlc3BvbnNlID0gcGFyZW50OjpwZXJmb3JtQWN0aW9uKCRwb3N0KTsKCQkJCSRyZXNwb25zZSA9ICgkcmVzcG9uc2UgaW5zdGFuY2VvZiBNTV9SZXBvcnRSZXNwb25zZSk/JHJlc3BvbnNlOihuZXcgTU1fUmVwb3J0UmVzcG9uc2UoKSk7CgkJCQlicmVhazsKCQl9CgkJaWYgKCFlbXB0eSgkcG9zdFsnZWxlbWVudE5hbWUnXSkpCgkJewoJCQkkcmVzcG9uc2UtPmFkZERhdGEoImVsZW1lbnROYW1lIiwkcG9zdFsnZWxlbWVudE5hbWUnXSk7CgkJfQoJCW9iX2VuZF9jbGVhbigpOwoJCXJldHVybiAkcmVzcG9uc2U7Cgl9CgoJCglwdWJsaWMgZnVuY3Rpb24gcG9sbFJlcG9ydERhdGEoJHBvc3QpIAoJewoJCSR2YWxpZGF0ZVJlc3BvbnNlID0gJHRoaXMtPnZhbGlkYXRlUmVwb3J0QW5kRWxlbWVudHMoJHBvc3QpOwoJCWlmICghTU1fUmVzcG9uc2U6OmlzU3VjY2VzcygkdmFsaWRhdGVSZXNwb25zZSkpCgkJewoJCQlyZXR1cm4gJHZhbGlkYXRlUmVzcG9uc2U7CgkJfQoJCSRyZXBvcnQgPSAkdmFsaWRhdGVSZXNwb25zZS0+bWVzc2FnZTsKCQkkZWxlbWVudHMgPSAkcG9zdFsnZWxlbWVudHMnXTsKCQkkcmV0dXJuRWxlbWVudHMgPSBhcnJheSgpOwoJCSRyZXNwb25zZSA9IG5ldyBNTV9SZXNwb25zZSgpOwoJCWZvcmVhY2ggKCRlbGVtZW50cyBhcyAkZWxlbWVudCkKCQl7CgkJCSRlbGVtZW50V2lkdGggID0gKCFlbXB0eSgkZWxlbWVudFsnZWxlbWVudFdpZHRoJ10pKT8kZWxlbWVudFsnZWxlbWVudFdpZHRoJ106IiI7CgkJCSRlbGVtZW50SGVpZ2h0ID0gKCFlbXB0eSgkZWxlbWVudFsnZWxlbWVudEhlaWdodCddKSk/JGVsZW1lbnRbJ2VsZW1lbnRIZWlnaHQnXToiIjsKCQkJJHBhcmFtcyAgICAgICAgPSAoIWVtcHR5KCRlbGVtZW50WydwYXJhbXMnXSkpPyRlbGVtZW50WydwYXJhbXMnXTphcnJheSgpOwoJCQkkZGlyZWN0aXZlcyAgICA9ICghZW1wdHkoJGVsZW1lbnRbJ2RpcmVjdGl2ZXMnXSkpPyRlbGVtZW50WydkaXJlY3RpdmVzJ106YXJyYXkoKTsKCQkJJHJldHVybkVsZW1lbnRzWyRlbGVtZW50WydpZCddXSA9ICRyZXBvcnQtPnJlbmRlclZpc3VhbEVsZW1lbnQoJGVsZW1lbnRbJ2lkJ10sJHBhcmFtcywkZWxlbWVudFdpZHRoLCRlbGVtZW50SGVpZ2h0LCRkaXJlY3RpdmVzKTsKCQl9CgkJJHJlc3BvbnNlLT5hZGREYXRhKCJlbGVtZW50cyIsJHJldHVybkVsZW1lbnRzKTsKCQlyZXR1cm4gJHJlc3BvbnNlOwoJfQoJCgkKCS8qKgoJICogVmVyaWZpZXMgdGhhdCB0aGUgYWpheCBwb3N0IGRhdGEgY29udGFpbmVkIGluICRwb3N0IGNvbnRhaW5zIHRoZSBuYW1lIG9mIGEgdmFsaWQgcmVwb3J0LCBhbmQgcmVmZXJlbmNlcyBhIHZpc3VhbCBlbGVtZW50CgkgKiBBbiBpbnN0YW5jZSBvZiB0aGUgcmVwb3J0IG5lZWRzIHRvIGJlIGNyZWF0ZWQgdG8gdmFsaWRhdGUgaXQsIGFuZCBhcyBhbiBvcHRpbWl6YXRpb24sIGEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UgaXMKCSAqIHJldHVybmVkIGluIHRoZSByZXNwb25zZSBvbiBzdWNjZXNzCgkgKiAKCSAqIEBwYXJhbSBhcnJheSAkcG9zdCBUaGUgUE9TVGVkIGRhdGEKCSAqIEByZXR1cm4gTU1fUmVzcG9uc2UgU3VjY2VzcyBpZiB0aGVyZSBpcyBhIHZhbGlkIHJlcG9ydCBhbmQgZWxlbWVudCByZWZlcmVuY2VkIGluICRwb3N0LCBlcnJvciBvdGhlcndpc2UKCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIHZhbGlkYXRlUmVwb3J0QW5kRWxlbWVudHMoJHBvc3QpCgl7CgkJaWYgKGVtcHR5KCRwb3N0WydyZXBvcnROYW1lJ10pKQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiRXJyb3I6IHJlcG9ydCBuYW1lIG5vdCBzcGVjaWZpZWQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoY2xhc3NfZXhpc3RzKCRwb3N0WydyZXBvcnROYW1lJ10pKQoJCXsKCQkJJHRtcCA9IG5ldyAkcG9zdFsncmVwb3J0TmFtZSddKCk7CgkJfQoJCWVsc2UKCQl7CgkJCSR0bXAgPSAiIjsKCQl9CgkJCgkJaWYgKCEkdG1wIGluc3RhbmNlb2YgTU1fUmVwb3J0QmFzZSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yOiB0aGUgcmVwb3J0IHNwZWNpZmllZCBpcyBub3QgYSB2YWxpZCByZXBvcnQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQlpZiAoZW1wdHkoJHBvc3RbJ2VsZW1lbnRzJ10pIHx8ICFpc19hcnJheSgkcG9zdFsnZWxlbWVudHMnXSkpCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFcnJvcjogdmlzdWFsIGVsZW1lbnRzIG5vdCBzcGVjaWZpZWQiLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkdG1wKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gY2xlYXJEYXRhQ2FjaGUoJHBvc3QpCgl7CgkJTU1fUmVwb3J0RGF0YVJldHJpZXZlcjo6Y2xlYXJEYXRhQ2FjaGUoKTsKCQlyZXR1cm4gbmV3IE1NX1JlcG9ydFJlc3BvbnNlKCk7Cgl9CgkKfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(220, 'aweberentry', '', 0, '2018-11-21 06:38:55'),
(221, 'smarttaglibraryview', '', 0, '2018-11-21 06:38:55'),
(222, 'aweberentrydataarray', 'Y2xhc3MgTU1fQVdlYmVyRW50cnlEYXRhQXJyYXkgaW1wbGVtZW50cyBBcnJheUFjY2VzcywgQ291bnRhYmxlLCBJdGVyYXRvciAgewogICAgcHJpdmF0ZSAkY291bnRlciA9IDA7CgogICAgcHJvdGVjdGVkICRkYXRhOwogICAgcHJvdGVjdGVkICRrZXlzOwogICAgcHJvdGVjdGVkICRuYW1lOwogICAgcHJvdGVjdGVkICRwYXJlbnQ7CgogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRkYXRhLCAkbmFtZSwgJHBhcmVudCkgewogICAgICAgICR0aGlzLT5kYXRhID0gJGRhdGE7CiAgICAgICAgJHRoaXMtPmtleXMgPSBhcnJheV9rZXlzKCRkYXRhKTsKICAgICAgICAkdGhpcy0+bmFtZSA9ICRuYW1lOwogICAgICAgICR0aGlzLT5wYXJlbnQgPSAkcGFyZW50OwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBjb3VudCgpIHsKICAgICAgICByZXR1cm4gc2l6ZU9mKCR0aGlzLT5kYXRhKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gb2Zmc2V0RXhpc3RzKCRvZmZzZXQpIHsKICAgICAgICByZXR1cm4gKGlzc2V0KCR0aGlzLT5kYXRhWyRvZmZzZXRdKSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIG9mZnNldEdldCgkb2Zmc2V0KSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5kYXRhWyRvZmZzZXRdOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBvZmZzZXRTZXQoJG9mZnNldCwgJHZhbHVlKSB7CiAgICAgICAgJHRoaXMtPmRhdGFbJG9mZnNldF0gPSAkdmFsdWU7CiAgICAgICAgJHRoaXMtPnBhcmVudC0+eyR0aGlzLT5uYW1lfSA9ICR0aGlzLT5kYXRhOwogICAgICAgIHJldHVybiAkdmFsdWU7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIG9mZnNldFVuc2V0KCRvZmZzZXQpIHsKICAgICAgICB1bnNldCgkdGhpcy0+ZGF0YVskb2Zmc2V0XSk7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHJld2luZCgpIHsKICAgICAgICAkdGhpcy0+Y291bnRlciA9IDA7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGN1cnJlbnQoKSB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5kYXRhWyR0aGlzLT5rZXkoKV07CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGtleSgpIHsKICAgICAgICByZXR1cm4gJHRoaXMtPmtleXNbJHRoaXMtPmNvdW50ZXJdOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgICR0aGlzLT5jb3VudGVyKys7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIHZhbGlkKCkgewogICAgICAgIGlmICgkdGhpcy0+Y291bnRlciA+PSBzaXplT2YoJHRoaXMtPmRhdGEpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9Cn0K', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(223, 'user', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pIAogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1VzZXIgZXh0ZW5kcyBNTV9FbnRpdHkKewkKCXB1YmxpYyBzdGF0aWMgJE5FV19VU0VSX0lEID0gLTE7CgkKCS8vIHRoaXMgaXMgdXNlZCB0byBjcmVhdGUgYSB1c2VyIG9iamVjdCB3aXRoIHNhbXBsZSBkYXRhIGluIGl0CglwdWJsaWMgc3RhdGljICRTQU1QTEVfVVNFUl9JRCA9IC0xMDsKCQoJcHJpdmF0ZSAkbWVtYmVyc2hpcElkID0gIiI7Cglwcml2YXRlICRzdGF0dXMgPSAiMSI7Cglwcml2YXRlICRwZW5kaW5nU3RhdHVzID0gIjAiOwoJcHJpdmF0ZSAkaW1wb3J0ZWRGbGFnID0gIjAiOwoJcHJpdmF0ZSAkbGFzdFVwZGF0ZWREYXRlID0gbnVsbDsKCXByaXZhdGUgJHN0YXR1c1VwZGF0ZWREYXRlID0gbnVsbDsgCglwcml2YXRlICRzdGF0dXNNZXNzYWdlID0gIiI7Cglwcml2YXRlICRkYXlzQ2FsY01ldGhvZCA9ICJqb2luX2RhdGUiOwoJcHJpdmF0ZSAkZGF5c0NhbGNWYWx1ZSA9ICIiOyAKCXByaXZhdGUgJGJlY2FtZUFjdGl2ZURhdGUgPSBudWxsOwoJcHJpdmF0ZSAkcGhvbmUgPSAiIjsKCXByaXZhdGUgJHVzZXJuYW1lID0gIiI7Cglwcml2YXRlICRlbWFpbCA9ICIiOwoJcHJpdmF0ZSAkZmlyc3ROYW1lID0gIiI7Cglwcml2YXRlICRsYXN0TmFtZSA9ICIiOwoJcHJpdmF0ZSAkcmVnaXN0cmF0aW9uRGF0ZSA9IG51bGw7Cglwcml2YXRlICRjYW5jZWxsYXRpb25EYXRlID0gbnVsbDsKCXByaXZhdGUgJGV4cGlyYXRpb25EYXRlID0gbnVsbDsKCXByaXZhdGUgJG5vdGVzID0gIiI7Cglwcml2YXRlICRzdWJzY3JpYmVkTGlzdElkID0gIiI7IAoJcHJpdmF0ZSAkc3Vic2NyaWJlZFByb3ZpZGVySWQgPSAiIjsKCXByaXZhdGUgJGxhc3RMb2dpbkRhdGUgPSBudWxsOyAKCXByaXZhdGUgJGxhc3RMb2dpbklwQWRkcmVzcyA9ICIiOwoJcHJpdmF0ZSAkbG9naW5Db3VudCA9IC0xOwoJcHJpdmF0ZSAkcGFnZUFjY2Vzc0NvdW50ID0gLTE7Cglwcml2YXRlICRlbWFpbENvdW50ID0gLTE7Cglwcml2YXRlICR3ZWxjb21lRW1haWxTZW50RGF0ZSA9IG51bGw7IAoJcHJpdmF0ZSAkYmlsbGluZ0FkZHJlc3MgPSAiIjsKCXByaXZhdGUgJGJpbGxpbmdDaXR5ID0gIiI7Cglwcml2YXRlICRiaWxsaW5nU3RhdGUgPSAiIjsKCXByaXZhdGUgJGJpbGxpbmdaaXAgPSAiIjsKCXByaXZhdGUgJGJpbGxpbmdDb3VudHJ5ID0gIiI7Cglwcml2YXRlICRzaGlwcGluZ0FkZHJlc3MgPSAiIjsKCXByaXZhdGUgJHNoaXBwaW5nQ2l0eSA9ICIiOwoJcHJpdmF0ZSAkc2hpcHBpbmdTdGF0ZSA9ICIiOwoJcHJpdmF0ZSAkc2hpcHBpbmdaaXAgPSAiIjsKCXByaXZhdGUgJHNoaXBwaW5nQ291bnRyeSA9ICIiOwoJcHJpdmF0ZSAkdG90YWxQYXltZW50cyA9IDA7Cglwcml2YXRlICR0b3RhbFJlZnVuZHMgPSAwOwoJcHJpdmF0ZSAkZm9yZ290UGFzc3dvcmRIYXNoOyAvLyBXb3JkcHJlc3MnIHVzZXJfYWN0aXZhdGlvbl9rZXkKCQoJLy8gaW50ZXJuYWwgdXNlCglwcml2YXRlICRtZW1iZXJzaGlwOwoJcHJpdmF0ZSAkbGFzdE1lbWJlcnNoaXBJZCA9ICIiOwoJcHJpdmF0ZSAkbGFzdE1lbWJlcnNoaXBOYW1lID0gIiI7Cglwcml2YXRlICRsYXN0RGF5c0NhbGNNZXRob2QgPSAiIjsKCXByaXZhdGUgJGxhc3REYXlzQ2FsY1ZhbHVlID0gIiI7IAoJcHJpdmF0ZSAkbGFzdENhbmNlbGxhdGlvbkRhdGUgPSAiIjsKCXByaXZhdGUgJGxhc3RFeHBpcmF0aW9uRGF0ZSA9ICIiOwoJcHJpdmF0ZSAkbGFzdEZpcnN0TmFtZSA9ICIiOwoJcHJpdmF0ZSAkbGFzdExhc3ROYW1lID0gIiI7Cglwcml2YXRlICRsYXN0RW1haWwgPSAiIjsKCXByaXZhdGUgJGxhc3RVc2VybmFtZSA9ICIiOwoJcHJpdmF0ZSAkbGFzdFBob25lID0gIiI7Cglwcml2YXRlICRsYXN0Tm90ZXMgPSAiIjsKCXByaXZhdGUgJGxhc3RTdGF0dXMgPSAiIjsKCXByaXZhdGUgJGxhc3RTdGF0dXNOYW1lID0gIiI7Cglwcml2YXRlICRsYXN0QmlsbGluZ0FkZHJlc3MgPSAiIjsKCXByaXZhdGUgJGxhc3RCaWxsaW5nQ2l0eSA9ICIiOwoJcHJpdmF0ZSAkbGFzdEJpbGxpbmdTdGF0ZSA9ICIiOwoJcHJpdmF0ZSAkbGFzdEJpbGxpbmdaaXAgPSAiIjsKCXByaXZhdGUgJGxhc3RCaWxsaW5nQ291bnRyeSA9ICIiOwoJcHJpdmF0ZSAkbGFzdFNoaXBwaW5nQWRkcmVzcyA9ICIiOwoJcHJpdmF0ZSAkbGFzdFNoaXBwaW5nQ2l0eSA9ICIiOwoJcHJpdmF0ZSAkbGFzdFNoaXBwaW5nU3RhdGUgPSAiIjsKCXByaXZhdGUgJGxhc3RTaGlwcGluZ1ppcCA9ICIiOwoJcHJpdmF0ZSAkbGFzdFNoaXBwaW5nQ291bnRyeSA9ICIiOwoJcHJpdmF0ZSAkc3RhdHVzVXBkYXRlZCA9IGZhbHNlOwoJcHJpdmF0ZSAkc2VuZFdlbGNvbWVFbWFpbEZsYWcgPSB0cnVlOwoJcHJpdmF0ZSAkbWVtYmVyc2hpcExldmVsQ2hhbmdlZEZsYWcgPSBmYWxzZTsKCXByaXZhdGUgJGxhc3RGb3Jnb3RQYXNzd29yZEhhc2g7IC8vIFdvcmRwcmVzcycgdXNlcl9hY3RpdmF0aW9uX2tleQoJCglwcml2YXRlICRvcmlnaW5BZmZpbGlhdGVJZCA9ICIiOwoJcHJpdmF0ZSAkb3JpZ2luU3ViYWZmaWxpYXRlSWQgPSAiIjsgCgkKCXByaXZhdGUgJGlzQ1NWSW1wb3J0ID0gZmFsc2U7Cglwcml2YXRlICRmb3Jnb3R0ZW5GbGFnID0gIjAiOwoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGlkPSIiLCAkZ2V0RGF0YT10cnVlKQoJewoJCWlmKCEoJGlkIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJaWYoaXNzZXQoJGlkKSAmJiAoaW50dmFsKCRpZCkgPiAwIHx8IGludHZhbCgkaWQpID09IHNlbGY6OiRTQU1QTEVfVVNFUl9JRCkpCgkJCXsKCQkJCSR0aGlzLT5pZCA9ICRpZDsKCQkJCQkKCQkJCWlmKCRnZXREYXRhID09IHRydWUpCgkJCQl7CgkJCQkJJHRoaXMtPmdldERhdGEoKTsKCQkJCX0KCQkJfQoJCQllbHNlCgkJCXsKCQkJCSRpZCA9ICIiOwoJCQl9CgkJfQoJfQoJCgkvKgoJICogUXVpY2sgYWNjZXNzIHRvIGN1cnJlbnRseSBsb2dnZWQgaW4gdXNlci4KCSAqIEByZXR1cm4gaW50IFJldHVybnMgdGhlIGlkIGludGVnZXIgb2YgdGhlIHdwLXVzZXIgb2JqZWN0CgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0Q3VycmVudFdQVXNlcklEKCkKCXsgCgkJZ2xvYmFsICRjdXJyZW50X3VzZXI7ICAKCQkKCQkkdXNlcklkID0gZmFsc2U7CgkJCgkJLy8gQWxzbyB2ZXJ5IHJlZHVuZGFudCAuLi4gCgkJaWYgKGlzc2V0KCRjdXJyZW50X3VzZXIpICYmIGlzc2V0KCRjdXJyZW50X3VzZXItPklEKSAmJiBpbnR2YWwoJGN1cnJlbnRfdXNlci0+SUQpPj0wKQoJCXsKCQkJJHVzZXJJZCA9ICRjdXJyZW50X3VzZXItPklEOwoJCX0KCQllbHNlCgkJewoJCQkvLyB0aGlzIHdvdWxkIHByb2JhYmx5IHN1ZmZpY2UKCQkJJHVzZXJJZCA9IGdldF9jdXJyZW50X3VzZXJfaWQoKTsJCgkJfQoJCQoJCXJldHVybiAkdXNlcklkOwoJfSAKCSAKCS8qCgkgKiBRdWljayBhY2Nlc3MgdG8gY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIG9iamVjdC4KCSAqIEByZXR1cm4gTU1fVXNlciBSZXR1cm5zIHRoZSBNTV9Vc2VyIG9iamVjdCAKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRDdXJyZW50V1BVc2VyKCkKCXsgCgkJJHVzZXJJZCA9IHNlbGY6OmdldEN1cnJlbnRXUFVzZXJJRCgpOwoJCWlmKCR1c2VySWQ9PT1mYWxzZSB8fCBpbnR2YWwoJHVzZXJJZCk8PTApCgkJewoJCQkkdXNlciA9IG5ldyBNTV9Vc2VyKDAsZmFsc2UpOwoJCQkKCQkJLy9yZWR1bmRhbnQsIHNhbml0eSBjaGVjawoJCQkkdXNlci0+aW52YWxpZGF0ZSgpOwoJCQlyZXR1cm4gJHVzZXI7CgkJfQoJCXJldHVybiBuZXcgTU1fVXNlcigkdXNlcklkKTsKCX0KCQoJLyoqCgkgKiBMb2NhdGUgYSB1c2VyIHVzaW5nIGFuIGVtYWlsIGFkZHJlc3MuCgkgKgoJICogQHBhcmFtIFN0cmluZyAkZW1haWwgVGhlIGVtYWlsIGFkZHJlc3MgdG8gc2VhcmNoIGZvcgoJICogQHJldHVybiBNTV9Vc2VyIFJldHVybnMgdGhlIHVzZXIgb2JqZWN0LCBhbHdheXMgY2hlY2sgaWYgdGhlIHVzZXIgaXMgdmFsaWQgYmVmb3JlIHVzaW5nCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZmluZEJ5RW1haWwoJGVtYWlsKQoJewoJCSR1c2VyID0gbmV3IE1NX1VzZXIoKTsKCQkKCQlpZihNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9VU0VfQ0hFQ0tPVVRfRk9STV9URVNUX0RBVEEpID09ICIxIikKCQl7CgkJCSRlbWFpbCA9IE1NX1Rlc3REYXRhVXRpbHM6OmNvbnZlcnRUZXN0RW1haWwoJGVtYWlsKTsKCQl9CgkJCgkJaWYoIWVtcHR5KCRlbWFpbCkpCgkJewoJCQkkd3BVc2VyID0gZ2V0X3VzZXJfYnkoImVtYWlsIiwgJGVtYWlsKTsKCQkJCgkJCWlmKCR3cFVzZXIgPT09IGZhbHNlKQoJCQl7CgkJCQkkdXNlci0+aW52YWxpZGF0ZSgpOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJHVzZXItPnNldERhdGEoJHdwVXNlcik7CgkJCX0KCQl9CgkJCgkJcmV0dXJuICR1c2VyOwoJfQoKCXByb3RlY3RlZCBmdW5jdGlvbiBnZXREYXRhKCkKCXsKCQlpZigkdGhpcy0+aWQgIT0gc2VsZjo6JFNBTVBMRV9VU0VSX0lEKQoJCXsKCQkJJHdwVXNlciA9IGdldF91c2VyX2J5KCJpZCIsICR0aGlzLT5pZCk7CgkKCQkJaWYoJHdwVXNlciA9PT0gZmFsc2UpCgkJCXsKCQkJCXBhcmVudDo6aW52YWxpZGF0ZSgpOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJHRoaXMtPnNldERhdGEoJHdwVXNlcik7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJLy8gcG9wdWxhdGUgc2FtcGxlIGRhdGEKCQkJJHRoaXMtPmlkID0gc2VsZjo6JFNBTVBMRV9VU0VSX0lEOwoJCQkkdGhpcy0+dXNlcm5hbWUgPSAic2FtcGxldXNlcm5hbWUiOwoJCQkkdGhpcy0+ZW1haWwgPSAic2FtcGxlQHlvdXJkb21haW4uY29tIjsKCQkJJHRoaXMtPmZpcnN0TmFtZSA9ICJTYW1wbGVGaXJzdE5hbWUiOwoJCQkkdGhpcy0+bGFzdE5hbWUgPSAiU2FtcGxlTGFzdE5hbWUiOwoJCQkkdGhpcy0+cGhvbmUgPSAiKDU1NSkgNTU1LTU1NTUiOwoJCQkkdGhpcy0+bm90ZXMgPSAiU2FtcGxlIG1lbWJlciBub3RlcyI7CgkJCSR0aGlzLT5tZW1iZXJzaGlwSWQgPSBNTV9NZW1iZXJzaGlwTGV2ZWw6OmdldERlZmF1bHRNZW1iZXJzaGlwKCktPmdldElkKCk7CgkJCSR0aGlzLT5zdGF0dXMgPSAkdGhpcy0+bGFzdFN0YXR1cyA9IE1NX1N0YXR1czo6JEFDVElWRTsKCQkJJHRoaXMtPmJpbGxpbmdBZGRyZXNzID0gIjEyMyBTYW1wbGUgU3QuIjsKCQkJJHRoaXMtPmJpbGxpbmdDaXR5ID0gIlNhbXBsZSBDaXR5IjsKCQkJJHRoaXMtPmJpbGxpbmdTdGF0ZSA9ICJOWSI7CgkJCSR0aGlzLT5iaWxsaW5nWmlwID0gIjEyMzQ1IjsKCQkJJHRoaXMtPmJpbGxpbmdDb3VudHJ5ID0gIlVTIjsKCQkJJHRoaXMtPnNoaXBwaW5nQWRkcmVzcyA9ICIxMjMgU2FtcGxlIFN0LiI7CgkJCSR0aGlzLT5zaGlwcGluZ0NpdHkgPSAiU2FtcGxlIENpdHkiOwoJCQkkdGhpcy0+c2hpcHBpbmdTdGF0ZSA9ICJOWSI7CgkJCSR0aGlzLT5zaGlwcGluZ1ppcCA9ICIxMjM0NSI7CgkJCSR0aGlzLT5zaGlwcGluZ0NvdW50cnkgPSAiVVMiOwoJCQkkdGhpcy0+ZGF5c0NhbGNNZXRob2QgPSBNTV9EYXlzQ2FsY3VsYXRpb25UeXBlczo6JEpPSU5fREFURTsKCQkJJHRoaXMtPnJlZ2lzdHJhdGlvbkRhdGUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJJHRoaXMtPmxhc3RMb2dpbkRhdGUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJJHRoaXMtPmJlY2FtZUFjdGl2ZURhdGUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCSR0aGlzLT5sYXN0VXBkYXRlZERhdGUgPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkJJHRoaXMtPnN0YXR1c1VwZGF0ZWREYXRlID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCQoJCQlwYXJlbnQ6OnZhbGlkYXRlKCk7CgkJfQoJfQoKCXB1YmxpYyBmdW5jdGlvbiBzZXREYXRhKCR3cFVzZXIpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCWlmKCR3cFVzZXIgaW5zdGFuY2VvZiBXUF9Vc2VyKQoJCXsKCQkJdHJ5CgkJCXsKCQkJCSR0aGlzLT5pZCA9ICR3cFVzZXItPklEOwoJCQkJJHRoaXMtPnVzZXJuYW1lID0gJHdwVXNlci0+dXNlcl9sb2dpbjsKCQkJCSR0aGlzLT5yZWdpc3RyYXRpb25EYXRlID0gJHdwVXNlci0+dXNlcl9yZWdpc3RlcmVkOwoJCQkJJHRoaXMtPmVtYWlsID0gJHdwVXNlci0+dXNlcl9lbWFpbDsKCQkJCQoJCQkJLy8gZ2V0IE1NIHVzZXIgZGF0YQoJCQkJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfVVNFUl9EQVRBLiIgV0hFUkUgd3BfdXNlcl9pZD0neyR0aGlzLT5pZH0nIExJTUlUIDE7IjsKCQkJCSRtbVVzZXJEYXRhID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCQkKCQkJCWlmKCRtbVVzZXJEYXRhICYmIGlzc2V0KCRtbVVzZXJEYXRhLT53cF91c2VyX2lkKSkKCQkJCXsKCQkJCQkkdGhpcy0+Zmlyc3ROYW1lID0gJG1tVXNlckRhdGEtPmZpcnN0X25hbWU7CgkJCQkJJHRoaXMtPmxhc3ROYW1lID0gJG1tVXNlckRhdGEtPmxhc3RfbmFtZTsKCQkJCQkkdGhpcy0+cGhvbmUgPSAkbW1Vc2VyRGF0YS0+cGhvbmU7CgkJCQkJJHRoaXMtPm5vdGVzID0gJG1tVXNlckRhdGEtPm5vdGVzOwoJCQkJCSR0aGlzLT5tZW1iZXJzaGlwSWQgPSAkbW1Vc2VyRGF0YS0+bWVtYmVyc2hpcF9sZXZlbF9pZDsKCQkJCQkkdGhpcy0+c3RhdHVzID0gJHRoaXMtPmxhc3RTdGF0dXMgPSAkbW1Vc2VyRGF0YS0+c3RhdHVzOwoJCQkJCSR0aGlzLT5wZW5kaW5nU3RhdHVzID0gJG1tVXNlckRhdGEtPnBlbmRpbmdfc3RhdHVzOwoJCQkJCSR0aGlzLT5pbXBvcnRlZEZsYWcgPSAkbW1Vc2VyRGF0YS0+aW1wb3J0ZWQ7CgkJCQkJJHRoaXMtPmJpbGxpbmdBZGRyZXNzID0gJG1tVXNlckRhdGEtPmJpbGxpbmdfYWRkcmVzczE7CgkJCQkJJHRoaXMtPmJpbGxpbmdDaXR5ID0gJG1tVXNlckRhdGEtPmJpbGxpbmdfY2l0eTsKCQkJCQkkdGhpcy0+YmlsbGluZ1N0YXRlID0gJG1tVXNlckRhdGEtPmJpbGxpbmdfc3RhdGU7CgkJCQkJJHRoaXMtPmJpbGxpbmdaaXAgPSAkbW1Vc2VyRGF0YS0+YmlsbGluZ19wb3N0YWxfY29kZTsKCQkJCQkkdGhpcy0+YmlsbGluZ0NvdW50cnkgPSAkbW1Vc2VyRGF0YS0+YmlsbGluZ19jb3VudHJ5OwoJCQkJCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MgPSAkbW1Vc2VyRGF0YS0+c2hpcHBpbmdfYWRkcmVzczE7CgkJCQkJJHRoaXMtPnNoaXBwaW5nQ2l0eSA9ICRtbVVzZXJEYXRhLT5zaGlwcGluZ19jaXR5OwoJCQkJCSR0aGlzLT5zaGlwcGluZ1N0YXRlID0gJG1tVXNlckRhdGEtPnNoaXBwaW5nX3N0YXRlOwoJCQkJCSR0aGlzLT5zaGlwcGluZ1ppcCA9ICRtbVVzZXJEYXRhLT5zaGlwcGluZ19wb3N0YWxfY29kZTsKCQkJCQkkdGhpcy0+c2hpcHBpbmdDb3VudHJ5ID0gJG1tVXNlckRhdGEtPnNoaXBwaW5nX2NvdW50cnk7CgkJCQkJJHRoaXMtPmxhc3RMb2dpbkRhdGUgPSAkbW1Vc2VyRGF0YS0+bGFzdF9sb2dpbl9kYXRlOwoJCQkJCSR0aGlzLT5kYXlzQ2FsY01ldGhvZCA9ICRtbVVzZXJEYXRhLT5kYXlzX2NhbGNfbWV0aG9kOwoJCQkJCQoJCQkJCS8vIFRoaXMgaXMgYSBmYWlsc2FmZSBpbiBjYXNlIHRoZSBkYXlzIGNhbGMgbWV0aG9kIGlzbid0IHNldC4gVGhpcyBjYW4gaGFwcGVuCgkJCQkJLy8gd2l0aCBtaWdyYXRlZCBhY2NvdW50cyBmcm9tIE1NIDEueCB0byBNTSAyLngKCQkJCQlpZihlbXB0eSgkdGhpcy0+ZGF5c0NhbGNNZXRob2QpKQoJCQkJCXsKCQkJCQkJJHRoaXMtPmRheXNDYWxjTWV0aG9kID0gTU1fRGF5c0NhbGN1bGF0aW9uVHlwZXM6OiRKT0lOX0RBVEU7CgkJCQkJfQoJCQkJCQoJCQkJCSR0aGlzLT5kYXlzQ2FsY1ZhbHVlID0gJG1tVXNlckRhdGEtPmRheXNfY2FsY192YWx1ZTsKCQkJCQkkdGhpcy0+c3RhdHVzTWVzc2FnZSA9ICRtbVVzZXJEYXRhLT5zdGF0dXNfbWVzc2FnZTsKCQkJCQkkdGhpcy0+YmVjYW1lQWN0aXZlRGF0ZSA9ICRtbVVzZXJEYXRhLT5iZWNhbWVfYWN0aXZlOwoJCQkJCSR0aGlzLT53ZWxjb21lRW1haWxTZW50RGF0ZSA9ICRtbVVzZXJEYXRhLT53ZWxjb21lX2VtYWlsX3NlbnQ7CgkJCQkJJHRoaXMtPmxhc3RVcGRhdGVkRGF0ZSA9ICRtbVVzZXJEYXRhLT5sYXN0X3VwZGF0ZWQ7CgkJCQkJJHRoaXMtPnN0YXR1c1VwZGF0ZWREYXRlID0gJG1tVXNlckRhdGEtPnN0YXR1c191cGRhdGVkOwoJCQkJCSR0aGlzLT5leHBpcmF0aW9uRGF0ZSA9ICRtbVVzZXJEYXRhLT5leHBpcmF0aW9uX2RhdGU7CgkJCQkJJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGUgPSAkbW1Vc2VyRGF0YS0+Y2FuY2VsbGF0aW9uX2RhdGU7CgkJCQkJJHRoaXMtPnN1YnNjcmliZWRMaXN0SWQgPSAoaXNzZXQoJG1tVXNlckRhdGEtPnN1YnNjcmliZWRfbGlzdF9pZCkpID8gJG1tVXNlckRhdGEtPnN1YnNjcmliZWRfbGlzdF9pZCA6ICIiOwoJCQkJCSR0aGlzLT5zdWJzY3JpYmVkUHJvdmlkZXJJZCA9IChpc3NldCgkbW1Vc2VyRGF0YS0+c3Vic2NyaWJlZF9wcm92aWRlcl9pZCkpID8gJG1tVXNlckRhdGEtPnN1YnNjcmliZWRfcHJvdmlkZXJfaWQgOiAiIjsKCQkJCQkkdGhpcy0+bWVtYmVyc2hpcExldmVsQ2hhbmdlZEZsYWcgPSBmYWxzZTsJCgkJCQkJJHRoaXMtPmZvcmdvdFBhc3N3b3JkSGFzaCA9ICR0aGlzLT5sYXN0Rm9yZ290UGFzc3dvcmRIYXNoID0gJHdwVXNlci0+dXNlcl9hY3RpdmF0aW9uX2tleTsKCQkJCQkKCQkJCQkkdGhpcy0+b3JpZ2luQWZmaWxpYXRlSWQgPSAkbW1Vc2VyRGF0YS0+b3JpZ2luX2FmZmlsaWF0ZV9pZDsKCQkJCQkkdGhpcy0+b3JpZ2luU3ViYWZmaWxpYXRlSWQgPSAkbW1Vc2VyRGF0YS0+b3JpZ2luX3N1YmFmZmlsaWF0ZV9pZDsKCQkJCQkkdGhpcy0+Zm9yZ290dGVuRmxhZyA9ICRtbVVzZXJEYXRhLT5mb3Jnb3R0ZW47CgkJCQl9CgkJCQkKCQkJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQkJfQoJCQljYXRjaCAoRXhjZXB0aW9uICRleCkgewoJCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcGFyZW50OjppbnZhbGlkYXRlKCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gY29tbWl0RGF0YSgpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCS8vIGNoZWNrIHRvIG1ha2Ugc3VyZSBlbWFpbCBpcyBzZXQKCQlpZigoaXNzZXQoJHRoaXMtPmVtYWlsKSAmJiAhZW1wdHkoJHRoaXMtPmVtYWlsKSkpCgkJewoJCQkvLyBpZiB1c2VybmFtZSBpcyBub3Qgc2V0IHRoZW4gc2V0IHVzZXJuYW1lIHRvIGVtYWlsCgkJCWlmKCFpc3NldCgkdGhpcy0+dXNlcm5hbWUpIHx8IGVtcHR5KCR0aGlzLT51c2VybmFtZSkpCgkJCXsKCQkJCSR0aGlzLT51c2VybmFtZSA9ICR0aGlzLT5lbWFpbDsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIG9yIHVwZGF0ZSBtZW1iZXIuIEVtYWlsIGlzIHJlcXVpcmVkLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkvLyBjaGVjayBpZiB0aGlzIGNvbW1pdCBzaG91bGQgdXBkYXRlIGEgdXNlciBvZiBwZW5kaW5nL2Vycm9yIHN0YXR1cwoJCSRpc1BlbmRpbmdVc2VyID0gJHRoaXMtPmlzUGVuZGluZ1VzZXIoKTsKCQkKCQkvLyBkZXRlcm1pbmUgaWYgdGhpcyBpcyBhbiBpbnNlcnQgb3IgYW4gdXBkYXRlCgkJJGlzVXBkYXRlID0gZmFsc2U7CgkJaWYoaXNzZXQoJHRoaXMtPmlkKSAmJiAhZW1wdHkoJHRoaXMtPmlkKSkKCQl7CgkJCS8vIGRvdWJsZSBjb25maXJtIHRoYXQgdGhpcyBpcyBhbiB1cGRhdGUgLS0gbmVlZCB0byBkbyB0aGlzIGluIGNhc2UgdGhlIFdvcmRQcmVzcyB1c2VyIGFscmVhZHkgZXhpc3RzCgkJCS8vIGJ1dCB0aGUgTU0gdXNlciBkb2Vzbid0CgkJCSRzcWwgPSAiU0VMRUNUICogRlJPTSAiLk1NX1RBQkxFX1VTRVJfREFUQS4iIFdIRVJFIHdwX3VzZXJfaWQ9J3skdGhpcy0+aWR9JyBMSU1JVCAxOyI7CgkJCSRtbVVzZXJEYXRhID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCQoJCQlpZigkbW1Vc2VyRGF0YSAmJiBpc3NldCgkbW1Vc2VyRGF0YS0+d3BfdXNlcl9pZCkpCgkJCXsKCQkJCSRpc1VwZGF0ZSA9IHRydWU7CgkJCX0KCQl9CgkJCgkJLy8gaWYgdGhpcyBpcyBub3QgYW4gdXBkYXRlIGZvciBhbiBleGlzdGluZyB1c2VyIG9yIGlmIGl0IGlzIGFuZCB0aGV5J3JlIGNoYW5naW5nIHRoZWlyIGVtYWlsLCAKCQkvLyBjaGVjayBpZiB0aGUgZW1haWwgaXMgYWxyZWFkeSBpbiB1c2UgCgkJJGlzTWlncmF0aW9uID0gZmFsc2U7CgkJJGV4aXN0aW5nV1BVc2VySWQgPSBlbWFpbF9leGlzdHMoJHRoaXMtPmVtYWlsKTsKCQlpZigoISRpc1VwZGF0ZSB8fCAoIWVtcHR5KCR0aGlzLT5sYXN0RW1haWwpICYmIChzdHJ0b2xvd2VyKCR0aGlzLT5sYXN0RW1haWwpICE9IHN0cnRvbG93ZXIoJHRoaXMtPmVtYWlsKSkpKSAmJiAkZXhpc3RpbmdXUFVzZXJJZCkKCQl7CgkJCS8vIG1ha2Ugc3VyZSBleGlzdGluZyBXb3JkUHJlc3MgdXNlciBpcyBub3QgYW4gYWRtaW5pc3RyYXRvcgoJCQkkd3BVc2VyRGF0YSA9IGdldF91c2VyZGF0YSgkZXhpc3RpbmdXUFVzZXJJZCk7CgkJCQoJCQlpZigkd3BVc2VyRGF0YSkKCQkJewoJCQkJJHdwVXNlclJvbGVzID0gaW1wbG9kZSgnLCAnLCAkd3BVc2VyRGF0YS0+cm9sZXMpOwkKCQkJCQoJCQkJaWYoKCR3cFVzZXJSb2xlcyA9PSBNTV9Sb2xlOjokUk9MRV9BRE1JTklTVFJBVE9SKSB8fCAoaXNfYXJyYXkoJHdwVXNlclJvbGVzKSAmJiBpbl9hcnJheShNTV9Sb2xlOjokUk9MRV9BRE1JTklTVFJBVE9SLCAkd3BVc2VyUm9sZXMpKSkKCQkJCXsKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDYW5ub3QgY3JlYXRlIG1lbWJlci4gJyIuJHRoaXMtPmVtYWlsLiInIGlzIGFzc29jaWF0ZWQgd2l0aCBhIFdvcmRQcmVzcyBhZG1pbmlzdHJhdG9yLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQkJfQoJCQl9CgkJCQoJCQlpZigkdGhpcy0+Y3JlYXRlTU1Vc2VyRm9yRXhpc3RpbmdXUFVzZXIoJGV4aXN0aW5nV1BVc2VySWQpID09IGZhbHNlKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJBIG1lbWJlciB3aXRoIGVtYWlsICciLiR0aGlzLT5lbWFpbC4iJyBhbHJlYWR5IGV4aXN0cy4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCQllbHNlIAoJCQl7CgkJCQkkdGhpcy0+aWQgPSAkZXhpc3RpbmdXUFVzZXJJZDsKCQkJCSRpc01pZ3JhdGlvbiA9IHRydWU7CgkJCX0KCQl9CgkJCgkJLy8gaWYgdGhpcyBpcyBub3QgYW4gdXBkYXRlIGZvciBhbiBleGlzdGluZyB1c2VyIG9yIGlmIGl0IGlzIGFuZCB0aGV5J3JlIGNoYW5naW5nIHRoZWlyIHVzZXJuYW1lLAoJCS8vIGNoZWNrIGlmIHRoZSB1c2VybmFtZSBpcyBhbHJlYWR5IGluIHVzZQoJCSRleGlzdGluZ1dQVXNlcklkID0gdXNlcm5hbWVfZXhpc3RzKCR0aGlzLT51c2VybmFtZSk7CgkJaWYoKCghJGlzTWlncmF0aW9uICYmICEkaXNVcGRhdGUpIHx8ICghZW1wdHkoJHRoaXMtPmxhc3RVc2VybmFtZSkgJiYgKCR0aGlzLT5sYXN0VXNlcm5hbWUgIT0gJHRoaXMtPnVzZXJuYW1lKSkpICYmICRleGlzdGluZ1dQVXNlcklkKQoJCXsKCQkJLy8gbWFrZSBzdXJlIGV4aXN0aW5nIFdvcmRQcmVzcyB1c2VyIGlzIG5vdCBhbiBhZG1pbmlzdHJhdG9yCgkJCSR3cFVzZXJEYXRhID0gZ2V0X3VzZXJkYXRhKCRleGlzdGluZ1dQVXNlcklkKTsKCQkJCQoJCQlpZigkd3BVc2VyRGF0YSkKCQkJewoJCQkJJHdwVXNlclJvbGVzID0gaW1wbG9kZSgnLCAnLCAkd3BVc2VyRGF0YS0+cm9sZXMpOwoJCQkKCQkJCWlmKCgkd3BVc2VyUm9sZXMgPT0gTU1fUm9sZTo6JFJPTEVfQURNSU5JU1RSQVRPUikgfHwgKGlzX2FycmF5KCR3cFVzZXJSb2xlcykgJiYgaW5fYXJyYXkoTU1fUm9sZTo6JFJPTEVfQURNSU5JU1RSQVRPUiwgJHdwVXNlclJvbGVzKSkpCgkJCQl7CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ2Fubm90IGNyZWF0ZSBtZW1iZXIuICciLiR0aGlzLT51c2VybmFtZS4iJyBpcyBhc3NvY2lhdGVkIHdpdGggYSBXb3JkUHJlc3MgYWRtaW5pc3RyYXRvci4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJCX0KCQkJfQoJCQkKCQkJaWYoJHRoaXMtPmNyZWF0ZU1NVXNlckZvckV4aXN0aW5nV1BVc2VyKCRleGlzdGluZ1dQVXNlcklkKSA9PSBmYWxzZSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQSBtZW1iZXIgd2l0aCB1c2VybmFtZSAnIi4kdGhpcy0+dXNlcm5hbWUuIicgYWxyZWFkeSBleGlzdHMuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQkJZWxzZSAKCQkJewoJCQkJJHRoaXMtPmlkID0gJGV4aXN0aW5nV1BVc2VySWQ7CgkJCQkkaXNNaWdyYXRpb24gPSB0cnVlOwoJCQl9CgkJfQoJCQoJCS8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBzdGF0dXMgb2YgYW4gYWN0aXZlIHVzZXIgaXMgbm90IGNoYW5nZWQgdG8gcGVuZGluZy9lcnJvciBzdGF0dXMKCQlpZigkaXNVcGRhdGUgJiYgISRpc1BlbmRpbmdVc2VyICYmICgkdGhpcy0+c3RhdHVzID09IE1NX1N0YXR1czo6JFBFTkRJTkdfQUNUSVZBVElPTiB8fCAkdGhpcy0+c3RhdHVzID09IE1NX1N0YXR1czo6JEVSUk9SKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNhbm5vdCBjaGFuZ2Ugc3RhdHVzIG9mIGFuIGFjdGl2ZSBtZW1iZXIgdG8gIi5zdHJ0b2xvd2VyKCR0aGlzLT5nZXRTdGF0dXNOYW1lKCkpLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJLy8gZGV0ZXJtaW5lIGlmIHRoaXMgbWVtYmVyIGlzIGJlY29taW5nIGFjdGl2ZSBmb3IgdGhlIGZpcnN0IHRpbWUKCQkkYmVjYW1lQWN0aXZlID0gZmFsc2U7CgkJaWYoJHRoaXMtPnN0YXR1cyA9PSBNTV9TdGF0dXM6OiRBQ1RJVkUgJiYgZW1wdHkoJHRoaXMtPmJlY2FtZUFjdGl2ZURhdGUpICYmICFlbXB0eSgkdGhpcy0+bWVtYmVyc2hpcElkKSkKCQl7CgkJCSRiZWNhbWVBY3RpdmUgPSB0cnVlOwoJCQkkdGhpcy0+YmVjYW1lQWN0aXZlRGF0ZSA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCX0KCQkKCQkvLyBjaGVjayBpZiBtZW1iZXJzaGlwIGxldmVsIGlzIHZhbGlkIGFuZCBhY3RpdmUKCQlpZighJGlzVXBkYXRlIHx8ICR0aGlzLT5tZW1iZXJzaGlwTGV2ZWxDaGFuZ2VkRmxhZykKCQl7CgkJCSRtZW1iZXJzaGlwID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpOwoJCQlpZigkbWVtYmVyc2hpcC0+aXNWYWxpZCgpICYmICEkbWVtYmVyc2hpcC0+aXNBY3RpdmUoKSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiTWVtYmVyc2hpcCBsZXZlbCAneyRtZW1iZXJzaGlwLT5nZXROYW1lKCl9JyBpcyBub3QgYWN0aXZlLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCQoJCU1NX1RyYW5zYWN0aW9uOjpiZWdpbigpOwoJCQoJCWlmKCRpc1VwZGF0ZSB8fCAkaXNNaWdyYXRpb24pCgkJewoJCQkvLyBXUCA0LjMgY2hhbmdlcy9jaGVja3MKCQkJc3dpdGNoKHRydWUpCgkJCXsKCQkJCS8vIGlmIGEgcGFzc3dvcmQgaGFzIG5vdCBiZWVuIGVudGVyZWQsIG5vIG5lZWQgdG8gc2VuZCB0aGUgcGFzc3dvcmQgY2hhbmdlIGVtYWlsCgkJCQljYXNlIGlzX251bGwoJHRoaXMtPmdldFBhc3N3b3JkKCkpOgoJCQkJCWFkZF9maWx0ZXIoJ3NlbmRfcGFzc3dvcmRfY2hhbmdlX2VtYWlsJywgJ19fcmV0dXJuX2ZhbHNlJyk7CgkJCQkJYnJlYWs7CgkJCQkKCQkJCS8vIGlmIGEgcGFzc3dvcmQgV0FTIHByb3ZpZGVkLCBsZXQncyBtYWtlIHN1cmUgaXQncyBkaWZmZXJlbnQgdGhhbiB0aGUgb25lIHdlIGFscmVhZHkgCgkJCQkvLyBoYXZlIG9uIGZpbGUuIElmIHNvLCBzZW5kIHRoZSBwYXNzd29yZCBjaGFuZ2UgZW1haWwsIGlmIG5vdCwgZG8gbm90IHNlbmQgaXQKCQkJCWRlZmF1bHQ6CgkJCQkJJHdwVXNlciA9IG5ldyBXUF9Vc2VyKCR0aGlzLT5nZXRJZCgpKTsKCQkJCQlpZih3cF9jaGVja19wYXNzd29yZCggJHRoaXMtPmdldFBhc3N3b3JkKCksICR3cFVzZXItPmRhdGEtPnVzZXJfcGFzcywgJHdwVXNlci0+SUQpKQoJCQkJCXsKCQkJCQkJYWRkX2ZpbHRlcignc2VuZF9wYXNzd29yZF9jaGFuZ2VfZW1haWwnLCAnX19yZXR1cm5fZmFsc2UnKTsKCQkJCQl9CgkJCQkJYnJlYWs7CgkJCX0KCQkJIAoJCQkvLyB1cGRhdGUgV29yZFByZXNzIHVzZXIgCgkJCSRyZXN1bHQgPSB3cF91cGRhdGVfdXNlcigkdGhpcy0+cHJlcGFyZVdQVXNlckRhdGEoJGlzVXBkYXRlKSk7IAoJCQkKCQkJaWYoaXNfd3BfZXJyb3IoJHJlc3VsdCkpCgkJCXsKCQkJCU1NX1RyYW5zYWN0aW9uOjpyb2xsYmFjaygpOwoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzdWx0LT5nZXRfZXJyb3JfbWVzc2FnZSgpLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCQkKCQkJLy8gV29yZFByZXNzIGRvZXNuJ3QgYWxsb3cgY2VydGFpbiBmaWVsZHMgdG8gYmUgdXBkYXRlZCB2aWEgd3BfdWRhdGVfdXNlcigpIChFeC4gdXNlcl9sb2dpbiBvciB1c2VyX2FjdGl2YXRpb25fa2V5KQoJCQkvLyBzbyB3ZSBuZWVkIHRvIGRvIGl0IG1hbnVhbGx5CgkJCSRhZGRpdGlvbmFsVXBkYXRlcyA9IGFycmF5KCk7CgkJCXN3aXRjaCh0cnVlKQoJCQl7CiAgCQkJY2FzZSAoIWVtcHR5KCR0aGlzLT5sYXN0VXNlcm5hbWUpICYmICgkdGhpcy0+dXNlcm5hbWUgIT0gJHRoaXMtPmxhc3RVc2VybmFtZSkpOgogIAkJCSAgJGFkZGl0aW9uYWxVcGRhdGVzWyd1c2VyX2xvZ2luJ10gPSAkdGhpcy0+dXNlcm5hbWU7CiAgCQkJICBicmVhazsKICAJCQkgIAogIAkJCSBjYXNlICgkdGhpcy0+Zm9yZ290UGFzc3dvcmRIYXNoICE9ICR0aGlzLT5sYXN0Rm9yZ290UGFzc3dvcmRIYXNoKToKICAJCQkgICRhZGRpdGlvbmFsVXBkYXRlc1sndXNlcl9hY3RpdmF0aW9uX2tleSddID0gJHRoaXMtPmZvcmdvdFBhc3N3b3JkSGFzaDsKICAJCQkgIGJyZWFrOwoJCQl9CgkJCQoJCQlpZihjb3VudCgkYWRkaXRpb25hbFVwZGF0ZXMpKQoJCQl7CiAgCQkJJHdoZXJlQ2xhdXNlID0gYXJyYXkoIklEIiA9PiAkdGhpcy0+aWQpOwoJCQkJJHJlc3VsdCA9ICR3cGRiLT51cGRhdGUoJHdwZGItPnVzZXJzLCAkYWRkaXRpb25hbFVwZGF0ZXMsICR3aGVyZUNsYXVzZSk7CgkJCX0KCQkJCgkJCWlmKCRyZXN1bHQgPT09IGZhbHNlKQoJCQl7CgkJCQlNTV9UcmFuc2FjdGlvbjo6cm9sbGJhY2soKTsKCQkJCQoJCQkJJG1tRmllbGRzID0gYXJyYXkoKTsKCQkJCQoJCQkJaWYoaXNzZXQoJGFkZGl0aW9uYWxVcGRhdGVzWyd1c2VyX2xvZ2luJ10pKQoJCQkJewogIAkJCQkkbW1GaWVsZHNbXSA9ICJ1c2VybmFtZSI7CgkJCQl9CgkJCQkKCQkJCWlmKGlzc2V0KCRhZGRpdGlvbmFsVXBkYXRlc1sndXNlcl9hY3RpdmF0aW9uX2tleSddKSkKCQkJCXsKICAJCQkJJG1tRmllbGRzW10gPSAicGFzc3dvcmQgcmVzZXQgYWN0aXZhdGlvbiBrZXkiOwoJCQkJfQoJCQkJCgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gdXBkYXRlICciIC4gaW1wbG9kZSgiJyBhbmQgJyIsICRtbUZpZWxkcyksIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJCQoJCQkvLyB1cGRhdGUgTU0gdXNlciBkYXRhCgkJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCJ3cF91c2VyX2lkIiA9PiAkdGhpcy0+aWQpOwoJCQkkcmVzdWx0ID0gJHdwZGItPnVwZGF0ZShNTV9UQUJMRV9VU0VSX0RBVEEsICR0aGlzLT5wcmVwYXJlTU1Vc2VyRGF0YSgpLCAkd2hlcmVDbGF1c2UpOwoJCQkKCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCXsKCQkJCU1NX1RyYW5zYWN0aW9uOjpyb2xsYmFjaygpOwoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHVwZGF0ZSBtZW1iZXI6ICIuJHdwZGItPmxhc3RfZXJyb3IsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCQl9CgkJfQoJCWVsc2UKCQl7CgkJCS8vIGluc2VydCBXb3JkUHJlc3MgdXNlcgoJCQlpZihpc19udWxsKCR0aGlzLT5nZXRQYXNzd29yZCgpKSkKCQkJewoJCQkJJHRoaXMtPnNldFBhc3N3b3JkKE1NX1V0aWxzOjpjcmVhdGVSYW5kb21TdHJpbmcoKSk7CgkJCX0KCQkJCgkJCS8vIFdQIDQuMyBjaGFuZ2U6IHNpbmNlIHdlJ3JlIGNyZWF0aW5nIGEgbmV3IHVzZXIsIG5vIG5lZWQgdG8gc2VuZCB0aGUgcGFzc3dvcmQgY2hhbmdlIGVtYWlsCgkJCWFkZF9maWx0ZXIoJ3NlbmRfcGFzc3dvcmRfY2hhbmdlX2VtYWlsJywgJ19fcmV0dXJuX2ZhbHNlJyk7CgkJCQoJCQkkcmVzdWx0ID0gd3BfaW5zZXJ0X3VzZXIoJHRoaXMtPnByZXBhcmVXUFVzZXJEYXRhKCRpc1VwZGF0ZSkpOwoJCQkKCQkJaWYoaXNfd3BfZXJyb3IoJHJlc3VsdCkpCgkJCXsKCQkJCU1NX1RyYW5zYWN0aW9uOjpyb2xsYmFjaygpOwoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzdWx0LT5nZXRfZXJyb3JfbWVzc2FnZSgpLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCQkKCQkJJHRoaXMtPmlkID0gJHJlc3VsdDsKCQkJCgkJCS8vIGluc2VydCBNTSB1c2VyIGRhdGEKCQkJJHJlc3VsdCA9ICR3cGRiLT5pbnNlcnQoTU1fVEFCTEVfVVNFUl9EQVRBLCAkdGhpcy0+cHJlcGFyZU1NVXNlckRhdGEoKSk7CgkJCQoJCQlpZigkcmVzdWx0ID09PSBmYWxzZSkKCQkJewoJCQkJTU1fVHJhbnNhY3Rpb246OnJvbGxiYWNrKCk7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gY3JlYXRlIG1lbWJlcjogIi4kd3BkYi0+bGFzdF9lcnJvciwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJCgkJTU1fVHJhbnNhY3Rpb246OmNvbW1pdCgpOwoJCXBhcmVudDo6dmFsaWRhdGUoKTsKCQkKCQlNTV9TZXNzaW9uOjp2YWx1ZShNTV9TZXNzaW9uOjokS0VZX0xBU1RfVVNFUl9JRCwgJHRoaXMtPmlkKTsKCQlNTV9TZXNzaW9uOjp2YWx1ZShNTV9TZXNzaW9uOjokS0VZX0NVUlJfVVNFUl9JRCwgJHRoaXMtPmlkKTsKCQkKCQkvLyBzZW5kIHdlbGNvbWUgZW1haWwgaWYgdXNlciBqdXN0IGJlY2FtZSBhY3RpdmUgb3IgaWYgaXQgaGFzbid0IGJlZW4gc2VudAoJCWlmKCRiZWNhbWVBY3RpdmUgJiYgZW1wdHkoJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlKSAmJiAkdGhpcy0+ZG9TZW5kV2VsY29tZUVtYWlsKCkpCgkJewoJCQkkdGhpcy0+c2VuZFdlbGNvbWVFbWFpbCgpOwoJCX0KCgkJLy8gV2hlbiBhIG5ldyBtb2RpZmljYXRpb24gaXMgbWFkZSAob3IgbmV3IHVzZXIpIHN1YnNlcXVlbnQKCQkvLyByZWZlcmVuY2VzIHRvIG5ldyBVc2VyKGlkKSB1c2Ugb2xkIGRhdGEgYXMgdGhlIFdQX1VzZXI6OmdldF9kYXRhX2J5CgkJLy8gdXNlcyB3cF9jYWNoZSBtZWNoYW5pc20uICBUaGlzIGZhbHNpZmllcyB0aGUgY2FjaGUgZWxlbWVudCB3aGljaAoJCS8vIHdpbGwgZW5mb3JjZSBhIG5ldyBsb29rIHVwLgoJCWlmKCRpc1VwZGF0ZSkKCQl7CgkJCXdwX2NhY2hlX3NldCgkdGhpcy0+aWQsZmFsc2UsInVzZXJzIik7CgkJfQoJCQoJCS8vIGRpc3BhdGNoIE1lbWJlck1vdXNlIGV2ZW50cwoJCWlmKCRiZWNhbWVBY3RpdmUpCgkJewoJCQlkb19hY3Rpb24oTU1fRXZlbnQ6OiRNRU1CRVJfQURELCBNTV9FdmVudDo6cGFja2FnZU1lbWJlckRhdGEoJHRoaXMtPmdldElkKCkpKTsKCQl9CgkJZWxzZSBpZigkdGhpcy0+c3RhdHVzICE9IE1NX1N0YXR1czo6JFBFTkRJTkdfQUNUSVZBVElPTiAmJiAkdGhpcy0+c3RhdHVzICE9IE1NX1N0YXR1czo6JEVSUk9SKQoJCXsKCQkJJGFjY3RJbmZvQ2hhbmdlcyA9ICR0aGlzLT5nZXRBY2N0SW5mb0NoYW5nZXMoKTsKCQkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0TWVtYmVyc2hpcElkKSAmJiAoJHRoaXMtPm1lbWJlcnNoaXBJZCAhPSAkdGhpcy0+bGFzdE1lbWJlcnNoaXBJZCkpCgkJCXsKCQkJCWRvX2FjdGlvbihNTV9FdmVudDo6JE1FTUJFUl9NRU1CRVJTSElQX0NIQU5HRSwgTU1fRXZlbnQ6OnBhY2thZ2VNZW1iZXJEYXRhKCR0aGlzLT5nZXRJZCgpLCBhcnJheSgibWVtYmVyc2hpcF9uYW1lIj0+JHRoaXMtPmxhc3RNZW1iZXJzaGlwTmFtZSwibWVtYmVyc2hpcF9pZCI9PiR0aGlzLT5sYXN0TWVtYmVyc2hpcElkKSkpOwoJCQl9CgkJCWVsc2UgaWYoIWVtcHR5KCR0aGlzLT5sYXN0U3RhdHVzKSAmJiAoJHRoaXMtPnN0YXR1cyAhPSAkdGhpcy0+bGFzdFN0YXR1cykpCgkJCXsKCQkJCWRvX2FjdGlvbihNTV9FdmVudDo6JE1FTUJFUl9TVEFUVVNfQ0hBTkdFLCBNTV9FdmVudDo6cGFja2FnZU1lbWJlckRhdGEoJHRoaXMtPmdldElkKCksIGFycmF5KCJzdGF0dXNfbmFtZSI9PiR0aGlzLT5sYXN0U3RhdHVzTmFtZSwgInN0YXR1c19pZCI9PiR0aGlzLT5sYXN0U3RhdHVzKSkpOwoJCQl9IGVsc2UgaWYoY291bnQoJGFjY3RJbmZvQ2hhbmdlcykgPiAwKQoJCQl7CgkJCQlkb19hY3Rpb24oTU1fRXZlbnQ6OiRNRU1CRVJfQUNDT1VOVF9VUERBVEUsIE1NX0V2ZW50OjpwYWNrYWdlTWVtYmVyRGF0YSgkdGhpcy0+Z2V0SWQoKSwgJGFjY3RJbmZvQ2hhbmdlcykpOwoJCQl9CgkJfQoJCQoJCS8vIGNsZWFyIGNvbXBhcmlzb24gdmFsdWVzCgkJJHRoaXMtPmxhc3RTdGF0dXMgPSAiIjsKCQkkdGhpcy0+bGFzdFN0YXR1c05hbWUgPSAiIjsKCQkkdGhpcy0+bGFzdE1lbWJlcnNoaXBOYW1lID0gIiI7CgkJJHRoaXMtPmxhc3RNZW1iZXJzaGlwSWQgPSAiIjsKCQkkdGhpcy0+bGFzdFVzZXJuYW1lID0gIiI7CgkJJHRoaXMtPm1lbWJlcnNoaXBMZXZlbENoYW5nZWRGbGFnID0gZmFsc2U7CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCgkvKioKCSAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gc2V0IGFuZCBjb21taXQgdGhlIG1lbWJlciBzdGF0dXMgYW5kIHN0YXR1cyBtZXNzYWdlIGluIAoJICogb25lIG1ldGhvZC4gVGhpcyBpcyB1c2VkIGluc3RlYWQgb2YgY29tbWl0RGF0YSgpIGJlY2F1c2UgdGhlIHN0YXR1cyBvZiB0aGUgdXNlcgoJICogbWF5IG5lZWQgdG8gYmUgY2hhbmdlZCBleHBsaWNpdGx5IGJlY2F1c2UgdGhlIGNvbW1pdERhdGEoKSBtZXRob2QgaXMgZmFpbGluZy4gCgkgKiBJbiB0aGlzIGNhc2UgaXQgaXMgbmVjZXNzYXJ5IGp1c3QgdG8gY29tbWl0IHRoZSBzdGF0dXMgYW5kIHN0YXR1cyBtZXNzYWdlLgoJICovCglwdWJsaWMgZnVuY3Rpb24gY29tbWl0U3RhdHVzT25seSgpCgl7CgkJaWYoJHRoaXMtPmlzVmFsaWQoKSkKCQl7CgkJCWdsb2JhbCAkd3BkYjsKCQkJCgkJCSRtbVVzZXJEYXRhID0gYXJyYXkoKTsKCQkJJG1tVXNlckRhdGFbInN0YXR1cyJdID0gJHRoaXMtPnN0YXR1czsKCQkJJG1tVXNlckRhdGFbInN0YXR1c19tZXNzYWdlIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5zdGF0dXNNZXNzYWdlKTsKCQkJJG1tVXNlckRhdGFbImxhc3RfdXBkYXRlZCJdID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCSRtbVVzZXJEYXRhWyJzdGF0dXNfdXBkYXRlZCJdID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJCQoJCQkkd2hlcmVDbGF1c2UgPSBhcnJheSgid3BfdXNlcl9pZCIgPT4gJHRoaXMtPmlkKTsKCQkJJHJlc3VsdCA9ICR3cGRiLT51cGRhdGUoTU1fVEFCTEVfVVNFUl9EQVRBLCAkbW1Vc2VyRGF0YSwgJHdoZXJlQ2xhdXNlKTsKCQkJCgkJCWlmKCEkcmVzdWx0KQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gdXBkYXRlIG1lbWJlcjogIi4kd3BkYi0+bGFzdF9lcnJvciwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQkJCgkJCS8vIGRpc3BhdGNoIE1lbWJlck1vdXNlIGV2ZW50CgkJCWlmKCgkdGhpcy0+c3RhdHVzICE9ICR0aGlzLT5sYXN0U3RhdHVzKSkKCQkJewoJCQkJZG9fYWN0aW9uKE1NX0V2ZW50OjokTUVNQkVSX1NUQVRVU19DSEFOR0UsIE1NX0V2ZW50OjpwYWNrYWdlTWVtYmVyRGF0YSgkdGhpcy0+Z2V0SWQoKSkpOwoJCQkJCgkJCQkvLyBjbGVhciBjb21wYXJpc29uIHZhbHVlCgkJCQkkdGhpcy0+bGFzdFN0YXR1cyA9ICIiOwoJCQkJJHRoaXMtPmxhc3RTdGF0dXNOYW1lID0gIiI7CgkJCX0KCQl9CgkJZWxzZQoJCXsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGNvbW1pdCBtZW1iZXIgc3RhdHVzLiBJbnZhbGlkIHVzZXIuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJLyoqCgkgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdXBkYXRlIGEgc2luZ2xlIGZpZWxkIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlcgoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRmaWVsZE5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpZWxkIGluIHRoZSBkYXRhYmFzZSB0byB1cGRhdGUKCSAqIEBwYXJhbSBTdHJpbmcgJHZhbHVlIHRoZSB2YWx1ZSB0byBzZXQgaW4gdGhlIGZpZWxkCgkgKiAKCSAqIEByZXR1cm4gTU1fUmVzcG9uc2UKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZUZpZWxkKCRmaWVsZE5hbWUsICR2YWx1ZSkKCXsKCQlpZigkdGhpcy0+aXNWYWxpZCgpKQoJCXsKCQkJZ2xvYmFsICR3cGRiOwoJCQkKCQkJJG1tVXNlckRhdGEgPSBhcnJheSgpOwoJCQkkbW1Vc2VyRGF0YVskZmllbGROYW1lXSA9ICR2YWx1ZTsKCQkJCgkJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCJ3cF91c2VyX2lkIiA9PiAkdGhpcy0+aWQpOwoJCQkkcmVzdWx0ID0gJHdwZGItPnVwZGF0ZShNTV9UQUJMRV9VU0VSX0RBVEEsICRtbVVzZXJEYXRhLCAkd2hlcmVDbGF1c2UpOwoJCQkKCQkJaWYoISRyZXN1bHQpCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byB1cGRhdGUgbWVtYmVyOiAiLiR3cGRiLT5sYXN0X2Vycm9yLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVbmFibGUgdG8gY29tbWl0IG1lbWJlciBzdGF0dXMuIEludmFsaWQgdXNlci4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJfQoJCgkvKioKCSAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGlmIGEgV29yZFByZXNzIHVzZXIgZXhpc3RzIHdpdGggYSBzcGVjaWZpYyB1c2VybmFtZSBvciBlbWFpbC4KCSAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRvIHNlZSBpZiBhIE1NIHVzZXIgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgV29yZFByZXNzIHVzZXIgYW5kIGlmCgkgKiBpdCdzIG5vdCwgb25lIGlzIGNyZWF0ZWQuCgkgKiAKCSAqIEBwYXJhbSB1c2VySWQgdGhlIElEIG9mIHRoZSBleGlzdGluZyBXb3JkUHJlc3MgdXNlcgoJICogCgkgKiBAcmV0dXJuIEJvb2xlYW4gcmV0dXJucyB0cnVlIGlmIE1NIHVzZXIgd2FzIGNyZWF0ZWQgYW5kIGZhbHNlIGlmIGFuIE1NIHVzZXIgYWxyZWFkeSBleGlzdHMKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBjcmVhdGVNTVVzZXJGb3JFeGlzdGluZ1dQVXNlcigkdXNlcklkKQoJewoJCWlmKGlzX251bGwoJHVzZXJJZCkgfHwgJHVzZXJJZCA9PSBmYWxzZSkKCQl7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJZ2xvYmFsICR3cGRiOwoJCSRzcWwgPSAiU0VMRUNUICogRlJPTSAiLk1NX1RBQkxFX1VTRVJfREFUQS4iIFdIRVJFIHdwX3VzZXJfaWQ9J3skdXNlcklkfScgTElNSVQgMTsiOwoJCSRtbVVzZXJEYXRhID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkJCgkJaWYoISRtbVVzZXJEYXRhKQoJCXsKCQkJJG1tVXNlckRhdGEgPSBhcnJheSgpOwoJCQkkbW1Vc2VyRGF0YVsid3BfdXNlcl9pZCJdID0gJHVzZXJJZDsKCQkJJHJlc3VsdCA9ICR3cGRiLT5pbnNlcnQoTU1fVEFCTEVfVVNFUl9EQVRBLCAkbW1Vc2VyRGF0YSk7CgkJCQoJCQlpZigkcmVzdWx0ICE9PSBmYWxzZSkKCQkJewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9CgkJZWxzZSBpZihpbnR2YWwoJG1tVXNlckRhdGEtPm1lbWJlcnNoaXBfbGV2ZWxfaWQpID09IDAgJiYgaW50dmFsKCRtbVVzZXJEYXRhLT5zdGF0dXMpID09IDApCgkJewoJCQkvLyB0aGlzIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGRhdGEgcm93IGhhcyBiZWVuIGNyZWF0ZWQgYnV0IG5ldmVyIHNldAoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJCgkJcmV0dXJuIGZhbHNlOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIGdldEFjY3RJbmZvQ2hhbmdlcygpCgl7CgkJJGFjY3RJbmZvQ2hhbmdlcyA9IGFycmF5KCk7CgkJCgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0RGF5c0NhbGNNZXRob2QpICYmICR0aGlzLT5kYXlzQ2FsY01ldGhvZCAhPSAkdGhpcy0+bGFzdERheXNDYWxjTWV0aG9kKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImRheXNfY2FsY19tZXRob2QiXSA9ICR0aGlzLT5sYXN0RGF5c0NhbGNNZXRob2Q7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdERheXNDYWxjVmFsdWUpICYmICR0aGlzLT5kYXlzQ2FsY1ZhbHVlICE9ICR0aGlzLT5sYXN0RGF5c0NhbGNWYWx1ZSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJkYXlzX2NhbGNfdmFsdWUiXSA9ICR0aGlzLT5sYXN0RGF5c0NhbGNWYWx1ZTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0Rmlyc3ROYW1lKSAmJiAkdGhpcy0+Zmlyc3ROYW1lICE9ICR0aGlzLT5sYXN0Rmlyc3ROYW1lKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImZpcnN0X25hbWUiXSA9ICR0aGlzLT5sYXN0Rmlyc3ROYW1lOwoJCX0KCQlpZighZW1wdHkoJHRoaXMtPmxhc3RMYXN0TmFtZSkgJiYgJHRoaXMtPmxhc3ROYW1lICE9ICR0aGlzLT5sYXN0TGFzdE5hbWUpIHsKCQkJJGFjY3RJbmZvQ2hhbmdlc1sibGFzdF9uYW1lIl0gPSAkdGhpcy0+bGFzdExhc3ROYW1lOwoJCX0KCQlpZighZW1wdHkoJHRoaXMtPmxhc3RFbWFpbCkgJiYgJHRoaXMtPmVtYWlsICE9ICR0aGlzLT5sYXN0RW1haWwpIHsKCQkJJGFjY3RJbmZvQ2hhbmdlc1siZW1haWwiXSA9ICR0aGlzLT5sYXN0RW1haWw7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdFVzZXJuYW1lKSAmJiAkdGhpcy0+dXNlcm5hbWUgIT0gJHRoaXMtPmxhc3RVc2VybmFtZSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJ1c2VybmFtZSJdID0gJHRoaXMtPmxhc3RVc2VybmFtZTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0UGhvbmUpICYmICR0aGlzLT5waG9uZSAhPSAkdGhpcy0+bGFzdFBob25lKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbInBob25lIl0gPSAkdGhpcy0+bGFzdFBob25lOwoJCX0KCQlpZighZW1wdHkoJHRoaXMtPmxhc3ROb3RlcykgJiYgJHRoaXMtPm5vdGVzICE9ICR0aGlzLT5sYXN0Tm90ZXMpIHsKCQkJJGFjY3RJbmZvQ2hhbmdlc1sibm90ZXMiXSA9ICR0aGlzLT5sYXN0Tm90ZXM7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdEJpbGxpbmdBZGRyZXNzKSAmJiAkdGhpcy0+YmlsbGluZ0FkZHJlc3MgIT0gJHRoaXMtPmxhc3RCaWxsaW5nQWRkcmVzcykgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJiaWxsaW5nX2FkZHJlc3MiXSA9ICR0aGlzLT5sYXN0QmlsbGluZ0FkZHJlc3M7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdEJpbGxpbmdDaXR5KSAmJiAkdGhpcy0+YmlsbGluZ0NpdHkgIT0gJHRoaXMtPmxhc3RCaWxsaW5nQ2l0eSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJiaWxsaW5nX2NpdHkiXSA9ICR0aGlzLT5sYXN0QmlsbGluZ0NpdHk7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdEJpbGxpbmdTdGF0ZSkgJiYgJHRoaXMtPmJpbGxpbmdTdGF0ZSAhPSAkdGhpcy0+bGFzdEJpbGxpbmdTdGF0ZSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJiaWxsaW5nX3N0YXRlIl0gPSAkdGhpcy0+bGFzdEJpbGxpbmdTdGF0ZTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0QmlsbGluZ1ppcCkgJiYgJHRoaXMtPmJpbGxpbmdaaXAgIT0gJHRoaXMtPmxhc3RCaWxsaW5nWmlwKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImJpbGxpbmdfemlwX2NvZGUiXSA9ICR0aGlzLT5sYXN0QmlsbGluZ1ppcDsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0QmlsbGluZ0NvdW50cnkpICYmICR0aGlzLT5iaWxsaW5nQ291bnRyeSAhPSAkdGhpcy0+bGFzdEJpbGxpbmdDb3VudHJ5KSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImJpbGxpbmdfY291bnRyeSJdID0gJHRoaXMtPmxhc3RCaWxsaW5nQ291bnRyeTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0U2hpcHBpbmdBZGRyZXNzKSAmJiAkdGhpcy0+c2hpcHBpbmdBZGRyZXNzICE9ICR0aGlzLT5sYXN0U2hpcHBpbmdBZGRyZXNzKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbInNoaXBwaW5nX2FkZHJlc3MiXSA9ICR0aGlzLT5sYXN0U2hpcHBpbmdBZGRyZXNzOwoJCX0KCQlpZighZW1wdHkoJHRoaXMtPmxhc3RTaGlwcGluZ0NpdHkpICYmICR0aGlzLT5zaGlwcGluZ0NpdHkgIT0gJHRoaXMtPmxhc3RTaGlwcGluZ0NpdHkpIHsKCQkJJGFjY3RJbmZvQ2hhbmdlc1sic2hpcHBpbmdfY2l0eSJdID0gJHRoaXMtPmxhc3RTaGlwcGluZ0NpdHk7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdFNoaXBwaW5nU3RhdGUpICYmICR0aGlzLT5zaGlwcGluZ1N0YXRlICE9ICR0aGlzLT5sYXN0U2hpcHBpbmdTdGF0ZSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJzaGlwcGluZ19zdGF0ZSJdID0gJHRoaXMtPmxhc3RTaGlwcGluZ1N0YXRlOwoJCX0KCQlpZighZW1wdHkoJHRoaXMtPmxhc3RTaGlwcGluZ1ppcCkgJiYgJHRoaXMtPnNoaXBwaW5nWmlwICE9ICR0aGlzLT5sYXN0U2hpcHBpbmdaaXApIHsKCQkJJGFjY3RJbmZvQ2hhbmdlc1sic2hpcHBpbmdfemlwX2NvZGUiXSA9ICR0aGlzLT5sYXN0U2hpcHBpbmdaaXA7CgkJfQoJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdFNoaXBwaW5nQ291bnRyeSkgJiYgJHRoaXMtPnNoaXBwaW5nQ291bnRyeSAhPSAkdGhpcy0+bGFzdFNoaXBwaW5nQ291bnRyeSkgewoJCQkkYWNjdEluZm9DaGFuZ2VzWyJzaGlwcGluZ19jb3VudHJ5Il0gPSAkdGhpcy0+bGFzdFNoaXBwaW5nQ291bnRyeTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0RXhwaXJhdGlvbkRhdGUpICYmICR0aGlzLT5leHBpcmF0aW9uRGF0ZSAhPSAkdGhpcy0+bGFzdEV4cGlyYXRpb25EYXRlKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImV4cGlyYXRpb25fZGF0ZSJdID0gJHRoaXMtPmxhc3RFeHBpcmF0aW9uRGF0ZTsKCQl9CgkJaWYoIWVtcHR5KCR0aGlzLT5sYXN0Q2FuY2VsbGF0aW9uRGF0ZSkgJiYgJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGUgIT0gJHRoaXMtPmxhc3RDYW5jZWxsYXRpb25EYXRlKSB7CgkJCSRhY2N0SW5mb0NoYW5nZXNbImNhbmNlbGxhdGlvbl9kYXRlIl0gPSAkdGhpcy0+bGFzdENhbmNlbGxhdGlvbkRhdGU7CgkJfQoJCSRmaWVsZHMgPSBNTV9DdXN0b21GaWVsZDo6Z2V0Q3VzdG9tRmllbGRzTGlzdCgpOwoJCWZvcmVhY2goJGZpZWxkcyBhcyAkaWQ9PiR2YWwpCgkJewoJCQlpZihNTV9DdXN0b21GaWVsZERhdGE6Ondhc1JlY2VudGx5VXBkYXRlZCgkaWQsICR0aGlzLT5pZCkpCgkJCXsKCQkJCSRhY2N0SW5mb0NoYW5nZXNbImNmX3skaWR9Il0gPSAkdGhpcy0+Z2V0Q3VzdG9tRGF0YUJ5RmllbGRJZCgkaWQpLT5nZXRWYWx1ZSgpOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkYWNjdEluZm9DaGFuZ2VzOwoJfQogCQogCXByaXZhdGUgZnVuY3Rpb24gaXNQZW5kaW5nVXNlcigpCiAJewogCQlpZighZW1wdHkoJHRoaXMtPmVtYWlsKSkKIAkJewoJIAkJZ2xvYmFsICR3cGRiOwoJIAkJJHNxbCA9ICJTRUxFQ1QgaWQgRlJPTSAiLiR3cGRiLT51c2Vycy4iIGFzIHdwVXNlcnMsICIuTU1fVEFCTEVfVVNFUl9EQVRBLiIgYXMgbW1Vc2VyRGF0YSBXSEVSRSAiOwoJCQkkc3FsIC49ICIoKG1tVXNlckRhdGEuc3RhdHVzID0gJyIuTU1fU3RhdHVzOjokUEVORElOR19BQ1RJVkFUSU9OLiInKSBPUiAobW1Vc2VyRGF0YS5zdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRFUlJPUi4iJykgT1IgKG1tVXNlckRhdGEuc3RhdHVzID0gJyIuTU1fU3RhdHVzOjokQ0FOQ0VMRUQuIicpKSBBTkQgIjsKCQkJJHNxbCAuPSAiKCh3cFVzZXJzLnVzZXJfbG9naW49JXMpIE9SICh3cFVzZXJzLnVzZXJfZW1haWw9JXMpKSBBTkQgIjsKCSAJCSRzcWwgLj0gIih3cFVzZXJzLklEID0gbW1Vc2VyRGF0YS53cF91c2VyX2lkKSBMSU1JVCAxOyI7CgkJCQoJCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coJHdwZGItPnByZXBhcmUoJHNxbCwkdGhpcy0+ZW1haWwsJHRoaXMtPmVtYWlsKSk7CgkJCWlmKGlzc2V0KCRyZXN1bHQtPmlkKSkKCQkJewoJCQkJaWYoaW50dmFsKCRyZXN1bHQtPmlkKSA+IDApCgkJCQl7CgkJCQkJJHRoaXMtPmlkID0gJHJlc3VsdC0+aWQ7CgkJCQkJcmV0dXJuIHRydWU7CgkJCQl9CgkJCX0KIAkJfQogCQkKCQlyZXR1cm4gZmFsc2U7CiAJfQoKIAkKIAkvKgogCSAqIE1vZGlmeWluZyB0aGUgd3Agcm9sZSBvbiB0aGUgZmx5IGhlcmUgd2hlbiB1c2VycyByb2xlIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nOgogCSoKIAkqIGFkbWluaXN0cmF0b3IgfCBlbXBsb3llZQogCSoKIAkqIElmIGl0IGlzIG9uZSBvZiB0aGVzZSByb2xlcywgbm8gV1AgVXNlciByb2xlIGNoYW5nZSBzaG91bGQgYmUgbWFkZS4gTW9kaWZpY2F0aW9uIG1hZGUgaGVyZQogCSogYXMgYWRtaW5pc3RvciB3YXMgYmVpbmcgZWZmZWN0ZWQgb24gaW1wb3J0LgogCSovCiAJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZVdQVXNlclJvbGUoKQogCXsKIAkJaWYoJHRoaXMtPmlzVmFsaWQoKSkKIAkJewoJIAkJJHdwVXNlckRhdGEgPSBhcnJheSgpOyAKCSAJCSR3cFVzZXJEYXRhWyJJRCJdID0gJHRoaXMtPmlkOyAKCSAJCSR3cFVzZXJEYXRhWydyb2xlJ10gPSAkdGhpcy0+Z2V0TWVtYmVyc2hpcFdQUm9sZSh0cnVlKTsKCSAKCSAJCWlmKCR3cFVzZXJEYXRhWydyb2xlJ10hPT1mYWxzZSkKCQkJCXJldHVybiB3cF91cGRhdGVfdXNlcigkd3BVc2VyRGF0YSk7CiAJCX0gCiAJCXJldHVybiBmYWxzZTsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldE1lbWJlcnNoaXBXUFJvbGUoJHVzZUxhdGVzdE1lbWJlcnNoaXBMZXZlbCA9IGZhbHNlKQogCXsgICAKIAkJJG1lbWJlcnNoaXAgPSAkdGhpcy0+Z2V0TWVtYmVyc2hpcExldmVsKCk7CiAJCWlmKCRtZW1iZXJzaGlwLT5pc1ZhbGlkKCkpCiAJCXsKIAkJCWlmKCR1c2VMYXRlc3RNZW1iZXJzaGlwTGV2ZWwpCiAJCQl7CiAJCQkJJHdwUm9sZSA9ICR0aGlzLT5nZXRNZW1iZXJzaGlwTGV2ZWwoKS0+Z2V0V1BSb2xlKCk7CQoJIAkJCSRjYW5Nb2RpZnlSb2xlID0gdHJ1ZTsKCSAJCQlpZigkdGhpcy0+aXNDU1ZJbXBvcnQpewoJIAkJCQkkd3BVc2VyID0gbmV3IFdQX1VzZXIoICR0aGlzLT5pZCApOyAKCSAJCQkJaWYoaXNzZXQoJHdwVXNlci0+cm9sZXMpICYmIGlzX2FycmF5KCR3cFVzZXItPnJvbGVzKSl7CgkgCQkJCQlmb3JlYWNoKCR3cFVzZXItPnJvbGVzIGFzICRyb2xlKXsKCSAJCQkJCQlpZihwcmVnX21hdGNoKCIvKGFkbWluaXN0cmF0b3J8ZW1wbG95ZWUpLyIsIHN0cnRvbG93ZXIoJHJvbGUpKSl7CgkgCQkJCQkJCSRjYW5Nb2RpZnlSb2xlID0gZmFsc2U7CgkgCQkJCQkJCWJyZWFrOwoJIAkJCQkJCX0KCSAJCQkJCX0KCSAJCQkJfQoJIAkJCX0KCSAJCQoJIAkJCWlmKCR3cFJvbGUgIT0gTU1fUm9sZTo6JFJPTEVfSUdOT1JFICYmICRjYW5Nb2RpZnlSb2xlKQoJIAkJCXsKCSAJCQkJcmV0dXJuICR0aGlzLT5nZXRNZW1iZXJzaGlwTGV2ZWwoKS0+Z2V0V1BSb2xlKCk7CgkgCQkJfQogCQkJfSAgCiAJCX0gCiAJCXJldHVybiBmYWxzZTsKIAl9CiAJCgkKCXByaXZhdGUgZnVuY3Rpb24gcHJlcGFyZVdQVXNlckRhdGEoJGlzVXBkYXRlID0gZmFsc2UpCgl7CgkJJHdwVXNlckRhdGEgPSBhcnJheSgpOwoJCQoJCWlmKCFlbXB0eSgkdGhpcy0+aWQpICYmICR0aGlzLT5pZCAhPT0gMCkKCQl7CgkJCSR3cFVzZXJEYXRhWyJJRCJdID0gJHRoaXMtPmlkOwoJCX0KCQllbHNlCgkJewoJCQkvLyBvbmx5IGRvIHRoaXMgZm9yIG5ldyBtZW1iZXJzCgkJCWlmKE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0hJREVfQURNSU5fQkFSKSA9PSAiMSIpCgkJCXsKCQkJCSR3cFVzZXJEYXRhWydzaG93X2FkbWluX2Jhcl9mcm9udCddID0gImZhbHNlIjsKCQkJfQoJCQkKCQkJaWYoIWVtcHR5KCR0aGlzLT5maXJzdE5hbWUpKQoJCQl7CgkJCQkkd3BVc2VyRGF0YVsnZmlyc3RfbmFtZSddID0gc3RyaXBfdGFncygkdGhpcy0+Zmlyc3ROYW1lKTsKCQkJCQkKCQkJCWlmKCFlbXB0eSgkdGhpcy0+bGFzdE5hbWUpKQoJCQkJewoJCQkJCSR3cFVzZXJEYXRhWydsYXN0X25hbWUnXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPmxhc3ROYW1lKTsKCQkJCQkkd3BVc2VyRGF0YVsnZGlzcGxheV9uYW1lJ10gPSAkd3BVc2VyRGF0YVsnZmlyc3RfbmFtZSddLiIgIi5zdWJzdHIoJHdwVXNlckRhdGFbJ2xhc3RfbmFtZSddLCAwLCAxKTsKCQkJCX0KCQkJCWVsc2UKCQkJCXsKCQkJCQkkd3BVc2VyRGF0YVsnZGlzcGxheV9uYW1lJ10gPSAkd3BVc2VyRGF0YVsnZmlyc3RfbmFtZSddOwoJCQkJfQoJCQl9CgkJfQoJCQoJCSRtZW1iZXJzaGlwID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpOwoJCQoJCWlmKCRtZW1iZXJzaGlwLT5pc1ZhbGlkKCkpCgkJeyAgCgkJCSRyb2xlID0gJHRoaXMtPmdldE1lbWJlcnNoaXBXUFJvbGUoISRpc1VwZGF0ZSk7CgkJCWlmKCRyb2xlICE9PSBmYWxzZSkKCQkJCSR3cFVzZXJEYXRhWydyb2xlJ10gPSAkcm9sZTsgCgkJfQoJCQoJCSR3cFVzZXJEYXRhWyd1c2VyX2xvZ2luJ10gPSBzdHJpcF90YWdzKCR0aGlzLT51c2VybmFtZSk7CgkJCgkJaWYoIWVtcHR5KCR0aGlzLT5yZWdpc3RyYXRpb25EYXRlKSkKCQl7CiAJCQkkd3BVc2VyRGF0YVsndXNlcl9yZWdpc3RlcmVkJ10gPSBzdHJpcF90YWdzKCR0aGlzLT5yZWdpc3RyYXRpb25EYXRlKTsKCQl9CgkJZWxzZQoJCXsKCQkJJHdwVXNlckRhdGFbJ3VzZXJfcmVnaXN0ZXJlZCddID0gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCk7CgkJfQoJCQoJCS8vIGlmIHVzaW5nIHRlc3QgZGF0YSBjb252ZXJ0IHRoaXMgZW1haWwKCQlpZihNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9VU0VfQ0hFQ0tPVVRfRk9STV9URVNUX0RBVEEpID09ICIxIikKCQl7CgkJCSR0aGlzLT5lbWFpbCA9IE1NX1Rlc3REYXRhVXRpbHM6OmNvbnZlcnRUZXN0RW1haWwoJHRoaXMtPmVtYWlsKTsKCQl9CgkJCgkJJHdwVXNlckRhdGFbJ3VzZXJfZW1haWwnXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPmVtYWlsKTsKCgkJaWYoIWlzX251bGwoJHRoaXMtPmdldFBhc3N3b3JkKCkpKQoJCXsKCQkJJHdwVXNlckRhdGFbJ3VzZXJfcGFzcyddID0gc3RyaXBfdGFncygkdGhpcy0+Z2V0UGFzc3dvcmQoKSk7CgkJfQoJCQoJCWlmKCR0aGlzLT5sYXN0Rm9yZ290UGFzc3dvcmRIYXNoICE9ICR0aGlzLT5mb3Jnb3RQYXNzd29yZEhhc2gpCgkJewoJCQkkd3BVc2VyRGF0YVsndXNlcl9hY3RpdmF0aW9uX2tleSddID0gc3RyaXBfdGFncygkdGhpcy0+Zm9yZ290UGFzc3dvcmRIYXNoKTsKCQl9CgkJCQkKCQlyZXR1cm4gJHdwVXNlckRhdGE7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gcHJlcGFyZU1NVXNlckRhdGEoKQoJewoJCSRtbVVzZXJEYXRhID0gYXJyYXkoKTsKCQkKCQkkbW1Vc2VyRGF0YVsid3BfdXNlcl9pZCJdID0gJHRoaXMtPmlkOwoJCSRtbVVzZXJEYXRhWyJtZW1iZXJzaGlwX2xldmVsX2lkIl0gPSAkdGhpcy0+bWVtYmVyc2hpcElkOwoJCQoJCS8vIGNoZWNrIGlmIHRoaXMgbWVtYmVyIGlzIHBlbmRpbmcgY2FuY2VsbGF0aW9uIAoJCWlmKCR0aGlzLT5pc1BlbmRpbmdDYW5jZWxsYXRpb24oKSkKCQl7CgkJCS8vIGNoZWNrIGlmIHRoaXMgbWVtYmVyIHNob3VsZCBiZSBjYW5jZWxlZAoJCQlpZigkdGhpcy0+bWVtYmVyc2hpcFNob3VsZENhbmNlbCgpKQoJCQl7CgkJCQkkdGhpcy0+c2V0U3RhdHVzKCR0aGlzLT5nZXRQZW5kaW5nU3RhdHVzKCkpOwoJCQkJCgkJCQkvLyBjbGVhciBwZW5kaW5nIGNhbmNlbGxhdGlvbgoJCQkJJHRoaXMtPnNldENhbmNlbGxhdGlvbkRhdGUobnVsbCk7CgkJCQkkdGhpcy0+c2V0UGVuZGluZ1N0YXR1cygiMCIpOwoJCQl9CgkJCWVsc2UgaWYoIWVtcHR5KCR0aGlzLT5sYXN0U3RhdHVzKSAmJiAoJHRoaXMtPnN0YXR1cyAhPSAkdGhpcy0+bGFzdFN0YXR1cykgCgkJCQkmJiAoJHRoaXMtPmxhc3RTdGF0dXMgPT0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQgfHwgJHRoaXMtPmxhc3RTdGF0dXMgPT0gTU1fU3RhdHVzOjokUEFVU0VEKSkKCQkJewoJCQkJJHRoaXMtPmRheXNDYWxjTWV0aG9kID0gJHRoaXMtPmxhc3REYXlzQ2FsY01ldGhvZDsKCQkJCSR0aGlzLT5kYXlzQ2FsY1ZhbHVlID0gJHRoaXMtPmxhc3REYXlzQ2FsY1ZhbHVlOwoJCQl9CgkJfQoJCQoJCSRtbVVzZXJEYXRhWyJzdGF0dXMiXSA9ICR0aGlzLT5zdGF0dXM7CgkJJG1tVXNlckRhdGFbInBlbmRpbmdfc3RhdHVzIl0gPSAkdGhpcy0+Z2V0UGVuZGluZ1N0YXR1cygpOwoJCSRtbVVzZXJEYXRhWyJpbXBvcnRlZCJdID0gJHRoaXMtPmltcG9ydGVkRmxhZzsKCQkkbW1Vc2VyRGF0YVsibm90ZXMiXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPm5vdGVzKTsKCQkkbW1Vc2VyRGF0YVsicGhvbmUiXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPnBob25lKTsKCQkkbW1Vc2VyRGF0YVsnZmlyc3RfbmFtZSddID0gc3RyaXBfdGFncygkdGhpcy0+Zmlyc3ROYW1lKTsKCQkkbW1Vc2VyRGF0YVsnbGFzdF9uYW1lJ10gPSBzdHJpcF90YWdzKCR0aGlzLT5sYXN0TmFtZSk7CgkJJG1tVXNlckRhdGFbInN0YXR1c19tZXNzYWdlIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5zdGF0dXNNZXNzYWdlKTsKCQkkbW1Vc2VyRGF0YVsiZGF5c19jYWxjX21ldGhvZCJdID0gJHRoaXMtPmRheXNDYWxjTWV0aG9kOyAKCQkkbW1Vc2VyRGF0YVsiZGF5c19jYWxjX3ZhbHVlIl0gPSAkdGhpcy0+ZGF5c0NhbGNWYWx1ZTsKCQkkbW1Vc2VyRGF0YVsic3Vic2NyaWJlZF9wcm92aWRlcl9pZCJdID0gJHRoaXMtPnN1YnNjcmliZWRQcm92aWRlcklkOwoJCSRtbVVzZXJEYXRhWyJzdWJzY3JpYmVkX2xpc3RfaWQiXSA9ICR0aGlzLT5zdWJzY3JpYmVkTGlzdElkOwoJCSRtbVVzZXJEYXRhWyJiaWxsaW5nX2FkZHJlc3MxIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5iaWxsaW5nQWRkcmVzcyk7CgkJJG1tVXNlckRhdGFbImJpbGxpbmdfY2l0eSJdID0gc3RyaXBfdGFncygkdGhpcy0+YmlsbGluZ0NpdHkpOwoJCSRtbVVzZXJEYXRhWyJiaWxsaW5nX3N0YXRlIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5iaWxsaW5nU3RhdGUpOwoJCSRtbVVzZXJEYXRhWyJiaWxsaW5nX3Bvc3RhbF9jb2RlIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5iaWxsaW5nWmlwKTsKCQkkbW1Vc2VyRGF0YVsiYmlsbGluZ19jb3VudHJ5Il0gPSBzdHJpcF90YWdzKCR0aGlzLT5iaWxsaW5nQ291bnRyeSk7CgkJJG1tVXNlckRhdGFbInNoaXBwaW5nX2FkZHJlc3MxIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5zaGlwcGluZ0FkZHJlc3MpOwoJCSRtbVVzZXJEYXRhWyJzaGlwcGluZ19jaXR5Il0gPSBzdHJpcF90YWdzKCR0aGlzLT5zaGlwcGluZ0NpdHkpOwoJCSRtbVVzZXJEYXRhWyJzaGlwcGluZ19zdGF0ZSJdID0gc3RyaXBfdGFncygkdGhpcy0+c2hpcHBpbmdTdGF0ZSk7CgkJJG1tVXNlckRhdGFbInNoaXBwaW5nX3Bvc3RhbF9jb2RlIl0gPSBzdHJpcF90YWdzKCR0aGlzLT5zaGlwcGluZ1ppcCk7CgkJJG1tVXNlckRhdGFbInNoaXBwaW5nX2NvdW50cnkiXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPnNoaXBwaW5nQ291bnRyeSk7CgkJJG1tVXNlckRhdGFbIm9yaWdpbl9hZmZpbGlhdGVfaWQiXSA9IHN0cmlwX3RhZ3MoJHRoaXMtPm9yaWdpbkFmZmlsaWF0ZUlkKTsKCQkkbW1Vc2VyRGF0YVsib3JpZ2luX3N1YmFmZmlsaWF0ZV9pZCJdID0gc3RyaXBfdGFncygkdGhpcy0+b3JpZ2luU3ViYWZmaWxpYXRlSWQpOwoJCSRtbVVzZXJEYXRhWyJmb3Jnb3R0ZW4iXSA9ICR0aGlzLT5mb3Jnb3R0ZW5GbGFnOwoJCQoJCWlmKCR0aGlzLT5kb2VzRXhwaXJlKCkpCgkJewoJCQkkbW1Vc2VyRGF0YVsiZXhwaXJhdGlvbl9kYXRlIl0gPSAkdGhpcy0+Z2V0RXhwaXJhdGlvbkRhdGUoKTsKCQl9CgkJZWxzZSAKCQl7CgkJCSRtbVVzZXJEYXRhWyJleHBpcmF0aW9uX2RhdGUiXSA9IG51bGw7CgkJfQoJCQoJCWlmKCR0aGlzLT5pc1BlbmRpbmdDYW5jZWxsYXRpb24oKSkKCQl7CgkJCSRtbVVzZXJEYXRhWyJjYW5jZWxsYXRpb25fZGF0ZSJdID0gJHRoaXMtPmdldENhbmNlbGxhdGlvbkRhdGUoKTsKCQl9CgkJZWxzZQoJCXsKCQkJJG1tVXNlckRhdGFbImNhbmNlbGxhdGlvbl9kYXRlIl0gPSBudWxsOwoJCX0KCQkKCQkkbW1Vc2VyRGF0YVsibGFzdF91cGRhdGVkIl0gPSBNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKTsKCQkKCQlpZighZW1wdHkoJHRoaXMtPmxhc3RMb2dpbkRhdGUpKQoJCXsKCQkJJG1tVXNlckRhdGFbImxhc3RfbG9naW5fZGF0ZSJdID0gJHRoaXMtPmxhc3RMb2dpbkRhdGU7CgkJfQoJCQoJCWlmKCR0aGlzLT5sYXN0U3RhdHVzICE9ICR0aGlzLT5zdGF0dXMpCgkJewoJCQkkbW1Vc2VyRGF0YVsic3RhdHVzX3VwZGF0ZWQiXSA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCX0KCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+c3RhdHVzVXBkYXRlZERhdGUpKQoJCXsKCQkJJG1tVXNlckRhdGFbInN0YXR1c191cGRhdGVkIl0gPSAkdGhpcy0+c3RhdHVzVXBkYXRlZERhdGU7CgkJfQoJCQoJCWlmKCFlbXB0eSgkdGhpcy0+YmVjYW1lQWN0aXZlRGF0ZSkpCgkJewoJCQkkbW1Vc2VyRGF0YVsiYmVjYW1lX2FjdGl2ZSJdID0gJHRoaXMtPmJlY2FtZUFjdGl2ZURhdGU7CgkJfQoJCQoJCWlmKCFlbXB0eSgkdGhpcy0+d2VsY29tZUVtYWlsU2VudERhdGUpKQoJCXsKCQkJJG1tVXNlckRhdGFbIndlbGNvbWVfZW1haWxfc2VudCJdID0gJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlOwoJCX0KCQoJCXJldHVybiAkbW1Vc2VyRGF0YTsKCX0KCQogCXB1YmxpYyBmdW5jdGlvbiBkZWxldGUoKQogCXsKIAkJcmVxdWlyZV9vbmNlKEFCU1BBVEguIi93cC1hZG1pbi9pbmNsdWRlcy91c2VyLnBocCIpOwogCQkKIAkJZ2xvYmFsICR3cGRiOwoJCQogCQkvLyBjaGVjayBpZiB1c2VyIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZAogCQkkc3FsID0gIlNFTEVDVCB3cF91c2VyX2lkIEZST00gIi5NTV9UQUJMRV9VU0VSX0RBVEEuIiBXSEVSRSB3cF91c2VyX2lkPSd7JHRoaXMtPmdldElkKCl9JyBMSU1JVCAxOyI7CiAJCSR1c2VyID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwogCQkKIAkJaWYoISR1c2VyKQogCQl7CiAJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJVc2VyICciLiR0aGlzLT5nZXRFbWFpbCgpLiInIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZCIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwogCQl9CiAJCQoJCWlmKCEkdGhpcy0+aGFzQWN0aXZlU3Vic2NyaXB0aW9ucygpIHx8ICR0aGlzLT5zdGF0dXMgPT0gTU1fU3RhdHVzOjokUEVORElOR19BQ1RJVkFUSU9OIHx8ICR0aGlzLT5zdGF0dXMgPT0gTU1fU3RhdHVzOjokUEVORElOR19DQU5DRUxMQVRJT04gfHwgJHRoaXMtPnN0YXR1cyA9PSBNTV9TdGF0dXM6OiRFUlJPUikKCQl7CgkJCS8vIHByZXBhcmUgdXNlciBkYXRhIHRvIHBhc3MgdG8gcHVzaCBub3RpZmljYXRpb25zIHByaW9yIHRvIGRlbGV0aW9uCgkJCSR1c2VyRGF0YSA9IGFycmF5KAoJCQkJCSdtZW1iZXJfaWQnPT4kdGhpcy0+Z2V0SWQoKSwKCQkJCQkncmVnaXN0ZXJlZCc9PiR0aGlzLT5nZXRSZWdpc3RyYXRpb25EYXRlKCksCgkJCQkJJ2xhc3RfbG9nZ2VkX2luJz0+JHRoaXMtPmdldExhc3RMb2dpbkRhdGUoKSwKCQkJCQknbGFzdF91cGRhdGVkJz0+JHRoaXMtPmdldExhc3RVcGRhdGVkRGF0ZSgpLAoJCQkJCSdkYXlzX2FzX21lbWJlcic9PiR0aGlzLT5nZXREYXlzQXNNZW1iZXIoKSwKCQkJCQknc3RhdHVzJz0+JHRoaXMtPmdldFN0YXR1cygpLAoJCQkJCSdzdGF0dXNfbmFtZSc9Pk1NX1N0YXR1czo6Z2V0TmFtZSgkdGhpcy0+Z2V0U3RhdHVzKCkpLAoJCQkJCSdtZW1iZXJzaGlwX2xldmVsJz0+JHRoaXMtPmdldE1lbWJlcnNoaXBJZCgpLAoJCQkJCSdtZW1iZXJzaGlwX2xldmVsX25hbWUnPT4kdGhpcy0+Z2V0TWVtYmVyc2hpcE5hbWUoKSwKCQkJCQknZmlyc3RfbmFtZSc9PiR0aGlzLT5nZXRGaXJzdE5hbWUoKSwKCQkJCQknbGFzdF9uYW1lJz0+JHRoaXMtPmdldExhc3ROYW1lKCksCgkJCQkJJ3VzZXJuYW1lJz0+JHRoaXMtPmdldFVzZXJuYW1lKCksCgkJCQkJJ2VtYWlsJyA9PiAkdGhpcy0+Z2V0RW1haWwoKSwKCQkJCQkncGhvbmUnID0+ICR0aGlzLT5nZXRQaG9uZSgpLAoJCQkJCSdiaWxsaW5nX2FkZHJlc3MnPT4kdGhpcy0+Z2V0QmlsbGluZ0FkZHJlc3MoKSwKCQkJCQknYmlsbGluZ19jaXR5Jz0+JHRoaXMtPmdldEJpbGxpbmdDaXR5KCksCgkJCQkJJ2JpbGxpbmdfc3RhdGUnPT4kdGhpcy0+Z2V0QmlsbGluZ1N0YXRlKCksCgkJCQkJJ2JpbGxpbmdfemlwX2NvZGUnPT4kdGhpcy0+Z2V0QmlsbGluZ1ppcENvZGUoKSwKCQkJCQknYmlsbGluZ19jb3VudHJ5Jz0+JHRoaXMtPmdldEJpbGxpbmdDb3VudHJ5TmFtZSgpLAoJCQkJCSdzaGlwcGluZ19hZGRyZXNzJz0+JHRoaXMtPmdldFNoaXBwaW5nQWRkcmVzcygpLAoJCQkJCSdzaGlwcGluZ19jaXR5Jz0+JHRoaXMtPmdldFNoaXBwaW5nQ2l0eSgpLAoJCQkJCSdzaGlwcGluZ19zdGF0ZSc9PiR0aGlzLT5nZXRTaGlwcGluZ1N0YXRlKCksCgkJCQkJJ3NoaXBwaW5nX3ppcF9jb2RlJz0+JHRoaXMtPmdldFNoaXBwaW5nWmlwQ29kZSgpLAoJCQkJCSdzaGlwcGluZ19jb3VudHJ5Jz0+JHRoaXMtPmdldFNoaXBwaW5nQ291bnRyeU5hbWUoKSwKCQkJCQknc3Vic2NyaWJlZF9saXN0X2lkJz0+JHRoaXMtPnN1YnNjcmliZWRMaXN0SWQsCgkJCQkJJ3N1YnNjcmliZWRfcHJvdmlkZXJfaWQnPT4kdGhpcy0+c3Vic2NyaWJlZFByb3ZpZGVySWQKCQkJKTsKCQkJCgkJCS8vIGN1c3RvbSBmaWVsZHMKCQkJJGZpZWxkcyA9IE1NX0N1c3RvbUZpZWxkOjpnZXRDdXN0b21GaWVsZHNMaXN0KCk7CgkJCWZvcmVhY2goJGZpZWxkcyBhcyAkaWQ9PiR2YWwpCgkJCXsKCQkJCSRjdXN0b21GaWVsZCA9IG5ldyBNTV9DdXN0b21GaWVsZCgkaWQpOwoJCQkJCQoJCQkJaWYoJGN1c3RvbUZpZWxkLT5pc1ZhbGlkKCkpCgkJCQl7CgkJCQkJJHVzZXJEYXRhWyJjZl8iLiRjdXN0b21GaWVsZC0+Z2V0SWQoKV0gPSBodG1sZW50aXRpZXMoJHRoaXMtPmdldEN1c3RvbURhdGFCeUZpZWxkSWQoJGN1c3RvbUZpZWxkLT5nZXRJZCgpKS0+Z2V0VmFsdWUoKSxFTlRfUVVPVEVTLCAnVVRGLTgnLCB0cnVlKTsKCQkJCX0KCQkJfQoJCQkKCQkJLy8gYnVuZGxlcwoJCQkkYXBwbGllZEJ1bmRsZXMgPSAkdGhpcy0+Z2V0QXBwbGllZEJ1bmRsZXModHJ1ZSk7CgkJCSRhcHBsaWVkQnVuZGxlSW5mbyA9IGFycmF5KCk7CgkJCQkKCQkJZm9yZWFjaCgkYXBwbGllZEJ1bmRsZXMgYXMgJGFwcGxpZWRCdW5kbGUpCgkJCXsKCQkJCSRjcm50QnVuZGxlSW5mbyA9IGFycmF5KCk7CgkJCQkkY3JudEJ1bmRsZUluZm9bImJ1bmRsZV9pZCJdID0gJGFwcGxpZWRCdW5kbGUtPmdldEJ1bmRsZUlkKCk7CgkJCQkkY3JudEJ1bmRsZUluZm9bInN1YnNjcmliZWRfbGlzdF9pZCJdID0gJGFwcGxpZWRCdW5kbGUtPmdldFN1YnNjcmliZWRMaXN0SWQoKTsKCQkJCSRjcm50QnVuZGxlSW5mb1sic3Vic2NyaWJlZF9wcm92aWRlcl9pZCJdID0gJGFwcGxpZWRCdW5kbGUtPmdldFN1YnNjcmliZWRQcm92aWRlcklkKCk7CgkJCQkJCgkJCQkkYXBwbGllZEJ1bmRsZUluZm9bXSA9ICRjcm50QnVuZGxlSW5mbzsKCQkJfQoJCQkKCQkJJHVzZXJEYXRhWyJhcHBsaWVkX2J1bmRsZXMiXSA9IGpzb25fZW5jb2RlKCRhcHBsaWVkQnVuZGxlSW5mbyk7CgkJCQoJCQkvLyBkZWxldGUgYWxsIG1lbWJlciBkYXRhCgkJCU1NX1RyYW5zYWN0aW9uOjpiZWdpbigpOwoJCQkKCQkJJHNxbCA9ICJTRUxFQ1QgaWQgRlJPTSAiLk1NX1RBQkxFX09SREVSUy4iIFdIRVJFIHVzZXJfaWQ9J3skdGhpcy0+Z2V0SWQoKX0nIjsKCQkJJG9yZGVycyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkJCgkJCWlmKCRvcmRlcnMpCgkJCXsKCQkJCWZvcmVhY2goJG9yZGVycyBhcyAkb3JkZXIpCgkJCQl7CgkJCQkJLy8gcmVtb3ZlIG9yZGVyIGl0ZW1zCgkJCQkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX09SREVSX0lURU1TLiIgV0hFUkUgb3JkZXJfaWQ9J3skb3JkZXItPmlkfSc7IjsKCQkJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQkJCgkJCQkJLy8gcmVtb3ZlIHRyYW5zYWN0aW9uIGhpc3RvcnkKCQkJCQkkc3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfVFJBTlNBQ1RJT05fTE9HLiIgV0hFUkUgb3JkZXJfaWQ9J3skb3JkZXItPmlkfSc7IjsKCQkJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQl9CgkJCX0KCQkJCgkJCS8vIHJlbW92ZSBvcmRlcnMKCQkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX09SREVSUy4iIFdIRVJFIHVzZXJfaWQ9J3skdGhpcy0+Z2V0SWQoKX0nOyI7CgkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCgkJCS8vIHJlbW92ZSBjYXJkIG9uIGZpbGUKCQkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX0NBUkRfT05fRklMRS4iIFdIRVJFIHVzZXJfaWQ9J3skdGhpcy0+Z2V0SWQoKX0nOyI7CgkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCQkJCgkJCS8vIHJlbW92ZSBvcmRlciBpdGVtIGFjY2VzcwoJCQkkc3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfT1JERVJfSVRFTV9BQ0NFU1MuIiBXSEVSRSB1c2VyX2lkPSd7JHRoaXMtPmdldElkKCl9JzsiOwoJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQoJCQkvLyByZW1vdmUgYnVuZGxlcwoJCQkkc3FsID0gIkRFTEVURSBGUk9NICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTLiIgV0hFUkUgYWNjZXNzX3R5cGU9JyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX1VTRVIuIicgQU5EIGFjY2Vzc190eXBlX2lkPSd7JHRoaXMtPmdldElkKCl9JzsiOwoJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQoJCQkvLyBkZWxldGUgY3VzdG9tIGZpZWxkIGRhdGEKCQkJJHNxbCA9ICJERUxFVEUgRlJPTSAiLk1NX1RBQkxFX0NVU1RPTV9GSUVMRF9EQVRBLiIgV0hFUkUgdXNlcl9pZD0neyR0aGlzLT5nZXRJZCgpfSc7IjsKCQkJJHdwZGItPnF1ZXJ5KCRzcWwpOwoJCQkKCQkJLy8gZGVsZXRlIGV2ZW50IGxvZyBkYXRhCgkJCSRzcWwgPSAiREVMRVRFIEZST00gIi5NTV9UQUJMRV9FVkVOVF9MT0cuIiBXSEVSRSB1c2VyX2lkPSd7JHRoaXMtPmdldElkKCl9JzsiOwoJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQoJCQkvLyBkZWxldGUgTU0gdXNlciBkYXRhCgkJCSRzcWwgPSAiREVMRVRFIEZST00gIi5NTV9UQUJMRV9VU0VSX0RBVEEuIiBXSEVSRSB3cF91c2VyX2lkPSd7JHRoaXMtPmdldElkKCl9JyBMSU1JVCAxOyI7CgkJCSR3cGRiLT5xdWVyeSgkc3FsKTsKCQkJCgkJCU1NX1RyYW5zYWN0aW9uOjpjb21taXQoKTsKCQkJCgkJCS8vIGRlbGV0ZSBXb3JkUHJlc3MgdXNlcgoJCQl3cF9kZWxldGVfdXNlcigkdGhpcy0+Z2V0SWQoKSk7CgkJCQoJCQkvLyBpZiB1c2luZyBtdWx0aS1zaXRlLCBkZWxldGUgdXNlciBmcm9tIHRoZSBuZXR3b3JrCgkJCWlmKGlzX211bHRpc2l0ZSgpKSAKCQkJewoJCQkJd3BtdV9kZWxldGVfdXNlcigkdGhpcy0+Z2V0SWQoKSk7CgkJCX0KCQkJCgkJCS8vIGRpc3BhdGNoIE1lbWJlck1vdXNlIGV2ZW50CgkJCWRvX2FjdGlvbihNTV9FdmVudDo6JE1FTUJFUl9ERUxFVEUsICR1c2VyRGF0YSk7CgkJCQoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCInIi4kdGhpcy0+Z2V0RW1haWwoKS4iJyBkZWxldGVkIHN1Y2Nlc3NmdWxseSIpOwoJCX0KCQkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSB1c2VyICciLiR0aGlzLT5nZXRFbWFpbCgpLiInIGJlY2F1c2UgdGhleSBoYXZlIGFjdGl2ZSBzdWJzY3JpcHRpb25zIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CiAJfQogCQogCQogCS8qKiBBQ0NFU1MtUkVMQVRFRCBNRVRIT0RTICoqLwoKCXB1YmxpYyBmdW5jdGlvbiBpc0FkbWluKCkKCXsKCQlpZihmdW5jdGlvbl9leGlzdHMoInVzZXJfY2FuIikpCgkJewoJCQlpZiAodXNlcl9jYW4oJHRoaXMtPmlkLCAnbWFuYWdlX29wdGlvbnMnKSkgCgkJCXsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoKCQkkY2FwYWJpbGl0aWVzID0gZ2V0X3VzZXJfbWV0YSgkdGhpcy0+aWQsICJ3cF9jYXBhYmlsaXRpZXMiLCB0cnVlKTsKCQkJCgkJaWYoaXNzZXQoJGNhcGFiaWxpdGllc1siYWRtaW5pc3RyYXRvciJdKSkgCgkJewoJCQlyZXR1cm4gJGNhcGFiaWxpdGllc1siYWRtaW5pc3RyYXRvciJdID09ICIxIjsKCQl9CgkJCgkJcmV0dXJuIGZhbHNlOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBoYXNBY3RpdmVTdWJzY3JpcHRpb25zKCkKCXsKCQkvLyBkZXRlcm1pbmUgaWYgbWVtYmVyIGhhcyBhY3RpdmUgc3Vic2NyaXB0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlaXIgbWVtYmVyc2hpcCBsZXZlbAoJCSRtZW1iZXJzaGlwID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpOwoJCQkKCQlpZighJG1lbWJlcnNoaXAtPmlzRnJlZSgpICYmICR0aGlzLT5zdGF0dXMgIT0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQgJiYgJHRoaXMtPnN0YXR1cyAhPSBNTV9TdGF0dXM6OiRQQVVTRUQpIAoJCXsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCSRhcHBsaWVkQnVuZGxlcyA9ICR0aGlzLT5nZXRBcHBsaWVkQnVuZGxlcygpOwoJCQkKCQkvLyBkZXRlcm1pbmUgaWYgbWVtYmVyIGhhcyBhY3RpdmUgc3Vic2NyaXB0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlaXIgYnVuZGxlcwoJCWZvcmVhY2goJGFwcGxpZWRCdW5kbGVzIGFzICRhcHBsaWVkQnVuZGxlKQoJCXsKCQkJaWYoJGFwcGxpZWRCdW5kbGUtPmdldFN0YXR1cygpID09IE1NX1N0YXR1czo6JEFDVElWRSkKCQkJewoJCQkJJGJ1bmRsZSA9ICRhcHBsaWVkQnVuZGxlLT5nZXRCdW5kbGUoKTsKCQkJCQoJCQkJaWYoISRidW5kbGUtPmlzRnJlZSgpKQoJCQkJewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQl9CgkJfQoJCQkKCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCQoJLyoqIE1FTUJFUlNISVAtUkVMQVRFRCBNRVRIT0RTICoqLwoJIAkKCXB1YmxpYyBmdW5jdGlvbiBzZW5kV2VsY29tZUVtYWlsKCkKCXsKCQlpZigkdGhpcy0+aXNWYWxpZCgpKQoJCXsKCQkJZ2xvYmFsICR3cGRiOwoJCQkKCQkJJG1lbWJlcnNoaXAgPSAkdGhpcy0+Z2V0TWVtYmVyc2hpcExldmVsKCk7CgkJCSRyZXN1bHQgPSAkbWVtYmVyc2hpcC0+c2VuZFdlbGNvbWVFbWFpbCgkdGhpcy0+aWQpOwoJCQkJCgkJCWlmKE1NX1Jlc3BvbnNlOjppc1N1Y2Nlc3MoJHJlc3VsdCkpCgkJCXsKCQkJCSR0aGlzLT53ZWxjb21lRW1haWxTZW50RGF0ZSA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgpOwoJCQkKCQkJCSR1cGRhdGVWYWx1ZXMgPSBhcnJheSgid2VsY29tZV9lbWFpbF9zZW50IiA9PiAkdGhpcy0+d2VsY29tZUVtYWlsU2VudERhdGUpOwoJCQkJJHdoZXJlQ2xhdXNlID0gYXJyYXkoIndwX3VzZXJfaWQiID0+ICR0aGlzLT5pZCk7CgkJCQkkcmVzdWx0ID0gJHdwZGItPnVwZGF0ZShNTV9UQUJMRV9VU0VSX0RBVEEsICR1cGRhdGVWYWx1ZXMsICR3aGVyZUNsYXVzZSk7CgkJCQoJCQkJaWYoJHJlc3VsdCA9PT0gZmFsc2UpCgkJCQl7CgkJCQkJJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlID0gbnVsbDsKCQkJCX0KCQkJfQoJCX0KCX0gCgkKCXB1YmxpYyBmdW5jdGlvbiBnZXREYXlzQXNNZW1iZXIoKSAKCXsKCQkKCQlpZigkdGhpcy0+ZGF5c0NhbGNNZXRob2QgPT0gTU1fRGF5c0NhbGN1bGF0aW9uVHlwZXM6OiRGSVhFRCkKCQl7CgkJCXJldHVybiBpbnR2YWwoJHRoaXMtPmRheXNDYWxjVmFsdWUpOwoJCX0KCQkKCQkkZHJpcENvbnRlbnRUaW1lU2V0dGluZyA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0RSSVBfQ09OVEVOVF9USU1FX1NFVFRJTkcpOwoJCSRzdGFydCA9IG51bGw7CgkJJGVuZCA9IG51bGw7CgkJCgkJaWYoJGRyaXBDb250ZW50VGltZVNldHRpbmcgPT0gTU1fUHJvdGVjdGVkQ29udGVudEVuZ2luZTo6JFRJTUVfU0VUVElOR19MT0NBTCkKCQl7CgkJCSRlbmQgPSBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCksICJZLW0tZCIsICIwMDowMDowMCIpOwoJCX0KCQllbHNlIAoJCXsKCQkJJGVuZCA9IE1NX1V0aWxzOjpnZXRDdXJyZW50VGltZSgiWS1tLWQiKTsKCQl9IAkKCQkKCQlpZiAoIWlzX251bGwoJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGUpKQoJCXsKCQkJJGVuZCA9IERhdGUoIlktbS1kIiwgc3RydG90aW1lKCR0aGlzLT5nZXRDYW5jZWxsYXRpb25EYXRlKCkpKTsKCQl9CgkJCgkJc3dpdGNoKCR0aGlzLT5kYXlzQ2FsY01ldGhvZCkKCQl7IAoJCQljYXNlIE1NX0RheXNDYWxjdWxhdGlvblR5cGVzOjokQ1VTVE9NX0RBVEU6CgkJCQlpZigkZHJpcENvbnRlbnRUaW1lU2V0dGluZyA9PSBNTV9Qcm90ZWN0ZWRDb250ZW50RW5naW5lOjokVElNRV9TRVRUSU5HX0xPQ0FMKQoJCQkJewoJCQkJCSRzdGFydCA9IE1NX1V0aWxzOjpkYXRlVG9Mb2NhbCgkdGhpcy0+ZGF5c0NhbGNWYWx1ZSwgIlktbS1kIiwgIjAwOjAwOjAwIik7CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJJHN0YXJ0ID0gRGF0ZSgiWS1tLWQiLCBzdHJ0b3RpbWUoJHRoaXMtPmRheXNDYWxjVmFsdWUpKTsKCQkJCX0KCQkJCQoJCQkJJHN0YXJ0X3RzID0gc3RydG90aW1lKCRzdGFydCk7CgkJCQkkZW5kX3RzID0gc3RydG90aW1lKCRlbmQpOwoJCQkJJGRpZmYgPSAkZW5kX3RzIC0gJHN0YXJ0X3RzOwoJCQkJCQoJCQkJLy8gcm91bmQgcmV0dXJucyBhIC0gMAoJCQkJJGRheXMgPSByb3VuZCgkZGlmZiAvIDg2NDAwKTsKCQkJCXJldHVybiAkZGF5czsKCQkJCWJyZWFrOwoJCQkJCgkJCWNhc2UgTU1fRGF5c0NhbGN1bGF0aW9uVHlwZXM6OiRKT0lOX0RBVEU6CgkJCQlpZigkdGhpcy0+aXNJbXBvcnRlZCgpKQoJCQkJewoJCQkJCWlmKCRkcmlwQ29udGVudFRpbWVTZXR0aW5nID09IE1NX1Byb3RlY3RlZENvbnRlbnRFbmdpbmU6OiRUSU1FX1NFVFRJTkdfTE9DQUwpCgkJCQkJewoJCQkJCQkkc3RhcnQgPSBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoJHRoaXMtPmdldFJlZ2lzdHJhdGlvbkRhdGUoKSwgIlktbS1kIiwgIjAwOjAwOjAwIik7CgkJCQkJfQoJCQkJCWVsc2UKCQkJCQl7CgkJCQkJCSRzdGFydCA9IERhdGUoIlktbS1kIiwgc3RydG90aW1lKCR0aGlzLT5nZXRSZWdpc3RyYXRpb25EYXRlKCkpKTsKCQkJCQl9CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJaWYgKCR0aGlzLT5iZWNhbWVBY3RpdmVEYXRlID09IG51bGwpCgkJCQkJewoJCQkJCQlyZXR1cm4gMDsgLy9hY2NvdW50IG5ldmVyIGJlY2FtZSBhY3RpdmUgKHByb2JhYmx5IHBlbmRpbmcgb3IgZXJyb3JlZCkKCQkJCQl9CgkJCQkJaWYoJGRyaXBDb250ZW50VGltZVNldHRpbmcgPT0gTU1fUHJvdGVjdGVkQ29udGVudEVuZ2luZTo6JFRJTUVfU0VUVElOR19MT0NBTCkKCQkJCQl7CgkJCQkJCSRzdGFydCA9IE1NX1V0aWxzOjpkYXRlVG9Mb2NhbCgkdGhpcy0+Z2V0QmVjYW1lQWN0aXZlRGF0ZSgpLCAiWS1tLWQiLCAiMDA6MDA6MDAiKTsKCQkJCQl9CgkJCQkJZWxzZQoJCQkJCXsKCQkJCQkJJHN0YXJ0ID0gRGF0ZSgiWS1tLWQiLCBzdHJ0b3RpbWUoJHRoaXMtPmdldEJlY2FtZUFjdGl2ZURhdGUoKSkpOwoJCQkJCX0KCQkJCX0KCQkJCQoJCQkJJHN0YXJ0X3RzID0gc3RydG90aW1lKCRzdGFydCk7CgkJCQkkZW5kX3RzID0gc3RydG90aW1lKCRlbmQpOwoJCQkJJGRpZmYgPSAkZW5kX3RzIC0gJHN0YXJ0X3RzOwoJCQkJCQoJCQkJLy8gcm91bmQgcmV0dXJucyBhIC0gMAoJCQkJJGRheXMgPSByb3VuZCgkZGlmZiAvIDg2NDAwKTsKCQkJCQkKCQkJCWlmKCRkYXlzPDApCgkJCQl7CgkJCQkJJGRheXMqPS0xOwoJCQkJfQoJCQkJCQoJCQkJcmV0dXJuICRkYXlzOwoJCQkJYnJlYWs7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gZG9lc0V4cGlyZSgpCgl7CgkJJG1lbWJlcnNoaXAgPSAkdGhpcy0+Z2V0TWVtYmVyc2hpcExldmVsKCk7CgkJcmV0dXJuICRtZW1iZXJzaGlwLT5kb2VzRXhwaXJlKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBtZW1iZXJzaGlwSGFzRXhwaXJlZCgpCgl7CgkJaWYoJHRoaXMtPmRvZXNFeHBpcmUoKSkKCQl7CgkJCSRleHBpcmF0aW9uRGF0ZSA9IGRhdGUoIlktbS1kIiwgc3RydG90aW1lKCR0aGlzLT5nZXRFeHBpcmF0aW9uRGF0ZSgpKSk7CgkJCSR0b2RheSA9IERhdGUoIlktbS1kIGg6aTpzIik7CgkJCQoJCQlpZigkdG9kYXkgPiAkZXhwaXJhdGlvbkRhdGUpCgkJCXsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJCQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIGlzUGVuZGluZ0NhbmNlbGxhdGlvbigpCgl7CgkJcmV0dXJuICgkdGhpcy0+c3RhdHVzID09IE1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIG1lbWJlcnNoaXBTaG91bGRDYW5jZWwoKQoJewoJCWlmKCR0aGlzLT5pc1BlbmRpbmdDYW5jZWxsYXRpb24oKSkKCQl7CgkJCSRjYW5jZWxsYXRpb25EYXRlID0gZGF0ZSgiWS1tLWQgSDppOnMiLCBzdHJ0b3RpbWUoJHRoaXMtPmdldENhbmNlbGxhdGlvbkRhdGUoKSkpOwoJCQkkdG9kYXkgPSBEYXRlKCJZLW0tZCBoOmk6cyIpOwoJCQkKCQkJaWYoJHRvZGF5ID4gJGNhbmNlbGxhdGlvbkRhdGUpCgkJCXsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoJCgkJcmV0dXJuIGZhbHNlOwoJfQoJCgkvKioKCSAqIEdldHMgYSBsaXN0IG9mIGFsbCBhY3RpdmUgbWVtYmVyc2hpcCBzdWJzY3JpcHRpb25zCgkgKgoJICogQHBhcmFtICRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMgaW5kaWNhdGVzIHdoZXRoZXIgb3ZlcmR1ZSBzdWJzY3JpcHRpb25zIHNob3VsZCByZXR1cm5lZCBhcyB3ZWxsCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IG9mIGFzc29jaWF0aXZlIGFycmF5cyB3aXRoIHRoZSBmb2xsb3dpbmcgaW5kZWNpZXM6IGlkLCBuYW1lLCBhcHBseURhdGUsIGFtb3VudAoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWN0aXZlTWVtYmVyc2hpcFN1YnNjcmlwdGlvbnMoJGluY2x1ZGVPdmVyZHVlU3Vic2NyaXB0aW9ucz1mYWxzZSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkKCQkkYWN0aXZlU3Vic2NyaXB0aW9ucyA9IGFycmF5KCk7CgkJCgkJJHNxbCA9ICAiU0VMRUNUIG8uZGF0ZV9hZGRlZCwgbS5uYW1lLCBtLmlkLCBvaS50b3RhbCwgb2kuaXRlbV9pZCwgb2kuc3RhdHVzLCBvaS5pZCBhcyBvcmRlcl9pdGVtX2lkIEZST00gIi5NTV9UQUJMRV9PUkRFUl9JVEVNX0FDQ0VTUy4iIG9pYSAiLgoJCSAgICAgICAgIklOTkVSIEpPSU4gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMUy4iIG0gT04gKChvaWEudXNlcl9pZD0neyR0aGlzLT5nZXRJZCgpfScpIEFORCAob2lhLmFjY2Vzc190eXBlX2lkID0gbS5pZCkgQU5EIChvaWEuYWNjZXNzX3R5cGU9JyIuTU1fT3JkZXJJdGVtQWNjZXNzOjokQUNDRVNTX1RZUEVfTUVNQkVSU0hJUC4iJykpICIuCgkJIAkgICAgIkxFRlQgSk9JTiAiLk1NX1RBQkxFX09SREVSX0lURU1TLiIgb2kgT04gKG9pYS5vcmRlcl9pdGVtX2lkPW9pLmlkKSAiLgoJCSAJICAgICJMRUZUIEpPSU4gIi5NTV9UQUJMRV9PUkRFUlMuIiBvIE9OIChvaS5vcmRlcl9pZCA9IG8uaWQpICIuCgkJIAkgICAgIldIRVJFIChvaS5zdGF0dXM9JyIuTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklORy4iJyI7CgoJCWlmKCRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMpCgkJewoJCSAJJHNxbCAuPSAiIE9SIG9pLnN0YXR1cz0nIi5NTV9PcmRlckl0ZW06OiRTVEFUVVNfUkVDVVJSSU5HX1JFQklMTF9GQUlMRUQuIiciOwoJCX0KCQkKCQkkc3FsIC49ICIpOyI7CgkJCgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkKCQlpZigkcmVzdWx0cykKCQl7CgkJCWZvcmVhY2goJHJlc3VsdHMgYXMgJHJvd0RhdGEpCgkJCXsKCQkJCSRjcm50Um93ID0gYXJyYXkoKTsKCQkJCSRjcm50Um93WyJpZCJdID0gJHJvd0RhdGEtPmlkOwoJCQkJJGNybnRSb3dbIm5hbWUiXSA9ICRyb3dEYXRhLT5uYW1lOwoJCQkJJGNybnRSb3dbImFwcGx5RGF0ZSJdID0gJHJvd0RhdGEtPmRhdGVfYWRkZWQ7CgkJCQkkY3JudFJvd1siYW1vdW50Il0gPSAkcm93RGF0YS0+dG90YWw7CgkJCQkKCQkJCSRwcm9kdWN0ID0gbmV3IE1NX1Byb2R1Y3QoJHJvd0RhdGEtPml0ZW1faWQpOwoJCQkJJHJlYmlsbERlc2NyaXB0aW9uID0gTU1fTk9fREFUQTsKCQkJCQoJCQkJaWYoJHByb2R1Y3QtPmlzVmFsaWQoKSkKCQkJCXsKCQkJCQkkcmViaWxsRGVzY3JpcHRpb24gPSAkcHJvZHVjdC0+Z2V0QmlsbGluZ0Rlc2NyaXB0aW9uKGZhbHNlKTsKCQkJCX0KCQkJCQkKCQkJCSRjcm50Um93WyJyZWJpbGxfZGVzY3JpcHRpb24iXSA9ICRyZWJpbGxEZXNjcmlwdGlvbjsKCQkJCSRjcm50Um93WyJzdGF0dXMiXSA9ICRyb3dEYXRhLT5zdGF0dXM7CgkJCQkkY3JudFJvd1sib3JkZXJJdGVtSWQiXSA9ICRyb3dEYXRhLT5vcmRlcl9pdGVtX2lkOwoJCgkJCQlhcnJheV9wdXNoKCRhY3RpdmVTdWJzY3JpcHRpb25zLCAkY3JudFJvdyk7CgkJCX0KCQl9CgkKCQlyZXR1cm4gJGFjdGl2ZVN1YnNjcmlwdGlvbnM7Cgl9CgkKCQoJLyoqIEJVTkRMRS1SRUxFQVRFRCBNRVRIT0RTICoqLwogCQoJLyoqCgkgKiAKCSAqIEBwYXJhbSBOdW1iZXIgJGJ1bmRsZUlkIHRoZSBJRCBvZiB0aGUgYnVuZGxlIHRvIGFkZCB0byB0aGUgdXNlcgoJICogQHBhcmFtIEJvb2xlYW4gJGlzSW1wb3J0ZWQgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGlzIGJ1bmRsZSBpcyBiZWluZyBhZGRlZCBmcm9tIGFuIGltcG9ydAoJICovCiAJcHVibGljIGZ1bmN0aW9uIGFkZEJ1bmRsZSgkYnVuZGxlSWQsICRpc0ltcG9ydGVkPWZhbHNlKQogCXsJCiAJCXJldHVybiBNTV9BcHBsaWVkQnVuZGxlOjphcHBseUJ1bmRsZVRvVXNlcigkdGhpcy0+Z2V0SWQoKSwgJGJ1bmRsZUlkLCAkaXNJbXBvcnRlZCk7Cgl9CgoJLyoqCgkgKiBUaGlzIG1ldGhvZCByZW1vdmVzIGEgYnVuZGxlIGZyb20gdGhlIHVzZXIuCgkgKgoJICogQHBhcmFtIE51bWJlciAkYnVuZGxlSWQgdGhlIElEIG9mIHRoZSBidW5kbGUgdG8gcmVtb3ZlIGZyb20gdGhlIHVzZXIKCSAqIEBwYXJhbSBOdW1iZXIgJGZvcmNlU3RhdHVzIGEgdmFsaWQgTU1fU3RhdHVzIElEIHRoYXQgaW5kaWNhdGVzIHdoaWNoIHN0YXR1cyB0byBzZXQgb24gdGhlIGFwcGxpZWQgYnVuZGxlIGFmdGVyIGl0J3MgYmVlbiByZW1vdmVkLiBJZiBsZWZ0IGJsYW5rLCB0aGUgZXZlbnQgaGFuZGxpbmcgc2V0dGluZ3Mgd2lsbCBiZSB1c2VkIGZyb20gdGhlIE1NIGNvbmZpZ3VyYXRpb24uCgkgKiBAcmV0dXJuIE1NX1Jlc3BvbnNlIGEgcmVzcG9uc2Ugb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIG1lc3NhZ2Ugc2V0IGJhc2VkIG9uIHRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvbgoJICovCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQnVuZGxlKCRidW5kbGVJZCwgJGZvcmNlU3RhdHVzPSIiKQoJewoJCXJldHVybiBNTV9BcHBsaWVkQnVuZGxlOjpyZW1vdmVCdW5kbGVGcm9tVXNlcigkdGhpcy0+Z2V0SWQoKSwgJGJ1bmRsZUlkLCAkZm9yY2VTdGF0dXMpOwoJfQogCQoJLyoqCgkgKiBHZXRzIGEgbGlzdCBvZiBhbGwgYXBwbGllZCBidW5kbGVzIHRvIHRoaXMgdXNlciB0aGF0IGFyZSBpbiBhY3RpdmUgb3IgcGF1c2VkIHN0YXR1cwoJICogCgkgKiBAcGFyYW0gQm9vbGVhbiAkaW5jbHVkZUFsbCBpbmRpY2F0ZXMgaWYgYWxsIGFwcGxpZWQgYnVuZGxlcyBzaG91bGQgYmUgcmV0dXJuZWQgb3IganVzdCB0aG9zZSB0aGF0IGFyZSBhY3RpdmUvcGF1c2VkCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IG9mIE1NX0FwcGxpZWRCdW5kbGUgaW5zdGFuY2VzIHRoYXQgYXJlIGluIGFjdGl2ZS9wYXVzZWQgc3RhdHVzIGZvciB0aGUgdXNlcgoJICovCiAJcHVibGljIGZ1bmN0aW9uIGdldEFwcGxpZWRCdW5kbGVzKCRpbmNsdWRlQWxsPWZhbHNlKQogCXsKIAkgCWdsb2JhbCAkd3BkYjsKIAkgCQogCSAJJGFwcGxpZWRCdW5kbGVzID0gYXJyYXkoKTsKIAkgCQogCSAJJHNxbCA9ICJTRUxFQ1QgKiBGUk9NICIuTU1fVEFCTEVfQVBQTElFRF9CVU5ETEVTOwoJCSRzcWwgLj0gIiBXSEVSRSAoYWNjZXNzX3R5cGVfaWQgPSAneyR0aGlzLT5pZH0nKSBBTkQgKGFjY2Vzc190eXBlID0gJyIuTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX1VTRVIuIicpICI7CgkJCgkJaWYoISRpbmNsdWRlQWxsKQoJCXsKCQkJJHNxbCAuPSAiIEFORCAoc3RhdHVzID0gJyIuTU1fU3RhdHVzOjokQUNUSVZFLiInIE9SIHN0YXR1cyA9ICciLk1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OLiInIE9SIHN0YXR1cyA9ICciLk1NX1N0YXR1czo6JFBBVVNFRC4iJykiOwoJCX0KCQkKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCgkJaWYoJHJlc3VsdHMpCgkJewoJCQlmb3JlYWNoKCRyZXN1bHRzIGFzICRyb3dEYXRhKQoJCQl7CgkJCQkkYXBwbGllZEJ1bmRsZSA9IG5ldyBNTV9BcHBsaWVkQnVuZGxlKCk7CgkJCQkkYXBwbGllZEJ1bmRsZS0+c2V0RGF0YSgkcm93RGF0YSk7CgkJCQkKCQkJCWlmKCRhcHBsaWVkQnVuZGxlLT5pc1ZhbGlkKCkpCgkJCQl7CgkJCQkJYXJyYXlfcHVzaCgkYXBwbGllZEJ1bmRsZXMsICRhcHBsaWVkQnVuZGxlKTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuICRhcHBsaWVkQnVuZGxlczsKCX0KCQoJLyoqCgkgKiBHZXRzIGEgbGlzdCBvZiBhbGwgYnVuZGxlcyB0aGF0IGFyZSBhcHBsaWVkIGFuZCBoYXZlIGFjdGl2ZSBiaWxsaW5nCgkgKgoJICogQHBhcmFtICRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMgaW5kaWNhdGVzIHdoZXRoZXIgb3ZlcmR1ZSBzdWJzY3JpcHRpb25zIHNob3VsZCBiZSByZXR1cm5lZCBhcyB3ZWxsCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IG9mIGFzc29jaWF0aXZlIGFycmF5cyB3aXRoIHRoZSBmb2xsb3dpbmcgaW5kZWNpZXM6IGlkLCBuYW1lLCBhcHBseURhdGUsIGFtb3VudCAgCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRBY3RpdmVCdW5kbGVzKCRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnM9ZmFsc2UpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRhY3RpdmVCdW5kbGVzID0gYXJyYXkoKTsKCQkKCQkkc3FsID0gICJTRUxFQ1Qgby5kYXRlX2FkZGVkLCBiLm5hbWUsIGIuaWQsIG9pLnRvdGFsLCBvaS5pdGVtX2lkLCBvaS5zdGF0dXMsIG9pLmlkIGFzIG9yZGVyX2l0ZW1faWQgRlJPTSAiLk1NX1RBQkxFX09SREVSX0lURU1fQUNDRVNTLiIgb2lhICIuCgkJCQkiSU5ORVIgSk9JTiAiLk1NX1RBQkxFX0JVTkRMRVMuIiBiIE9OICgob2lhLnVzZXJfaWQ9J3skdGhpcy0+Z2V0SWQoKX0nKSBBTkQgKG9pYS5hY2Nlc3NfdHlwZV9pZCA9IGIuaWQpIEFORCAob2lhLmFjY2Vzc190eXBlPSciLk1NX09yZGVySXRlbUFjY2Vzczo6JEFDQ0VTU19UWVBFX0JVTkRMRS4iJykpICIuCgkJCQkiTEVGVCBKT0lOICIuTU1fVEFCTEVfT1JERVJfSVRFTVMuIiBvaSBPTiAob2lhLm9yZGVyX2l0ZW1faWQ9b2kuaWQpICIuCgkJCQkiTEVGVCBKT0lOICIuTU1fVEFCTEVfT1JERVJTLiIgbyBPTiAob2kub3JkZXJfaWQgPSBvLmlkKSAiLgoJCQkJIldIRVJFIChvaS5zdGF0dXM9JyIuTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklORy4iJyI7CgoJCWlmKCRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMpCgkJewoJCSAJJHNxbCAuPSAiIE9SIG9pLnN0YXR1cz0nIi5NTV9PcmRlckl0ZW06OiRTVEFUVVNfUkVDVVJSSU5HX1JFQklMTF9GQUlMRUQuIiciOwoJCX0KCQkKCQkkc3FsIC49ICIpOyI7CgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCgkJaWYoJHJlc3VsdHMpCgkJewoJCQlmb3JlYWNoKCRyZXN1bHRzIGFzICRyb3dEYXRhKQoJCQl7CgkJCQkkY3JudFJvdyA9IGFycmF5KCk7CgkJCQkkY3JudFJvd1siaWQiXSA9ICRyb3dEYXRhLT5pZDsKCQkJCSRjcm50Um93WyJuYW1lIl0gPSAkcm93RGF0YS0+bmFtZTsKCQkJCSRjcm50Um93WyJhcHBseURhdGUiXSA9ICRyb3dEYXRhLT5kYXRlX2FkZGVkOwoJCQkJJGNybnRSb3dbImFtb3VudCJdID0gJHJvd0RhdGEtPnRvdGFsOwoJCQkJCgkJCQkkcHJvZHVjdCA9IG5ldyBNTV9Qcm9kdWN0KCRyb3dEYXRhLT5pdGVtX2lkKTsKCQkJCSRyZWJpbGxEZXNjcmlwdGlvbiA9IE1NX05PX0RBVEE7CgkJCQkKCQkJCWlmKCRwcm9kdWN0LT5pc1ZhbGlkKCkpCgkJCQl7CgkJCQkJJHJlYmlsbERlc2NyaXB0aW9uID0gJHByb2R1Y3QtPmdldEJpbGxpbmdEZXNjcmlwdGlvbihmYWxzZSk7CgkJCQl9CgkJCQkJCgkJCQkkY3JudFJvd1sicmViaWxsX2Rlc2NyaXB0aW9uIl0gPSAkcmViaWxsRGVzY3JpcHRpb247CgkJCQkkY3JudFJvd1sic3RhdHVzIl0gPSAkcm93RGF0YS0+c3RhdHVzOwoJCQkJJGNybnRSb3dbIm9yZGVySXRlbUlkIl0gPSAkcm93RGF0YS0+b3JkZXJfaXRlbV9pZDsKCQkJCQoJCQkJYXJyYXlfcHVzaCgkYWN0aXZlQnVuZGxlcywgJGNybnRSb3cpOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkYWN0aXZlQnVuZGxlczsKCX0KCQoJLyoqCgkgKiBAcmV0dXJuIFN0cmluZyByZXR1cm5zIGEgY29tbWEtZGVsaW1pbmF0ZWQgbGlzdCBvZiBhbGwgYnVuZGxlcyB0aGF0IGFyZSBhY3RpdmUgb24gdGhlIHVzZXIncyBhY2NvdW50CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRBcHBsaWVkQnVuZGxlTmFtZXMoKQoJewoJCWdsb2JhbCAkd3BkYjsKCgkJJHNxbCA9ICJTRUxFQ1QgYnVuZGxlcy5uYW1lLCBhcHBsaWVkQnVuZGxlcy5zdGF0dXMgRlJPTSAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUy4iIGFwcGxpZWRCdW5kbGVzLCAiLk1NX1RBQkxFX0JVTkRMRVMuIiBidW5kbGVzICI7CgkJJHNxbCAuPSAiIFdIRVJFIChhcHBsaWVkQnVuZGxlcy5hY2Nlc3NfdHlwZV9pZCA9ICd7JHRoaXMtPmlkfScpIEFORCAoYXBwbGllZEJ1bmRsZXMuYWNjZXNzX3R5cGUgPSAnIi5NTV9BcHBsaWVkQnVuZGxlOjokQUNDRVNTX1RZUEVfVVNFUi4iJykgIjsKCQkkc3FsIC49ICIgQU5EIChhcHBsaWVkQnVuZGxlcy5idW5kbGVfaWQgPSBidW5kbGVzLmlkKSBBTkQgKGFwcGxpZWRCdW5kbGVzLnN0YXR1cyA9ICciLk1NX1N0YXR1czo6JEFDVElWRS4iJyBPUiBhcHBsaWVkQnVuZGxlcy5zdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRQRU5ESU5HX0NBTkNFTExBVElPTi4iJyBPUiBhcHBsaWVkQnVuZGxlcy5zdGF0dXMgPSAnIi5NTV9TdGF0dXM6OiRPVkVSRFVFLiInKTsiOwoJCSRidW5kbGVzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQoJCWlmKCRidW5kbGVzKQoJCXsKCQkJJGFsbG93T3ZlcmR1ZUFjY2VzcyA9IChNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9BTExPV19PVkVSRFVFX0FDQ0VTUykgPT0gIjEiKSA/IHRydWUgOiBmYWxzZTsKCQkJJGJ1bmRsZVN0ciA9ICIiOwoJCQkkY3RyID0gMDsKCQkKCQkJZm9yZWFjaCgkYnVuZGxlcyBhcyAkYnVuZGxlKQoJCQl7CgkJCQlpZigkYnVuZGxlLT5zdGF0dXMgPT0gTU1fU3RhdHVzOjokT1ZFUkRVRSAmJiAhJGFsbG93T3ZlcmR1ZUFjY2VzcykKCQkJCXsKCQkJCQljb250aW51ZTsKCQkJCX0KCQkJCQoJCQkJaWYoJGN0ciA+IDApIHsKCQkJCQkkYnVuZGxlU3RyIC49ICIsICI7CgkJCQl9CgkJCgkJCQkkYnVuZGxlU3RyIC49ICRidW5kbGUtPm5hbWU7CgkJCQkkY3RyKys7CgkJCX0KCQkKCQkJcmV0dXJuICRidW5kbGVTdHI7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiAiIjsKCQl9Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGhhc0J1bmRsZSgkYnVuZGxlSWQsICRpbmNsdWRlQWxsU3RhdHVzZXM9dHJ1ZSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJTRUxFQ1QgY291bnQoKikgYXMgdG90YWwgRlJPTSAiLk1NX1RBQkxFX0FQUExJRURfQlVORExFUzsKCQkkc3FsIC49ICIgV0hFUkUgKGJ1bmRsZV9pZD0neyRidW5kbGVJZH0nKSBBTkQgKChhY2Nlc3NfdHlwZV9pZD0neyR0aGlzLT5nZXRJZCgpfScgQU5EIGFjY2Vzc190eXBlPSciLk1NX0FwcGxpZWRCdW5kbGU6OiRBQ0NFU1NfVFlQRV9VU0VSLiInKSAiOwoJCSRzcWwgLj0gIiBPUiAoYWNjZXNzX3R5cGVfaWQ9JyIuJHRoaXMtPmdldE1lbWJlcnNoaXBJZCgpLiInIEFORCBhY2Nlc3NfdHlwZT0nIi5NTV9BcHBsaWVkQnVuZGxlOjokQUNDRVNTX1RZUEVfTUVNQkVSU0hJUC4iJykpICI7CgkJCgkJaWYoISRpbmNsdWRlQWxsU3RhdHVzZXMpCgkJewoJCQkkc3FsLj0gIiBBTkQgKHN0YXR1cz0nIi5NTV9TdGF0dXM6OiRBQ1RJVkUuIicgT1Igc3RhdHVzPSciLk1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OLiInIE9SIHN0YXR1cz0nIi5NTV9TdGF0dXM6OiRQQVVTRUQuIicpICI7CgkJfQoJCQogCSAJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwogCSAJCiAJIAlpZihpc19udWxsKCRyb3cpKSAKIAkgCXsKIAkgCQlyZXR1cm4gZmFsc2U7CiAJIAl9CiAJIAkKIAkgCXJldHVybiAoJHJvdy0+dG90YWwgPiAwKTsKIAl9CgkKIAkvKioKIAkgKiBEZXRlcm1pbmVzIHRoZSBudW1iZXIgb2YgZGF5cyBhIHVzZXIgaGFzIGhhZCBhIHBhcnRpY3VsYXIgYnVuZGxlIGFwcGxpZWQgdG8gdGhlaXIgYWNjb3VudAogCSAqIAogCSAqIEBwYXJhbSBOdW1iZXIgJGJ1bmRsZUlkIHRoZSBJRCBvZiB0aGUgYnVuZGxlIHRvIGNoZWNrCiAJICogQHJldHVybiBOdW1iZXJ8ZmFsc2UgcmV0dXJucyB0aGUgbnVtYmVyIG9mIGRheXMgYSBidW5kbGUgaGFzIGJlZW4gYXBwbGllZCB0byB0aGUgdXNlcidzIGFjY291bnQgb3IgZmFsc2UgaWYgdGhlIGJ1bmRsZSBpcyBub3QgYXBwbGllZCB0byB0aGVpciBhY2NvdW50CiAJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0RGF5c1dpdGhCdW5kbGUoJGJ1bmRsZUlkKQoJewkKCQkkYXBwbGllZEJ1bmRsZSA9IE1NX0FwcGxpZWRCdW5kbGU6OmdldEFwcGxpZWRCdW5kbGUoJHRoaXMtPmlkLCAkYnVuZGxlSWQpOwoJCQoJCWlmKCEkYXBwbGllZEJ1bmRsZS0+aXNWYWxpZCgpKQoJCXsgCgkJCS8vIGNoZWNrIHRvIHNlZSBpZiBtZW1iZXJzaGlwIHJlbGF0ZWQKCQkJJHVzZXJNZW1iZXJCdW5kbGVzID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpLT5nZXRCdW5kbGVzKCk7CgkJCSR1c2VyTWVtYmVyQnVuZGxlS2V5cyA9IGFycmF5X2tleXMoJHVzZXJNZW1iZXJCdW5kbGVzKTsgICAKCQkJaWYoaW5fYXJyYXkoJGJ1bmRsZUlkLCAkdXNlck1lbWJlckJ1bmRsZUtleXMpKQoJCQl7IAoJCQkJcmV0dXJuICR0aGlzLT5nZXREYXlzV2l0aEJ1bmRsZVdpdGhBY2Nlc3NUeXBlKCRidW5kbGVJZCwgTU1fQXBwbGllZEJ1bmRsZTo6JEFDQ0VTU19UWVBFX01FTUJFUlNISVAsICR0aGlzLT5nZXRNZW1iZXJzaGlwSWQoKSk7CgkJCX0gCgkJCWVsc2UKCQkJeyAKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCQkKCQlyZXR1cm4gJGFwcGxpZWRCdW5kbGUtPmdldERheXNXaXRoQnVuZGxlKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXREYXlzV2l0aEJ1bmRsZVdpdGhBY2Nlc3NUeXBlKCRidW5kbGVJZCwgJGFjY2Vzc1R5cGUsICRyZWZJZCkKCXsJCgkJJGFwcGxpZWRCdW5kbGUgPSBNTV9BcHBsaWVkQnVuZGxlOjpnZXRBcHBsaWVkQnVuZGxlV2l0aEFjY2Vzc1R5cGUoJHJlZklkLCAkYnVuZGxlSWQsICRhY2Nlc3NUeXBlKTsKCQkKCQlpZighJGFwcGxpZWRCdW5kbGUtPmlzVmFsaWQoKSkKCQl7ICAKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQlpZigkYWNjZXNzVHlwZSA9PSBNTV9BcHBsaWVkQnVuZGxlOjokQUNDRVNTX1RZUEVfTUVNQkVSU0hJUCkKCQl7CgkJCXJldHVybiAkYXBwbGllZEJ1bmRsZS0+Z2V0RGF5c1dpdGhCdW5kbGVBc01lbWJlcigkdGhpcy0+aWQpOwoJCX0KCQlyZXR1cm4gJGFwcGxpZWRCdW5kbGUtPmdldERheXNXaXRoQnVuZGxlKCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBidW5kbGVIYXNFeHBpcmVkKCRidW5kbGVJZCkKCXsKCQlpZigkdGhpcy0+aXNWYWxpZCgpICYmICR0aGlzLT5oYXNCdW5kbGUoJGJ1bmRsZUlkKSkKCQl7CgkJCSRhcHBsaWVkQnVuZGxlID0gTU1fQXBwbGllZEJ1bmRsZTo6Z2V0QXBwbGllZEJ1bmRsZSgkdGhpcy0+Z2V0SWQoKSwgJGJ1bmRsZUlkKTsKCQkJcmV0dXJuICRhcHBsaWVkQnVuZGxlLT5oYXNFeHBpcmVkKCk7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KCQoJCgkvKiogUFJPRFVDVCBSRUxBVEVEIE1FVEhPRFMgKi8KCS8qKgoJICogR2V0cyBhIGxpc3Qgb2YgSURzIG9mIGFsbCBwcm9kdWN0cyBwdXJjaGFzZWQKCSAqCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IG9mIHByb2R1Y3QgSURzIHB1cmNoYXNlZCBieSB0aGUgdXNlcgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0UHJvZHVjdHNQdXJjaGFzZWQoJGV4Y2x1ZGVTdGF0dXNJZHM9YXJyYXkoKSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHByb2R1Y3RzUHVyY2hhZWQgPSBhcnJheSgpOwoJCgkJJG9yZGVyc1RhYmxlID0gTU1fVEFCTEVfT1JERVJTOwoJCSRvcmRlckl0ZW1zVGFibGUgPSBNTV9UQUJMRV9PUkRFUl9JVEVNUzsKCQkkcHJvZHVjdEl0ZW1UeXBlID0gTU1fT3JkZXJJdGVtOjokT1JERVJfSVRFTV9UWVBFX1BST0RVQ1Q7IAoJCQoJCSRzcWwgPSAiU0VMRUNUIGl0ZW1faWQgYXMgcHJvZHVjdF9pZCwgeyRvcmRlckl0ZW1zVGFibGV9LnN0YXR1cyBGUk9NIHskb3JkZXJzVGFibGV9IEpPSU4geyRvcmRlckl0ZW1zVGFibGV9IE9OICh7JG9yZGVyc1RhYmxlfS5pZCA9IHskb3JkZXJJdGVtc1RhYmxlfS5vcmRlcl9pZCkgICI7CgkJJHNxbCAuPSAiIFdIRVJFIChpdGVtX3R5cGUgPSB7JHByb2R1Y3RJdGVtVHlwZX0pIEFORCAodXNlcl9pZCA9ICd7JHRoaXMtPmdldElkKCl9JykgICI7CgkKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQoJCWlmKCRyZXN1bHRzKQoJCXsKCQkJZm9yZWFjaCgkcmVzdWx0cyBhcyAkcm93RGF0YSkKCQkJewoJCQkJaWYoIWluX2FycmF5KCRyb3dEYXRhLT5zdGF0dXMsICRleGNsdWRlU3RhdHVzSWRzKSkKCQkJCXsKCQkJCQlhcnJheV9wdXNoKCRwcm9kdWN0c1B1cmNoYWVkLCAkcm93RGF0YS0+cHJvZHVjdF9pZCk7CgkJCQl9CgkJCX0KCQl9CgkKCQlyZXR1cm4gJHByb2R1Y3RzUHVyY2hhZWQ7Cgl9CgoJCgkKCS8qKiBHSUZUIFJFTEFURUQgTUVUSE9EUyAqLwoJCglwdWJsaWMgZnVuY3Rpb24gaGFzR2lmdHMoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQoJCSRzcWwgPSAiU0VMRUNUIGNvdW50KCopIGFzIHRvdGFsIEZST00gIi5NTV9UQUJMRV9DT1VQT05TLiIgV0hFUkUgaXNfZ2lmdCA9ICcxJyBBTkQgZ2lmdF91c2VyX2lkID0gJ3skdGhpcy0+Z2V0SWQoKX0nOyI7CgkKCQkkcm93ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgkKCQlpZihpc19udWxsKCRyb3cpKQoJCXsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQoJCXJldHVybiAoJHJvdy0+dG90YWwgPiAwKTsKCX0KCQoJCgkvKioKCSAqIEdldHMgYSBsaXN0IG9mIGFsbCBhY3RpdmUgc3Vic2NyaXB0aW9ucyB0aGF0IHdlcmUgZ2lmdGVkCgkgKgoJICogQHBhcmFtICRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMgaW5kaWNhdGVzIHdoZXRoZXIgb3ZlcmR1ZSBzdWJzY3JpcHRpb25zIHNob3VsZCByZXR1cm5lZCBhcyB3ZWxsCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IG9mIGFzc29jaWF0aXZlIGFycmF5cyB3aXRoIHRoZSBmb2xsb3dpbmcgaW5kZWNpZXM6IGlkLCBuYW1lLCBhcHBseURhdGUsIGFtb3VudAoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWN0aXZlR2lmdFN1YnNjcmlwdGlvbnMoJGluY2x1ZGVPdmVyZHVlU3Vic2NyaXB0aW9ucz1mYWxzZSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkKCQkkYWN0aXZlU3Vic2NyaXB0aW9ucyA9IGFycmF5KCk7CgkJCgkJJG9yZGVyc1RhYmxlID0gTU1fVEFCTEVfT1JERVJTOwoJCSRvcmRlckl0ZW1zVGFibGUgPSBNTV9UQUJMRV9PUkRFUl9JVEVNUzsKCQkkc3RhdHVzUmVjdXJyaW5nID0gTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklORzsKCQkkc3RhdHVzUmViaWxsRmFpbGVkID0gTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklOR19SRUJJTExfRkFJTEVEOwoJCQoJCSRzcWwgPSAiU0VMRUNUIG9pLnRvdGFsLCBvaS5pdGVtX2lkLCBvaS5zdGF0dXMsIG9pLmlkIGFzIG9yZGVyX2l0ZW1faWQsIG8uZGF0ZV9hZGRlZCBGUk9NIHskb3JkZXJJdGVtc1RhYmxlfSBvaSAiLgoJCQkiTEVGVCBKT0lOIHskb3JkZXJzVGFibGV9IG8gb24gKG9pLm9yZGVyX2lkID0gby5pZCkgIi4KCQkJIkxFRlQgSk9JTiB7JHdwZGItPnVzZXJzfSB1IE9OIChvLnVzZXJfaWQgPSB1LklEKSAiLgoJCQkiV0hFUkUgKG8udXNlcl9pZCA9IHskdGhpcy0+Z2V0SWQoKX0pIEFORCAob2kuc3RhdHVzID0geyRzdGF0dXNSZWN1cnJpbmd9IjsKCQoJCWlmKCRpbmNsdWRlT3ZlcmR1ZVN1YnNjcmlwdGlvbnMpCgkJewoJCQkkc3FsIC49ICIgT1Igb2kuc3RhdHVzPSB7JHN0YXR1c1JlYmlsbEZhaWxlZH0iOwoJCX0KCQoJCSRzcWwgLj0gIikgQU5EIChvaS5pc19naWZ0ID0gMSk7IjsKCQoJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCgkJaWYoJHJlc3VsdHMpCgkJewoJCQlmb3JlYWNoKCRyZXN1bHRzIGFzICRyb3dEYXRhKQoJCQl7CgkJCQkkY3JudFJvdyA9IGFycmF5KCk7CgkJCQkkY3JudFJvd1siYXBwbHlEYXRlIl0gPSAkcm93RGF0YS0+ZGF0ZV9hZGRlZDsKCQkJCSRjcm50Um93WyJhbW91bnQiXSA9ICRyb3dEYXRhLT50b3RhbDsKCQoJCQkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgkcm93RGF0YS0+aXRlbV9pZCk7CgkJCQkkcmViaWxsRGVzY3JpcHRpb24gPSBNTV9OT19EQVRBOwoJCgkJCQlpZigkcHJvZHVjdC0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCSRjcm50Um93WyJpZCJdID0gJHByb2R1Y3QtPmdldElkKCk7CgkJCQkJJGNybnRSb3dbIm5hbWUiXSA9ICRwcm9kdWN0LT5nZXROYW1lKCk7CgkJCQkJJHJlYmlsbERlc2NyaXB0aW9uID0gJHByb2R1Y3QtPmdldEJpbGxpbmdEZXNjcmlwdGlvbihmYWxzZSk7CgkJCQl9CgkJCQkJCgkJCQkkY3JudFJvd1sicmViaWxsX2Rlc2NyaXB0aW9uIl0gPSAkcmViaWxsRGVzY3JpcHRpb247CgkJCQkkY3JudFJvd1sic3RhdHVzIl0gPSAkcm93RGF0YS0+c3RhdHVzOwoJCQkJJGNybnRSb3dbIm9yZGVySXRlbUlkIl0gPSAkcm93RGF0YS0+b3JkZXJfaXRlbV9pZDsKCQoJCQkJYXJyYXlfcHVzaCgkYWN0aXZlU3Vic2NyaXB0aW9ucywgJGNybnRSb3cpOwoJCQl9CgkJfQoJCgkJcmV0dXJuICRhY3RpdmVTdWJzY3JpcHRpb25zOwoJfQoJCgkKCQoJLyoqIENVU1RPTSBGSUVMRC1SRUxBVEVEIE1FVEhPRFMgKiovCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRDdXN0b21EYXRhKCRjdXN0b21GaWVsZElkLCAkdmFsdWUpCgl7CgkJJGZpZWxkRGF0YSA9IE1NX0N1c3RvbUZpZWxkRGF0YTo6Z2V0Q3VzdG9tRmllbGREYXRhQnlVc2VyKCRjdXN0b21GaWVsZElkLCAkdGhpcy0+Z2V0SWQoKSk7CgkJCgkJLy8gdXBkYXRlIGV4aXN0aW5nIGRhdGEKCQlpZigkZmllbGREYXRhLT5pc1ZhbGlkKCkpCgkJewoJCQlpZihzdHJpcF90YWdzKCR2YWx1ZSkgIT0gc3RyaXBfdGFncygkZmllbGREYXRhLT5nZXRWYWx1ZSgpKSkKCQkJewoJCQkJJGZpZWxkRGF0YS0+c2V0VmFsdWUoc3RyaXBfdGFncygkdmFsdWUpKTsKCQkJCXJldHVybiAkZmllbGREYXRhLT5jb21taXREYXRhKCk7CgkJCX0KCQl9CgkJZWxzZSBpZigkdmFsdWUgIT0gIiIpCgkJewoJCQkkZmllbGREYXRhLT5zZXRVc2VySWQoJHRoaXMtPmlkKTsKCQkJJGZpZWxkRGF0YS0+c2V0Q3VzdG9tRmllbGRJZCgkY3VzdG9tRmllbGRJZCk7CgkJCSRmaWVsZERhdGEtPnNldFZhbHVlKHN0cmlwX3RhZ3MoJHZhbHVlKSk7CgkJCXJldHVybiAkZmllbGREYXRhLT5jb21taXREYXRhKCk7CgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKCX0KCQoJLyoqCgkgKiBAcGFyYW0gTnVtYmVyICRmaWVsZElkIHRoZSBJRCBvZiB0aGUgY3VzdG9tIGZpZWxkIHRvIGdldCBkYXRhIGZvcgoJICogQHJldHVybiBNTV9DdXN0b21GaWVsZERhdGEKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEN1c3RvbURhdGFCeUZpZWxkSWQoJGZpZWxkSWQpCgl7CgkJcmV0dXJuIE1NX0N1c3RvbUZpZWxkRGF0YTo6Z2V0Q3VzdG9tRmllbGREYXRhQnlVc2VyKCRmaWVsZElkLCAkdGhpcy0+Z2V0SWQoKSk7Cgl9CgkKCQoJCiAJLyoqIEdFVFRFUlMvU0VUVEVSUyAqKi8KCiAJcHVibGljIGZ1bmN0aW9uIGlzRnJlZSgpCiAJewogCQkkbWVtYmVyc2hpcCA9ICR0aGlzLT5nZXRNZW1iZXJzaGlwTGV2ZWwoKTsKIAkJcmV0dXJuICRtZW1iZXJzaGlwLT5pc0ZyZWUoKTsKIAl9CgogCQogCS8qKgogCSAqIFJldHVybnMgd2hldGhlciBhIHVzZXIgaGFzIGEgc3RvcmVkIGNhcmQgb24gZmlsZSB3aXRoIGFuIGFjdGl2ZSBwYXltZW50IHNlcnZpY2UKIAkgKiAKIAkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBvciBmYWxzZQogCSAqLwoJcHVibGljIGZ1bmN0aW9uIGhhc0NhcmRPbkZpbGUoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQlpZiAoISR0aGlzLT5pc1ZhbGlkKCkpCgkJewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCSRzcWwgPSAiU0VMRUNUIENPVU5UKCopIEZST00gIi5NTV9UQUJMRV9DQVJEX09OX0ZJTEUuIiBjb2YsICAiLk1NX1RBQkxFX1BBWU1FTlRfU0VSVklDRVMuIiBwcyAiLgoJCQkgICAiV0hFUkUgKGNvZi5wYXltZW50X3NlcnZpY2VfaWQgPSBwcy5pZCkgQU5EIChjb2YudXNlcl9pZCA9ICd7JHRoaXMtPmdldElkKCl9JykgQU5EIChwcy5hY3RpdmUgPSAxKSI7CgkJJGNhcmRzT25GaWxlID0gJHdwZGItPmdldF92YXIoJHNxbCk7CgkJCgkJaWYgKCRjYXJkc09uRmlsZSA9PT0gZmFsc2UpCgkJewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCQoJCXJldHVybiAoJGNhcmRzT25GaWxlID4gMCk7Cgl9CgkKCS8qKgoJICogUmV0dXJucyB0aGUgYmlsbGluZyBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlcidzIGNhcmQgb24gZmlsZSBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSBpdCB3aWxsIGp1c3QgCgkgKiByZXR1cm4gdGhlIHByaW1hcnkgYmlsbGluZyBhZGRyZXNzIG9uIHRoZSB1c2VyJ3MgYWNjb3VudC4KCSAqIAoJICogQHJldHVybiBNTV9DdXN0b21lckFkZHJlc3MgcmV0dXJucyB0aGUgYmlsbGluZyBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdXNlcidzIGNhcmQgb24gZmlsZSBvciB0aGUgYmlsbGluZyBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGVpciBhY2NvdW50CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRDYXJkT25GaWxlQmlsbGluZ0FkZHJlc3MoKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkQ09GT3JkZXJTUUwgPSAiU0VMRUNUIG9yaWdpbmFsX29yZGVyX2lkIEZST00gIi5NTV9UQUJMRV9DQVJEX09OX0ZJTEUuICIgV0hFUkUgdXNlcl9pZCA9ICd7JHRoaXMtPmlkfSciOwoJCSRjb2ZPcmRlcklkID0gJHdwZGItPmdldF92YXIoJENPRk9yZGVyU1FMKTsKCQlpZiAoIWVtcHR5KCRjb2ZPcmRlcklkKSkKCQl7CgkJCSRvcmRlciA9IG5ldyBNTV9PcmRlcigkY29mT3JkZXJJZCk7CgkJCWlmICgkb3JkZXItPmlzVmFsaWQoKSkKCQkJewoJCQkJcmV0dXJuICRvcmRlci0+Z2V0QmlsbGluZ0FkZHJlc3MoKTsKCQkJfQoJCX0KCQlyZXR1cm4gJHRoaXMtPmdldEZ1bGxCaWxsaW5nQWRkcmVzcygpOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBpc0FjdGl2ZSgpCgl7CgkJaWYoJHRoaXMtPmdldFN0YXR1cygpICE9IE1NX1N0YXR1czo6JENBTkNFTEVEICYmICR0aGlzLT5nZXRTdGF0dXMgIT0gTU1fU3RhdHVzOjokUEFVU0VEKSAKCQl7CgkJCXJldHVybiB0cnVlOwoJCX0KCQllbHNlIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldFRvdGFsUGF5bWVudHMoKQoJewoJCWlmKCR0aGlzLT50b3RhbFBheW1lbnRzID09IDApCgkJewoJCQlnbG9iYWwgJHdwZGI7CgkJCSRzcWwgPSAiU0VMRUNUIC0oU1VNKHQuYW1vdW50KSkgQVMgYW1vdW50IEZST00gbW1fdHJhbnNhY3Rpb25fbG9nIHQgSU5ORVIgSk9JTiBtbV9vcmRlcnMgbyBPTiAodC5vcmRlcl9pZCA9IG8uaWQpIFdIRVJFICh0LnRyYW5zYWN0aW9uX3R5cGUgSU4gKDIsNCkpIEFORCAoby51c2VyX2lkID0geyR0aGlzLT5pZH0pICI7CgkJCSR0b3RhbFBheW1lbnRzID0gJHdwZGItPmdldF92YXIoJHNxbCk7CgkJCQoJCQlpZighaXNfbnVsbCgkdG90YWxQYXltZW50cykpCgkJCXsKCQkJCSR0aGlzLT50b3RhbFBheW1lbnRzID0gJHRvdGFsUGF5bWVudHM7CgkJCX0KCQl9CgkJCgkJcmV0dXJuICR0aGlzLT50b3RhbFBheW1lbnRzOwoJfQoJCgkvKioKCSAqIFJldHVybnMgdGhlIHN1bSBvZiBhbGwgcmVmdW5kcywgY3JlZGl0cywgYW5kIGNoYXJnZWJhY2tzIGlzc3VlZCB0byB0aGUgdXNlcgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0VG90YWxSZWZ1bmRzKCkKCXsKCQlpZigkdGhpcy0+dG90YWxSZWZ1bmRzID09IDApCgkJewoJCQlnbG9iYWwgJHdwZGI7CgkJCSRzcWwgPSAiU0VMRUNUIC0oU1VNKHQuYW1vdW50KSkgQVMgYW1vdW50IEZST00gbW1fdHJhbnNhY3Rpb25fbG9nIHQgSU5ORVIgSk9JTiBtbV9vcmRlcnMgbyBPTiAodC5vcmRlcl9pZCA9IG8uaWQpIFdIRVJFICh0LnRyYW5zYWN0aW9uX3R5cGUgSU4gKDUsNiw3KSkgQU5EIChvLnVzZXJfaWQgPSB7JHRoaXMtPmlkfSkgIjsKCQkJJHRvdGFsUmVmdW5kcyA9ICR3cGRiLT5nZXRfdmFyKCRzcWwpOwoJCQkKCQkJaWYoIWlzX251bGwoJHRvdGFsUmVmdW5kcykpCgkJCXsKCQkJCSR0aGlzLT50b3RhbFJlZnVuZHMgPSAkdG90YWxSZWZ1bmRzOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkdGhpcy0+dG90YWxSZWZ1bmRzOwoJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXRVc2VybmFtZSgkc3RyKQogCXsKIAkJaWYoJHN0ciAhPSAkdGhpcy0+dXNlcm5hbWUpCiAJCXsKIAkJCSR0aGlzLT5sYXN0VXNlcm5hbWUgPSAkdGhpcy0+dXNlcm5hbWU7CiAJCX0KIAkgCSR0aGlzLT51c2VybmFtZSA9ICRzdHI7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0VXNlcm5hbWUoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+dXNlcm5hbWU7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXRGb3Jnb3RQYXNzd29yZEhhc2goJHN0cikKIAl7CgkJaWYoJHRoaXMtPmZvcmdvdFBhc3N3b3JkSGFzaCAhPSAkc3RyKQogCQl7CiAJCQkkdGhpcy0+bGFzdEZvcmdvdFBhc3N3b3JkSGFzaCA9ICR0aGlzLT5mb3Jnb3RQYXNzd29yZEhhc2g7CiAJCX0KIAkJJHRoaXMtPmZvcmdvdFBhc3N3b3JkSGFzaCA9ICRzdHI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRGb3Jnb3RQYXNzd29yZEhhc2goKQogCXsKIAkgCXJldHVybiAkdGhpcy0+Zm9yZ290UGFzc3dvcmRIYXNoOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldFBhc3N3b3JkKCRzdHIpCiAJewoJCU1NX1Nlc3Npb246OnZhbHVlKE1NX1Nlc3Npb246OiRQQVJBTV9VU0VSX0RBVEFfUEFTU1dPUkQsICRzdHIpOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFBhc3N3b3JkKCkKIAl7CiAJIAlyZXR1cm4gTU1fU2Vzc2lvbjo6dmFsdWUoTU1fU2Vzc2lvbjo6JFBBUkFNX1VTRVJfREFUQV9QQVNTV09SRCkgPyBNTV9TZXNzaW9uOjp2YWx1ZShNTV9TZXNzaW9uOjokUEFSQU1fVVNFUl9EQVRBX1BBU1NXT1JEKSA6IE5VTEw7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0RW1haWwoJHN0cikKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICYmICgkc3RyICE9ICR0aGlzLT5lbWFpbCkpCiAJCXsKIAkJCSR0aGlzLT5sYXN0RW1haWwgPSAkdGhpcy0+ZW1haWw7CiAJCX0KIAkgCSR0aGlzLT5lbWFpbCA9ICRzdHI7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0RW1haWwoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+ZW1haWw7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0Rmlyc3ROYW1lKCRzdHIpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAgJiYgKCRzdHIgIT0gJHRoaXMtPmZpcnN0TmFtZSkpCiAJCXsKIAkJCSR0aGlzLT5sYXN0Rmlyc3ROYW1lID0gJHRoaXMtPmZpcnN0TmFtZTsKIAkJfQogCSAJJHRoaXMtPmZpcnN0TmFtZSA9ICRzdHI7CiAJfQogCSAKICAJcHVibGljIGZ1bmN0aW9uIGdldEZpcnN0TmFtZSgpCiAJewogCQlyZXR1cm4gJHRoaXMtPmZpcnN0TmFtZTsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRMYXN0TmFtZSgkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPmxhc3ROYW1lKSkKIAkJewogCQkJJHRoaXMtPmxhc3RMYXN0TmFtZSA9ICR0aGlzLT5sYXN0TmFtZTsKIAkJfQogCSAJJHRoaXMtPmxhc3ROYW1lID0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRMYXN0TmFtZSgpCiAJewogCQlyZXR1cm4gc3RyaXBzbGFzaGVzKCR0aGlzLT5sYXN0TmFtZSk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0RnVsbE5hbWUoJGxhc3ROYW1lRmlyc3Q9ZmFsc2UpCiAJewogCQkkZmlyc3RQb3NpdGlvbiA9ICgkbGFzdE5hbWVGaXJzdCk/JHRoaXMtPmdldExhc3ROYW1lKCk6JHRoaXMtPmdldEZpcnN0TmFtZSgpOwogCQkkc2VwYXJhdG9yID0gKCRsYXN0TmFtZUZpcnN0KT8iLCAiOiIgIjsKIAkJJGxhc3RQb3NpdGlvbiA9ICgkbGFzdE5hbWVGaXJzdCk/JHRoaXMtPmdldEZpcnN0TmFtZSgpOiR0aGlzLT5nZXRMYXN0TmFtZSgpOwogCQkKIAkJJG5hbWUgPSAkZmlyc3RQb3NpdGlvbjsKIAkJaWYgKCFlbXB0eSgkZmlyc3RQb3NpdGlvbikgJiYgIWVtcHR5KCRsYXN0UG9zaXRpb24pKQogCQl7CiAJCQkkbmFtZSAuPSAkc2VwYXJhdG9yOwogCQl9CiAJCSRuYW1lIC49ICRsYXN0UG9zaXRpb247CiAJCQogCQlyZXR1cm4gJG5hbWU7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXRJc0NTVkltcG9ydCgkdmFsKQogCXsKIAkJJHRoaXMtPmlzQ1NWSW1wb3J0ID0gJHZhbDsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldElzQ1NWSW1wb3J0KCkKIAl7CiAJCSR0aGlzLT5pc0NTVkltcG9ydDsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRQaG9uZSgkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPnBob25lKSkKIAkJewogCQkJJHRoaXMtPmxhc3RQaG9uZSA9ICR0aGlzLT5waG9uZTsKIAkJfQogCSAJJHRoaXMtPnBob25lID0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRQaG9uZSgpCiAJewogCQlpZihpc3NldCgkdGhpcy0+cGhvbmUpKQogCQl7CiAJIAkJcmV0dXJuICR0aGlzLT5waG9uZTsKIAkJfQogCQlyZXR1cm4gIiI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBzZXROb3Rlcygkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPm5vdGVzKSkKIAkJewogCQkJJHRoaXMtPmxhc3ROb3RlcyA9ICR0aGlzLT5ub3RlczsKIAkJfQogCSAJJHRoaXMtPm5vdGVzID0gJHN0cjsKIAl9CiAJIAogIAlwdWJsaWMgZnVuY3Rpb24gZ2V0Tm90ZXMoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+bm90ZXM7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0UmVnaXN0cmF0aW9uRGF0ZSgkZGF0ZSkKIAl7CiAJIAkkdGhpcy0+cmVnaXN0cmF0aW9uRGF0ZSA9ICRkYXRlOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFJlZ2lzdHJhdGlvbkRhdGUoJGRvRm9ybWF0PWZhbHNlKQogCXsKIAkgCWlmKCRkb0Zvcm1hdCA9PSBmYWxzZSkgCiAJIAl7CiAJIAkJcmV0dXJuICR0aGlzLT5yZWdpc3RyYXRpb25EYXRlOwogCSAJfQogCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+cmVnaXN0cmF0aW9uRGF0ZSkpIAogCQl7CiAJCQlyZXR1cm4gTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCR0aGlzLT5yZWdpc3RyYXRpb25EYXRlKTsKIAkJfQogCQllbHNlCiAJCXsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQogCiAJcHVibGljIGZ1bmN0aW9uIHNldEV4cGlyYXRpb25EYXRlKCRkYXRlKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgICYmICgkZGF0ZSAhPSAkdGhpcy0+ZXhwaXJhdGlvbkRhdGUpKQogCQl7CiAJCQkkdGhpcy0+bGFzdEV4cGlyYXRpb25EYXRlID0gJHRoaXMtPmV4cGlyYXRpb25EYXRlOwogCQl9CiAJCSR0aGlzLT5leHBpcmF0aW9uRGF0ZSA9ICRkYXRlOwogCX0KIAkJCiAJcHVibGljIGZ1bmN0aW9uIGdldEV4cGlyYXRpb25EYXRlKCRkb0Zvcm1hdD1mYWxzZSkKIAl7CiAJCSRtZW1iZXJzaGlwID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpOwogCQlpZigkbWVtYmVyc2hpcC0+ZG9lc0V4cGlyZSgpKQogCQl7CiAJCQlpZihlbXB0eSgkdGhpcy0+ZXhwaXJhdGlvbkRhdGUpIHx8ICR0aGlzLT5leHBpcmF0aW9uRGF0ZSA9PSAiMDAwMC0wMC0wMCAwMDowMDowMCIpCiAJCQl7CiAJCQkJJHRoaXMtPnNldEV4cGlyYXRpb25EYXRlKCRtZW1iZXJzaGlwLT5nZXRFeHBpcmF0aW9uRGF0ZShNTV9VdGlsczo6Z2V0Q3VycmVudFRpbWUoKSkpOwogCQkJfQoJIAkJCgkgCQlpZigkZG9Gb3JtYXQgPT0gZmFsc2UpIAoJIAkgCXsKCSAJIAkJcmV0dXJuICR0aGlzLT5leHBpcmF0aW9uRGF0ZTsKCSAJIAl9CgkgCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+ZXhwaXJhdGlvbkRhdGUpKSAKCSAJCXsKCSAJCQlyZXR1cm4gTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCR0aGlzLT5leHBpcmF0aW9uRGF0ZSk7CgkgCQl9CiAJCX0KIAkJCiAJCXJldHVybiBudWxsOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0Q2FuY2VsbGF0aW9uRGF0ZSgkZGF0ZSkKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICAmJiAoJGRhdGUgIT0gJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGUpKQogCQl7CiAJCQkkdGhpcy0+bGFzdENhbmNlbGxhdGlvbkRhdGUgPSAkdGhpcy0+Y2FuY2VsbGF0aW9uRGF0ZTsKIAkJfQogCQkkdGhpcy0+Y2FuY2VsbGF0aW9uRGF0ZSA9ICRkYXRlOwogCX0KIAkJCiAJcHVibGljIGZ1bmN0aW9uIGdldENhbmNlbGxhdGlvbkRhdGUoJGRvRm9ybWF0PWZhbHNlKQogCXsKIAkJaWYoJGRvRm9ybWF0ID09IGZhbHNlKQogCQl7CiAJCQlyZXR1cm4gJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGU7CiAJCX0KIAkJZWxzZSBpZighZW1wdHkoJHRoaXMtPmNhbmNlbGxhdGlvbkRhdGUpKQogCQl7CiAJCQlyZXR1cm4gTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCR0aGlzLT5jYW5jZWxsYXRpb25EYXRlKTsKIAkJfQogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0UGVuZGluZ1N0YXR1cygkc3RhdHVzKQogCXsKIAkJaWYoJHN0YXR1cyA9PSBNTV9TdGF0dXM6OiRQQVVTRUQgfHwgJHN0YXR1cyA9PSBNTV9TdGF0dXM6OiRDQU5DRUxFRCkKIAkJewogCQkJJHRoaXMtPnBlbmRpbmdTdGF0dXMgPSAkc3RhdHVzOwogCQl9CiAJCWVsc2UgCiAJCXsKIAkJCSR0aGlzLT5wZW5kaW5nU3RhdHVzID0gIjAiOwogCQl9CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRQZW5kaW5nU3RhdHVzKCkKIAl7CiAJCWlmKCR0aGlzLT5wZW5kaW5nU3RhdHVzICE9ICIwIiAmJiAkdGhpcy0+cGVuZGluZ1N0YXR1cyAhPSBNTV9TdGF0dXM6OiRQQVVTRUQgJiYgJHRoaXMtPnBlbmRpbmdTdGF0dXMgIT0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQpCiAJCXsJCgkgCQkkY2FuY2VsbGF0aW9uTWV0aG9kID0gTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfREZMVF9DQU5DRUxMQVRJT05fTUVUSE9EKTsKCSAJCWlmICgkY2FuY2VsbGF0aW9uTWV0aG9kID09IE1NX0NhbmNlbGxhdGlvbk1ldGhvZDo6JENBTkNFTF9IQVJEKQoJIAkJewoJIAkJCSR0aGlzLT5wZW5kaW5nU3RhdHVzID0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQ7CgkgCQl9CgkgCQllbHNlIGlmICgkY2FuY2VsbGF0aW9uTWV0aG9kID09IE1NX0NhbmNlbGxhdGlvbk1ldGhvZDo6JENBTkNFTF9QQVVTRSkKCSAJCXsKCSAJCQkkdGhpcy0+cGVuZGluZ1N0YXR1cyA9IE1NX1N0YXR1czo6JFBBVVNFRDsKCSAJCX0KCSAJCWVsc2UgCgkgCQl7CgkgCQkJJHRoaXMtPnBlbmRpbmdTdGF0dXMgPSBNTV9TdGF0dXM6OiRDQU5DRUxFRDsKCSAJCX0KIAkJfQogCQkKIAkJcmV0dXJuICR0aGlzLT5wZW5kaW5nU3RhdHVzOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldE1lbWJlcnNoaXBJZCgkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPm1lbWJlcnNoaXBJZCkpCiAJCXsKIAkJCSR0aGlzLT5tZW1iZXJzaGlwTGV2ZWxDaGFuZ2VkRmxhZyA9IHRydWU7CiAJCQkkdGhpcy0+bGFzdE1lbWJlcnNoaXBJZCA9ICR0aGlzLT5tZW1iZXJzaGlwSWQ7CiAJCQkkdGhpcy0+bGFzdE1lbWJlcnNoaXBOYW1lID0gJHRoaXMtPmdldE1lbWJlcnNoaXBOYW1lKCk7CiAJCX0KIAkgCSR0aGlzLT5tZW1iZXJzaGlwSWQgPSAkc3RyOwogCX0KIAkKIAkvKioKIAkgKiBAcmV0dXJuIE1NX01lbWJlcnNoaXBMZXZlbAogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRNZW1iZXJzaGlwTGV2ZWwoKQogCXsKIAkJaWYoIWlzc2V0KCR0aGlzLT5tZW1iZXJzaGlwKSB8fCAhJHRoaXMtPm1lbWJlcnNoaXAtPmlzVmFsaWQoKSB8fCAkdGhpcy0+bWVtYmVyc2hpcElkICE9ICR0aGlzLT5tZW1iZXJzaGlwLT5nZXRJZCgpKSAKIAkJewogCQkJJHRoaXMtPm1lbWJlcnNoaXAgPSBuZXcgTU1fTWVtYmVyc2hpcExldmVsKCR0aGlzLT5tZW1iZXJzaGlwSWQpOwogCQl9CiAJCQogCQlyZXR1cm4gJHRoaXMtPm1lbWJlcnNoaXA7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0TWVtYmVyc2hpcElkKCkKIAl7CiAJIAlyZXR1cm4gJHRoaXMtPm1lbWJlcnNoaXBJZDsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldE1lbWJlcnNoaXBOYW1lKCkKIAl7CiAJCSRtZW1iZXJzaGlwID0gJHRoaXMtPmdldE1lbWJlcnNoaXBMZXZlbCgpOwogCSAJcmV0dXJuICRtZW1iZXJzaGlwLT5nZXROYW1lKCk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0RGF5c0NhbGNWYWx1ZSgkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPmRheXNDYWxjVmFsdWUpKQogCQl7CiAJCQkkdGhpcy0+bGFzdERheXNDYWxjVmFsdWUgPSAkdGhpcy0+ZGF5c0NhbGNWYWx1ZTsKIAkJfQogCSAJJHRoaXMtPmRheXNDYWxjVmFsdWUgPSAkc3RyOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldERheXNDYWxjVmFsdWUoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+ZGF5c0NhbGNWYWx1ZTsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXREYXlzQ2FsY01ldGhvZCgkc3RyKQogCXsKIAkJaWYgKCR0aGlzLT5pc1ZhbGlkKCkgJiYgKCRzdHIgIT0gJHRoaXMtPmRheXNDYWxjTWV0aG9kKSkKIAkJewogCQkJJHRoaXMtPmxhc3REYXlzQ2FsY01ldGhvZCA9ICR0aGlzLT5kYXlzQ2FsY01ldGhvZDsKIAkJfQogCSAJJHRoaXMtPmRheXNDYWxjTWV0aG9kID0gJHN0cjsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldERheXNDYWxjTWV0aG9kKCkKIAl7CiAJIAlyZXR1cm4gJHRoaXMtPmRheXNDYWxjTWV0aG9kOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldFN0YXR1cygkbmV3U3RhdHVzKQogCXsKIAkJaWYoJG5ld1N0YXR1cyAhPSAkdGhpcy0+c3RhdHVzKQogCQl7CiAJCQkkdGhpcy0+bGFzdFN0YXR1cyA9ICR0aGlzLT5zdGF0dXM7CiAJCQkkdGhpcy0+bGFzdFN0YXR1c05hbWUgPSAkdGhpcy0+Z2V0U3RhdHVzTmFtZSgpOwogCQkJJHRoaXMtPnN0YXR1c1VwZGF0ZWQgPSB0cnVlOwogCQl9CiAJCQogCQkvLyB1c2VyIGJlY29taW5nIGFjdGl2ZSBhZnRlciBiZWluZyBpbiBhbiBlcnJvci9wZW5kaW5nIHN0YXRlCiAJCWlmKCgkdGhpcy0+bGFzdFN0YXR1cyA9PSBNTV9TdGF0dXM6OiRQRU5ESU5HX0FDVElWQVRJT04gfHwgJHRoaXMtPmxhc3RTdGF0dXMgPT0gTU1fU3RhdHVzOjokRVJST1IpIAogCQkJJiYgKCRuZXdTdGF0dXMgPT0gTU1fU3RhdHVzOjokQUNUSVZFKSkKIAkJewogCQkJLy8gY2xlYXIgc3RhdHVzIG1lc3NhZ2UKIAkJCSR0aGlzLT5zdGF0dXNNZXNzYWdlID0gIiI7CiAJCX0KIAkJCgkJaWYoKCRuZXdTdGF0dXMgIT0gJHRoaXMtPnN0YXR1cykgJiYgKCRuZXdTdGF0dXMgPT0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQgfHwgJG5ld1N0YXR1cyA9PSBNTV9TdGF0dXM6OiRQQVVTRUQpKQogCQl7CiAJCQkkdGhpcy0+c2V0RGF5c0NhbGNWYWx1ZSgkdGhpcy0+Z2V0RGF5c0FzTWVtYmVyKCkpOwogCQkJJHRoaXMtPnNldERheXNDYWxjTWV0aG9kKE1NX0RheXNDYWxjdWxhdGlvblR5cGVzOjokRklYRUQpOwogCQkJJHRoaXMtPnN0YXR1cyA9ICRuZXdTdGF0dXM7CiAJCX0KIAkJZWxzZSBpZigoJHRoaXMtPnN0YXR1cyA9PSBNTV9TdGF0dXM6OiRDQU5DRUxFRCB8fCAkdGhpcy0+c3RhdHVzID09IE1NX1N0YXR1czo6JFBBVVNFRCB8fCAkdGhpcy0+c3RhdHVzID09IE1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OKSAmJiAkbmV3U3RhdHVzID09IE1NX1N0YXR1czo6JEFDVElWRSkKIAkJewogCQkJJHRoaXMtPnBlbmRpbmdTdGF0dXMgPSAwOwogCQkJJHRoaXMtPm1lbWJlcnNoaXBMZXZlbENoYW5nZWRGbGFnID0gdHJ1ZTsKIAkJCSRkYXlzID0gJHRoaXMtPmdldERheXNBc01lbWJlcigpOwogCQkJJG5ld0RhdGUgPSBzdHJ0b3RpbWUoIi0iLiRkYXlzLiIgZGF5cyIpOwogCQkJJHRoaXMtPnNldERheXNDYWxjVmFsdWUoRGF0ZSgiWS1tLWQgaDppOnMiLCRuZXdEYXRlKSk7CiAJCQkkdGhpcy0+c2V0RGF5c0NhbGNNZXRob2QoTU1fRGF5c0NhbGN1bGF0aW9uVHlwZXM6OiRDVVNUT01fREFURSk7CiAJCQkkdGhpcy0+c3RhdHVzID0gJG5ld1N0YXR1czsKIAkJfQogCQllbHNlCiAJCXsJCiAJCQkkdGhpcy0+c3RhdHVzID0gJG5ld1N0YXR1czsKIAkJfQogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFN0YXR1cygpCiAJewogCQlpZigkdGhpcy0+aXNWYWxpZCgpKQogCQl7CiAJCQlpZigkdGhpcy0+ZG9lc0V4cGlyZSgpKQogCQkJewoJCSAJCWlmKCR0aGlzLT5zdGF0dXMgPT0gTU1fU3RhdHVzOjokQUNUSVZFKQoJCSAJCXsKCQkgCQkJLy8gY2hlY2sgaWYgbWVtYmVyc2hpcCBoYXMgZXhwaXJlZAkKCQkgCQkJaWYoJHRoaXMtPm1lbWJlcnNoaXBIYXNFeHBpcmVkKCkpCgkJIAkJCXsKCQkgCQkJCSR0aGlzLT5zZXRTdGF0dXMoTU1fU3RhdHVzOjokRVhQSVJFRCk7CgkJIAkJCQkkdGhpcy0+Y29tbWl0U3RhdHVzT25seSgpOwoJCSAJCQl9IAoJCSAJCX0KCQkgCQllbHNlIGlmKCR0aGlzLT5zdGF0dXMgPT0gTU1fU3RhdHVzOjokRVhQSVJFRCkKCQkgCQl7CgkJIAkJCS8vIGNoZWNrIGlmIG1lbWJlcnNoaXAgc2hvdWxkIGJlIG1hZGUgYWN0aXZlCgkJIAkJCWlmKCEkdGhpcy0+bWVtYmVyc2hpcEhhc0V4cGlyZWQoKSkKCQkgCQkJewoJCSAJCQkJJHRoaXMtPnNldFN0YXR1cyhNTV9TdGF0dXM6OiRBQ1RJVkUpOwoJCSAJCQkJJHRoaXMtPmNvbW1pdFN0YXR1c09ubHkoKTsKCQkgCQkJfQoJCSAJCX0KIAkJCX0KIAkJCQogCQkJaWYoJHRoaXMtPmlzUGVuZGluZ0NhbmNlbGxhdGlvbigpKQogCQkJewogCQkJCS8vIGNoZWNrIGlmIG1lbWJlcnNoaXAgc2hvdWxkIGJlIGNhbmNlbGVkCiAJCQkJaWYoJHRoaXMtPm1lbWJlcnNoaXBTaG91bGRDYW5jZWwoKSkKIAkJCQl7CiAJCQkJCSR0aGlzLT5zZXRTdGF0dXMoJHRoaXMtPmdldFBlbmRpbmdTdGF0dXMoKSk7CiAJCQkJCSR0aGlzLT5jb21taXRTdGF0dXNPbmx5KCk7CiAJCQkJfQogCQkJfQogCQl9CiAJCQogCSAJcmV0dXJuICR0aGlzLT5zdGF0dXM7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U3RhdHVzTmFtZSgpCiAJewogCSAJcmV0dXJuIE1NX1N0YXR1czo6Z2V0TmFtZSgkdGhpcy0+c3RhdHVzKTsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRTdGF0dXNNZXNzYWdlKCRzdHIpCiAJewogCSAJJHRoaXMtPnN0YXR1c01lc3NhZ2UgPSAkc3RyOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFN0YXR1c01lc3NhZ2UoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+c3RhdHVzTWVzc2FnZTsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldExhc3RVcGRhdGVkRGF0ZSgkZG9Gb3JtYXQ9ZmFsc2UpCiAJewogCQlpZigkZG9Gb3JtYXQgPT0gZmFsc2UpIAogCQl7CiAJCQlyZXR1cm4gJHRoaXMtPmxhc3RVcGRhdGVkRGF0ZTsKIAkJfQogCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+bGFzdFVwZGF0ZWREYXRlKSkgCiAJCXsKIAkJCXJldHVybiBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoJHRoaXMtPmxhc3RVcGRhdGVkRGF0ZSk7CiAJCX0KIAkJZWxzZQogCQl7CiAJCQlyZXR1cm4gbnVsbDsKIAkJfQogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U3RhdHVzVXBkYXRlZERhdGUoJGRvRm9ybWF0PWZhbHNlKQogCXsKIAkJaWYoJGRvRm9ybWF0ID09IGZhbHNlKSAKIAkJewogCQkJcmV0dXJuICR0aGlzLT5zdGF0dXNVcGRhdGVkRGF0ZTsKIAkJfQogCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+c3RhdHVzVXBkYXRlZERhdGUpKSAKIAkJewogCQkJcmV0dXJuIE1NX1V0aWxzOjpkYXRlVG9Mb2NhbCgkdGhpcy0+c3RhdHVzVXBkYXRlZERhdGUpOwogCQl9CiAJCWVsc2UKIAkJewogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNldEZ1bGxCaWxsaW5nQWRkcmVzcyhNTV9DdXN0b21lckFkZHJlc3MgJGFkZHJlc3MpCiAJewogCQkkdGhpcy0+c2V0QmlsbGluZ0FkZHJlc3MoJGFkZHJlc3MtPmdldEFkZHJlc3NMaW5lMSgpKTsKIAkJJHRoaXMtPnNldEJpbGxpbmdDaXR5KCRhZGRyZXNzLT5nZXRDaXR5KCkpOwogCQkkdGhpcy0+c2V0QmlsbGluZ1N0YXRlKCRhZGRyZXNzLT5nZXRTdGF0ZSgpKTsKIAkJJHRoaXMtPnNldEJpbGxpbmdaaXBDb2RlKCRhZGRyZXNzLT5nZXRQb3N0YWxDb2RlKCkpOwogCQkkdGhpcy0+c2V0QmlsbGluZ0NvdW50cnkoJGFkZHJlc3MtPmdldENvdW50cnkoKSk7CiAJfQogCQogCS8qKgogCSAqIEByZXR1cm4gTU1fQ3VzdG9tZXJBZGRyZXNzCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGdldEZ1bGxCaWxsaW5nQWRkcmVzcygpCiAJewogCQkkYWRkcmVzcyA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoJHRoaXMtPmdldEZpcnN0TmFtZSgpLCAkdGhpcy0+Z2V0TGFzdE5hbWUoKSk7CiAJCSRhZGRyZXNzLT5zZXRQaG9uZSgkdGhpcy0+Z2V0UGhvbmUoKSk7CiAJCSRhZGRyZXNzLT5zZXRBZGRyZXNzTGluZTEoJHRoaXMtPmdldEJpbGxpbmdBZGRyZXNzKCkpOwogCQkkYWRkcmVzcy0+c2V0Q2l0eSgkdGhpcy0+Z2V0QmlsbGluZ0NpdHkoKSk7CiAJCSRhZGRyZXNzLT5zZXRTdGF0ZSgkdGhpcy0+Z2V0QmlsbGluZ1N0YXRlKCkpOwogCQkkYWRkcmVzcy0+c2V0UG9zdGFsQ29kZSgkdGhpcy0+Z2V0QmlsbGluZ1ppcENvZGUoKSk7CiAJCSRhZGRyZXNzLT5zZXRDb3VudHJ5KCR0aGlzLT5nZXRCaWxsaW5nQ291bnRyeSgpKTsKIAkJcmV0dXJuICRhZGRyZXNzOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gc2V0RnVsbFNoaXBwaW5nQWRkcmVzcyhNTV9DdXN0b21lckFkZHJlc3MgJGFkZHJlc3MpCiAJewogCQkkdGhpcy0+c2V0U2hpcHBpbmdBZGRyZXNzKCRhZGRyZXNzLT5nZXRBZGRyZXNzTGluZTEoKSk7CiAJCSR0aGlzLT5zZXRTaGlwcGluZ0NpdHkoJGFkZHJlc3MtPmdldENpdHkoKSk7CiAJCSR0aGlzLT5zZXRTaGlwcGluZ1N0YXRlKCRhZGRyZXNzLT5nZXRTdGF0ZSgpKTsKIAkJJHRoaXMtPnNldFNoaXBwaW5nWmlwQ29kZSgkYWRkcmVzcy0+Z2V0UG9zdGFsQ29kZSgpKTsKIAkJJHRoaXMtPnNldFNoaXBwaW5nQ291bnRyeSgkYWRkcmVzcy0+Z2V0Q291bnRyeSgpKTsKIAl9CiAJCiAJLyoqCiAJICogQHJldHVybiBNTV9DdXN0b21lckFkZHJlc3MKIAkgKi8KIAlwdWJsaWMgZnVuY3Rpb24gZ2V0RnVsbFNoaXBwaW5nQWRkcmVzcygpCiAJewogCQkkYWRkcmVzcyA9IG5ldyBNTV9DdXN0b21lckFkZHJlc3MoJHRoaXMtPmdldEZpcnN0TmFtZSgpLCAkdGhpcy0+Z2V0TGFzdE5hbWUoKSk7CiAJCSRhZGRyZXNzLT5zZXRQaG9uZSgkdGhpcy0+Z2V0UGhvbmUoKSk7CiAJCSRhZGRyZXNzLT5zZXRBZGRyZXNzTGluZTEoJHRoaXMtPmdldFNoaXBwaW5nQWRkcmVzcygpKTsKIAkJJGFkZHJlc3MtPnNldENpdHkoJHRoaXMtPmdldFNoaXBwaW5nQ2l0eSgpKTsKIAkJJGFkZHJlc3MtPnNldFN0YXRlKCR0aGlzLT5nZXRTaGlwcGluZ1N0YXRlKCkpOwogCQkkYWRkcmVzcy0+c2V0UG9zdGFsQ29kZSgkdGhpcy0+Z2V0U2hpcHBpbmdaaXBDb2RlKCkpOwogCQkkYWRkcmVzcy0+c2V0Q291bnRyeSgkdGhpcy0+Z2V0U2hpcHBpbmdDb3VudHJ5KCkpOwogCQlyZXR1cm4gJGFkZHJlc3M7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ0FkZHJlc3MoJHN0cikKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICYmICgkc3RyICE9ICR0aGlzLT5iaWxsaW5nQWRkcmVzcykpCiAJCXsKIAkJCSR0aGlzLT5sYXN0QmlsbGluZ0FkZHJlc3MgPSAkdGhpcy0+YmlsbGluZ0FkZHJlc3M7CiAJCX0KIAkgCSR0aGlzLT5iaWxsaW5nQWRkcmVzcyA9ICRzdHI7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0QmlsbGluZ0FkZHJlc3MoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+YmlsbGluZ0FkZHJlc3M7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ0NpdHkoJHN0cikKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICYmICgkc3RyICE9ICR0aGlzLT5iaWxsaW5nQ2l0eSkpCiAJCXsKIAkJCSR0aGlzLT5sYXN0QmlsbGluZ0NpdHkgPSAkdGhpcy0+YmlsbGluZ0NpdHk7CiAJCX0KIAkgCSR0aGlzLT5iaWxsaW5nQ2l0eT0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRCaWxsaW5nQ2l0eSgpCiAgCXsKIAkgCXJldHVybiAkdGhpcy0+YmlsbGluZ0NpdHk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ1N0YXRlKCRzdHIpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJHN0ciAhPSAkdGhpcy0+YmlsbGluZ1N0YXRlKSkKIAkJewogCQkJJHRoaXMtPmxhc3RCaWxsaW5nU3RhdGUgPSAkdGhpcy0+YmlsbGluZ1N0YXRlOwogCQl9CiAJIAkkdGhpcy0+YmlsbGluZ1N0YXRlID0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRCaWxsaW5nU3RhdGUoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+YmlsbGluZ1N0YXRlOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldEJpbGxpbmdaaXBDb2RlKCRzdHIpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJHN0ciAhPSAkdGhpcy0+YmlsbGluZ1ppcCkpCiAJCXsKIAkJCSR0aGlzLT5sYXN0QmlsbGluZ1ppcCA9ICR0aGlzLT5iaWxsaW5nWmlwOwogCQl9CiAJIAkkdGhpcy0+YmlsbGluZ1ppcCA9ICRzdHI7CiAJfQogCSAKICAJcHVibGljIGZ1bmN0aW9uIGdldEJpbGxpbmdaaXBDb2RlKCkKIAl7CiAJIAlyZXR1cm4gJHRoaXMtPmJpbGxpbmdaaXA7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0QmlsbGluZ0NvdW50cnkoJGNvZGUpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJGNvZGUgIT0gJHRoaXMtPmJpbGxpbmdDb3VudHJ5KSkKIAkJewogCQkJJHRoaXMtPmxhc3RCaWxsaW5nQ291bnRyeSA9ICR0aGlzLT5iaWxsaW5nQ291bnRyeTsKIAkJfQogCSAJJHRoaXMtPmJpbGxpbmdDb3VudHJ5ID0gJGNvZGU7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0QmlsbGluZ0NvdW50cnkoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+YmlsbGluZ0NvdW50cnk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0QmlsbGluZ0NvdW50cnlOYW1lKCkKIAl7CQogCSAJcmV0dXJuIE1NX0NvdW50cnlVdGlsczo6Z2V0Q291bnRyeU5hbWUoJHRoaXMtPmJpbGxpbmdDb3VudHJ5KTsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRTaGlwcGluZ0FkZHJlc3MoJHN0cikKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICYmICgkc3RyICE9ICR0aGlzLT5zaGlwcGluZ0FkZHJlc3MpKQogCQl7CiAJCQkkdGhpcy0+bGFzdFNoaXBwaW5nQWRkcmVzcyA9ICR0aGlzLT5zaGlwcGluZ0FkZHJlc3M7CiAJCX0KIAkgCSR0aGlzLT5zaGlwcGluZ0FkZHJlc3MgPSAkc3RyOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFNoaXBwaW5nQWRkcmVzcygpCiAJewogCSAJcmV0dXJuICR0aGlzLT5zaGlwcGluZ0FkZHJlc3M7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBpbmdDaXR5KCRzdHIpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJHN0ciAhPSAkdGhpcy0+c2hpcHBpbmdDaXR5KSkKIAkJewogCQkJJHRoaXMtPmxhc3RTaGlwcGluZ0NpdHkgPSAkdGhpcy0+c2hpcHBpbmdDaXR5OwogCQl9CiAJIAkkdGhpcy0+c2hpcHBpbmdDaXR5ID0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRTaGlwcGluZ0NpdHkoKQogCXsKIAkgCXJldHVybiAkdGhpcy0+c2hpcHBpbmdDaXR5OwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldFNoaXBwaW5nU3RhdGUoJHN0cikKIAl7CiAJCWlmICgkdGhpcy0+aXNWYWxpZCgpICYmICgkc3RyICE9ICR0aGlzLT5zaGlwcGluZ1N0YXRlKSkKIAkJewogCQkJJHRoaXMtPmxhc3RTaGlwcGluZ1N0YXRlID0gJHRoaXMtPnNoaXBwaW5nU3RhdGU7CiAJCX0KIAkgCSR0aGlzLT5zaGlwcGluZ1N0YXRlID0gJHN0cjsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBnZXRTaGlwcGluZ1N0YXRlKCkKIAl7CiAJIAlyZXR1cm4gJHRoaXMtPnNoaXBwaW5nU3RhdGU7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gc2V0U2hpcHBpbmdaaXBDb2RlKCRzdHIpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJHN0ciAhPSAkdGhpcy0+c2hpcHBpbmdaaXApKQogCQl7CiAJCQkkdGhpcy0+bGFzdFNoaXBwaW5nWmlwID0gJHRoaXMtPnNoaXBwaW5nWmlwOwogCQl9CiAJIAkkdGhpcy0+c2hpcHBpbmdaaXAgPSAkc3RyOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFNoaXBwaW5nWmlwQ29kZSgpCiAJewogCSAJcmV0dXJuICR0aGlzLT5zaGlwcGluZ1ppcDsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRTaGlwcGluZ0NvdW50cnkoJGNvZGUpCiAJewogCQlpZiAoJHRoaXMtPmlzVmFsaWQoKSAmJiAoJGNvZGUgIT0gJHRoaXMtPnNoaXBwaW5nQ291bnRyeSkpCiAJCXsKIAkJCSR0aGlzLT5sYXN0U2hpcHBpbmdDb3VudHJ5ID0gJHRoaXMtPnNoaXBwaW5nQ291bnRyeTsKIAkJfQogCSAJJHRoaXMtPnNoaXBwaW5nQ291bnRyeSA9ICRjb2RlOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldFNoaXBwaW5nQ291bnRyeSgpCiAJewogCSAJcmV0dXJuICR0aGlzLT5zaGlwcGluZ0NvdW50cnk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U2hpcHBpbmdDb3VudHJ5TmFtZSgpCiAJewogCSAJcmV0dXJuIE1NX0NvdW50cnlVdGlsczo6Z2V0Q291bnRyeU5hbWUoJHRoaXMtPnNoaXBwaW5nQ291bnRyeSk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0TG9naW5Db3VudCgpCiAJewogCQlpZigkdGhpcy0+bG9naW5Db3VudCA9PSAtMSkKIAkJewogCQkJJHRoaXMtPmxvZ2luQ291bnQgPSBNTV9BY3Rpdml0eUxvZzo6Z2V0TG9naW5Db3VudCgkdGhpcy0+Z2V0SWQoKSk7CiAJCX0KIAkJCiAJIAlyZXR1cm4gbnVtYmVyX2Zvcm1hdCgkdGhpcy0+bG9naW5Db3VudCk7CiAJfQogCSAKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0UGFnZUFjY2Vzc0NvdW50KCR1bmlxdWVQYWdlc09ubHk9dHJ1ZSkKIAl7CiAJCWlmKCR0aGlzLT5wYWdlQWNjZXNzQ291bnQgPT0gLTEpCiAJCXsKIAkJCSR0aGlzLT5wYWdlQWNjZXNzQ291bnQgPSBNTV9BY3Rpdml0eUxvZzo6Z2V0UGFnZUFjY2Vzc0NvdW50KCR0aGlzLT5nZXRJZCgpLCAkdW5pcXVlUGFnZXNPbmx5KTsKIAkJfQogCQkKIAkgCXJldHVybiBudW1iZXJfZm9ybWF0KCR0aGlzLT5wYWdlQWNjZXNzQ291bnQpOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIGdldEVtYWlsQ291bnQoKQogCXsKIAkJaWYoJHRoaXMtPmVtYWlsQ291bnQgPT0gLTEpCiAJCXsKIAkJCSR0aGlzLT5lbWFpbENvdW50ID0gTU1fQWN0aXZpdHlMb2c6OmdldEVtYWlsQ291bnQoJHRoaXMtPmdldElkKCkpOwogCQl9CiAJCQogCSAJcmV0dXJuIG51bWJlcl9mb3JtYXQoJHRoaXMtPmVtYWlsQ291bnQpOwogCX0KIAkgCiAJcHVibGljIGZ1bmN0aW9uIHNldExhc3RMb2dpbkRhdGUoJHN0cikKIAl7CiAJIAkkdGhpcy0+bGFzdExvZ2luRGF0ZSA9ICRzdHI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRMYXN0TG9naW5EYXRlKCRkb0Zvcm1hdD1mYWxzZSkKIAl7CiAJCWlmKCRkb0Zvcm1hdCA9PSBmYWxzZSkgCiAJCXsKIAkJCXJldHVybiAkdGhpcy0+bGFzdExvZ2luRGF0ZTsKIAkJfQogCQllbHNlIGlmKCFlbXB0eSgkdGhpcy0+bGFzdExvZ2luRGF0ZSkpIAogCQl7CiAJCQlyZXR1cm4gTU1fVXRpbHM6OmRhdGVUb0xvY2FsKCR0aGlzLT5sYXN0TG9naW5EYXRlKTsKIAkJfQogCQllbHNlCiAJCXsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRMYXN0TG9naW5JcEFkZHJlc3MoKQogCXsKIAkJaWYoZW1wdHkoJHRoaXMtPmxhc3RMb2dpbklwQWRkcmVzcykpCiAJCXsKIAkJCSR0aGlzLT5sYXN0TG9naW5JcEFkZHJlc3MgPSBNTV9BY3Rpdml0eUxvZzo6Z2V0TGFzdExvZ2luSXBBZGRyZXNzKCR0aGlzLT5nZXRJZCgpKTsKIAkJfQogCQkKIAkJcmV0dXJuICR0aGlzLT5sYXN0TG9naW5JcEFkZHJlc3M7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBoYXNSZWFjaGVkTWF4SVBDb3VudCgpCiAJewogCQlyZXR1cm4gTU1fQWN0aXZpdHlMb2c6Omhhc1JlYWNoZWRNYXhJUENvdW50KCR0aGlzLT5nZXRJZCgpKTsKIAl9CiAJIAogCXB1YmxpYyBmdW5jdGlvbiBzZXRXZWxjb21lRW1haWxTZW50RGF0ZSgkc3RyKQogCXsKIAkgCSR0aGlzLT53ZWxjb21lRW1haWxTZW50RGF0ZSA9ICRzdHI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRXZWxjb21lRW1haWxTZW50RGF0ZSgkZG9Gb3JtYXQ9ZmFsc2UpCiAJewogCQlpZigkZG9Gb3JtYXQgPT0gZmFsc2UpIHsKIAkJCXJldHVybiAkdGhpcy0+d2VsY29tZUVtYWlsU2VudERhdGU7CiAJCX0KIAkJZWxzZSBpZighZW1wdHkoJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlKSkgCiAJCXsKIAkJCXJldHVybiBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoJHRoaXMtPndlbGNvbWVFbWFpbFNlbnREYXRlKTsKIAkJfQogCQllbHNlCiAJCXsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBnZXRCZWNhbWVBY3RpdmVEYXRlKCRkb0Zvcm1hdD1mYWxzZSkKIAl7CiAJCWlmKCRkb0Zvcm1hdCA9PSBmYWxzZSkgewogCQkJcmV0dXJuICR0aGlzLT5iZWNhbWVBY3RpdmVEYXRlOwogCQl9CiAJCWVsc2UgaWYoIWVtcHR5KCR0aGlzLT5iZWNhbWVBY3RpdmVEYXRlKSkgCiAJCXsKIAkJCXJldHVybiBNTV9VdGlsczo6ZGF0ZVRvTG9jYWwoJHRoaXMtPmJlY2FtZUFjdGl2ZURhdGUpOwogCQl9CiAJCWVsc2UKIAkJewogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNldFN1YnNjcmliZWRMaXN0SWQoJGxpc3RJZCkgCiAJewogCQkkdGhpcy0+c3Vic2NyaWJlZExpc3RJZCA9ICRsaXN0SWQ7CQogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U3Vic2NyaWJlZExpc3RJZCgpCiAJewogCQlyZXR1cm4gJHRoaXMtPnN1YnNjcmliZWRMaXN0SWQ7CiAJfQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0U3Vic2NyaWJlZFByb3ZpZGVySWQoJHByb3ZpZGVySWQpIAogCXsKIAkJJHRoaXMtPnN1YnNjcmliZWRQcm92aWRlcklkID0gJHByb3ZpZGVySWQ7CQogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0U3Vic2NyaWJlZFByb3ZpZGVySWQoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5zdWJzY3JpYmVkUHJvdmlkZXJJZDsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNldFNlbmRXZWxjb21lRW1haWxGbGFnKCRib29sKQogCXsKIAkJJHRoaXMtPnNlbmRXZWxjb21lRW1haWxGbGFnID0gJGJvb2w7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBkb1NlbmRXZWxjb21lRW1haWwoKQogCXsKIAkJcmV0dXJuICR0aGlzLT5zZW5kV2VsY29tZUVtYWlsRmxhZzsKIAl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIHNldEltcG9ydGVkRmxhZygkYm9vbCkKIAl7CiAJCSR0aGlzLT5pbXBvcnRlZEZsYWcgPSAoJGJvb2wgPT0gdHJ1ZSkgPyAiMSIgOiAiMCI7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBpc0ltcG9ydGVkKCkKIAl7CiAJCXJldHVybiAoJHRoaXMtPmltcG9ydGVkRmxhZyA9PSAiMSIpID8gdHJ1ZSA6IGZhbHNlOwogCX0gCiAJCiAJcHVibGljIGZ1bmN0aW9uIGlzQ29tcGxpbWVudGFyeSgpCiAJewogCQlpZigkdGhpcy0+aXNGcmVlKCkgfHwgJHRoaXMtPmlzSW1wb3J0ZWQoKSB8fCAkdGhpcy0+Z2V0U3RhdHVzKCkgPT0gTU1fU3RhdHVzOjokUEVORElOR19BQ1RJVkFUSU9OIHx8ICR0aGlzLT5nZXRTdGF0dXMoKSA9PSBNTV9TdGF0dXM6OiRFUlJPUgogCQkJfHwgJHRoaXMtPmdldFN0YXR1cygpID09IE1NX1N0YXR1czo6JENBTkNFTEVEIHx8ICR0aGlzLT5nZXRTdGF0dXMoKSA9PSBNTV9TdGF0dXM6OiRQQVVTRUQgfHwgJHRoaXMtPmlzUGVuZGluZ0NhbmNlbGxhdGlvbigpKQogCQl7CiAJCQlyZXR1cm4gZmFsc2U7CiAJCX0KIAkJCiAJCS8vIFdhcyBwZW5kaW5nIGNhbmNlbGF0aW9uIGFuZCBub3cgdmlvbGF0ZWQgY29uZGl0aW9ucyB3aGVyZSBhY2NvdW50IGJlY2FtZSAnbG9ja2VkJwogCQlpZigkdGhpcy0+Z2V0UGVuZGluZ1N0YXR1cygpID09IE1NX1N0YXR1czo6JENBTkNFTEVEICYmICR0aGlzLT5nZXRTdGF0dXMoKSA9PSBNTV9TdGF0dXM6OiRMT0NLRUQpCiAJCXsKIAkJCXJldHVybiBmYWxzZTsKIAkJfQogCQkKIAkJJGlzQ29tcGxpbWVudGFyeSA9IGZhbHNlOwogCQkkaXRlbXMgPSBNTV9PcmRlckl0ZW1BY2Nlc3M6OmdldE9yZGVySXRlbUJ5QWNjZXNzKCR0aGlzLT5nZXRJZCgpLCBNTV9PcmRlckl0ZW1BY2Nlc3M6OiRBQ0NFU1NfVFlQRV9NRU1CRVJTSElQLCAkdGhpcy0+Z2V0TWVtYmVyc2hpcElkKCkpOwogCiAJCWlmKGNvdW50KCRpdGVtcykgPiAwKQoJCXsKCQkJJGlzQ29tcGxpbWVudGFyeSA9IHRydWU7CgkJCQoJCQlmb3JlYWNoKCRpdGVtcyBhcyAkb3JkZXJJdGVtQWNjZXNzKQoJCQl7CgkJCQkkb3JkZXJJdGVtID0gbmV3IE1NX09yZGVySXRlbSgkb3JkZXJJdGVtQWNjZXNzLT5nZXRPcmRlckl0ZW1JZCgpKTsKCQkJCQoJCQkJaWYoJG9yZGVySXRlbS0+aXNWYWxpZCgpICYmICRvcmRlckl0ZW0tPmdldFN0YXR1cygpICE9IE1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkdfQ0FOQ0VMTEVEKQoJCQkJewoJCQkJCSRpc0NvbXBsaW1lbnRhcnkgPSBmYWxzZTsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCQllbHNlCgkJewoJCQkkaXNDb21wbGltZW50YXJ5ID0gdHJ1ZTsKCQl9CgkJCgkJcmV0dXJuICRpc0NvbXBsaW1lbnRhcnk7CiAJfQogCQogCQogCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2FuUGxhY2VPcmRlcigkdXNlcklkLCAkcHJvZHVjdElkLCAkaXNOZXdNZW1iZXIgPSBmYWxzZSwgJGlzQ3VzdG9tZXJTdXBwb3J0T3JkZXIgPSBmYWxzZSwgJGlzT25lQ2xpY2tQdXJjaGFzZSA9IGZhbHNlKQogCXsKCQlnbG9iYWwgJHdwZGI7CgkJCiAJCSRhbGxvd0R1cGxpY2F0ZVN1YnNjcmlwdGlvbnMgPSAoTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfQUxMT1dfRFVQTElDQVRFX1NVQlNDUklQVElPTlMpID09ICIxIikgPyB0cnVlIDogZmFsc2U7CiAJCQogCQlpZighJGFsbG93RHVwbGljYXRlU3Vic2NyaXB0aW9ucykKIAkJeyAKCSAJCSRzcWwgPSAiU0VMRUNUIEVYSVNUUyAoU0VMRUNUIG9pLmlkIEZST00gIi5NTV9UQUJMRV9PUkRFUl9JVEVNUy4iIG9pIExFRlQgSk9JTiAiLk1NX1RBQkxFX09SREVSUy4iIG8gT04gKG9pLm9yZGVyX2lkID0gby5pZCkgIi4KCSAJCQkJIldIRVJFIChvLnVzZXJfaWQ9JXMpIEFORCAob2kuaXNfZ2lmdD0wKSBBTkQgKG9pLmlzX3JlY3VycmluZz0xKSBBTkQgKG9pLml0ZW1faWQ9JXMpIEFORCAob2kuaXRlbV90eXBlPSciLk1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9QUk9EVUNULiInKSBBTkQgIi4KCSAJCQkJIigKCSAJCQkJCQlvaS5zdGF0dXMgPSAnIi5NTV9PcmRlckl0ZW06OiRTVEFUVVNfUkVDVVJSSU5HLiInIE9SCgkgCQkJCQkJb2kuc3RhdHVzID0gJyIuTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklOR19SRUJJTExfRkFJTEVELiInIE9SIAoJIAkJCQkJCW9pLnN0YXR1cyA9ICciLk1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkdfUEVORElOR19PVkVSRFVFLiInIE9SIAoJIAkJCQkJCW9pLnN0YXR1cyA9ICciLk1NX09yZGVySXRlbTo6JFNUQVRVU19HQVRFV0FZX1BBWU1FTlRfTUlTTUFUQ0guIicgIAoJCQkJCSkKCQkJKSI7CgkgCQkkY2FudFB1cmNoYXNlID0gJHdwZGItPmdldF92YXIoJHdwZGItPnByZXBhcmUoJHNxbCwkdXNlcklkLCRwcm9kdWN0SWQpKTsKCSAJCWlmICghaXNfbnVsbCgkY2FudFB1cmNoYXNlKSAmJiAoJGNhbnRQdXJjaGFzZSA9PSAnMScpKQoJIAkJewoJIAkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlRoaXMgcHJvZHVjdCBoYXMgYWxyZWFkeSBiZWVuIHB1cmNoYXNlZCBhbmQgaGFzIGFuIGFjdGl2ZSBzdWJzY3JpcHRpb24iLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJIAkJfQogCQl9CiAJCQoJCSRwcm9kdWN0ID0gbmV3IE1NX1Byb2R1Y3QoJHByb2R1Y3RJZCk7CgkJCgkJLy8gSUYgaXQncyBhIGFscmVhZHkgZXhpc3RpbmcgTWVtYmVyIChpZiBpdCdzIGEgT25lIENsaWNrIFB1cmNoYXNlLCBpdCdzIGFzc3VtZWQgYXMgc3VjaCkKCQkvLyBBTkQgaXQncyBOT1QgYSBDdXN0b21lciBTdXBwb3J0IE9yZGVyCgkJLy8gQU5EIHRoZXkncmUgdHJ5aW5nIHRvIHB1cmNoYXNlIGEgVHJpYWwKCQkvLyBBTkQgdGhhdCB0cmlhbCBpcyBzZXQgdG8gbm90IGFsbG93IG11bHRpcGxlIHB1cmNoYXNlcwoJCS8vIFRIRU4gY2hlY2sgdG8gbWFrZSBzdXJlIHRoaXMgbWVtYmVyIGhhcyBub3QgcHVyY2hhc2VkIHRoaXMgZXhhY3QgdHJpYWwgaW4gdGhlIHBhc3QKCQkvLyBJRiBTTywgbm90aWZ5IHRoZW0gdGhhdCB0aGlzIGlzIG5vdCBhbGxvd2VkIGFuZC4uLi4uLi4KCQkvLyAtIElmIE5PVCBPbmUgQ0xpY2sgUHVyY2hhc2U6IHJlZGlyZWN0IHRoZW0gdG8gdGhlIGFsdGVybmF0aXZlIHByb2R1Y3QgdGhhdCByZXByZXNlbnRzIHRoZSB0aGUgZnVsbCBwcm9kdWN0IHRoYXQgdGhlIHRyaWFsIGlzIGFsbG93aW5nIHRoZSB1c2VyIHRvICJ0cnkiIG91dAoJCS8vIC0gSWYgSVMgT25lIENMaWNrIFB1cmNoYXNlOiBzaW1wbHkgbm90aWZ5IHRoZW0gdmlhIEpTIGFsZXJ0IGJveCBzaW5jZSBjaGVjayBpcyBoYXBwZW5pbmcgdmlhIEFKQVgKCQlpZigkaXNOZXdNZW1iZXIgPT0gZmFsc2UgJiYgJGlzQ3VzdG9tZXJTdXBwb3J0T3JkZXIgPT0gZmFsc2UgJiYgJHByb2R1Y3QtPmhhc1RyaWFsKCkgJiYgJHByb2R1Y3QtPmRvTGltaXRUcmlhbCgpKQoJCXsKCQkJLy9zZWFyY2ggZm9yIHN0YXR1c2VzIGluZGljYXRpbmcgYSBwcmV2aW91c2x5IHN1Y2Nlc3NmdWwgcHVyY2hhc2UKCQkJICRzZWFyY2hTdGF0dXNlcyA9IGFycmF5KAoJCSAgICAgICAgTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklORywKCQkgICAgICAgIE1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkdfQ0FOQ0VMTEVELAoJCSAgICAgICAgTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklOR19DT01QTEVURSwKCQkgICAgICAgIE1NX09yZGVySXRlbTo6JFNUQVRVU19SRUNVUlJJTkdfUEVORElOR19PVkVSRFVFLAoJCSAgICAgICAgTU1fT3JkZXJJdGVtOjokU1RBVFVTX1JFQ1VSUklOR19SRUJJTExfRkFJTEVECgkJICAgICk7CgkJICAgICRzZWFyY2hTdGF0dXNTdHJpbmcgPSBpbXBsb2RlKCIsIiwkc2VhcmNoU3RhdHVzZXMpOwoJCSAgICAKCQkJJHNxbCA9ICJTRUxFQ1QgQ09VTlQoRElTVElOQ1Qgb2kuaWQpIEFTIGMgIi4KCQkJIAkgICAiRlJPTSAiIC4gTU1fVEFCTEVfT1JERVJfSVRFTVMgLiAiIEFTIG9pICIuCgkJCSAJICAgIkxFRlQgSk9JTiAiIC4gTU1fVEFCTEVfT1JERVJTIC4gIiBBUyBvICIuCgkJCQkgICAiT04gKG9pLm9yZGVyX2lkID0gby5pZCkgIi4KCQkJCSAgICJXSEVSRSBvaS5pdGVtX3R5cGUgPSAnIiAuIE1NX09yZGVySXRlbTo6JE9SREVSX0lURU1fVFlQRV9QUk9EVUNUIC4gIiciLgoJCQkJICAgIkFORCBvaS5zdGF0dXMgSU4gKHskc2VhcmNoU3RhdHVzU3RyaW5nfSkgIi4KCQkJCSAgICJBTkQgb2kuaXRlbV9pZCA9ICd7JHByb2R1Y3QtPmdldElkKCl9JyAiLgoJCQkJICAgIkFORCBvLnVzZXJfaWQgPSAneyR1c2VySWR9JyI7CgkJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yb3coJHNxbCk7CgoJCQlpZigkcmVzdWx0cy0+YyA+IDApCgkJCXsJCgkJCQlpZigkaXNPbmVDbGlja1B1cmNoYXNlID09IGZhbHNlKQoJCQkJewoJCQkJCWlmKCRwcm9kdWN0LT5nZXRMaW1pdFRyaWFsQWx0UHJvZHVjdElkKCkpCgkJCQkJewoJCQkJCQkkYWx0ZXJuYXRpdmVQcm9kdWN0ID0gbmV3IE1NX1Byb2R1Y3QoJHByb2R1Y3QtPmdldExpbWl0VHJpYWxBbHRQcm9kdWN0SWQoKSk7CgkJCQkJCSRlcnJvck1lc3NhZ2UgPSAkcHJvZHVjdC0+Z2V0TmFtZSgpIC4gIiBjYW4gb25seSBiZSBwdXJjaGFzZWQgb25jZS4gVG8gZ2FpbiB0aGUgc2FtZSBhY2Nlc3MsIHBsZWFzZSBwdXJjaGFzZSB0aGUgYWx0ZXJuYXRlIHByb2R1Y3Qgc2hvd24gYmVsb3cuIjsKCQkJCQkJJHJlZGlyZWN0VXJsID0gTU1fQ29yZVBhZ2VFbmdpbmU6OmdldENoZWNrb3V0UGFnZVN0YXRpY0xpbmsoJGFsdGVybmF0aXZlUHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJfQoJCQkJCWVsc2UKCQkJCQl7CgkJCQkJCSRlcnJvck1lc3NhZ2UgPSAkcHJvZHVjdC0+Z2V0TmFtZSgpIC4gIiBjYW4gb25seSBiZSBwdXJjaGFzZWQgb25jZS4iOwoJCQkJCQkkcmVkaXJlY3RVcmwgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0Q2hlY2tvdXRQYWdlU3RhdGljTGluaygkcHJvZHVjdC0+Z2V0SWQoKSk7CgkJCQkJfQoJCQkJCgkJCQkJd3BfcmVkaXJlY3QoJHJlZGlyZWN0VXJsIC4gIiZtZXNzYWdlPSIgLiB1cmxlbmNvZGUoJGVycm9yTWVzc2FnZSkpOwoJCQkJCWV4aXQ7CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVGhlIHRyaWFsIHByb2R1Y3QsICIgLiAkcHJvZHVjdC0+Z2V0TmFtZSgpIC4gIiwgY2FuIG9ubHkgYmUgcHVyY2hhc2VkIG9uY2UuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCQl9CgkJCX0KCQl9CgkJCiAJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoKTsKIAl9CiAJCiAJCglwdWJsaWMgZnVuY3Rpb24gZ2V0T3JpZ2luQWZmaWxpYXRlSWQoKSAKCXsKCQlyZXR1cm4gJHRoaXMtPm9yaWdpbkFmZmlsaWF0ZUlkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRPcmlnaW5BZmZpbGlhdGVJZCgkb3JpZ2luQWZmaWxpYXRlSWQpIAoJewoJCSR0aGlzLT5vcmlnaW5BZmZpbGlhdGVJZCA9ICRvcmlnaW5BZmZpbGlhdGVJZDsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0T3JpZ2luU3ViYWZmaWxpYXRlSWQoKSAKCXsKCQlyZXR1cm4gJHRoaXMtPm9yaWdpblN1YmFmZmlsaWF0ZUlkOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRPcmlnaW5TdWJhZmZpbGlhdGVJZCgkb3JpZ2luU3ViYWZmaWxpYXRlSWQpIAoJewoJCSR0aGlzLT5vcmlnaW5TdWJhZmZpbGlhdGVJZCA9ICRvcmlnaW5TdWJhZmZpbGlhdGVJZDsKCX0KCQoJCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdlbmVyYXRlQW5kU3RvcmVGb3Jnb3RQYXNzd29yZEhhc2goTU1fVXNlciAkdXNlcikKCXsKCQkvL3RvZG86IHJlbW92ZSB3b3JkcHJlc3MgZGVwZW5kZW5jeSBmcm9tIHRoaXMgcHJvY2VzcwoJCQoJCWlmICgkdXNlci0+aXNWYWxpZCgpKQoJCXsKCQkJLy8gR2VuZXJhdGUgc29tZXRoaW5nIHJhbmRvbSBmb3IgYSBwYXNzd29yZCByZXNldCBrZXkuCgkJCSRmb3Jnb3RQYXNzd29yZEhhc2ggPSB3cF9nZW5lcmF0ZV9wYXNzd29yZCggMjAsIGZhbHNlICk7CgkJCQoJCQkvLyBOb3cgaW5zZXJ0IHRoZSBrZXksIGhhc2hlZCwgaW50byB0aGUgREIuCgkJCWlmICggZW1wdHkoICR3cF9oYXNoZXIgKSApCgkJCXsKCQkJCXJlcXVpcmVfb25jZSBBQlNQQVRIIC4gV1BJTkMgLiAnL2NsYXNzLXBocGFzcy5waHAnOwoJCQkJJHdwX2hhc2hlciA9IG5ldyBQYXNzd29yZEhhc2goIDgsIHRydWUgKTsKCQkJfQoJCQkKCQkJJGZvcmdvdFBhc3N3b3JkSGFzaCA9ICR3cF9oYXNoZXItPkhhc2hQYXNzd29yZCgkZm9yZ290UGFzc3dvcmRIYXNoKTsKCQkJCgkJCSR1c2VyLT5zZXRGb3Jnb3RQYXNzd29yZEhhc2goJGZvcmdvdFBhc3N3b3JkSGFzaCk7CgkJCSR1c2VyLT5jb21taXREYXRhKCk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRGb3Jnb3R0ZW5GbGFnKCRib29sKQoJewoJICAgICR0aGlzLT5mb3Jnb3R0ZW5GbGFnID0gKCRib29sID09IHRydWUpID8gIjEiIDogIjAiOwoJfQoJCglwdWJsaWMgZnVuY3Rpb24gaXNGb3Jnb3R0ZW4oKQoJewoJICAgIHJldHVybiAoJHRoaXMtPmZvcmdvdHRlbkZsYWcgPT0gIjEiKSA/IHRydWUgOiBmYWxzZTsKCX0gCgkKCQoJLyoqCgkgKiBBbGxvd3MgZm9yIHVzZXIgaW5mb3JtYXRpb24gdG8gYmUgcmVtb3ZlZCB3aGlsZSBrZWVwaW5nIHRoZSByZWZlcmVudGlhbCBpbnRlZ3JpdHkgb2YgdGhlIGRhdGFiYXNlIGludGFjdCAoc3VwcG9ydHMgdGhlIEdEUFIgcmlnaHQgdG8gYmUgZm9yZ290dGVuKQoJICogUGVyc29uYWwgaW5mb3JtYXRpb24gaXMgYW5vbnltaXplZCBvdXQgYW5kIGFjdGl2aXR5IGxvZ2dpbmcgaXMgcmVtb3ZlZAoJICovCglwdWJsaWMgZnVuY3Rpb24gZm9yZ2V0KCkKCXsKCSAgICBnbG9iYWwgJHdwZGI7CgkgICAgCgkgICAgaWYgKCEkdGhpcy0+aXNWYWxpZCgpKQoJICAgIHsKCSAgICAgICAgcmV0dXJuIG5ldyBNTV9SZXNwb25zZShfbW10KCJPbmx5IHZhbGlkIG1lbWJlcnMgY2FuIGJlIGZvcmdvdHRlbiIpLE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJICAgIH0KCSAgICAKCSAgICAvL2NhbmNlbCB0aGUgdXNlcgoJICAgIGlmICgkdGhpcy0+Z2V0U3RhdHVzKCkgIT0gTU1fU3RhdHVzOjokQ0FOQ0VMRUQpCgkgICAgewogICAgCSAgICAkY2FuY2VsUmVzcG9uc2UgPSBNTV9BY2Nlc3NDb250cm9sRW5naW5lOjpjaGFuZ2VNZW1iZXJzaGlwU3RhdHVzKCR0aGlzLCBNTV9TdGF0dXM6OiRDQU5DRUxFRCk7CiAgICAJICAgIGlmIChNTV9SZXNwb25zZTo6aXNFcnJvcigkY2FuY2VsUmVzcG9uc2UpKQogICAgCSAgICB7CiAgICAJICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKF9tbXQoIkFuIGVycm9yIHdhcyBlbmNvdW50ZXJlZCB3aGVuIGF0dGVtcHRpbmcgdG8gY2FuY2VsIHRoZSB1c2VyJ3MgbWVtYmVyc2hpcCIpLE1NX1Jlc3BvbnNlOjokRVJST1IpOwogICAgCSAgICB9CiAgICAJICAgIAogICAgCSAgICAvL25vdyB1cGRhdGUgdGhpcyBlbnRpdHkKICAgIAkgICAgJHRoaXMtPmdldERhdGEoKTsKCSAgICB9CgkgICAgCgkgICAgLy90aGVuLCBjYW5jZWwgYW55IGFjdGl2ZSBidW5kbGVzCgkgICAgJGFwcGxpZWRCdW5kbGVzID0gJHRoaXMtPmdldEFwcGxpZWRCdW5kbGVzKCk7CgkgICAgZm9yZWFjaCAoJGFwcGxpZWRCdW5kbGVzIGFzICRlYWNoQnVuZGxlKQoJICAgIHsKCSAgICAgICAgJGNhbmNlbFJlc3BvbnNlID0gTU1fQWNjZXNzQ29udHJvbEVuZ2luZTo6cmVtb3ZlQnVuZGxlRnJvbVVzZXIoJHRoaXMsICRlYWNoQnVuZGxlLT5nZXRCdW5kbGUoKSxNTV9TdGF0dXM6OiRDQU5DRUxFRCk7CgkgICAgICAgIGlmIChNTV9SZXNwb25zZTo6aXNFcnJvcigkY2FuY2VsUmVzcG9uc2UpKQoJICAgICAgICB7CgkgICAgICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKHNwcmludGYoX21tdCgiQW4gZXJyb3Igd2FzIGVuY291bnRlcmVkIHdoZW4gYXR0ZW1wdGluZyB0byByZXZva2UgYWNjZXNzIHRvIGJ1bmRsZSBpZCAlcyIpLCRlYWNoQnVuZGxlLT5nZXRCdW5kbGVJZCgpKSxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCSAgICAgICAgfQoJICAgIH0KCSAgICAKCSAgICAvL3JlbW92ZSBhbnkgY2FyZCBvbiBmaWxlIGRhdGEgZm9yIHRoaXMgdXNlciwganVzdCB0byBlbnN1cmUgdGhhdCBvbnNpdGUgYmlsbGluZyB0cnVseSBiZWNvbWVzIGltcG9zc2libGUKCSAgICAkd3BkYi0+ZGVsZXRlKE1NX1RBQkxFX0NBUkRfT05fRklMRSxhcnJheSgidXNlcl9pZCI9PiR0aGlzLT5pZCkpOwoJICAgIAoJICAgICRzdWNjZXNzTGlzdCA9IGFycmF5KCk7CgkgICAgJGZhaWxMaXN0ID0gYXJyYXkoKTsKCSAgICAKCSAgICAkYW5vbnltaXplZExhYmVsID0gIjwiLl9tbXQoInJlbW92ZWQiKS4iPiI7CgkgICAgCgkgICAgCgkgICAgLy9yZW1vdmUgYW55IGN1c3RvbSBmaWVsZCBkYXRhCgkgICAgJGRlbGV0ZUN1c3RvbUZpZWxkRGF0YSA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0ZPUkdFVF9NRU1CRVJfQ1VTVE9NX0ZJRUxEUyk7CgkgICAgaWYgKCRkZWxldGVDdXN0b21GaWVsZERhdGEgPT0gdHJ1ZSkKCSAgICB7CgkgICAgICAgIGlmIChNTV9SZXNwb25zZTo6aXNTdWNjZXNzKE1NX0N1c3RvbUZpZWxkRGF0YTo6ZGVsZXRlQnlVc2VySWQoJHRoaXMtPmlkKSkpCgkgICAgICAgIHsKCSAgICAgICAgICAgICRzdWNjZXNzTGlzdFtdID0gc3RydG9sb3dlcihfbW10KCJDdXN0b20gRmllbGRzIikpOwoJICAgICAgICB9CgkgICAgICAgIGVsc2UgCgkgICAgICAgIHsKCSAgICAgICAgICAgICRmYWlsTGlzdFtdID0gc3RydG9sb3dlcihfbW10KCJDdXN0b20gRmllbGRzIikpOwoJICAgICAgICB9CgkgICAgfQoJICAgIAoJICAgIC8vdGhlbiByZW1vdmUgYWN0aXZpdHkgbG9nZ2luZwoJICAgICRkZWxldGVBY3Rpdml0eUxvZ3MgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9GT1JHRVRfTUVNQkVSX0FDVElWSVRZX0xPRyk7CgkgICAgaWYgKCRkZWxldGVBY3Rpdml0eUxvZ3MgPT0gdHJ1ZSkKCSAgICB7CgkgICAgICAgIGlmIChNTV9BY3Rpdml0eUxvZzo6ZGVsZXRlTWVtYmVyKCR0aGlzLT5pZCkpCgkgICAgICAgIHsKCSAgICAgICAgICAgICRzdWNjZXNzTGlzdFtdID0gc3RydG9sb3dlcihfbW10KCJBY3Rpdml0eSBMb2ciKSk7CgkgICAgICAgIH0KCSAgICAgICAgZWxzZSAKCSAgICAgICAgewoJICAgICAgICAgICAgJGZhaWxMaXN0W10gPSBzdHJ0b2xvd2VyKF9tbXQoIkFjdGl2aXR5IExvZyIpKTsKCSAgICAgICAgfQoJICAgIH0KCSAgICAKCSAgICAvL25leHQgb3JkZXIgaW5mb3JtYXRpb24KCSAgICAkc2NydWJPcmRlckluZm8gPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKE1NX09wdGlvblV0aWxzOjokT1BUSU9OX0tFWV9GT1JHRVRfTUVNQkVSX09SREVSX0FERFJFU1MpOwoJICAgICRmaWVsZFZhbHVlcyA9IGFycmF5KCk7CgkgICAgJG9yZGVyU2NvcGUgPSBhcnJheSgpOwoJICAgIGlmICgkc2NydWJPcmRlckluZm8gPT0gdHJ1ZSkKCSAgICB7CgkgICAgICAgICRvcmRlclNjb3BlW10gPSBfbW10KCJvcmRlciBpbmZvcm1hdGlvbiIpOwoJICAgICAgICAkZmllbGRWYWx1ZXMgKz0gYXJyYXkoJ2JpbGxpbmdfZmlyc3RfbmFtZSc9PiRhbm9ueW1pemVkTGFiZWwsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiaWxsaW5nX2xhc3RfbmFtZSc9PiRhbm9ueW1pemVkTGFiZWwsCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiaWxsaW5nX2FkZHJlc3MxJz0+bnVsbCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JpbGxpbmdfYWRkcmVzczInPT5udWxsLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19jaXR5Jz0+bnVsbCwKICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgICAgICdiaWxsaW5nX3Bob25lJz0+bnVsbCwKICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICdiaWxsaW5nX3Bvc3RhbF9jb2RlJz0+bnVsbCwKICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICdiaWxsaW5nX3Byb3ZpbmNlJz0+bnVsbCwKICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICdiaWxsaW5nX3N0YXRlJz0+bnVsbCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NoaXBwaW5nX2ZpcnN0X25hbWUnPT4kYW5vbnltaXplZExhYmVsLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2hpcHBpbmdfbGFzdF9uYW1lJz0+JGFub255bWl6ZWRMYWJlbCwKICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICdzaGlwcGluZ19hZGRyZXNzMSc9Pm51bGwsCiAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAnc2hpcHBpbmdfYWRkcmVzczInPT5udWxsLAogICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgJ3NoaXBwaW5nX2NpdHknPT5udWxsLAogICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgJ3NoaXBwaW5nX3Bob25lJz0+bnVsbCwKICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICAgICdzaGlwcGluZ19wb3N0YWxfY29kZSc9Pm51bGwsCiAgICAgICAgICAgICAgICAgICAgCSAgICAgICAgICAgICAnc2hpcHBpbmdfcHJvdmluY2UnPT5udWxsLAogICAgICAgICAgICAgICAgICAgIAkgICAgICAgICAgICAgJ3NoaXBwaW5nX3N0YXRlJz0+bnVsbCwKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lwX2FkZHJlc3MnPT5udWxsLAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0ZV9tb2RpZmllZCcgPT4gTU1fVXRpbHM6OmdldEN1cnJlbnRUaW1lKCkKCSAgICAgICAgKTsKCSAgICB9CgkgICAgCgkgICAgJHNjcnViT3JkZXJDb3VudHJ5ID0gTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfRk9SR0VUX01FTUJFUl9PUkRFUl9DT1VOVFJZKTsKCSAgICBpZiAoJHNjcnViT3JkZXJDb3VudHJ5ID09IHRydWUpCgkgICAgewoJICAgICAgICAkb3JkZXJTY29wZVtdID0gX21tdCgib3JkZXIgY291bnRyeSIpOwoJICAgICAgICAkZmllbGRWYWx1ZXNbImJpbGxpbmdfY291bnRyeSJdID0gbnVsbDsKCSAgICAgICAgJGZpZWxkVmFsdWVzWyJzaGlwcGluZ19jb3VudHJ5Il0gPSBudWxsOwoJICAgIH0KCSAgICAKCSAgICBpZiAoJHNjcnViT3JkZXJJbmZvIHx8ICRzY3J1Yk9yZGVyQ291bnRyeSkKCSAgICB7CgkgICAgICAgICRzdGF0dXMgPSAkd3BkYi0+dXBkYXRlKE1NX1RBQkxFX09SREVSUywkZmllbGRWYWx1ZXMsYXJyYXkoInVzZXJfaWQiPT4kdGhpcy0+aWQpKTsKCSAgICAgICAgaWYgKCRzdGF0dXMgPT09IGZhbHNlKQoJICAgICAgICB7CgkgICAgICAgICAgICAkZmFpbExpc3QgKz0gJG9yZGVyU2NvcGU7CgkgICAgICAgIH0KCSAgICAgICAgZWxzZSAKCSAgICAgICAgewoJICAgICAgICAgICAgJHN1Y2Nlc3NMaXN0ICs9ICRvcmRlclNjb3BlOwoJICAgICAgICB9CgkgICAgfQoJICAgIAoJICAgIC8vdGhpcmQsIHN0b3JlZCBtZW1iZXIgYWRkcmVzcyBhbmQgY29udGFjdCBpbmZvCgkgICAgJHVzZXJTY29wZSA9IGFycmF5KCk7CgkgICAgJHNjcnViU3RvcmVkQWRkcmVzcyA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0ZPUkdFVF9NRU1CRVJfQUREUkVTUyk7CgkgICAgaWYgKCRzY3J1YlN0b3JlZEFkZHJlc3MgPT0gdHJ1ZSkKCSAgICB7CgkgICAgICAgICR1c2VyU2NvcGVbXSA9IF9tbXQoInN0b3JlZCBhZGRyZXNzIGluZm9ybWF0aW9uIik7CgkgICAgICAgICR0aGlzLT5zZXRGaXJzdE5hbWUoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0TGFzdE5hbWUoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0QmlsbGluZ0FkZHJlc3MoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0QmlsbGluZ0NpdHkoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0QmlsbGluZ1N0YXRlKCIiKTsKCSAgICAgICAgJHRoaXMtPnNldEJpbGxpbmdaaXBDb2RlKCIiKTsKCSAgICAgICAgJHRoaXMtPnNldFNoaXBwaW5nQWRkcmVzcygiIik7CgkgICAgICAgICR0aGlzLT5zZXRTaGlwcGluZ0NpdHkoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0U2hpcHBpbmdTdGF0ZSgiIik7CgkgICAgICAgICR0aGlzLT5zZXRTaGlwcGluZ1ppcENvZGUoIiIpOwoJICAgICAgICAkdGhpcy0+c2V0UGhvbmUoIiIpOwoJICAgIH0KCSAgICAKCSAgICAkc2NydWJTdG9yZWRBZGRyZXNzQ291bnRyeSA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0ZPUkdFVF9NRU1CRVJfQUREUkVTU19DT1VOVFJZKTsKCSAgICBpZiAoJHNjcnViU3RvcmVkQWRkcmVzc0NvdW50cnkgPT0gdHJ1ZSkKCSAgICB7CgkgICAgICAgICR1c2VyU2NvcGVbXSA9IF9tbXQoInN0b3JlZCBhZGRyZXNzIGNvdW50cnkiKTsKCSAgICAgICAgJHRoaXMtPnNldEJpbGxpbmdDb3VudHJ5KCIiKTsKCSAgICAgICAgJHRoaXMtPnNldFNoaXBwaW5nQ291bnRyeSgiIik7CgkgICAgfQoJICAgIAoJICAgICRzaG91bGRBbm9ueW1pemVFbWFpbCA9IE1NX09wdGlvblV0aWxzOjpnZXRPcHRpb24oTU1fT3B0aW9uVXRpbHM6OiRPUFRJT05fS0VZX0ZPUkdFVF9NRU1CRVJfRU1BSUxfQUREUkVTUyk7CgkgICAgLy9yZWdhcmRsZXNzIG9mIHdoYXQgZGF0YSBpcyBzY3J1YmJlZCwgdGhlIHVzZXIgbmVlZHMgdG8gYmUgY2FuY2VsbGVkLCBhbmQgdGhlIHVzZXJfbG9naW4gYW5kIHBhc3N3b3JkIG5lZWQgdG8gYmUgY2hhbmdlZAoJICAgICR1c2VyU2NvcGVbXSA9IF9tbXQoInVzZXIgYWNjb3VudCBpbmZvcm1hdGlvbiIpOwoJICAgICR0aGlzLT5sYXN0TG9naW5JcEFkZHJlc3MgPSAiIjsKCSAgICBhZGRfZmlsdGVyKCdzZW5kX3Bhc3N3b3JkX2NoYW5nZV9lbWFpbCcsICdfX3JldHVybl9mYWxzZScpOwoJICAgICR1c2VyTG9naW4gPSAidXNlcnskdGhpcy0+aWR9XyIuTU1fVXRpbHM6OmNyZWF0ZVJhbmRvbVN0cmluZygpOwoJICAgICR1c2VyUGFzcyA9IE1NX1V0aWxzOjpjcmVhdGVSYW5kb21TdHJpbmcoNjQpOwoJICAgICR0aGlzLT5zZXRVc2VybmFtZSgkdXNlckxvZ2luKTsKCSAgICBpZiAoJHNob3VsZEFub255bWl6ZUVtYWlsID09IHRydWUpCgkgICAgewoJICAgICAgIC8vVE9ETzogbWFrZSBzdXJlIG1tIGRvZXMgbm90IHRyeSB0byBzZW5kIHRvIC5pbnZhbGlkIGVtYWlsIGFkZHJlc3NlcyBvciBhZGQgdG8gYSBsaXN0CgkgICAgICAgJHVzZXJFbWFpbCA9ICJ7JHVzZXJMb2dpbn1AZm9yZ290dGVuLmludmFsaWQiOyAvLy5pbnZhbGlkIGRvbWFpbnMgYXJlIHNwZWNpZmllZCBpbiBSRkMgNjc2MSBhcyBiZWluZyBleHByZXNzbHkgZm9yIGFkZHJlc3NlcyB0aGF0IGFyZSBub25leGlzdGVudAoJICAgICAgICR0aGlzLT5zZXRFbWFpbCgkdXNlckVtYWlsKTsKCSAgICB9CgkgICAgJHRoaXMtPnNldFBhc3N3b3JkKCR1c2VyUGFzcyk7CgkgICAgJHRoaXMtPnNldEZvcmdvdHRlbkZsYWcodHJ1ZSk7CgkgICAgaWYgKE1NX1Jlc3BvbnNlOjppc1N1Y2Nlc3MoJHRoaXMtPmNvbW1pdERhdGEoKSkpCgkgICAgewoJICAgICAgICAkc3VjY2Vzc0xpc3QgKz0gJHVzZXJTY29wZTsKCSAgICB9CgkgICAgZWxzZSAKCSAgICB7CgkgICAgICAgICRmYWlsTGlzdCArPSAkdXNlclNjb3BlOwoJICAgIH0KCSAgICAKCSAgICAvL2F0IHRoaXMgcG9pbnQsICRzdWNjZXNzTGlzdCBjb250YWlucyBhIGh1bWFuLXJlYWRhYmxlIGxpc3Qgb2YgdGhlIG9wZXJhdGlvbnMgdGhhdCBzdWNjZWVkZWQsIHdoaWxlICRmYWlsTGlzdCBjb250YWlucyB0aGUgb3BlcmF0aW9ucyB0aGF0IGZhaWxlZAoJICAgIC8vdGhlIGZvcmdldCgpIG9wZXJhdGlvbiBpcyBjb25zaWRlcmVkIHN1Y2Nlc3NmdWxseSwgb25seSBpZiBBTEwgdGhlIHN1Yi1vcGVyYXRpb25zIHN1Y2NlZWRlZAoJICAgIGlmIChjb3VudCgkZmFpbExpc3QpID09IDApCgkgICAgewoJICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkgICAgfQoJICAgIGVsc2UgCgkgICAgewoJICAgICAgICAkZXJyb3JNc2cgPSBfbW10KCJUaGUgZm9sbG93aW5nIG9wZXJhdGlvbnMgc3VjY2VlZGVkIikuIjpcbiIuCgkgICAJICAgICAgICBpbXBsb2RlKCIsIiwkc3VjY2Vzc0xpc3QpLiJcbiIuCgkgICAJICAgICAgICBfbW10KCJUaGUgZm9sbG93aW5nIG9wZXJhdGlvbnMgZmFpbGVkIikuIjpcbiIuCgkgICAJICAgICAgICBpbXBsb2RlKCIsIiwkZmFpbExpc3QpOwoJICAgICAgICByZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCRlcnJvck1zZyxNTV9SZXNwb25zZTo6JEVSUk9SKTsKCSAgICB9Cgl9CgkKfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(224, 'rbacadminview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCgphYnN0cmFjdCBjbGFzcyBNTV9SQkFDQWRtaW5WaWV3IGV4dGVuZHMgTU1fUkJBQ0Jhc2VWaWV3CnsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCk7CgkJJHRoaXMtPnBlcm1pc3Npb25zID0gYXJyYXkoCgkJCQkiKiIgID0+ICBhcnJheShNTV9Sb2xlOjokUk9MRV9BRE1JTklTVFJBVE9SKQoJCQkJKTsKCX0KfQ==', 0, '2018-11-21 06:38:55'),
(225, 'linkedinloginextension', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICovCmNsYXNzIE1NX0xpbmtlZEluTG9naW5FeHRlbnNpb24gZXh0ZW5kcyBNTV9BYnN0cmFjdFNvY2lhbExvZ2luRXh0ZW5zaW9uCnsJCgkKCXByb3RlY3RlZCAkZXh0ZW5zaW9uTmFtZSA9ICJMb2dpbiB3aXRoIExpbmtlZEluIjsKCXByb3RlY3RlZCAkcHJvdmlkZXJOYW1lICA9ICJMaW5rZWRJbiI7Cglwcm90ZWN0ZWQgJGtleU5hbWUJCSA9ICJDbGllbnQgSUQiOwoJcHJvdGVjdGVkICRzZWNyZXROYW1lIAkgPSAiQ2xpZW50IFNlY3JldCI7CgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkYXV0b2xvYWREZXBlbmRlbmNpZXM9dHJ1ZSwkY29uZmlnRGF0YT0iIikgCgl7IAoJCS8vbGlua2VkaW4gc3BlY2lmaWMgc2V0dGluZ3MKCQkkdGhpcy0+dG9rZW4gPSBNTV9FeHRlbnNpb246OiRMSU5LRURJTl9MT0dJTl9UT0tFTjsKCQkkdGhpcy0+bGlzdGluZ0ltYWdlID0gImh0dHBzOi8vbWVtYmVybW91c2UuY29tL2Fzc2V0cy9wbHVnaW5faW1hZ2VzL2xvZ29zL2V4dGVuc2lvbnMtbGlua2VkaW4uanBnIjsKCSAJLy8kdGhpcy0+c3VwcG9ydEFydGljbGVVcmwgPSAiaHR0cDovL3N1cHBvcnQubWVtYmVybW91c2UuY29tL3N1cHBvcnQvc29sdXRpb25zL2FydGljbGVzLzkwMDAwMjAyODMtY29uZmlndXJpbmctbGlua2VkaW4tbG9naW4iOwoJCXBhcmVudDo6X19jb25zdHJ1Y3QoJGF1dG9sb2FkRGVwZW5kZW5jaWVzLCRjb25maWdEYXRhKTsKCX0KCQoJCglwcm90ZWN0ZWQgZnVuY3Rpb24gZ2V0SHlicmlkQXV0aENvbmZpZygpCgl7CgkJJGNvbmZpZyA9IHBhcmVudDo6Z2V0SHlicmlkQXV0aENvbmZpZygpOwoJCSRjb25maWdbInByb3ZpZGVycyJdID0gYXJyYXkgKAoJCQkJCSR0aGlzLT50b2tlbiA9PiBhcnJheSAoCgkJCQkJCQkiZW5hYmxlZCIgPT4gdHJ1ZSwKCQkJCQkJCSJrZXlzIiAgICA9PiBhcnJheSAoICJrZXkiID0+ICR0aGlzLT5hcGlLZXksICJzZWNyZXQiID0+ICR0aGlzLT5hcGlTZWNyZXQgKSwKCQkJCQkJCSJzY29wZSIgICA9PiAiZW1haWwiLAoJCQkJCQkJCgkJCQkJKQoJCQkpOwoJCXJldHVybiAkY29uZmlnOwoJfQp9', 0, '2018-11-21 06:38:55'),
(226, 'template', 'PD9waHAKLyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fVEVNUExBVEUKewoJcHJpdmF0ZSAkaW5mbzsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0ICgpCgl7CgkJJHRoaXMtPmluZm8gPSBuZXcgc3RkQ2xhc3MoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlbmRlcl93aXRoKCR0ZW1wbGF0ZSkKCXsKCQkkcCA9ICR0aGlzLT5pbmZvOwoJCWlmKGZpbGVfZXhpc3RzKCR0ZW1wbGF0ZSkpCgkJewoJCQlyZXR1cm4gaW5jbHVkZSgkdGVtcGxhdGUpOwoJCX0KCQllbHNlCgkJewoJCQllY2hvICJmaWxlIGRvZXMgbm90IGV4aXN0IHskdGVtcGxhdGV9IjsKCQl9Cgl9CgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2VuZXJhdGUoJGZpbGVuYW1lLCAkaW5mbz0iIikKCXsKCQkJJHAgPSAkaW5mbzsKCQkJCgkJCWlmIChpc19maWxlKCRmaWxlbmFtZSkpIHsKCQkJCW9iX3N0YXJ0KCk7CgkJCQlpbmNsdWRlICRmaWxlbmFtZTsKCQkJCSRjb250ZW50cyA9IG9iX2dldF9jb250ZW50cygpOwoJCQkJb2JfZW5kX2NsZWFuKCk7CgkJCQlyZXR1cm4gJGNvbnRlbnRzOwoJCQl9CgkJCQoJCQlyZXR1cm4gZmFsc2U7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBhZGRfdmFyKCRuYW1lLCAkdmFsKQoJewoJCSR0aGlzLT5pbmZvLT4kbmFtZSA9ICR2YWw7Cgl9Cgp9CiAK', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(227, 'coinbaseminimalservice', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(228, 'orderutils', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX09yZGVyVXRpbHMKewkKCS8qKgoJICogVGhpcyBtZXRob2QgdGFrZXMgYW4gJG9yZGVyIG9iamVjdCBhbmQgZGV0ZXJtaW5lcyB0aGUgcmViaWxsIHRvdGFsIGFuZCBkaXNjb3VudCBieSBpdGVyYXRpbmcKCSAqIG92ZXIgdGhlIG9yZGVyIGl0ZW1zLgoJICogCgkgKiBAcGFyYW0gTU1fT3JkZXIgJG9yZGVyIHRoZSBvcmRlciB0byBjYWxjdWxhdGUgcmViaWxsIGFtb3VudHMgZm9yCgkgKiBAcmV0dXJuIGFycmF5IGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHJlYmlsbCB0b3RhbCBhbmQgZGlzY291bnQgYW1vdW50cwoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFJlYmlsbEFtb3VudHMoTU1fT3JkZXIgJG9yZGVyKQoJewoJCSRkYXRhID0gYXJyYXkoKTsKCQkkZGF0YVsicmViaWxsX3RvdGFsIl0gPSAwOwoJCSRkYXRhWyJyZWJpbGxfc2hpcHBpbmciXSA9IDA7CgkJJGRhdGFbInJlYmlsbF9zdWJ0b3RhbCJdID0gMDsKCQkkZGF0YVsicmViaWxsX2Rpc2NvdW50Il0gPSAwOwoJCQoJCWlmKCRvcmRlci0+aXNWYWxpZCgpKQoJCXsKCQkJJG9yZGVySXRlbXMgPSAkb3JkZXItPmdldFByb2R1Y3RzKCk7CgkJCSRyZWJpbGxPcmRlclRvdGFsID0gMDsKCQkJJHJlYmlsbERpc2NvdW50ID0gMDsKCQkJCgkJCWZvcmVhY2goJG9yZGVySXRlbXMgYXMgJG9yZGVySXRlbSkKCQkJewoJCQkJJHByb2R1Y3QgPSBuZXcgTU1fUHJvZHVjdCgkb3JkZXJJdGVtLT5nZXRJdGVtSWQoKSk7CgkJCQkJCgkJCQlpZigkcHJvZHVjdC0+aXNWYWxpZCgpKQoJCQkJewoJCQkJCSRkYXRhWyJyZWJpbGxfdG90YWwiXSArPSAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKTsKCQkJCQkKCQkJCQlpZighaXNfbnVsbCgkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdEaXNjb3VudCgpKSkKCQkJCQl7CgkJCQkJCSRkYXRhWyJyZWJpbGxfc3VidG90YWwiXSArPSBmbG9hdHZhbCgkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKSkgKyBmbG9hdHZhbCgkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdEaXNjb3VudCgpKTsKCQkJCQkJJGRhdGFbInJlYmlsbF9kaXNjb3VudCJdICs9ICRvcmRlckl0ZW0tPmdldFJlY3VycmluZ0Rpc2NvdW50KCk7CgkJCQkJfQoJCQkJCWVsc2UgCgkJCQkJewoJCQkJCQkkZGF0YVsicmViaWxsX3N1YnRvdGFsIl0gKz0gJHByb2R1Y3QtPmdldFByaWNlKGZhbHNlKTsKCQkJCQkJCgkJCQkJCS8vIGNoZWNrIGlmIHRoZSBwcmljZSBpcyBkaXNjb3VudGVkCgkJCQkJCWlmKCRwcm9kdWN0LT5nZXRQcmljZShmYWxzZSkgPiAkb3JkZXJJdGVtLT5nZXRSZWN1cnJpbmdBbW91bnQoKSkKCQkJCQkJewoJCQkJCQkJJGRhdGFbInJlYmlsbF9kaXNjb3VudCJdICs9IGZsb2F0dmFsKCRwcm9kdWN0LT5nZXRQcmljZShmYWxzZSkpIC0gZmxvYXR2YWwoJG9yZGVySXRlbS0+Z2V0UmVjdXJyaW5nQW1vdW50KCkpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCQoJCXJldHVybiAkZGF0YTsKCX0KfQo=', 0, '2018-11-21 06:38:55'),
(229, 'memberdetailsview', '', 0, '2018-11-21 06:38:55'),
(230, 'defaultordernumbergenerator', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogVGhlIERlZmF1bHRPcmRlck51bWJlckdlbmVyYXRvciBjbGFzcyBnZW5lcmF0ZXMgYW4gb3JkZXIgbnVtYmVyIGlkZW50aWNhbCB0byB0aGUgc2VxdWVuY2UgaWQgb2YgdGhlIG9yZGVyIG51bWJlcgogKiBQcmlvciB0byBjb21taXQsIGEgcmFuZG9tIHN0cmluZyBpcyBnZW5lcmF0ZWQgaW4gb3JkZXIgdG8gc2F0aXNmeSB0aGUgY29tbWl0IHJlcXVpcmVtZW50cyBvZiB0aGUgb3JkZXIgY2xhc3MKICovCmNsYXNzIE1NX0RlZmF1bHRPcmRlck51bWJlckdlbmVyYXRvciBleHRlbmRzIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yCnsKCQoJLyoqCgkgKiBHZW5lcmF0ZSBhbiBvcmRlciBudW1iZXIgcHJpb3IgdG8gdGhlIG9yZGVyIGJlaW5nIGNvbW1pdHRlZAoJICogCgkgKiBAc2VlIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yOjpwcmVDb21taXQoKQoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJlQ29tbWl0KE1NX09yZGVyICRvcmRlcikKCXsKCQkkb3JkZXJOdW1iZXIgPSAiIjsKCQlmb3IgKCRpPTA7ICRpPDMyOyAkaSsrKQoJCXsKCQkJJG9yZGVyTnVtYmVyIC49IGNocihyYW5kKDMzLDEyMikpOwoJCX0KCQlyZXR1cm4gJG9yZGVyTnVtYmVyOwoJfQoJCgkvKioKCSAqIEdlbmVyYXRlIGFuIG9yZGVyIG51bWJlciBhZnRlciB0aGUgb3JkZXIgaGFzIGJlZW4gY29tbWl0dGVkLiBCZWNhdXNlIHRoaXMgbWV0aG9kIHdpbGwgdHlwaWNhbGx5IGJlIGNhbGxlZCBmcm9tIAoJICogaW5zaWRlIGEgdHJhbnNhY3Rpb24sIHRoZSBvcmRlciB3aWxsIG5vdCBoYXZlIGJlZW4gdmFsaWRhdGVkIHlldAoJICogCgkgKiBAc2VlIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yOjpwb3N0Q29tbWl0KCkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHBvc3RDb21taXQoTU1fT3JkZXIgJG9yZGVyKQoJewoJCXJldHVybiAkb3JkZXItPmdldElkKCkgKyAxMDAwOwkJCgl9Cn0KCg==', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(231, 'product', '', 0, '2018-11-21 06:38:55'),
(232, 'advancedreportbase', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKi8KYWJzdHJhY3QgY2xhc3MgTU1fQWR2YW5jZWRSZXBvcnRCYXNlIGV4dGVuZHMgTU1fUmVwb3J0QmFzZQp7CglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGF1dG9FbnF1ZXVlRGVwZW5kZW5jaWVzPXRydWUpCgl7CQoJCWlmKE1NX01lbWJlck1vdXNlU2VydmljZTo6aGFzUGVybWlzc2lvbihNTV9NZW1iZXJNb3VzZVNlcnZpY2U6OiRGRUFUVVJFX1JFUE9SVElOR19TVUlURSkgIT0gTU1fTWVtYmVyTW91c2VTZXJ2aWNlOjokQUNUSVZFKQoJCXsKCQkJLy8gZXhpdCBpZiBjdXJyZW50IE1lbWJlck1vdXNlIGxpY2Vuc2UgZG9lc24ndCBoYXZlIGFjY2VzcyB0byB0aGUgcmVwb3J0aW5nIHN1aXRlCgkJCWV4aXQ7CgkJfQoJCQoJCXBhcmVudDo6X19jb25zdHJ1Y3QoJGF1dG9FbnF1ZXVlRGVwZW5kZW5jaWVzKTsKCX0KfQo=', 0, '2018-11-21 06:38:55'),
(233, 'aweberapibase', 'LyoqCiAqIE1NX0FXZWJlckFQSUJhc2UKICoKICogQmFzZSBvYmplY3QgdGhhdCBhbGwgTU1fQVdlYmVyQVBJIG9iamVjdHMgaW5oZXJpdCBmcm9tLiAgQWxsb3dzIHNwZWNpZmljIHBpZWNlcwogKiBvZiBmdW5jdGlvbmFsaXR5IHRvIGJlIHNoYXJlZCBhY3Jvc3MgYW55IG9iamVjdCBpbiB0aGUgQVBJLCBzdWNoIGFzIHRoZQogKiBhYmlsaXR5IHRvIGludHJvc3BlY3QgdGhlIGNvbGxlY3Rpb25zIG1hcC4KICoKICogQHBhY2thZ2UKICogQHZlcnNpb24gJGlkJAogKi8KY2xhc3MgTU1fQVdlYmVyQVBJQmFzZSB7CgoJLyoqCgkgKiBNYWludGFpbnMgZGF0YSBhYm91dCB3aGF0IGNoaWxkcmVuIGNvbGxlY3Rpb25zIGEgZ2l2ZW4gb2JqZWN0IHR5cGUKCSAqIGNvbnRhaW5zLgoJICovCglzdGF0aWMgcHJvdGVjdGVkICRfY29sbGVjdGlvbk1hcCA9IGFycmF5KAonYWNjb3VudCcgICAgICAgICAgICAgID0+IGFycmF5KCdsaXN0cycsICdpbnRlZ3JhdGlvbnMnKSwKJ2Jyb2FkY2FzdF9jYW1wYWlnbicgICA9PiBhcnJheSgnbGlua3MnLCAnbWVzc2FnZXMnKSwKJ2ZvbGxvd3VwX2NhbXBhaWduJyAgICA9PiBhcnJheSgnbGlua3MnLCAnbWVzc2FnZXMnKSwKJ2xpbmsnICAgICAgICAgICAgICAgICA9PiBhcnJheSgnY2xpY2tzJyksCidsaXN0JyAgICAgICAgICAgICAgICAgPT4gYXJyYXkoJ2NhbXBhaWducycsICdjdXN0b21fZmllbGRzJywgJ3N1YnNjcmliZXJzJywKJ3dlYl9mb3JtcycsICd3ZWJfZm9ybV9zcGxpdF90ZXN0cycpLAond2ViX2Zvcm0nICAgICAgICAgICAgID0+IGFycmF5KCksCid3ZWJfZm9ybV9zcGxpdF90ZXN0JyAgPT4gYXJyYXkoJ2NvbXBvbmVudHMnKSwKKTsKCgkvKioKCSAqIGxvYWRGcm9tVXJsCgkgKgoJICogQ3JlYXRlcyBhbiBvYmplY3QsIGVpdGhlciBjb2xsZWN0aW9uIG9yIGVudHJ5LCBiYXNlZCBvbiB0aGUgZ2l2ZW4KCSAqIFVSTC4KCSAqCgkgKiBAcGFyYW0gbWl4ZWQgJHVybCAgICBVUkwgZm9yIHRoaXMgcmVxdWVzdAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEByZXR1cm4gTU1fQVdlYmVyRW50cnkgb3IgTU1fQVdlYmVyQ29sbGVjdGlvbgoJICovCglwdWJsaWMgZnVuY3Rpb24gbG9hZEZyb21VcmwoJHVybCkgewoJCSRkYXRhID0gJHRoaXMtPmFkYXB0ZXItPnJlcXVlc3QoJ0dFVCcsICR1cmwpOwoJCXJldHVybiAkdGhpcy0+cmVhZFJlc3BvbnNlKCRkYXRhLCAkdXJsKTsKCX0KCglwcm90ZWN0ZWQgZnVuY3Rpb24gX2NsZWFuVXJsKCR1cmwpIHsKCQlyZXR1cm4gc3RyX3JlcGxhY2UoJHRoaXMtPmFkYXB0ZXItPmFwcC0+Z2V0QmFzZVVyaSgpLCAnJywgJHVybCk7Cgl9CgoJLyoqCgkgKiByZWFkUmVzcG9uc2UKCSAqCgkgKiBJbnRlcnByZXRzIGEgcmVzcG9uc2UsIGFuZCBjcmVhdGVzIHRoZSBhcHByb3ByaWF0ZSBvYmplY3QgZnJvbSBpdC4KCSAqIEBwYXJhbSBtaXhlZCAkcmVzcG9uc2UgICBEYXRhIHJldHVybmVkIGZyb20gYSByZXF1ZXN0IHRvIHRoZSBNTV9BV2ViZXJBUEkKCSAqIEBwYXJhbSBtaXhlZCAkdXJsICAgICAgICBVUkwgdGhhdCB0aGlzIGRhdGEgd2FzIHJlcXVlc3RlZCBmcm9tCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICogQHJldHVybiBtaXhlZAoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gcmVhZFJlc3BvbnNlKCRyZXNwb25zZSwgJHVybCkgewoJCSR0aGlzLT5hZGFwdGVyLT5wYXJzZUFzRXJyb3IoJHJlc3BvbnNlKTsKCQlpZiAoIWVtcHR5KCRyZXNwb25zZVsnaWQnXSkpIHsKCQkJcmV0dXJuIG5ldyBNTV9BV2ViZXJFbnRyeSgkcmVzcG9uc2UsICR1cmwsICR0aGlzLT5hZGFwdGVyKTsKCQl9IGVsc2UgaWYgKGlzc2V0KCRyZXNwb25zZVsnZW50cmllcyddKSkgewoJCQlyZXR1cm4gbmV3IE1NX0FXZWJlckNvbGxlY3Rpb24oJHJlc3BvbnNlLCAkdXJsLCAkdGhpcy0+YWRhcHRlcik7CgkJfQoJCXJldHVybiBmYWxzZTsKCX0KfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(234, 'checkoutform', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(235, 'protectedcontentengine', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1Byb3RlY3RlZENvbnRlbnRFbmdpbmUKewoJcHVibGljIHN0YXRpYyAkVElNRV9TRVRUSU5HX1NFUlZFUiA9ICJzZXJ2ZXIiOwoJcHVibGljIHN0YXRpYyAkVElNRV9TRVRUSU5HX0xPQ0FMID0gImxvY2FsIjsKCQoJZnVuY3Rpb24gX19jb25zdHJ1Y3QoKXt9CgoJcHVibGljIGZ1bmN0aW9uIHNhdmVTbWFydENvbnRlbnQoJGlkLCAkcG9zdCkKCXsKCQlpZigkcG9zdC0+cG9zdF9zdGF0dXMgIT0gJ2F1dG8tZHJhZnQnCgkJCSYmIGZhbHNlID09PSAod3BfaXNfcG9zdF9hdXRvc2F2ZSgkcG9zdCkgfHwgd3BfaXNfcG9zdF9yZXZpc2lvbigkcG9zdCkpKQoJCXsKCQkJJGNvbnRlbnQgPSAkcG9zdC0+cG9zdF9jb250ZW50OwoJCQkkc21hcnRUYWdFbmdpbmUgPSBuZXcgTU1fU21hcnRUYWdVdGlsKCk7CgkJCSRzbWFydFRhZ0VuZ2luZS0+c2F2ZVRhZ3MoJGNvbnRlbnQsICRwb3N0LT5JRCk7CgkJfQoJfQoJCglwdWJsaWMgZnVuY3Rpb24gcHJvdGVjdENvbnRlbnQoJHBvc3RJZCwgJGlzQmxvZ1BhZ2U9ZmFsc2UpCgl7CgkJZ2xvYmFsICRjdXJyZW50X3VzZXIsICRwb3N0OwoJCQoJCWlmKGludHZhbCgkcG9zdElkKSA8PSAwKQoJCXsKCQkJaWYoaXNzZXQoJHBvc3QtPklEKSAmJiBpbnR2YWwoJHBvc3QtPklEKT4wKQoJCQl7CgkJCQkkcG9zdElkID0gJHBvc3QtPklEOwoJCQl9CgkJCWVsc2UgaWYoaXNzZXQoJHBvc3QtPmRhdGEtPklEKSAmJiBpbnR2YWwoJHBvc3QtPmRhdGEtPklEKSkKCQkJewoJCQkJJHBvc3RJZCA9ICRwb3N0LT5kYXRhLT5JRDsKCQkJfQoJCX0KCQkKCQkkaXNCbG9nSG9tZVBhZ2UgPSBmYWxzZTsKCQkkc2hvd09uRnJvbnQgPSBNTV9PcHRpb25VdGlsczo6Z2V0T3B0aW9uKCJzaG93X29uX2Zyb250Iik7CgkJaWYoJHNob3dPbkZyb250ID09ICJwb3N0cyIgJiYgaXNfaG9tZSgpKQoJCXsKCQkJJGlzQmxvZ0hvbWVQYWdlID0gdHJ1ZTsKCQl9CgkJCgkJaWYoISRpc0Jsb2dIb21lUGFnZSkKCQl7IAoJCQlpZihpc3NldCgkcG9zdElkKSAmJiBpbnR2YWwoJHBvc3RJZCk+MCkKCQkJeyAKCQkJCWlmKCEkdGhpcy0+Y2FuQWNjZXNzUG9zdCgkcG9zdElkLCRjdXJyZW50X3VzZXItPklEKSkKCQkJCXsgCgkJCQkJLy8gZGV0ZXJtaW5lIHR5cGUgb2YgYWNjZXNzIGFuZCBkZXRlcm1pbmUgaWYgcGFnZSBoYXMgYSBwcm90ZWN0ZWQgY29udGVudCBhcmVhCgkJCQkJLy8gdG8gaGFuZGxlIHRoYXQgdHlwZSBvZiBhY2Nlc3MKCQkJCQkkcGNlID0gbmV3IE1NX1Byb3RlY3RlZENvbnRlbnRFbmdpbmUoKTsKCQkJCQkkZGF0ZU9mZnNldCA9ICRwY2UtPmRheXNUb0FjY2VzcygkcG9zdElkLCAkY3VycmVudF91c2VyLT5JRCk7CgkJCQkJCgkJCQkJJHJlcXVlc3RlZEFjY2Vzc1R5cGUgPSAiIjsKCQkJCQkkYWxsb3dBY2Nlc3MgPSBmYWxzZTsKCQkJCQkKCQkJCQlpZigkZGF0ZU9mZnNldCA9PT0gZmFsc2UpCgkJCQkJewoJCQkJCQkkcmVxdWVzdGVkQWNjZXNzVHlwZSA9IE1NX0RlY2lzaW9uVGFnUHJvY2Vzc29yOjokQUNDRVNTX05PTkU7CgkJCQkJfQoJCQkJCWVsc2UgaWYoJGRhdGVPZmZzZXQgPCAwKQoJCQkJCXsKCQkJCQkJJHJlcXVlc3RlZEFjY2Vzc1R5cGUgPSBNTV9EZWNpc2lvblRhZ1Byb2Nlc3Nvcjo6JEFDQ0VTU19GVVRVUkU7CgkJCQkJfQoJCQkJCQoJCQkJCWlmKCRyZXF1ZXN0ZWRBY2Nlc3NUeXBlICE9ICIiKQoJCQkJCXsKCQkJCQkJLy8gY2hlY2sgcGFnZSBjb250ZW50IGZvciB0aGUgZXhpc3RlbmNlIG9mIHRoZSBhcHByb3ByaWF0ZSBjb250ZW50IGFyZWEgdG8gaGFuZGxlCgkJCQkJCS8vIHRoZSByZXF1ZXN0ZWQgYWNjZXNzIHR5cGUuIEZvciBleGFtcGxlLCBpZiByZXF1ZXN0ZWQgYWNjZXNzIHR5cGUgaXMgTm9uZSB0aGVuIAoJCQkJCQkvLyB0aGVyZSBuZWVkcyB0byBiZSBhIE1NX05vQWNjZXNzIGNvbnRlbnQgYXJlYSBvbiB0aGUgcGFnZSBpbiBvcmRlciB0byBhbGxvdyAKCQkJCQkJLy8gYWNjZXNzCgkJCQkJCSR3cFBvc3QgPSBnZXRfcG9zdCgkcG9zdElkKTsKCQkJCQkJCgkJCQkJCWlmKCR3cFBvc3QpCgkJCQkJCXsKCQkJCQkJCSRyZXN1bHQgPSAwOwoJCQkJCQkJJGNvbnRlbnQgPSAkd3BQb3N0LT5wb3N0X2NvbnRlbnQ7CgkJCQkJCQkKCQkJCQkJCWlmKCRyZXF1ZXN0ZWRBY2Nlc3NUeXBlID09IE1NX0RlY2lzaW9uVGFnUHJvY2Vzc29yOjokQUNDRVNTX05PTkUpCgkJCQkJCQl7CgkJCQkJCQkJJHJlZ2V4ID0gIi9cWyIuTU1fRGVjaXNpb25UYWdQcm9jZXNzb3I6OiRUQUdfQUNDRVNTX0RFQ0lTSU9OLiJbXHNdW15cXV0qYWNjZXNzPVsnfFwiXSooIi5NTV9EZWNpc2lvblRhZ1Byb2Nlc3Nvcjo6JEFDQ0VTU19OT05FLiIpWyd8XCJdKlteXF1dKlxdL2kiOwoJCQkJCQkJCSRyZXN1bHQgPSBwcmVnX21hdGNoKCRyZWdleCwgJGNvbnRlbnQpOwoJCQkJCQkJfQoJCQkJCQkJZWxzZSBpZigkcmVxdWVzdGVkQWNjZXNzVHlwZSA9PSBNTV9EZWNpc2lvblRhZ1Byb2Nlc3Nvcjo6JEFDQ0VTU19GVVRVUkUpCgkJCQkJCQl7CgkJCQkJCQkJJHJlZ2V4ID0gIi9cWyIuTU1fRGVjaXNpb25UYWdQcm9jZXNzb3I6OiRUQUdfQUNDRVNTX0RFQ0lTSU9OLiJbXHNdW15cXV0qYWNjZXNzPVsnfFwiXSooIi5NTV9EZWNpc2lvblRhZ1Byb2Nlc3Nvcjo6JEFDQ0VTU19GVVRVUkUuIilbJ3xcIl0qW15cXV0qXF0vaSI7CgkJCQkJCQkJJHJlc3VsdCA9IHByZWdfbWF0Y2goJHJlZ2V4LCAkY29udGVudCk7CgkJCQkJCQl9CgkJCQkJCQkKCQkJCQkJCWlmKCRyZXN1bHQgPT0gMSkKCQkJCQkJCXsKCQkJCQkJCQkkYWxsb3dBY2Nlc3MgPSB0cnVlOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJCQoJCQkJCS8vIGFwcGx5IGZpbHRlcgoJCQkJCWlmKGNsYXNzX2V4aXN0cygiTU1fRmlsdGVycyIpKQoJCQkJCXsKCQkJCQkJJGFsbG93QWNjZXNzID0gYXBwbHlfZmlsdGVycyhNTV9GaWx0ZXJzOjokQllQQVNTX0NPTlRFTlRfUFJPVEVDVElPTiwgJGFsbG93QWNjZXNzKTsKCQkJCQl9CgkJCQkJCgkJCQkJaWYoISRhbGxvd0FjY2VzcykKCQkJCQl7CgkJCQkJCSRuZXh0X3BhZ2VfaWQgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0Q29yZVBhZ2VJZChNTV9Db3JlUGFnZVR5cGU6OiRFUlJPUiwgJ2Vycm9yX3R5cGUnLCBNTV9FcnJvcjo6JEFDQ0VTU19ERU5JRUQpOwoJCQkJCQkKCQkJCQkJaWYoJG5leHRfcGFnZV9pZCE9JHBvc3RJZCkKCQkJCQkJewoJCQkJCQkJaWYoaW50dmFsKCRjdXJyZW50X3VzZXItPklEKTw9MCkKCQkJCQkJCXsKCQkJCQkJCQlNTV9TZXNzaW9uOjp2YWx1ZShNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfTEFTVF9QQUdFX0RFTklFRCwgJHBvc3RJZCk7CgkJCQkJCQl9CgkJCQkJCQkKCQkJCQkJCSR1cmwgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0VXJsKE1NX0NvcmVQYWdlVHlwZTo6JEVSUk9SLCBNTV9FcnJvcjo6JEFDQ0VTU19ERU5JRUQpOwoJCQkJCQkJCgkJCQkJCQlpZighaXNfZmVlZCgpICYmICEkaXNCbG9nUGFnZSAmJiAhaXNfc2VhcmNoKCkgJiYgIWlzX2FyY2hpdmUoKSkKCQkJCQkJCXsKCQkJCQkJCQl3cF9yZWRpcmVjdCgkdXJsKTsKCQkJCQkJCQlleGl0OwoJCQkJCQkJfQoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQkJZWxzZQoJCQkJewoJCQkJCSRibG9ja0FjY2VzcyA9IGZhbHNlOwoJCQkJCQoJCQkJCS8vIGFwcGx5IGZpbHRlcgoJCQkJCWlmKGNsYXNzX2V4aXN0cygiTU1fRmlsdGVycyIpKQoJCQkJCXsKCQkJCQkJJGJsb2NrQWNjZXNzID0gYXBwbHlfZmlsdGVycyhNTV9GaWx0ZXJzOjokQkxPQ0tfQUNDRVNTLCAkYmxvY2tBY2Nlc3MpOwoJCQkJCX0KCQkJCQkKCQkJCQlpZigkYmxvY2tBY2Nlc3MpCgkJCQkJewoJCQkJCQkkdXJsID0gTU1fQ29yZVBhZ2VFbmdpbmU6OmdldFVybChNTV9Db3JlUGFnZVR5cGU6OiRFUlJPUiwgTU1fRXJyb3I6OiRBQ0NFU1NfREVOSUVEKTsKCQkJCQkKCQkJCQkJZ2xvYmFsICR3cF9xdWVyeTsKCQkJCQkJaWYoaXNzZXQoJHdwX3F1ZXJ5LT5wb3N0LT5JRCkgJiYgaW50dmFsKCR3cF9xdWVyeS0+cG9zdC0+SUQpPjApCgkJCQkJCXsgCgkJCQkJCQkkcG9zdElkID0gJHdwX3F1ZXJ5LT5wb3N0LT5JRDsKCQkJCQkJCSRjcCA9IG5ldyBNTV9Db3JlUGFnZUVuZ2luZSgpOwoJCQkJCQkJJGVycm9yUGFnZUlkID0gJGNwLT5nZXRDb3JlUGFnZUlkQnlSZWZUeXBlKE1NX0NvcmVQYWdlVHlwZTo6JEVSUk9SLCBudWxsLCBudWxsKTsKCQkJCQkJCQoJCQkJCQkJaWYoKCRwb3N0SWQgIT0gJGVycm9yUGFnZUlkKSAmJiAhaXNfZmVlZCgpICYmICEkaXNCbG9nUGFnZSAmJiAhaXNfc2VhcmNoKCkgJiYgIWlzX2FyY2hpdmUoKSkKCQkJCQkJCXsKCQkJCQkJCQl3cF9yZWRpcmVjdCgkdXJsKTsKCQkJCQkJCQlleGl0OwoJCQkJCQkJfQoJCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCQl9CgkJCQkJfQoJCQkJCWVsc2UgCgkJCQkJewoJCQkJCQkvKgoJCQkJCQkgKiBXZSd2ZSBjaGVja2VkIGZvciBjb250ZW50IGJhc2VkIGFjY2Vzc2liaWxpdHkgYnV0IGJlbG93IGlzIGNoZWNraW5nCgkJCQkJCSAqIHRvIHNlZSBpZiB0aGUgY29yZSBwYWdlIHdhcyBhY2Nlc3NpYmxlIGJ5IHRoZSB1c2VyIChvciBhbm9ueW1vdXMgYnJvd3NlcikKCQkJCQkJICogYW5kIHRoZW4gcmV0dXJuaW5nIGZhbHNlIGlmIGl0IGlzIG5vdCB0aGUgY2FzZS4KCQkJCQkJICovCgkJCQkJCWlmKE1NX0NvcmVQYWdlRW5naW5lOjppc01lbWJlckhvbWVQYWdlKCRwb3N0SWQpKQoJCQkJCQl7CgkJCQkJCQlpZighaXNfdXNlcl9sb2dnZWRfaW4oKSkKCQkJCQkJCXsKCQkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQl9CgkJCQkJCQllbHNlIAoJCQkJCQkJeyAKCQkJCQkJCQkkdXNlck9iaiA9IE1NX1VzZXI6OmdldEN1cnJlbnRXUFVzZXIoKTsKCQkJCQkJCQlpZigkdXNlck9iai0+aXNWYWxpZCgpKQoJCQkJCQkJCXsKCQkJCQkJCQkJJHBhZ2VJblF1ZXN0aW9uSWQgPSBNTV9Db3JlUGFnZUVuZ2luZTo6Z2V0Q29yZVBhZ2VJZChNTV9Db3JlUGFnZVR5cGU6OiRNRU1CRVJfSE9NRV9QQUdFLCBNTV9UWVBFX01FTUJFUlNISVBfTEVWRUwsICR1c2VyT2JqLT5nZXRNZW1iZXJzaGlwTGV2ZWwoKS0+Z2V0SWQoKSk7CgkJCQkJCQkJCWlmKCRwb3N0SWQgIT0gJHBhZ2VJblF1ZXN0aW9uSWQpCgkJCQkJCQkJCXsKCQkJCQkJCQkJCXJldHVybiBmYWxzZTsJCgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJTU1fQ29yZVBhZ2VFbmdpbmU6OnJlZGlyZWN0VG9TaXRlSG9tZVBhZ2UoKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIHRydWU7Cgl9CgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRQb3N0RGF5cygkYWNjZXNzX3R5cGUsICRhY2Nlc3NfaWQpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRzcWwgPSAic2VsZWN0IGRheXMgZnJvbSAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHdoZXJlIGFjY2Vzc190eXBlPSd7JGFjY2Vzc190eXBlfScgYW5kIGFjY2Vzc19pZD0neyRhY2Nlc3NfaWR9JyI7CiAJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwogCQlpZigkcm93cz09PWZhbHNlKQogCQl7CiAJCQlyZXR1cm4gYXJyYXkoKTsKIAkJfQogCQkkZGF5cyA9IGFycmF5KCk7CiAJCWZvcmVhY2goJHJvd3MgYXMgJHJvdykKIAkJewogCQkJJGRheXNbJHJvdy0+ZGF5c10gPSAkcm93LT5kYXlzOwogCQl9CiAJCXJldHVybiAkZGF5czsKCX0KCQogCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0QWNjZXNzUmlnaHRzKCRwYWdlSWQpCiAJewogCQlnbG9iYWwgJHdwZGI7CiAJCSRzcWwgPSAic2VsZWN0IG10Lm5hbWUgYXMgbXRfbmFtZSwgYXQubmFtZSBhcyBhdF9uYW1lLCBwLmFjY2Vzc190eXBlIGZyb20gIi5NTV9UQUJMRV9QT1NUU19BQ0NFU1MuIiBwCiAJCQkJCQlMRUZUIEpPSU4gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMUy4iIG10IG9uIHAuYWNjZXNzX3R5cGU9J21lbWJlcl90eXBlJyBhbmQgcC5hY2Nlc3NfaWQ9bXQuaWQKIAkJCQkJCUxFRlQgSk9JTiAiLk1NX1RBQkxFX0JVTkRMRVMuIiBhdCBvbiBwLmFjY2Vzc190eXBlPSdhY2Nlc3NfdGFnJyBhbmQgcC5hY2Nlc3NfaWQ9YXQuaWQKCiAJCQkJCXdoZXJlICBwLmlzX3NtYXJ0X2NvbnRlbnQ9JzAnIGFuZCBwb3N0X2lkPSd7JHBhZ2VJZH0nIjsgCiAJCQogCQkkcm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKIAkJaWYoJHJvd3M9PT1mYWxzZSkKIAkJewogCQkJcmV0dXJuIGFycmF5KCk7CiAJCX0KIAkJcmV0dXJuICRyb3dzOwogCX0KCQogCS8qKgogCSAqIEBwYXJhbSAkdXNlcl9pZCBpcyB0aGUgaWQgb2YgdGhlIHVzZXIKIAkgKiBAcGFyYW0gJGFjY2Vzc190eXBlIGlzIHRoZSBhY2Nlc3MgdHlwZSBvZiB0aGUgZ2l2ZW4gcmVxdWVzdCAoYWNjZXNzX3RhZ3xtZW1iZXJfdHlwZSkKIAkgKiBAcGFyYW0gJGFjY2Vzc19pZCBpcyB0aGUgaWQgb2YgdGhlIGdpdmVuIHR5cGUgKHNlZSBwcmV2aW91cykKIAkgKiBAcGFyYW0gJGRheXMgaXMgdGhlIGRheXMgb2YgdGhlIGNodW5rIHBhcmFtZXRlci4KIAkgKiBAcGFyYW0gJGRheXNDb21wYXJpc29uTWV0aG9kIHRoaXMgY2FuIGVxdWFsICc+JyAoZm9yIGdyZWF0ZXIgdGhhbikgb3IgJzwnIChmb3IgbGVzcyB0aGFuKS4gSXQgCiAJICogaW5kaWNhdGVzIHdoaWNoIHR5cGUgb2YgY29tcGFyaXNvbiB0byB1c2UgdG8gZGV0ZXJtaW5lIGlmIGFjY2VzcyBzaG91bGQgYmUgZ3JhbnRlZAogCSAqIEByZXR1cm4gdHJ1ZSBpZiBhY2Nlc3MgaXMgZ3JhbnRlZCB0byBjb250ZW50IGNodW5rLCBvdGhlcndpc2UgZmFsc2UuCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGNhbkFjY2Vzc0NodW5rKCR1c2VyX2lkLCAkYWNjZXNzX3R5cGUsICRhY2Nlc3NfaWQsICRkYXlzLCAkZGF5c0NvbXBhcmlzb25NZXRob2QgPSAiPiIpCiAJewogCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCR1c2VyX2lkKTsKIAkJJHVzZXJfcGVybXMgPSBuZXcgc3RkQ2xhc3MoKTsKIAkJCiAJCWlmKCR1c2VyLT5pc0FkbWluKCkgfHwgTU1fRW1wbG95ZWU6OmlzRW1wbG95ZWUoJHVzZXItPmdldElkKCkpKQogCQl7CiAJCQkvLy9nZXQgcHJldmlldyBtb2RlIGFjY2VzcwogCQkJJHVzZXJfcGVybXMgPSAkdGhpcy0+Z2V0UHJldmlld0FjY2VzcygpOwogCQkJCgkgCQlpZihlbXB0eSgkdXNlcl9wZXJtcykpCgkgCQl7CgkgCQkJcmV0dXJuIGZhbHNlOwoJIAkJfQogCQl9CiAJCWVsc2UKIAkJewoJIAkJJHVzZXJfcGVybXMgPSAkdGhpcy0+Z2V0VXNlclBlcm1pc3Npb25zKCR1c2VyX2lkKTsKCSAJCQoJIAkJaWYoZW1wdHkoJHVzZXJfcGVybXMpKQoJIAkJewoJIAkJCXJldHVybiBmYWxzZTsKCSAJCX0KIAkJfQogCQkKIAkJaWYoaXNzZXQoJHVzZXJfcGVybXMtPiRhY2Nlc3NfdHlwZSkgJiYgIWVtcHR5KCR1c2VyX3Blcm1zLT4kYWNjZXNzX3R5cGUpKQoJCXsKCQkJLyoKCQkJICogR2V0IGRheXMgYXMgbWVtYmVyIHRvIGNhbGN1bGF0ZSBmb3IgY29tcGFyaXNvbiBmb3IgdGhlIHBvc3QvcGFnZSBudW1iZXIgb2YgZGF5cwoJCQkgKiBJZiBhIHVzZXItYXBwbGllZCBidW5kbGUgZXhpc3RzIHVzZSB0aGUgZGF0ZSBkaWZmZXJlbmNlIGZvciB0aGF0IHVzZXIgYW5kIHRoYXQgdGFnLgoJCQkgKiBJZiB0aGUgYnVuZGxlIGlzIGRlcml2ZWQgZnJvbSBhIG1lbWJlciB0eXBlLCB1c2UgdGhlIGRheXMgYXMgbWVtYmVyIG51bWJlciBmb3IgY29tcGFyaXNvbi4KCQkJICovCgkJCSR1c2VyX2RheXMgPSAkdXNlcl9wZXJtcy0+ZGF5c19hc19tZW1iZXI7CgkJCQoJCQlpZigkYWNjZXNzX3R5cGUgPT0gImFjY2Vzc190YWdzIikKCQkJewoJCQkJJHVzZXJfZGF5cyA9ICR0aGlzLT5jYWxjdWxhdGVBY2Nlc3NUYWdEYXlzQnlNZW1iZXIoJGFjY2Vzc19pZCwgJHVzZXJfaWQpOwoJCQl9CgkJCQkKCQkJLy8vIGNhc2Ugd2hlbiBidW5kbGUgaXMgbm90IHR5cGUgJ3VzZXInIChpLmUuIHR5cGUgJ21lbWJlcl90eXBlJykgYW5kIHNob3VsZCB1c2UgZGF5cyBhcyBtZW1iZXIgZGF5cyBjb3JyZWxhdGlvbi4KCQkJaWYoJHVzZXJfZGF5cyA9PT0gZmFsc2UpCgkJCXsKCQkJCSR1c2VyX2RheXMgPSAkdXNlcl9wZXJtcy0+ZGF5c19hc19tZW1iZXI7CgkJCX0KCQkJCQoJCQlpZigoJGluZGV4ID0gYXJyYXlfc2VhcmNoKCRhY2Nlc3NfaWQsICR1c2VyX3Blcm1zLT4kYWNjZXNzX3R5cGUpKSAhPT0gZmFsc2UgKQoJCQl7CgkJCQlpZigkZGF5c0NvbXBhcmlzb25NZXRob2QgPT0gIj4iICYmICR1c2VyX2RheXMgPj0gJGRheXMpIAoJCQkJewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQkJZWxzZSBpZigkZGF5c0NvbXBhcmlzb25NZXRob2QgPT0gIjwiICYmICR1c2VyX2RheXMgPCAkZGF5cykKCQkJCXsKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCX0KCQkJfQoJCX0KCQkKCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCS8qCiAJICogT2J0YWlucyB0aGUgcG9zdCBwZXJtaXNzaW9ucyBhbmQgdGhlIHVzZXIgcGVybWlzc2lvbnMKIAkgKiBpZiB0aGUgcG9zdCBwZXJtaXNzaW9ucyBmaW5kcyBhIG1hdGNoIGluIHRoZSB1c2VycyBpdCB3aWxsIGNvbXBhcmUgZGF5cyBhbmQgcHJlbWl0L2RlbnkuCiAJICogQHBhcmFtICR1c2VyX2lkIGlzIHRoZSBpZCBvZiB0aGUgdXNlcgogCSAqIEBwYXJhbSAkcG9zdF9pZCBpcyB0aGUgaWQgb2YgdGhlIHBvc3QKIAkgKiBAcmV0dXJuIGJvb2xlYW4gdHJ1ZSBpZiBhY2Nlc3NpYmxlLCBvdGhlcndpc2UgZmFsc2U7CiAJICovCiAJcHVibGljIGZ1bmN0aW9uIGNhbkFjY2Vzc1Bvc3QoJHBvc3RfaWQsICR1c2VyX2lkKQogCXsKIAkJZ2xvYmFsICR3cGRiOwogCQkKIAkJJHBvc3RfcGVybXM9IG5ldyBzdGRDbGFzcygpOwogCQkkdXNlcl9wZXJtcyA9IG5ldyBzdGRDbGFzcygpOwogCQogCQkkcG9zdF9wZXJtcyA9ICR0aGlzLT5nZXRQb3N0UGVybXMoJHBvc3RfaWQpOwoJCQogCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCR1c2VyX2lkKTsKIAkJaWYoJHVzZXItPmlzQWRtaW4oKSB8fCBNTV9FbXBsb3llZTo6aXNFbXBsb3llZSgkdXNlci0+Z2V0SWQoKSkpCiAJCXsKIAkJCS8vIGdldCBwcmV2aWV3IG1vZGUgYWNjZXNzCiAJCQkkdXNlcl9wZXJtcyA9ICR0aGlzLT5nZXRQcmV2aWV3QWNjZXNzKCk7CgkgCQkKIAkJCWlmKGVtcHR5KCR1c2VyX3Blcm1zKSB8fCAoaXNzZXQoJHVzZXJfcGVybXMtPm1lbWJlcl90eXBlc1swXSkgJiYgJHVzZXJfcGVybXMtPm1lbWJlcl90eXBlc1swXT09Im5vbmUiKSkKIAkJCXsKIAkJCQlpZihjb3VudCgkcG9zdF9wZXJtcy0+bWVtYmVyX3R5cGVzKT4wIHx8IGNvdW50KCRwb3N0X3Blcm1zLT5hY2Nlc3NfdGFncyk+MCkKIAkJCQl7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQkJZWxzZQoJCQkJewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQkKIAkJCX0KIAkJfQogCQllbHNlCiAJCXsKCSAJCSR1c2VyX3Blcm1zID0gJHRoaXMtPmdldFVzZXJQZXJtaXNzaW9ucygkdXNlcl9pZCk7CiAJCX0KIAkJCiAJCS8vIGNoZWNrIGlmIHRoaXMgcG9zdCBpcyBhc3NvY2lhdGVkIHdpdGggYSBwcm90ZWN0ZWQgY2F0ZWdvcnkKIAkJJGlzUHJvdGVjdGVkQnlDYXRlZ29yeSA9ICR0aGlzLT5pc1Byb3RlY3RlZEJ5Q2F0ZWdvcnkoJHBvc3RfaWQpOwogCQkKIAkJLy8gaWYgdGhpcyBwb3N0IGlzIG5vdCBwcm90ZWN0ZWQgYnkgbWVtYmVyc2hpcCBsZXZlbCwgYnVuZGxlIG9yIGFzc29jaWF0ZWQgd2l0aCBwcm90ZWN0ZWQgY2F0ZWdvcmllcywgZ3JhbnQgYWNjZXNzCiAJCWlmKGVtcHR5KCRwb3N0X3Blcm1zKSB8fCAoZW1wdHkoJHBvc3RfcGVybXMtPmFjY2Vzc190YWdzKSAmJiBlbXB0eSgkcG9zdF9wZXJtcy0+bWVtYmVyX3R5cGVzKSAmJiAhJGlzUHJvdGVjdGVkQnlDYXRlZ29yeSkpCiAJCXsKIAkJCXJldHVybiB0cnVlOwogCQl9CiAJCQogCQkvLyBpZiB0aGUgdXNlciBoYXMgbm8gcGVybWlzc2lvbnMsIGRlbnkgYWNjZXNzCiAJCWlmKGVtcHR5KCR1c2VyX3Blcm1zKSkKIAkJewogCQkJcmV0dXJuIGZhbHNlOwogCQl9CiAJCQogCQkvLyBjaGVjayBhY2Nlc3MgYmFzZWQgb24gbWVtYmVyc2hpcCBsZXZlbCBhbmQgYnVuZGxlIHByb3RlY3Rpb24KIAkJaWYoIWVtcHR5KCRwb3N0X3Blcm1zKSkKIAkJewoJIAkJZm9yZWFjaCgkcG9zdF9wZXJtcyBhcyAkYWNjZXNzX3R5cGU9PiRhcnIpCgkgCQl7CgkgCQkJaWYoZW1wdHkoJGFycikpCgkgCQkJewoJIAkJCQljb250aW51ZTsKCSAJCQl9CgkgCQkJCQoJIAkJCWZvcmVhY2goJGFyciBhcyAkYWNjZXNzX2lkPT4kZGF5cykKCSAJCQl7CgkgCQkJCWlmKGlzc2V0KCR1c2VyX3Blcm1zLT4kYWNjZXNzX3R5cGUpICYmICFlbXB0eSgkdXNlcl9wZXJtcy0+JGFjY2Vzc190eXBlKSkKCSAJCQkJewoJIAkJCQkJLyoKCSAJCQkJCSAqIEdldCBkYXlzIGFzIG1lbWJlciB0byBjYWxjdWxhdGUgZm9yIGNvbXBhcmlzb24gZm9yIHRoZSBwb3N0L3BhZ2UgbnVtYmVyIG9mIGRheXMKCSAJCQkJCSAqIElmIGEgdXNlci1hcHBsaWVkIGJ1bmRsZSBleGlzdHMgdXNlIHRoZSBkYXRlIGRpZmZlcmVuY2UgZm9yIHRoYXQgdXNlciBhbmQgdGhhdCB0YWcuCgkgCQkJCQkgKiBJZiB0aGUgYnVuZGxlIGlzIGRlcml2ZWQgZnJvbSBhIG1lbWJlciB0eXBlLCB1c2UgdGhlIGRheXMgYXMgbWVtYmVyIG51bWJlciBmb3IgY29tcGFyaXNvbi4KCSAJCQkJCSAqLwoJIAkJCQkJJHVzZXJfZGF5cyA9ICR1c2VyX3Blcm1zLT5kYXlzX2FzX21lbWJlcjsKCQoJIAkJCQkJaWYoJGFjY2Vzc190eXBlID09ICJhY2Nlc3NfdGFncyIpCgkgCQkJCQl7CgkgCQkJCQkJJHVzZXJfZGF5cyA9ICR0aGlzLT5jYWxjdWxhdGVBY2Nlc3NUYWdEYXlzQnlNZW1iZXIoJGFjY2Vzc19pZCwgJHVzZXJfaWQpOwoJIAkJCQkJfQoJIAkJCQkJCQoJIAkJCQkJLy8vIGNhc2Ugd2hlbiBidW5kbGUgaXMgbm90IHR5cGUgJ3VzZXInIChpLmUuIHR5cGUgJ21lbWJlcl90eXBlJykgYW5kIHNob3VsZCB1c2UgZGF5cyBhcyBtZW1iZXIgZGF5cyBjb3JyZWxhdGlvbi4KCSAJCQkJCWlmKCR1c2VyX2RheXM9PT1mYWxzZSkKCSAJCQkJCXsKCSAJCQkJCQkkdXNlcl9kYXlzID0gJHVzZXJfcGVybXMtPmRheXNfYXNfbWVtYmVyOwoJIAkJCQkJfQoJIAkJCQkKCSAJCQkJCWlmKCgkaW5kZXggPSBhcnJheV9zZWFyY2goJGFjY2Vzc19pZCwgJHVzZXJfcGVybXMtPiRhY2Nlc3NfdHlwZSkpIT09ZmFsc2UgKQoJCSAJCQkJewoJCSAJCQkJCWlmKCR1c2VyX2RheXM+PSRkYXlzKQoJCSAJCQkJCXsKCQkgCQkJCQkJcmV0dXJuIHRydWU7CgkJIAkJCQkJfQoJCSAJCQkJfQoJIAkJCQl9CQoJIAkJCX0KCSAJCX0KIAkJfQogCQkKIAkJLy8gY2hlY2sgYWNjZXNzIGJhc2VkIG9uIGNhdGVnb3J5IHByb3RlY3Rpb24KIAkJaWYoJGlzUHJvdGVjdGVkQnlDYXRlZ29yeSkKIAkJewogCQkJcmV0dXJuICR0aGlzLT5oYXNBY2Nlc3NUb0NhdGVnb3JpZXMoJHVzZXJfcGVybXMsICRwb3N0X2lkKTsKIAkJfQoJCQogCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBpc1Byb3RlY3RlZEJ5Q2F0ZWdvcnkoJHBvc3RJZCkKIAl7CiAJCWdsb2JhbCAkd3BkYjsKIAkJJGNhdGVnb3JpZXMgPSBnZXRfdGhlX2NhdGVnb3J5KCRwb3N0SWQpOwogCQkJCiAJCWlmKGlzX2FycmF5KCRjYXRlZ29yaWVzKSAmJiBjb3VudCgkY2F0ZWdvcmllcykgPiAwKQogCQl7CiAJCQkkY2F0ZWdvcnlJZHMgPSBhcnJheSgpOwogCQkKIAkJCWZvcmVhY2goJGNhdGVnb3JpZXMgYXMgJGNhdGVnb3J5KQogCQkJewogCQkJCSRjYXRlZ29yeUlkc1tdID0gJGNhdGVnb3J5LT50ZXJtX2lkOwogCQkJfQogCQkKIAkJCSRjYXRlZ29yeUlkTGlzdCA9IGltcGxvZGUoIiwiLCAkY2F0ZWdvcnlJZHMpOwogCQkKIAkJCSRzcWwgPSAiU0VMRUNUIFNVTSh0b3RhbCkgRlJPTSAoU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gIi5NTV9UQUJMRV9NRU1CRVJTSElQX0xFVkVMX0NBVEVHT1JJRVMuIiBXSEVSRSBjYXRlZ29yeV9pZCBJTiAoeyRjYXRlZ29yeUlkTGlzdH0pICI7CiAJCQkkc3FsIC49ICJVTklPTiBBTEwgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gIi5NTV9UQUJMRV9CVU5ETEVfQ0FURUdPUklFUy4iIFdIRVJFIGNhdGVnb3J5X2lkIElOICh7JGNhdGVnb3J5SWRMaXN0fSkpIEFTIHQ7IjsKIAkJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Zhcigkc3FsKTsKIAkJCiAJCQlpZigkcmVzdWx0ICE9PSBmYWxzZSAmJiBpbnR2YWwoJHJlc3VsdCkgPiAwKQogCQkJewogCQkJCXJldHVybiB0cnVlOwogCQkJfQogCQl9CiAJCQogCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCXByaXZhdGUgZnVuY3Rpb24gaGFzQWNjZXNzVG9DYXRlZ29yaWVzKCR1c2VyUGVybWlzc2lvbnMsICRwb3N0SWQpCiAJewogCQkkY2F0ZWdvcmllcyA9IGdldF90aGVfY2F0ZWdvcnkoJHBvc3RJZCk7CiAJCQogCQlpZihpc19hcnJheSgkY2F0ZWdvcmllcykgJiYgY291bnQoJGNhdGVnb3JpZXMpID4gMCkKIAkJewogCQkJJGNhdGVnb3J5SWRzID0gYXJyYXkoKTsKIAkJCiAJCQlmb3JlYWNoKCRjYXRlZ29yaWVzIGFzICRjYXRlZ29yeSkKIAkJCXsKIAkJCQkkY2F0ZWdvcnlJZHNbXSA9ICRjYXRlZ29yeS0+dGVybV9pZDsKIAkJCX0KIAkJfQogCQkKIAkJLy8gY2hlY2sgaWYgbWVtYmVyIGhhcyBhY2Nlc3MgdG8gY2F0ZWdvcnkgdGhyb3VnaCB0aGVpciBtZW1iZXJzaGlwIGxldmVsCiAJCWlmKGlzc2V0KCR1c2VyUGVybWlzc2lvbnMtPm1lbWJlcl90eXBlcykgJiYgIWVtcHR5KCR1c2VyUGVybWlzc2lvbnMtPm1lbWJlcl90eXBlcykpCiAJCXsKIAkJCWZvcmVhY2goJHVzZXJQZXJtaXNzaW9ucy0+bWVtYmVyX3R5cGVzIGFzICRtZW1iZXJzaGlwSWQpCiAJCQl7CiAJCQkJJHJlc3VsdCA9IE1NX01lbWJlcnNoaXBMZXZlbDo6aGFzQWNjZXNzVG9DYXRlZ29yeSgkbWVtYmVyc2hpcElkLCAkY2F0ZWdvcnlJZHMpOwogCQkKIAkJCQlpZigkcmVzdWx0ID09PSB0cnVlKQogCQkJCXsKIAkJCQkJcmV0dXJuIHRydWU7CiAJCQkJfQogCQkJfQogCQl9CiAJCQogCQkvLyBjaGVjayBpZiBtZW1iZXIgaGFzIGFjY2VzcyB0byB0aGlzIGNhdGVnb3J5IHRocm91Z2ggYSBidW5kbGUKIAkJaWYoaXNzZXQoJHVzZXJQZXJtaXNzaW9ucy0+YWNjZXNzX3RhZ3MpICYmICFlbXB0eSgkdXNlclBlcm1pc3Npb25zLT5hY2Nlc3NfdGFncykpCiAJCXsKIAkJCWZvcmVhY2goJHVzZXJQZXJtaXNzaW9ucy0+YWNjZXNzX3RhZ3MgYXMgJGJ1bmRsZUlkKQogCQkJewogCQkJCSRyZXN1bHQgPSBNTV9CdW5kbGU6Omhhc0FjY2Vzc1RvQ2F0ZWdvcnkoJGJ1bmRsZUlkLCAkY2F0ZWdvcnlJZHMpOwogCQkJCQkKIAkJCQlpZigkcmVzdWx0ID09PSB0cnVlKQogCQkJCXsKIAkJCQkJcmV0dXJuIHRydWU7CiAJCQkJfQogCQkJfQogCQl9CiAJCQogCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiBpc1VucHJvdGVjdGVkKCRwb3N0SWQpCiAJewogCQkkcG9zdF9wZXJtcyA9ICR0aGlzLT5nZXRQb3N0UGVybXMoJHBvc3RJZCk7CiAJCSRpc1Byb3RlY3RlZEJ5Q2F0ZWdvcnkgPSAkdGhpcy0+aXNQcm90ZWN0ZWRCeUNhdGVnb3J5KCRwb3N0SWQpOwogCQkKIAkJaWYoZW1wdHkoJHBvc3RfcGVybXMpIHx8IChlbXB0eSgkcG9zdF9wZXJtcy0+YWNjZXNzX3RhZ3MpICYmIGVtcHR5KCRwb3N0X3Blcm1zLT5tZW1iZXJfdHlwZXMpICYmICEkaXNQcm90ZWN0ZWRCeUNhdGVnb3J5KSkKIAkJewogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJZWxzZQogCQl7CiAJCQlyZXR1cm4gZmFsc2U7CiAJCX0KIAl9CiAJCgkvKgoJICogQ291bnRzIG51bWJlciBvZiBkYXlzIHRvIGFjY2VzcyBjb250ZW50IChuZWdhdGl2ZSBudW1iZXIpCgkgKiBJZiBhbHJlYWR5IGhhZCBhY2Nlc3MsIGl0IHdpbGwgZGlzcGxheSBhIFswLTldKyBkYXlzIHRvIGFjY2Vzcy4KCSAqIE90aGVyd2lzZSBmYWxzZSBpZiBubyBhY2Nlc3MgZXZlci4KCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBkYXlzVG9BY2Nlc3MoJHBvc3RfaWQsICR1c2VyX2lkKQogCXsKIAkJJHBvc3RfcGVybXMgPSBuZXcgc3RkQ2xhc3MoKTsKIAkJJHVzZXJfcGVybXMgPSBuZXcgc3RkQ2xhc3MoKTsKIAkKIAkJJHBvc3RfcGVybXMgPSAkdGhpcy0+Z2V0UG9zdFBlcm1zKCRwb3N0X2lkKTsKIAkJJGlzUHJvdGVjdGVkQnlDYXRlZ29yeSA9ICR0aGlzLT5pc1Byb3RlY3RlZEJ5Q2F0ZWdvcnkoJHBvc3RfaWQpOwogCQkkdXNlciA9IG5ldyBNTV9Vc2VyKCR1c2VyX2lkKTsKIAkJCiAJCWlmKCR1c2VyLT5pc0FkbWluKCkgfHwgTU1fRW1wbG95ZWU6OmlzRW1wbG95ZWUoJHVzZXItPmdldElkKCkpKQogCQl7CiAJCQkvLy9nZXQgcHJldmlldyBtb2RlIGFjY2VzcwogCQkJLy8vdXNlIHRoZXNlIHBlcm1zCiAJCQkkdXNlcl9wZXJtcyA9ICR0aGlzLT5nZXRQcmV2aWV3QWNjZXNzKCk7CgkgCQkKIAkJCWlmKGVtcHR5KCR1c2VyX3Blcm1zKSB8fCAoaXNzZXQoJHVzZXJfcGVybXMtPm1lbWJlcl90eXBlc1swXSkgJiYgJHVzZXJfcGVybXMtPm1lbWJlcl90eXBlc1swXT09Im5vbmUiKSkgCiAJCQl7CiAJCQkJaWYoY291bnQoJHBvc3RfcGVybXMtPm1lbWJlcl90eXBlcykgPiAwIHx8IGNvdW50KCRwb3N0X3Blcm1zLT5hY2Nlc3NfdGFncykgPiAwKQogCQkJCXsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQllbHNlCgkJCQl7CgkJCQkJcmV0dXJuIHRydWU7CgkJCQl9CiAJCQkJCQogCQkJfQogCQl9CiAJCWVsc2UKIAkJewoJIAkJJHVzZXJfcGVybXMgPSAkdGhpcy0+Z2V0VXNlclBlcm1pc3Npb25zKCR1c2VyX2lkKTsKIAkJfQkKIAkJCiAJCWlmKGVtcHR5KCRwb3N0X3Blcm1zKSB8fCAoZW1wdHkoJHBvc3RfcGVybXMtPmFjY2Vzc190YWdzKSAmJiBlbXB0eSgkcG9zdF9wZXJtcy0+bWVtYmVyX3R5cGVzKSAmJiAhJGlzUHJvdGVjdGVkQnlDYXRlZ29yeSkpCiAJCXsKIAkJCXJldHVybiBmYWxzZTsKIAkJfQogCQkKIAkJaWYoIWlzc2V0KCR1c2VyX3Blcm1zLT5kYXlzX2FzX21lbWJlcikpCiAJCXsKIAkJCXJldHVybiBmYWxzZTsKIAkJfQogCQkKIAkJaWYoIWVtcHR5KCRwb3N0X3Blcm1zKSkKIAkJewoJIAkJZm9yZWFjaCgkcG9zdF9wZXJtcyBhcyAkYWNjZXNzX3R5cGU9PiRhcnIpCgkgCQl7CgkgCQkJaWYoZW1wdHkoJGFycikpCgkgCQkJewoJIAkJCQljb250aW51ZTsKCSAJCQl9CgkgCQkJCQoJIAkJCWZvcmVhY2goJGFyciBhcyAkYWNjZXNzX2lkPT4kZGF5cykKCSAJCQl7CgkgCQkJCWlmKGlzc2V0KCR1c2VyX3Blcm1zLT4kYWNjZXNzX3R5cGUpICYmICFlbXB0eSgkdXNlcl9wZXJtcy0+JGFjY2Vzc190eXBlKSkKCSAJCQkJewoJIAkJCQkJJHVzZXJfZGF5cyA9ICR1c2VyX3Blcm1zLT5kYXlzX2FzX21lbWJlcjsKCQoJIAkJCQkJaWYoJGFjY2Vzc190eXBlID09ICJhY2Nlc3NfdGFncyIpCgkgCQkJCQl7CgkgCQkJCQkJJHVzZXJfZGF5cyA9ICR0aGlzLT5jYWxjdWxhdGVBY2Nlc3NUYWdEYXlzQnlNZW1iZXIoJGFjY2Vzc19pZCwgJHVzZXJfaWQpOwoJIAkJCQkJfQoJIAkJCQkKCSAJCQkJCWlmKCgkaW5kZXggPSBhcnJheV9zZWFyY2goJGFjY2Vzc19pZCwgJHVzZXJfcGVybXMtPiRhY2Nlc3NfdHlwZSkpIT09ZmFsc2UgKQoJCSAJCQkJewoJCSAJCQkJCWlmKCRkYXlzPj0wKQoJCSAJCQkJCXsKCQkgCQkJCQkJcmV0dXJuIGludHZhbCgkdXNlcl9kYXlzKS1pbnR2YWwoJGRheXMpOwoJCSAJCQkJCX0KCQkgCQkJCX0KCSAJCQkJfQkKCSAJCQl9CgkgCQl9CiAJCX0KIAkJCiAJCS8vIGNoZWNrIGFjY2VzcyBiYXNlZCBvbiBjYXRlZ29yeSBwcm90ZWN0aW9uCiAJCWlmKCRpc1Byb3RlY3RlZEJ5Q2F0ZWdvcnkpCiAJCXsKIAkJCXJldHVybiAkdGhpcy0+aGFzQWNjZXNzVG9DYXRlZ29yaWVzKCR1c2VyX3Blcm1zLCAkcG9zdF9pZCk7CiAJCX0KIAkJCiAJCXJldHVybiBmYWxzZTsKIAl9CiAJCiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldFBvc3RBY2Nlc3NSaWdodHMoJHBvc3RfaWQpCiAJewogCQlnbG9iYWwgJHdwZGI7CiAJCQogCQkkc3FsID0gInNlbGVjdCBJRihwYS5hY2Nlc3NfdHlwZT0nbWVtYmVyX3R5cGUnLCBtdC5uYW1lLCBhdC5uYW1lKSBhcyBhY2Nlc3NfbmFtZSxwYS5kYXlzLCBwYS5hY2Nlc3NfdHlwZSwgcGEuYWNjZXNzX2lkIGZyb20gIiAuCiAJCQkJIgkiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHBhICIgLgoJIAkJCSIgCUxFRlQgSk9JTiAiLk1NX1RBQkxFX01FTUJFUlNISVBfTEVWRUxTLiIgbXQgb24gcGEuYWNjZXNzX3R5cGU9J21lbWJlcl90eXBlJyBhbmQgcGEuYWNjZXNzX2lkPW10LmlkICIgLgoJIAkJCSIgCUxFRlQgSk9JTiAiLk1NX1RBQkxFX0JVTkRMRVMuIiBhdCBvbiBwYS5hY2Nlc3NfdHlwZT0nYWNjZXNzX3RhZycgYW5kIHBhLmFjY2Vzc19pZD1hdC5pZCAiIC4KCSAJCQkiCXdoZXJlIHBhLnBvc3RfaWQ9J3skcG9zdF9pZH0nIGFuZCBwYS5pc19zbWFydF9jb250ZW50IT0nMScgIjsKCSAJCQkKIAkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CiAJCWlmKCEkcm93cykKIAkJewogCQkJcmV0dXJuIGFycmF5KCk7CiAJCX0KIAkJCQogCQlyZXR1cm4gJHJvd3M7CiAJfQogCQogCXB1YmxpYyBmdW5jdGlvbiByZW1vdmVBY2Nlc3NSaWdodHMoJHBvc3RfSUQsICRhY2Nlc3NfaWQsICRhY2Nlc3NfdHlwZSkKIAl7CiAJCWdsb2JhbCAkd3BkYjsKIAkJJHNxbCA9ICJkZWxldGUgZnJvbSAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHdoZXJlIHBvc3RfaWQ9JyVkJyBBTkQgYWNjZXNzX2lkPSclZCcgQU5EIGFjY2Vzc190eXBlPSclcyciOwogCQlyZXR1cm4gJHdwZGItPnF1ZXJ5KCR3cGRiLT5wcmVwYXJlKCRzcWwsICRwb3N0X0lELCAkYWNjZXNzX2lkLCAkYWNjZXNzX3R5cGUpKTsKIAl9CiAJCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQWxsUmlnaHRzKCRwb3N0X2lkKQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQkkc3FsID0gImRlbGV0ZSBmcm9tICAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHdoZXJlIHBvc3RfaWQ9J3skcG9zdF9pZH0nIjsKCQlyZXR1cm4gJHdwZGItPnF1ZXJ5KCRzcWwpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZVBvc3RBY2Nlc3NSaWdodHMoJHBvc3RfaWQsICRhY2Nlc3NfdHlwZSwgJGFjY2Vzc19pZCwgJGRheXM9MCkKIAl7CiAJCWdsb2JhbCAkd3BkYjsKIAkJCSRzcWwgPSAidXBkYXRlICIuTU1fVEFCTEVfUE9TVFNfQUNDRVNTLiIgc2V0ICIgLgogCQkJCSJkYXlzPSclcycgd2hlcmUgIi4gCiAJCQkJImFjY2Vzc19pZD0nJWQnIGFuZCBhY2Nlc3NfdHlwZT0nJXMnIGFuZCBwb3N0X2lkPSclZCcgIjsKIAkJCQkKCQlyZXR1cm4gJHdwZGItPnF1ZXJ5KCR3cGRiLT5wcmVwYXJlKCRzcWwsICRkYXlzLCRhY2Nlc3NfaWQsJGFjY2Vzc190eXBlLCRwb3N0X2lkKSk7CiAJfQogCQogCS8qCiAJICogQHBvc3RfaWQgaXMgdGhlIFdQIHBvc3QgaWQKIAkgKiBAcGFyYW0gJGFjY2Vzc190eXBlIChtZW1iZXJfdHlwZXxhY2Nlc3NfdGFnKQogCSAqIEBwYXJhbSAkYWNjZXNzX2lkIGlzIHRoZSBwcmltYXJ5IGtleSBvZiB0aGUgYXNzb2NpYXRlZCBhY2Nlc3NfdHlwZQogCSAqIEBkYXlzIGlzIHRoZSBudW1iZXIgb2YgZGF5cwogCSAqIEByZXR1cm4gdHJ1ZSBpZiBzdWNjZXNzZnVsLCBvdGhlcndpc2UgZmFsc2UuCiAJICovCiAJcHVibGljIGZ1bmN0aW9uIHNldFBvc3RBY2Nlc3NSaWdodHMoJHBvc3RfaWQsICRhY2Nlc3NfdHlwZSwgJGFjY2Vzc19pZCwgJGRheXM9MCkKIAl7CiAJCWdsb2JhbCAkd3BkYjsKIAkJJHNxbCA9ICJzZWxlY3QgY291bnQoKikgYXMgdG90YWwgZnJvbSAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHdoZXJlIHBvc3RfaWQ9J3skcG9zdF9pZH0nIGFuZCBhY2Nlc3NfdHlwZT0neyRhY2Nlc3NfdHlwZX0nIGFuZCBhY2Nlc3NfaWQ9J3skYWNjZXNzX2lkfSciOwogCQkkcm93ID0gJHdwZGItPmdldF9yb3coJHNxbCk7CiAJCWlmKCRyb3ctPnRvdGFsPjApCiAJCQlyZXR1cm4gZmFsc2U7CiAJCQkKIAkJJHNxbCA9ICJpbnNlcnQgaW50byAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHNldCAiIC4KIAkJCQkicG9zdF9pZD0nJWQnLCAiIC4KIAkJCQkiYWNjZXNzX3R5cGU9JyVzJywgIiAuCiAJCQkJImFjY2Vzc19pZD0nJWQnLCAiIC4KIAkJCQkiZGF5cz0nJXMnICI7CgkJcmV0dXJuICR3cGRiLT5xdWVyeSgkd3BkYi0+cHJlcGFyZSgkc3FsLCAkcG9zdF9pZCwgJGFjY2Vzc190eXBlLCAkYWNjZXNzX2lkLCAkZGF5cykpOwogCX0KIAkKIAlwdWJsaWMgZnVuY3Rpb24gZ2V0RGF5cygkYWNjZXNzX2lkLCAkYWNjZXNzX3R5cGUsICRwb3N0X2lkKQogCXsKIAkJZ2xvYmFsICR3cGRiOwogCQkkc3FsID0gInNlbGVjdCBkYXlzIGZyb20gICIuTU1fVEFCTEVfUE9TVFNfQUNDRVNTLiIgd2hlcmUgcG9zdF9pZD0neyRwb3N0X2lkfScgYW5kIGFjY2Vzc190eXBlPSd7JGFjY2Vzc190eXBlfScgYW5kIGFjY2Vzc19pZD0neyRhY2Nlc3NfaWR9JyBsaW1pdCAxIjsKIAkJJHJvdyA9ICR3cGRiLT5nZXRfcm93KCRzcWwpOwogCQlpZighJHJvdykKIAkJCXJldHVybiAwOwogCQkKIAkJcmV0dXJuICRyb3ctPmRheXM7CiAJfQogCQogCS8qCiAJICogQWRtaW4gZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHByZXZpZXcgYWNjZXNzIGJhc2VkIG9uIHByZXZpZXcgYmFyCiAJICogQHJldHVybiB0cnVlIGlmIGNhbiBhY2Nlc3MgcG9zdCwgb3RoZXJ3aXNlIGZhbHNlLgogCSAqLwogCXB1YmxpYyBmdW5jdGlvbiBnZXRQcmV2aWV3QWNjZXNzKCkKIAl7CiAJCWdsb2JhbCAkY3VycmVudF91c2VyOwogCSAJCiAJIAkvLy8vIGdldCBpbmZvCiAJIAkkcHJldmlld19vYmogPSBNTV9QcmV2aWV3OjpnZXREYXRhKCk7CiAJIAkKIAkgCWlmKCEkcHJldmlld19vYmopCiAJIAl7CQogCSAJCXJldHVybiBmYWxzZTsKIAkgCX0KIAkgCQogCSAJJHVzZXJQZXJtaXNzaW9ucyA9IG5ldyBzdGRDbGFzcygpOwogCSAJJHVzZXJQZXJtaXNzaW9ucy0+bWVtYmVyX3R5cGVzID0gYXJyYXkoJHByZXZpZXdfb2JqLT5nZXRNZW1iZXJzaGlwSWQoKSk7CiAJIAkkdXNlclBlcm1pc3Npb25zLT5hY2Nlc3NfdGFncyA9ICRwcmV2aWV3X29iai0+Z2V0QnVuZGxlcygpOwogCSAJJHVzZXJQZXJtaXNzaW9ucy0+ZGF5c19hc19tZW1iZXIgPSAkcHJldmlld19vYmotPmdldERheXMoKTsKIAkgCXJldHVybiAkdXNlclBlcm1pc3Npb25zOwogCX0KIAkKIAkvKgogCSAqIEdldCB1c2VyIHJlbGF0ZWQgcGVybWlzc2lvbnMKIAkgKiBtZW1iZXJfdHlwZXM9YXJyYXkobWVtYmVydHlwZV9pZDEsbWVtYmVydHlwZV9pZDIpCiAJICogYWNjZXNzX3RhZ3M9YXJyYXkoYWNjZXNzX3RhZ3NfaWQxLGFjY2Vzc190YWdzX2lkMikKIAkgKiBkYXlzX2FzX21lbWJlcj0+W1VzZXJzIHVzZSBtbV9yZWdpc3RlcmVkXSArIG1tX2ZpeGVkX2RheXMKIAkgKiBAcGFyYW0gJHVzZXJfaWQgaXMgdGhlIGlkIG9mIGdpdmVuIHVzZXIKIAkgKiBAcmV0dXJuIG9iamVjdCBvZiB1c2VyIHBlcm1zLgogCSAqLwogCXByaXZhdGUgZnVuY3Rpb24gZ2V0VXNlclBlcm1pc3Npb25zKCR1c2VyX2lkKQogCXsKIAkgCSR1c2VyUGVybWlzc2lvbnMgPSBuZXcgc3RkQ2xhc3MoKTsKIAkgCSR1c2VyUGVybWlzc2lvbnMtPm1lbWJlcl90eXBlcyA9IGFycmF5KCk7CiAJIAkkdXNlclBlcm1pc3Npb25zLT5hY2Nlc3NfdGFncyA9IGFycmF5KCk7CiAJIAkkdXNlclBlcm1pc3Npb25zLT5kYXlzX2FzX21lbWJlciA9IDA7CiAJIAkKIAkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdXNlcl9pZCk7CiAJCQogCQlpZighJHVzZXItPmlzVmFsaWQoKSkKIAkJewogCQkJcmV0dXJuICR1c2VyUGVybWlzc2lvbnM7CiAJCX0KIAkJCiAJCSRhbGxvd092ZXJkdWVBY2Nlc3MgPSAoTU1fT3B0aW9uVXRpbHM6OmdldE9wdGlvbihNTV9PcHRpb25VdGlsczo6JE9QVElPTl9LRVlfQUxMT1dfT1ZFUkRVRV9BQ0NFU1MpID09ICIxIikgPyB0cnVlIDogZmFsc2U7CiAJCQogCQlpZigoJGFsbG93T3ZlcmR1ZUFjY2VzcyB8fCAkdXNlci0+Z2V0U3RhdHVzKCkgIT0gTU1fU3RhdHVzOjokT1ZFUkRVRSkgJiYgJHVzZXItPmdldFN0YXR1cygpICE9IE1NX1N0YXR1czo6JEVYUElSRUQpCiAJCXsKCSAJIAkkdXNlclBlcm1pc3Npb25zLT5tZW1iZXJfdHlwZXMgPSBhcnJheSgKCSAJIAkJJHVzZXItPmdldE1lbWJlcnNoaXBJZCgpCgkgCSAJKTsKCSAJIAkKCSAJIAkkdXNlclBlcm1pc3Npb25zLT5kYXlzX2FzX21lbWJlciA9ICR1c2VyLT5nZXREYXlzQXNNZW1iZXIoKTsKCSAJIAkKCSAJIAkvLyBnZXQgaW5kaXJlY3RseSBhcHBsaWVkIGJ1bmRsZXMgZnJvbSBtZW1iZXJzaGlwCgkgCSAJJGJ1bmRsZXMgPSAkdXNlci0+Z2V0TWVtYmVyc2hpcExldmVsKCktPmdldEJ1bmRsZXMoKTsKCSAJIAlpZighZW1wdHkoJGJ1bmRsZXMpICYmIGlzX2FycmF5KCRidW5kbGVzKSkKCSAJIAl7CgkgCSAJCWZvcmVhY2goJGJ1bmRsZXMgYXMgJGlkPT4kbmFtZSkKCSAJIAkJewoJIAkgCQkJYXJyYXlfcHVzaCgkdXNlclBlcm1pc3Npb25zLT5hY2Nlc3NfdGFncywgJGlkKTsKCSAJIAkJfQoJIAkgCX0KCSAJIAl1bnNldCgkYnVuZGxlcyk7CiAJCX0KIAkgCQogCSAJLy8gZ2V0IGRpcmVjdGx5IGFwcGxpZWQgYnVuZGxlcyBmcm9tIG1lbWJlcnNoaXAKIAkgCSRidW5kbGVzID0gJHVzZXItPmdldEFwcGxpZWRCdW5kbGVzKHRydWUpOwogCSAJaWYoIWVtcHR5KCRidW5kbGVzKSAmJiBpc19hcnJheSgkYnVuZGxlcykpCiAJIAl7CgkgCSAJZm9yZWFjaCgkYnVuZGxlcyBhcyAkYnVuZGxlKQoJIAkgCXsKCSAJIAkJJGJ1bmRsZVN0YXR1cyA9ICRidW5kbGUtPmdldFN0YXR1cygpOwoJIAkgCQkkaXNBY3RpdmVTdGF0dXMgPSAoJGJ1bmRsZVN0YXR1cyA9PSBNTV9TdGF0dXM6OiRBQ1RJVkUpIHx8ICgkYnVuZGxlU3RhdHVzID09IE1NX1N0YXR1czo6JFBFTkRJTkdfQ0FOQ0VMTEFUSU9OKSB8fCAoJGJ1bmRsZVN0YXR1cyA9PSBNTV9TdGF0dXM6OiRQQVVTRUQpOwoJIAkgCQkkYWxsb3dPdmVyZHVlQWNjZXNzID0gKCRidW5kbGVTdGF0dXMgPT0gTU1fU3RhdHVzOjokT1ZFUkRVRSAmJiAkYWxsb3dPdmVyZHVlQWNjZXNzKTsKCSAJIAkJaWYoKCEkdXNlci0+YnVuZGxlSGFzRXhwaXJlZCgkYnVuZGxlLT5nZXRCdW5kbGVJZCgpKSkgJiYgKCRhbGxvd092ZXJkdWVBY2Nlc3MgfHwgJGlzQWN0aXZlU3RhdHVzKSkKCSAJIAkJewoJIAkgCQkJYXJyYXlfcHVzaCgkdXNlclBlcm1pc3Npb25zLT5hY2Nlc3NfdGFncywgJGJ1bmRsZS0+Z2V0QnVuZGxlSWQoKSk7CgkgCSAJCX0KCSAJIAl9CiAJIAl9CiAJIAkKIAkgCXJldHVybiAkdXNlclBlcm1pc3Npb25zOwogCX0KIAkKIAkvKgogCSAqIFByaXZhdGUgZ2V0IHBvc3QgcGVybWlzc2lvbnMKIAkgKiBtZW1iZXJfdHlwZXM9IGFycmF5KG1lbWJlcnR5cGVfaWQ9PmRheSBhY2Nlc3NpYmxlKQogCSAqIGFjY2Vzc190YWdzID0gYXJyYXkoYWNjZXNzX3RhZ19pZD0+ZGF5IGFjY2Vzc2libGUpCiAJICogQHBhcmFtICRwb3N0X2lkIGlzIHRoZSBpZCBvZiB0aGUgcG9zdC9wYWdlCiAJICogQHJldHVybiBhbiBvYmplY3QgaWRlbnRpZnlpbmcgdGhlIG1lbWJlciB0eXBlcyBhbmQgYnVuZGxlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIHZpZXcgcG9zdC4KIAkgKi8KIAkgcHJpdmF0ZSBmdW5jdGlvbiBnZXRQb3N0UGVybXMoJHBvc3RfaWQsICRpc0NodW5rPWZhbHNlKQogCSB7CiAJIAlnbG9iYWwgJHdwZGI7CiAJIAkKIAkgCSRvYmogPSBuZXcgc3RkQ2xhc3MoKTsKIAkgCSRvYmotPm1lbWJlcl90eXBlcyA9IGFycmF5KCk7CiAJIAkkb2JqLT5hY2Nlc3NfdGFncyA9IGFycmF5KCk7CiAJIAkKIAkgCSRjaHVua1NxbCA9ICIgYW5kIGlzX3NtYXJ0X2NvbnRlbnQ9JzAnICI7CiAJIAkKIAkgCWlmKCRpc0NodW5rKQogCSAJewogCSAJCSRjaHVua1NxbCA9ICIgYW5kIGlzX3NtYXJ0X2NvbnRlbnQ9JzEnICI7CiAJIAl9CiAJIAkKIAkgCSRzcWwgPSAic2VsZWN0IGFjY2Vzc190eXBlLCBhY2Nlc3NfaWQsIGRheXMgZnJvbSAiLk1NX1RBQkxFX1BPU1RTX0FDQ0VTUy4iIHdoZXJlIHBvc3RfaWQ9J3skcG9zdF9pZH0nIHskY2h1bmtTcWx9IjsKIAkgCQogCSAJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CiAJIAkKIAkgCWlmKGlzX251bGwoJHJvd3MpIHx8ICEkcm93cykKIAkgCXsKIAkgCQlyZXR1cm4gJG9iajsKIAkgCX0KIAkgCQogCSAJZm9yZWFjaCgkcm93cyBhcyAkcm93KQogCSAJewogCSAJCXN3aXRjaCgkcm93LT5hY2Nlc3NfdHlwZSkKIAkgCQl7CiAJIAkJCWNhc2UgImFjY2Vzc190YWciOgogCSAJCQkJJG9iai0+YWNjZXNzX3RhZ3NbJHJvdy0+YWNjZXNzX2lkXSA9ICRyb3ctPmRheXM7CiAJIAkJCQlicmVhazsKIAkgCQkJCQogCSAJCQlkZWZhdWx0OgogCSAJCQkJJG9iai0+bWVtYmVyX3R5cGVzWyRyb3ctPmFjY2Vzc19pZF0gPSAkcm93LT5kYXlzOwogCSAJCQkJYnJlYWs7CiAJIAkJfQogCSAJfQogCSAJCiAJIAlyZXR1cm4gJG9iajsKIAkgfQogCSAKIAkgcHJpdmF0ZSBmdW5jdGlvbiBjYWxjdWxhdGVBY2Nlc3NUYWdEYXlzQnlNZW1iZXIoJGJ1bmRsZUlkLCAkdXNlcklkKQogCSB7CiAJIAlnbG9iYWwgJHdwZGI7CiAJIAkKIAkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdXNlcklkKTsKIAkJaWYoJHVzZXItPmlzQWRtaW4oKSB8fCBNTV9FbXBsb3llZTo6aXNFbXBsb3llZSgkdXNlci0+Z2V0SWQoKSkpCiAJCXsKIAkJCSRwcmV2aWV3ID0gTU1fUHJldmlldzo6Z2V0RGF0YSgpOwogCQkJcmV0dXJuICRwcmV2aWV3LT5nZXRBcHBsaWVkRGF5cygkYnVuZGxlSWQpOwogCQl9CiAJCQogCSAJcmV0dXJuICR1c2VyLT5nZXREYXlzV2l0aEJ1bmRsZSgkYnVuZGxlSWQpOwkKIAkgfQogfQo=', 0, '2018-11-21 06:38:55'),
(236, 'reportdataset', 'LyoqCioKKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQoqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoqIAoqIE1NX1JlcG9ydERhdGFzZXQgaXMgYSBjb250YWluZXIgZm9yIG9uZSBvciBtb3JlIGdlbmVyYXRlZCBkYXRhc2V0cyB1c2VkIGJ5IHRoZSByZXBvcnRpbmcgbW9kdWxlcwoqIFNvbWV0aW1lcyB3aGVuIGdlbmVyYXRpbmcgZGF0YSwgaXQgaXMgY2hlYXBlciB0byBnZW5lcmF0ZSBtdWx0aXBsZSBkYXRhc2V0cyBhbmQgY2FjaGUgdGhlbSAodnMgb25seSB0aGUgb25lIHJlcXVlc3RlZCkKKiBzbyB0aGlzIG9iamVjdCBhbGxvd3MgbXVsdGlwbGUgZGF0YXNldHMgdG8gYmUgdHJhbnNwb3J0ZWQsIGFuZCBoYXMgbWV0aG9kcyB0byBkZXNpZ25hdGUgd2hpY2ggZGF0YXNldCBpcyB0aGUgb25lIHRoYXQgd2FzCiogcmVxdWVzdGVkIGFzIHdlbGwgYXMgd2hpY2ggYWRkaXRpb25hbCBkYXRhc2V0cyB3ZXJlIGdlbmVyYXRlZCB0aGF0IHNob3VsZCBiZSBjYWNoZWQKKi8KCmNsYXNzIE1NX1JlcG9ydERhdGFzZXQgZXh0ZW5kcyBNTV9SZXBvcnRSZXNwb25zZSAKewoJcHVibGljICRkYXRhc2V0VHlwZTsKCQoJcHJvdGVjdGVkICRwcmltYXJ5RGF0YXNldDsKCXByb3RlY3RlZCAkYWRkaXRpb25hbERhdGFzZXRzOwoJCglwdWJsaWMgc3RhdGljICRTSU5HTEVfREFUQVNFVCA9ICJzaW5nbGVfZGF0YXNldCI7CglwdWJsaWMgc3RhdGljICRDT01QT1VORF9EQVRBU0VUID0gImNvbXBvdW5kX2RhdGFzZXQiOwoJCgkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkbXNnPSIiLCAkdHlwZT0ic3VjY2VzcyIpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgkbXNnLCR0eXBlKTsKCQkkdGhpcy0+ZGF0YXNldFR5cGUgPSBzZWxmOjokU0lOR0xFX0RBVEFTRVQ7IC8vZGVmYXVsdAoJfQoJCgkvL2ZhY3RvcnkgbWV0aG9kcwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVTaW5nbGVSZXBvcnREYXRhc2V0KCRwYXJhbXM9IiIsICRkYXRhPSIiKQoJewoJCSRkYXRhc2V0ID0gbmV3IE1NX1JlcG9ydERhdGFzZXQoKTsKCQkkZGF0YXNldC0+c2V0UHJpbWFyeURhdGFzZXQoJHBhcmFtcywgJGRhdGEpOwoKCQlyZXR1cm4gJGRhdGFzZXQ7Cgl9CgkKCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZFJlcG9ydERhdGFzZXQoJHByaW1hcnlEYXRhc2V0UGFyYW1zPSIiLCAkcHJpbWFyeURhdGFzZXREYXRhPSIiKQoJewoJCSRkYXRhc2V0ID0gbmV3IE1NX1JlcG9ydERhdGFzZXQoKTsKCQkkZGF0YXNldC0+ZGF0YXNldFR5cGUgPSBzZWxmOjokQ09NUE9VTkRfREFUQVNFVDsKCQkkZGF0YXNldC0+c2V0UHJpbWFyeURhdGFzZXQoJHByaW1hcnlEYXRhc2V0UGFyYW1zLCAkcHJpbWFyeURhdGFzZXREYXRhKTsKCQoJCXJldHVybiAkZGF0YXNldDsKCX0KCQoJCgkvKioKCSAqIFNldHMgdGhlIHByaW1hcnkgZGF0YXNldAoJICogCgkgKiBAcGFyYW0gU3RyaW5nICRwYXJhbXMgVGhlIHBhcmFtcyBzdHJpbmcgdGhhdCB3YXMgdXNlZCB0byBjcmVhdGUgdGhlIGRhdGEKCSAqIEBwYXJhbSBtaXhlZCAkZGF0YSBUaGUgZGF0YS4gVXN1YWxseSBhbiBhcnJheQoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0UHJpbWFyeURhdGFzZXQoJHBhcmFtcywgJGRhdGEpCgl7CgkJaWYgKCEoJHRoaXMtPnByaW1hcnlEYXRhc2V0IGluc3RhbmNlb2Ygc3RkQ2xhc3MpKQoJCXsKCQkJJHRoaXMtPnByaW1hcnlEYXRhc2V0ID0gbmV3IHN0ZENsYXNzKCk7CgkJfQoJCSR0aGlzLT5wcmltYXJ5RGF0YXNldC0+cGFyYW1zID0gJHBhcmFtczsKCQkkdGhpcy0+cHJpbWFyeURhdGFzZXQtPmRhdGEgPSAkZGF0YTsKCX0KCQoJCgkvKioKCSAqIFJldHVybnMgdGhlIHByaW1hcnkgZGF0YXNldAoJICogCgkgKiBAcmV0dXJuIG9iamVjdCB3aXRoIGF0dHJpYnV0ZXMgJ3BhcmFtcycgYW5kICdkYXRhJwoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0UHJpbWFyeURhdGFzZXQoKQoJewoJCXJldHVybiAkdGhpcy0+cHJpbWFyeURhdGFzZXQ7Cgl9CgkKCQoJLyoqCgkgKiBBZGRzIGFuIGFkZHRpb25hbCBkYXRhc2V0CgkgKgoJICogQHBhcmFtIFN0cmluZyAkcGFyYW1zIFRoZSBwYXJhbXMgc3RyaW5nIHRoYXQgd2FzIHVzZWQgdG8gY3JlYXRlIHRoZSBkYXRhCgkgKiBAcGFyYW0gbWl4ZWQgJGRhdGEgVGhlIGRhdGEuIFVzdWFsbHkgYW4gYXJyYXkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGFkZEFkZGl0aW9uYWxEYXRhc2V0KCRwYXJhbXMsICRkYXRhKQoJewoJCWlmICghaXNfYXJyYXkoJHRoaXMtPmFkZGl0aW9uYWxEYXRhc2V0cykpCgkJewoJCQkkdGhpcy0+YWRkaXRpb25hbERhdGFzZXRzID0gYXJyYXkoKTsKCQl9CgkJJG5ld0RhdGFzZXQgPSBuZXcgc3RkQ2xhc3MoKTsKCQkkbmV3RGF0YXNldC0+cGFyYW1zID0gJHBhcmFtczsKCQkkbmV3RGF0YXNldC0+ZGF0YSA9ICRkYXRhOwoJCSR0aGlzLT5hZGRpdGlvbmFsRGF0YXNldHNbXSA9ICRuZXdEYXRhc2V0OwoJfQoJCgkKCS8qKgoJICogUmV0dXJucyBhbiBhcnJheSBvZiBhbnkgYWRkaXRpb25hbCBkYXRhc2V0cwoJICogCgkgKiBAcmV0dXJuIGFycmF5IG9mIG9iamVjdHMgKG9mIHR5cGUgc3RkQ2xhc3MpLCBlYWNoIGhhdmluZyBhdHRyaWJ1dGVzICdwYXJhbXMnIGFuZCAnZGF0YScKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEFkZGl0aW9uYWxEYXRhc2V0cygpCgl7CgkJcmV0dXJuICR0aGlzLT5hZGRpdGlvbmFsRGF0YXNldHM7Cgl9Cn0=', 0, '2018-11-21 06:38:55'),
(237, 'reportcategoryvaluemodel', 'LyoqCiAqCiogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KKiAKKiAKKiBNTV9SZXBvcnRDYXRlZ29yeVZhbHVlTW9kZWwgaXMgbWVhbnQgdG8gYmUgYW4gb2JqZWN0LW9yaWVudGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgc2V0LCAKKiBjb250YWluaW5nIG9uZSBvciBwYWlycyBvZiBkYXRhCiovCmNsYXNzIE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbCBleHRlbmRzIE1NX0Fic3RyYWN0UmVwb3J0RGF0YU1vZGVsCnsKCglwcm90ZWN0ZWQgJHZhbHVlcyA9IGFycmF5KCk7Cglwcm90ZWN0ZWQgJHRpdGxlID0gIiI7CgkKCQoJcHVibGljIGZ1bmN0aW9uIGFkZFZhbHVlcygkY2F0ZWdvcnksICR2YWx1ZSkKCXsKCQkkdGhpcy0+dmFsdWVzW10gPSBhcnJheSgnY2F0ZWdvcnknPT4kY2F0ZWdvcnksICd2YWx1ZSc9PiR2YWx1ZSk7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRWYWx1ZXMoKQoJewoJCXJldHVybiAkdGhpcy0+dmFsdWVzOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gc2V0VmFsdWVzKCR2YWx1ZXMpCgl7CgkJJHRoaXMtPnZhbHVlcyA9ICR2YWx1ZXM7Cgl9CgkKCQoJLyoqCgkgKiBDcmVhdGVzIGEgbW9kZWwgY29udGFpbmluZyB0aGUgcmVjb3JkcyBpbiB0aGUgc3VwcGxpZWQgYXJyYXkKCSAqIAoJICogQHBhcmFtIGFycmF5ICRyZXN1bHRzIFRoZSByZWNvcmRzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSB0aGUgbW9kZWwKCSAqIEBwYXJhbSBzdHJpbmcgJGNhdGVnb3J5RmllbGROYW1lIFRoZSBuYW1lIG9mIHRoZSBjYXRlZ29yeSBjb2x1bW4gKGluIHRoZSBzdXBwbGllZCByZXN1bHRzKQoJICogQHBhcmFtIHN0cmluZyAkdmFsdWVGaWVsZE5hbWUgVGhlIG5hbWUgb2YgdGhlIHZhbHVlIGNvbHVtbiAoaW4gdGhlIHN1cHBsaWVkIHJlc3VsdHMpCgkgKiAKCSAqIEByZXR1cm4gTU1fUmVwb3J0Q2F0ZWdvcnlWYWx1ZU1vZGVsIG9uIHN1Y2Nlc3MsIGJvb2xlYW4gZmFsc2Ugb24gZXJyb3IKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjcmVhdGVGcm9tRGF0YSgkcmVzdWx0cywkY2F0ZWdvcnlGaWVsZE5hbWUsICR2YWx1ZUZpZWxkTmFtZSkKCXsKCQkkbW9kZWwgPSBuZXcgTU1fUmVwb3J0Q2F0ZWdvcnlWYWx1ZU1vZGVsKCk7CgkJaWYgKCFpc19hcnJheSgkcmVzdWx0cykpCgkJewkKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkKCQlmb3JlYWNoICgkcmVzdWx0cyBhcyAkdikJCgkJewoJCQlpZiAoaXNzZXQoJHZbJGNhdGVnb3J5RmllbGROYW1lXSkgJiYgaXNzZXQoJHZbJHZhbHVlRmllbGROYW1lXSkpCgkJCXsKCQkJCSRtb2RlbC0+YWRkVmFsdWVzKCR2WyRjYXRlZ29yeUZpZWxkTmFtZV0sICR2WyR2YWx1ZUZpZWxkTmFtZV0pOwoJCQl9CgkJfQoJCXJldHVybiAkbW9kZWw7Cgl9CgkKCQoJLyoqCgkgKiBDcmVhdGVzIGEgbW9kZWwgY29udGFpbmluZyB0aGUgdG9wICRudW1SZWNvcmRzIHJlY29yZHMgaW4gdGhlIHN1cHBsaWVkIGFycmF5IHdoZW4gaXQgaXMgc29ydGVkIGRlc2NlbmRpbmcgdXNpbmcgdGhlIHZhbHVlIGZpZWxkCgkgKiAKCSAqIEBwYXJhbSBhcnJheSAkcmVzdWx0cyBUaGUgcmVzdWx0cyB0byBleHRyYWN0cyB0aGUgcmVjb3JkcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIG1vZGVsCgkgKiBAcGFyYW0gc3RyaW5nICRjYXRlZ29yeUZpZWxkTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2F0ZWdvcnkgY29sdW1uIChpbiB0aGUgc3VwcGxpZWQgcmVzdWx0cykKCSAqIEBwYXJhbSBzdHJpbmcgJHZhbHVlRmllbGROYW1lIFRoZSBuYW1lIG9mIHRoZSB2YWx1ZSBjb2x1bW4gKGluIHRoZSBzdXBwbGllZCByZXN1bHRzKQoJICogQHBhcmFtIGludGVnZXIgJG51bVJlY29yZHMgVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHJldHVybgoJICogCgkgKiBAcmV0dXJuIGFuIGluc3RhbmNlIG9mIE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbCBvbiBzdWNjZXNzLCBib29sZWFuIGZhbHNlIG9uIGVycm9yCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY3JlYXRlRnJvbVRvcFJlc3VsdHMoJHJlc3VsdHMsICRjYXRlZ29yeUZpZWxkTmFtZSwgJHZhbHVlRmllbGROYW1lLCAkbnVtUmVjb3JkcykKCXsKCQlpZiAoIWlzX2FycmF5KCRyZXN1bHRzKSkKCQl7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJCgkJc2VsZjo6c29ydFJlc3VsdHMoJHJlc3VsdHMsICR2YWx1ZUZpZWxkTmFtZSwgc2VsZjo6JFNPUlRfREVTQyk7CgkJaWYgKGlzX2ludCgkbnVtUmVjb3JkcykgJiYgKGNvdW50KCRyZXN1bHRzKSA+ICRudW1SZWNvcmRzKSkKCQl7CgkJCSRyZXN1bHRzID0gYXJyYXlfc2xpY2UoJHJlc3VsdHMsMCwkbnVtUmVjb3Jkcyx0cnVlKTsKCQl9CgkJcmV0dXJuIHNlbGY6OmNyZWF0ZUZyb21EYXRhKCRyZXN1bHRzLCAkY2F0ZWdvcnlGaWVsZE5hbWUsICR2YWx1ZUZpZWxkTmFtZSk7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldFRpdGxlKCkgCgl7CgkJcmV0dXJuICR0aGlzLT50aXRsZTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0VGl0bGUoJHRpdGxlKSAKCXsKCQkkdGhpcy0+dGl0bGUgPSAkdGl0bGU7Cgl9CgkKCQoJCgkKCQp9CgoK', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(238, 'accesscontrolengine', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(239, 'testpaymentservice', '', 0, '2018-11-21 06:38:55'),
(240, 'extensionsfactory', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiAKICogVGhlIEV4dGVudGlvbnMgRmFjdG9yeSByZXRyaWV2ZXMgYSByZXF1ZXN0ZWQgZXh0ZW5zaW9uIGJhc2VkIG9uIGEgdG9rZW4sIG9yIGFsbCBhdmFpbGFibGUgZXh0ZW5zaW9ucwogKi8KIApjbGFzcyBNTV9FeHRlbnNpb25zRmFjdG9yeSAKewoJLy91c2VkIHRvIGhvbGQgaW5zdGFuY2VzIG9mIGV4dGVuc2lvbnMgdGhhdCBjYW4gYmUgcmV1c2VkCglwcml2YXRlIHN0YXRpYyAkaW5zdGFuY2VzID0gYXJyYXkoKTsKCQoJLyoqCgkgKiBSZXRyaWV2ZSBhbGwgb2YgdGhlIGFjdGl2ZSBleHRlbnNpb25zCgkgKiAKCSAqIEByZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGF2YWlsYWJsZSBleHRlbnNpb24gb2JqZWN0cywga2V5ZWQgYnkgdGhlIHRva2VuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0QWN0aXZlRXh0ZW5zaW9ucygkYXV0b2xvYWREZXBlbmRlbmNpZXM9dHJ1ZSkKCXsKCQkkZXh0ZW5zaW9uc0FycmF5ID0gc2VsZjo6Z2V0QXZhaWxhYmxlRXh0ZW5zaW9ucygkYXV0b2xvYWREZXBlbmRlbmNpZXMpOwoJCQoJCWZvcmVhY2ggKCRleHRlbnNpb25zQXJyYXkgYXMgJHRva2VuPT4kZXh0ZW5zaW9uKQoJCXsKCQkJaWYgKCEkZXh0ZW5zaW9uLT5pc0FjdGl2ZSgpKQoJCQl7CgkJCQl1bnNldCgkZXh0ZW5zaW9uc0FycmF5WyR0b2tlbl0pOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkZXh0ZW5zaW9uc0FycmF5OwoJfQoJCgkvKioKCSAqIFJldHVybnMgYSBzcGVjaWZpYyBleHRlbnNpb24uIEVuZm9yY2VzIHRoZSBzaW5nbGV0b24gbmF0dXJlIG9mIGV4dGVuc2lvbnMgYW5kIHJldHVybnMgYW4gYWxyZWFkeSBpbnN0YW50aWF0ZWQgaW5zdGFuY2UgaWYgdGhlIAoJICogcmVxdWVzdGVkIGV4dGVuc2lvbiBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQKCSAqIAoJICogQHBhcmFtIFN0cmluZyAkZXh0ZW5zaW9uVG9rZW4KCSAqIEBwYXJhbSBib29sZWFuICRhdXRvbG9hZERlcGVuZGVuY2llcyhvcHRpb25hbCkgV2hldGhlciB0byBsb2FkIGxpYnJhcmllcyByZXF1aXJlZCBieSB0aGUgZXh0ZW5zaW9uLiBGb3Igc2ltcGxlIGNvbmZpZ3VyYXRpb24gdGFza3MsIHRoaXMgY2FuIGJlIGZhbHNlCgkgKiBAcGFyYW0gYXJyYXl8c3RyaW5nIChvcHRpb25hbCkgJGNvbmZpZ0RhdGEgQ29uZmlndXJhdGlvbiBkYXRhIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgZXh0ZW5zaW9uIHdoZW4gaXQgaXMgY3JlYXRlZC4gVGhpcyB2YWx1ZSBpcyBhbiBlbXB0eSBzdHJpbmcgd2hlbiBpdCBpcyB1bnVzZWQKCSAqIAoJICogQHJldHVybiBNTV9FeHRlbnNpb24gQW4gaW5zdGFuY2Ugb2YgdGhlIGV4dGVuc2lvbiBtYXRjaGluZyB0aGUgc3VwcGxpZWQgdG9rZW4sIG51bGwgaWYgb25lIGNhbid0IGJlIGZvdW5kCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCRleHRlbnNpb25Ub2tlbiwkYXV0b2xvYWREZXBlbmRlbmNpZXM9dHJ1ZSwkY29uZmlnRGF0YT0iIikKCXsKCQlpZiAoaXNzZXQoTU1fRXh0ZW5zaW9uc0ZhY3Rvcnk6OiRpbnN0YW5jZXNbJGV4dGVuc2lvblRva2VuXSkgJiYgKE1NX0V4dGVuc2lvbnNGYWN0b3J5OjokaW5zdGFuY2VzWyRleHRlbnNpb25Ub2tlbl0gaW5zdGFuY2VvZiBNTV9FeHRlbnNpb24pKQoJCXsKCQkJJGV4dCA9IE1NX0V4dGVuc2lvbnNGYWN0b3J5OjokaW5zdGFuY2VzWyRleHRlbnNpb25Ub2tlbl07CgkJCWlmICgkYXV0b2xvYWREZXBlbmRlbmNpZXMpCgkJCXsKCQkJCSRleHQtPmxvYWREZXBlbmRlbmNpZXMoKTsKCQkJfQoJCQlyZXR1cm4gJGV4dDsKCQl9CgkJCgkJc3dpdGNoICgkZXh0ZW5zaW9uVG9rZW4pIAoJCXsKCQkJY2FzZSBNTV9FeHRlbnNpb246OiRVU0VSVk9JQ0VfVE9LRU46CgkJCQlNTV9FeHRlbnNpb25zRmFjdG9yeTo6JGluc3RhbmNlc1skZXh0ZW5zaW9uVG9rZW5dID0gbmV3IE1NX1VzZXJWb2ljZUV4dGVuc2lvbigkYXV0b2xvYWREZXBlbmRlbmNpZXMsJGNvbmZpZ0RhdGEpOwoJCQkJYnJlYWs7CgkJCWNhc2UgTU1fRXh0ZW5zaW9uOjokTElOS0VESU5fTE9HSU5fVE9LRU46CgkJCQlNTV9FeHRlbnNpb25zRmFjdG9yeTo6JGluc3RhbmNlc1skZXh0ZW5zaW9uVG9rZW5dID0gbmV3IE1NX0xpbmtlZEluTG9naW5FeHRlbnNpb24oJGF1dG9sb2FkRGVwZW5kZW5jaWVzLCRjb25maWdEYXRhKTsKCQkJCWJyZWFrOwoJCQljYXNlIE1NX0V4dGVuc2lvbjo6JEZBQ0VCT09LX0xPR0lOX1RPS0VOOgoJCQkJTU1fRXh0ZW5zaW9uc0ZhY3Rvcnk6OiRpbnN0YW5jZXNbJGV4dGVuc2lvblRva2VuXSA9IG5ldyBNTV9GYWNlYm9va0xvZ2luRXh0ZW5zaW9uKCRhdXRvbG9hZERlcGVuZGVuY2llcywkY29uZmlnRGF0YSk7CgkJCQlicmVhazsKCQkJY2FzZSBNTV9FeHRlbnNpb246OiRHT09HTEVfTE9HSU5fVE9LRU46CgkJCQlNTV9FeHRlbnNpb25zRmFjdG9yeTo6JGluc3RhbmNlc1skZXh0ZW5zaW9uVG9rZW5dID0gbmV3IE1NX0dvb2dsZUxvZ2luRXh0ZW5zaW9uKCRhdXRvbG9hZERlcGVuZGVuY2llcywkY29uZmlnRGF0YSk7CgkJCQlicmVhazsKCQkJY2FzZSBNTV9FeHRlbnNpb246OiRUV0lUVEVSX0xPR0lOX1RPS0VOOgoJCQkJTU1fRXh0ZW5zaW9uc0ZhY3Rvcnk6OiRpbnN0YW5jZXNbJGV4dGVuc2lvblRva2VuXSA9IG5ldyBNTV9Ud2l0dGVyTG9naW5FeHRlbnNpb24oJGF1dG9sb2FkRGVwZW5kZW5jaWVzLCRjb25maWdEYXRhKTsKCQkJCWJyZWFrOwoJCQljYXNlIE1NX0V4dGVuc2lvbjo6JEJCUFJFU1NfVE9LRU46CgkJCQlNTV9FeHRlbnNpb25zRmFjdG9yeTo6JGluc3RhbmNlc1skZXh0ZW5zaW9uVG9rZW5dID0gbmV3IE1NX0JCUHJlc3NFeHRlbnNpb24oJGF1dG9sb2FkRGVwZW5kZW5jaWVzLCRjb25maWdEYXRhKTsKCQkJCWJyZWFrOwoJCQljYXNlIE1NX0V4dGVuc2lvbjo6JEdPT0dMRV9FQ09NTUVSQ0VfVE9LRU46CgkJCQkvLyBUT0RPIE1NX0V4dGVuc2lvbnNGYWN0b3J5OjokaW5zdGFuY2VzWyRleHRlbnNpb25Ub2tlbl0gPSBuZXcgTU1fR29vZ2xlRUNvbW1lcmNlRXh0ZW5zaW9uKCk7CgkJCQlicmVhazsKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBudWxsOwoJCQkJYnJlYWs7CgkJfQoJCQoJCXJldHVybiBNTV9FeHRlbnNpb25zRmFjdG9yeTo6JGluc3RhbmNlc1skZXh0ZW5zaW9uVG9rZW5dOwoJfQoJCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlRXh0ZW5zaW9ucygkYXV0b2xvYWREZXBlbmRlbmNpZXM9dHJ1ZSkKCXsKCQlnbG9iYWwgJHdwZGI7IAoJCQoJCSR0b2tlbnMgPSBhcnJheShNTV9FeHRlbnNpb246OiRCQlBSRVNTX1RPS0VOLCAKCQkJCQkJTU1fRXh0ZW5zaW9uOjokVVNFUlZPSUNFX1RPS0VOCgkJCQkJKTsKCQkKCQkkZXh0ZW5zaW9ucyA9IGFycmF5KCk7CgkJZm9yZWFjaCAoJHRva2VucyBhcyAkdG9rZW4pCgkJewoJCQkkZXh0ID0gc2VsZjo6Z2V0RXh0ZW5zaW9uKCR0b2tlbiwkYXV0b2xvYWREZXBlbmRlbmNpZXMpOwoJCQlpZiAoKCRleHQgaW5zdGFuY2VvZiBNTV9FeHRlbnNpb24pICYmICgkZXh0LT5oYXNQZXJtaXNzaW9uKCkpKQoJCQl7CgkJCQkkZXh0ZW5zaW9uc1skdG9rZW5dID0gJGV4dDsJCQkKCQkJfQoJCX0KCQkKCQkvL2hhbmRsZSBzb2NpYWwgbG9naW4gZXh0ZW5zaW9ucyBzZXBhcmF0ZWx5IGZvciBlZmZpY2llbmN5IHJlYXNvbnMKCQlpZiAoTU1fTWVtYmVyTW91c2VTZXJ2aWNlOjpoYXNQZXJtaXNzaW9uKE1NX01lbWJlck1vdXNlU2VydmljZTo6JEVYVEVOU0lPTl9TT0NJQUxfTE9HSU4pID09IE1NX01lbWJlck1vdXNlU2VydmljZTo6JEFDVElWRSkKCQl7CgkJCSR0b2tlbnMgPSBhcnJheShNTV9FeHRlbnNpb246OiRMSU5LRURJTl9MT0dJTl9UT0tFTiwKCQkJCQkJCU1NX0V4dGVuc2lvbjo6JEZBQ0VCT09LX0xPR0lOX1RPS0VOLAoJCQkJCQkJTU1fRXh0ZW5zaW9uOjokR09PR0xFX0xPR0lOX1RPS0VOLAoJCQkJCQkJTU1fRXh0ZW5zaW9uOjokVFdJVFRFUl9MT0dJTl9UT0tFTik7CgkJCSR0b2tlblN0cmluZyA9ICInIi5pbXBsb2RlKCInLCciLCAkdG9rZW5zKS4iJyI7CgkJCSRjb25maWdEYXRhID0gYXJyYXkoKTsKCQkJZm9yZWFjaCAoJHRva2VucyBhcyAkdG9rZW4pCgkJCXsKCQkJCSRjb25maWdEYXRhWyR0b2tlbl0gPSBhcnJheSgpOwoJCQl9CgkJCSRzb2NpYWxMb2dpblByb3ZpZGVyU1FMID0gIlNFTEVDVCAqIEZST00gIi5NTV9UQUJMRV9TT0NJQUxfTE9HSU5fUFJPVklERVJTLiIgV0hFUkUgdG9rZW4gSU4gKHskdG9rZW5TdHJpbmd9KSI7CgkJCSRyZXN1bHRzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzb2NpYWxMb2dpblByb3ZpZGVyU1FMKTsKCQkJZm9yZWFjaCAoJHJlc3VsdHMgYXMgJHJvdykKCQkJewoJCQkJJGNvbmZpZ0RhdGFbJHJvdy0+dG9rZW5dID0gJHJvdzsJCgkJCX0KCQkJCgkJCWZvcmVhY2ggKCRjb25maWdEYXRhIGFzICR0b2tlbj0+JGNvbmZpZykKCQkJewoJCQkJJGV4dCA9IHNlbGY6OmdldEV4dGVuc2lvbigkdG9rZW4sJGF1dG9sb2FkRGVwZW5kZW5jaWVzLCRjb25maWcpOwoJCQkJaWYgKCgkZXh0IGluc3RhbmNlb2YgTU1fRXh0ZW5zaW9uKSAmJiAoJGV4dC0+aGFzUGVybWlzc2lvbigpKSkKCQkJCXsKCQkJCQkkZXh0ZW5zaW9uc1skdG9rZW5dID0gJGV4dDsJCQkKCQkJCX0KCQkJfQoJCX0KCQkKCQlyZXR1cm4gJGV4dGVuc2lvbnM7Cgl9Cn0=', 0, '2018-11-21 06:38:55'),
(241, 'contentdeliveryengine', 'LyoqCiAqIAogKiAKICogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwpjbGFzcyBNTV9Db250ZW50RGVsaXZlcnlFbmdpbmUKewoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZ2V0UG9zdHNXaXRoUmVzdHJpY3Rpb25zKCkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHNxbCA9ICJzZWxlY3QgaWQgZnJvbSB7JHdwZGItPnBvc3RzfSB3aGVyZSBwb3N0X3N0YXR1cz0ncHVibGlzaCciOwoJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCRzcWwpOwoJCQoJCSRwb3N0cyA9IGFycmF5KCk7CgkJCgkJaWYoaXNfYXJyYXkoJHJvd3MpICYmIGNvdW50KCRyb3dzKT4wKQoJCXsKCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KQoJCQl7CgkJCQkkcG9zdHNbXSA9ICRyb3ctPmlkOwoJCQl9CgkJfQoJCQoJCXJldHVybiAkcG9zdHM7Cgl9CgkKCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGdldEFjY2Vzc1R5cGUoJG9iaikKCXsKCQlpZigkb2JqIGluc3RhbmNlb2YgTU1fTWVtYmVyc2hpcExldmVsKQoJCXsKCQkJcmV0dXJuICJtZW1iZXJfdHlwZSI7CgkJfQoJCWVsc2UgaWYoJG9iaiBpbnN0YW5jZW9mIE1NX0J1bmRsZSkKCQl7CgkJCXJldHVybiAiYWNjZXNzX3RhZyI7CgkJfQoJCQoJCXJldHVybiBmYWxzZTsKCX0KCQoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gZ2V0U2NoZWR1bGUoJGFjY2Vzc0lkLCAkYWNjZXNzVHlwZSkKCXsKCQkkd2hlcmVFbnRyaWVzID0gYXJyYXkoKTsKCQkkd2hlcmUgPSBuZXcgc3RkQ2xhc3MoKTsKCQkkd2hlcmUtPmFjY2Vzc19pZCA9ICRhY2Nlc3NJZDsKCQkkd2hlcmUtPmFjY2Vzc190eXBlID0gJGFjY2Vzc1R5cGU7CgkJJHdoZXJlRW50cmllc1tdID0kd2hlcmU7CgkJCgkJcmV0dXJuIHNlbGY6OmdldENvbnRlbnRTY2hlZHVsZSgkd2hlcmVFbnRyaWVzKTsKCX0KCQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjb3B5U2NoZWR1bGUoJGZyb21PYmosICR0b09iaiwgJG92ZXJ3cml0ZT1mYWxzZSl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRmcm9tQWNjZXNzVHlwZSA9IHNlbGY6OmdldEFjY2Vzc1R5cGUoJGZyb21PYmopOwoJCWlmKCRmcm9tQWNjZXNzVHlwZSA9PT1mYWxzZSl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoImludmFsaWQgZnJvbSBvYmplY3QgdHlwZSIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkkdG9BY2Nlc3NUeXBlID0gc2VsZjo6Z2V0QWNjZXNzVHlwZSgkdG9PYmopOwoJCWlmKCR0b0FjY2Vzc1R5cGUgPT09ZmFsc2UpewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJpbnZhbGlkIHRvIG9iamVjdCB0eXBlIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJCQoJCWlmKCRvdmVyd3JpdGUpCgkJewoJCQkkc3FsID0gImRlbGV0ZSBmcm9tICIuTU1fVEFCTEVfUE9TVFNfQUNDRVNTLiIgd2hlcmUgYWNjZXNzX2lkPSciLiR0b09iai0+Z2V0SWQoKS4iJyBhbmQgYWNjZXNzX3R5cGU9J3skdG9BY2Nlc3NUeXBlfSciOwoJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJfQoJCQoJCSRlcnJvcnMgPSAiIjsKCQkkZnJvbVNjaGVkdWxlID0gc2VsZjo6Z2V0U2NoZWR1bGUoJGZyb21PYmotPmdldElkKCksICRmcm9tQWNjZXNzVHlwZSk7CgoJCWlmKGNvdW50KCRmcm9tU2NoZWR1bGUpPjApewoJCQlmb3JlYWNoKCRmcm9tU2NoZWR1bGUgYXMgJGRheT0+JHJvd3MpewoJCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KXsKCQkJCQkkcG9zdEVsZW0gPSAibW1fbWVtYmVyX3R5cGVzX29wdCI7CgkJCQkJaWYoJHRvQWNjZXNzVHlwZSAhPSAibWVtYmVyX3R5cGUiKQoJCQkJCQkkcG9zdEVsZW0gPSAibW1fYWNjZXNzX3RhZ3Nfb3B0IjsKCQkJCgkJCQkJJGRhdGEgPSBhcnJheSgKCQkJCQkJJ3Bvc3RfSUQnPT4kcm93LT5wb3N0X2lkLAoJCQkJCQkndHlwZSc9PiR0b0FjY2Vzc1R5cGUsCgkJCQkJCSdlZGl0X2lkJz0+MCwKCQkJCQkJJ2RheSc9PiRkYXksCgkJCQkJCSRwb3N0RWxlbT0+JHRvT2JqLT5nZXRJZCgpLAoJCQkJCSk7CgkJCQkJCgkJCQkJJGFjY2Vzc1JpZ2h0cyA9IG5ldyBNTV9BY2Nlc3NSaWdodHNWaWV3KCk7CgkJCQkJJHJlc3BvbnNlID0gJGFjY2Vzc1JpZ2h0cy0+c2F2ZUFjY2Vzc1JpZ2h0cygkZGF0YSk7CgkJCQkJCgkJCQkJaWYoJHJlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokRVJST1IpewoJCQkJCQkkZXJyb3JzIC49ICItXCJ7JHJvdy0+cG9zdF90aXRsZX1cIiBvbiBkYXkgeyRkYXl9IHwiOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQkKCQkJaWYoIWVtcHR5KCRlcnJvcnMpKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJTY2hlZHVsZSBzdWNjZXNzZnVsbHkgY29waWVkLnxCZWxvdyBhcmUgcGFnZXMgb3IgcG9zdHMgd2UgY291bGQgbm90IGNvcHk6IHwiLiRlcnJvcnMpOwoJCQl9CgkJCQoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJTY2hlZHVsZSBzdWNjZXNzZnVsbHkgY29waWVkIik7CgkJfQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIk5vIHNjaGVkdWxlIGZvdW5kIGZvciAiLiRmcm9tT2JqLT5nZXROYW1lKCksIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQoJCgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRDb250ZW50U2NoZWR1bGUoJHdoZXJlRW50cmllcykKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJaWYoZW1wdHkoJHdoZXJlRW50cmllcykpCgkJewoJCQlyZXR1cm4gYXJyYXkoKTsKCQl9CgkJCgkJJHNxbCA9ICJzZWxlY3QgcGEuKiwgcC5wb3N0X3RpdGxlIGZyb20gIi5NTV9UQUJMRV9QT1NUU19BQ0NFU1MuIiBwYSwgeyR3cGRiLT5wb3N0c30gcCAKCQkJCQl3aGVyZSAgcC5wb3N0X3N0YXR1cz0ncHVibGlzaCcgYW5kICgiOwoJCWZvcmVhY2goJHdoZXJlRW50cmllcyBhcyAkZW50cnkpCgkJewoJCQlpZighaXNzZXQoJGVudHJ5LT5hY2Nlc3NfdHlwZSkgfHwgIWlzc2V0KCRlbnRyeS0+YWNjZXNzX2lkKSkKCQkJewoJCQkJcmV0dXJuIGFycmF5KCk7CgkJCX0KCQkJCgkJCSRzcWwuPSAiIHBhLmlzX3NtYXJ0X2NvbnRlbnQ9JzAnIGFuZCAoIHBhLmFjY2Vzc190eXBlPSd7JGVudHJ5LT5hY2Nlc3NfdHlwZX0nIGFuZCAgcGEuYWNjZXNzX2lkPSd7JGVudHJ5LT5hY2Nlc3NfaWR9JykgT1IgIjsKCQl9CgkJCgkJJHNxbD0gcHJlZ19yZXBsYWNlKCIvKE9SICkkLyIsICIpIiwgJHNxbCk7IAoJCSRzcWwuPSIgQU5EIHBhLnBvc3RfaWQ9cC5pZCAiOwkKCQkkc3FsLj0iIG9yZGVyIGJ5IEFCUyhkYXlzKSBhc2MgIjsKCQkKCQkkcmV0dXJuQXJyID0gYXJyYXkoKTsKCQkKCQlpZighZW1wdHkoJHNxbCkpCgkJewoJCQkkcm93cyA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCQkJCgkJCWlmKGlzX2FycmF5KCRyb3dzKSAmJiBjb3VudCgkcm93cyk+MCkKCQkJewoJCQkJZm9yZWFjaCgkcm93cyBhcyAkcm93KQoJCQkJewoJCQkJCSRyZXR1cm5BcnJbJHJvdy0+ZGF5c11bXSA9ICRyb3c7CgkJCQl9CgkJCQkKCQkJCXJldHVybiAkcmV0dXJuQXJyOwoJCQl9CgkJfQoJCQoJCXJldHVybiBhcnJheSgpOwoJfQoJCgkvKgoJICogQHBhcmFtICR1c2VycyBpcyBhIGlkPT52YWx1ZSBhc3NvYyBhcnJheSAKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRVc2VyU2NoZWR1bGVzKCR1c2VycykKCXsKCQkkbmV3QWNjZXNzQXJyID0gYXJyYXkoKTsKCQkkZGMgPSBuZXcgTU1fUHJvdGVjdGVkQ29udGVudEVuZ2luZSgpOwoJCQoJCWlmKGlzX2FycmF5KCR1c2VycykpCgkJewoJCQkkcG9zdHMgPSBzZWxmOjpnZXRQb3N0c1dpdGhSZXN0cmljdGlvbnMoKTsKCQkJCgkJCWZvcmVhY2goJHVzZXJzIGFzICR1c2VySWQ9PiRlbWFpbCkKCQkJewoJCQkJJHVzZXIgPSBuZXcgTU1fVXNlcigkdXNlcklkKTsKCQkJCQoJCQkJZm9yZWFjaCgkcG9zdHMgYXMgJHBvc3RJZCkKCQkJCXsKCQkJCQkkZGF5cyA9ICRkYy0+ZGF5c1RvQWNjZXNzKCRwb3N0SWQsICR1c2VySWQpOwoJCQkJCQoJCQkJCWlmKCRkYXlzIT09ZmFsc2UgJiYgJGRheXM9PT0wKQoJCQkJCXsKCQkJCQkJJG5ld0FjY2Vzc0FyclskdXNlcklkXSA9ICRwb3N0SWQ7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCQoJCXJldHVybiAkbmV3QWNjZXNzQXJyOwoJfQp9', 0, '2018-11-21 06:38:55'),
(242, 'commissionprofilesview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0NvbW1pc3Npb25Qcm9maWxlc1ZpZXcgZXh0ZW5kcyBNTV9SQkFDQWRtaW5WaWV3CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX1NFVF9ERUZBVUxUID0gInNldERlZmF1bHQiOwoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TQVZFOgoJCQkJCXJldHVybiAkdGhpcy0+c2F2ZUNvbW1pc3Npb25Qcm9maWxlKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUNvbW1pc3Npb25Qcm9maWxlKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NFVF9ERUZBVUxUOgoJCQkJCXJldHVybiAkdGhpcy0+c2V0QXNEZWZhdWx0KCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdldERhdGEoJHRhYmxlTmFtZSwgJGZpZWxkcz1udWxsLCBNTV9EYXRhR3JpZCAkZGc9bnVsbCwgJHdoZXJlID0gIiIsICRnZXRUb3RhbD1mYWxzZSkKCXsKCQlnbG9iYWwgJHdwZGI7CgkJCgkJJHJvd3MgPSBwYXJlbnQ6OmdldERhdGEoTU1fVEFCTEVfQ09NTUlTU0lPTl9QUk9GSUxFUywgbnVsbCwgJGRnKTsKCQlyZXR1cm4gJHJvd3M7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gc2F2ZUNvbW1pc3Npb25Qcm9maWxlKCRwb3N0KQoJewkKCQkkcHJvZmlsZSA9IG5ldyBNTV9Db21taXNzaW9uUHJvZmlsZSgpOwoJCQoJCWlmKGlzc2V0KCRwb3N0WyJpZCJdKSAmJiBpbnR2YWwoJHBvc3RbImlkIl0pID4gMCkgCgkJewoJCQkkcHJvZmlsZSA9IG5ldyBNTV9Db21taXNzaW9uUHJvZmlsZSgkcG9zdFsiaWQiXSk7CgkJCQoJCQlpZighJHByb2ZpbGUtPmlzVmFsaWQoKSkKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiQ2Fubm90IHVwZGF0ZSBjb21taXNzaW9uIHByb2ZpbGUuIEludmFsaWQgSUQgJ3skcG9zdFsnaWQnXX0nIHBhc3NlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCSAJCgkJJHByb2ZpbGUtPnNldE5hbWUoJHBvc3RbIm1tX2Rpc3BsYXlfbmFtZSJdKTsKCSAJJHByb2ZpbGUtPnNldERlc2NyaXB0aW9uKCRwb3N0WyJtbV9kZXNjcmlwdGlvbiJdKTsKCSAJJHByb2ZpbGUtPnNldEluaXRpYWxDb21taXNzaW9uRmxhZygkcG9zdFsibW1fZW5hYmxlX2luaXRpYWxfY29tbWlzc2lvbiJdKTsKCSAJJHByb2ZpbGUtPnNldFJlYmlsbENvbW1pc3Npb25zRmxhZygkcG9zdFsibW1fZW5hYmxlX3JlYmlsbF9jb21taXNzaW9ucyJdKTsKCSAJJHByb2ZpbGUtPnNldERvTGltaXRSZWJpbGxzRmxhZygkcG9zdFsibW1fbGltaXRfcmViaWxsX2NvbW1pc3Npb25zIl0pOwoJIAkkcHJvZmlsZS0+c2V0RG9SZXZlcnNlQ29tbWlzc2lvbnNGbGFnKCRwb3N0WyJtbV9lbmFibGVfcmV2ZXJzZV9jb21taXNzaW9ucyJdKTsKCSAJJHByb2ZpbGUtPnNldFJlYmlsbENvbW1pc3Npb25UeXBlKCRwb3N0WyJtbV9yZWJpbGxfY29tbWlzc2lvbl90eXBlIl0pOwoJIAkkcHJvZmlsZS0+c2V0UmViaWxsQ29tbWlzc2lvblZhbHVlKCRwb3N0WyJtbV9yZWJpbGxfY29tbWlzc2lvbl92YWx1ZSJdKTsKCSAJJHByb2ZpbGUtPnNldFJlYmlsbENvbW1pc3Npb25MaW1pdCgkcG9zdFsibW1fbGltaXRfcmViaWxsX2NvbW1pc3Npb25fdmFsdWUiXSk7CgkJCgkJcmV0dXJuICRwcm9maWxlLT5jb21taXREYXRhKCk7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gcmVtb3ZlQ29tbWlzc2lvblByb2ZpbGUoJHBvc3QpCgl7CgkJaWYoaXNzZXQoJHBvc3RbImlkIl0pICYmIGludHZhbCgkcG9zdFsiaWQiXSkgPiAwKQoJCXsKCQkJJHByb2ZpbGUgPSBuZXcgTU1fQ29tbWlzc2lvblByb2ZpbGUoJHBvc3RbImlkIl0sIGZhbHNlKTsKCQkJJHJlc3VsdCA9ICRwcm9maWxlLT5kZWxldGUoKTsKCQkJCgkJCWlmKCRyZXN1bHQpIAoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCX0gCgkJCWVsc2UgCgkJCXsKCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlRoaXMgY29tbWlzc2lvbiBwcm9maWxlIGhhcyBleGlzdGluZyBhc3NvY2lhdGlvbnMgYW5kIGNhbid0IGJlIHJlbW92ZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSBjb21taXNzaW9uIHByb2ZpbGUuIE5vIElEIHNwZWNpZmllZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCX0KCQogCXByaXZhdGUgZnVuY3Rpb24gc2V0QXNEZWZhdWx0KCRwb3N0KQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJpZCJdKSA+IDApCgkJewoJCQkkc3FsID0gInVwZGF0ZSAiLk1NX1RBQkxFX0NPTU1JU1NJT05fUFJPRklMRVMuIiBzZXQgaXNfZGVmYXVsdD0nMCciOwoJCQkkd3BkYi0+cXVlcnkoJHNxbCk7CgkJCQoJCQkkc3FsID0gInVwZGF0ZSAiLk1NX1RBQkxFX0NPTU1JU1NJT05fUFJPRklMRVMuIiBzZXQgaXNfZGVmYXVsdD0nMScgd2hlcmUgaWQ9JyVkJyBsaW1pdCAxIjsKCQkJJHJlc3VsdHMgPSAkd3BkYi0+cXVlcnkoJHdwZGItPnByZXBhcmUoJHNxbCwgJHBvc3RbImlkIl0pKTsKCQkJCgkJCWlmKCRyZXN1bHRzKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCX0KCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIHNldCBjb21taXNzaW9uIHByb2ZpbGUgYXMgZGVmYXVsdC4gTm8gSUQgc3BlY2lmaWVkLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(243, 'membermouseeventlistener', 'LyoqCioKKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQoqIChjKSBNZW1iZXJtb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoqIAoqIFRoZSBNTV9NZW1iZXJNb3VzZUV2ZW50TGlzdGVuZXIgaXMgaW1wbGVtZW50ZWQgYnkgcGF5bWVudCBzZXJ2aWNlcyAob3IgcG90ZW50aWFsbHkgb3RoZXIgb2JqZWN0cykgdGhhdCBhcmUgZGVzaWduZWQgdG8gcmVjZWl2ZSBpbmZvcm1hdGlvbiBhYm91dCBldmVudHMgd2hlbiB0aGluZ3MgCiogaGFwcGVuIGluIE1lbWJlck1vdXNlLiBUaGlzIGlzIG5vdCBhIHRydWUgZXZlbnQtZHJpdmVuIG1vZGVsLCBiZWNhdXNlIGEgY29tcG9uZW50IHdpbGwgaGF2ZSB0byBzcGVjaWZpY2FsbHkgYmUgY2FsbGVkIHRvIGdlbmVyYXRlIHRoZSBldmVudHMKKiB0aGF0IGltcGxlbWVudG9ycyB3aWxsIGJlIGludGVyZXN0ZWQgaW4uCioKKi8KCmludGVyZmFjZSBNTV9NZW1iZXJNb3VzZUV2ZW50TGlzdGVuZXIgewoJCgkvL3RoZXNlIGNvbnN0YW50cyByZXByZXNlbnQgdGhlIGV2ZW50IHR5cGVzCgkKCWNvbnN0IFBST0RVQ1RfQURERUQgICAgPSAxOwoJY29uc3QgUFJPRFVDVF9SRU1PVkVEICA9IDI7Cgljb25zdCBQUk9EVUNUX1VQREFURUQgID0gMzsKCWNvbnN0IENPVVBPTl9BRERFRCAgICAgPSA0OwoJY29uc3QgQ09VUE9OX1JFTU9WRUQgICA9IDU7Cgljb25zdCBDT1VQT05fVVBEQVRFRCAgID0gNjsKCQoJLyoqCgkgKiBDYWxsZWQgd2hlbiBhIG5ldyBwcm9kdWN0IGlzIGFkZGVkIHRvIE1lbWJlck1vdXNlLiAKCSAqIEBwYXJhbSAkZXZlbnRUeXBlIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlLCBhcyBkZWZpbmVkIGluIE1NX01lbWJlck1vdXNlRXZlbnRMaXN0ZW5lcgoJICogQHBhcmFtICRldmVudERhdGEgdmFyaWFibGUgVGhlIGRhdGEgdGhhdCBpcyBhdHRhY2hlZCB0byB0aGUgZXZlbnQgCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBldmVudFJlY2VpdmVkKCRldmVudFR5cGUsICRldmVudERhdGEpOwoJCn0KCg==', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(244, 'limelightshippingmethodsview', 'LyoqCiAqIAogKiAKICogTWVtYmVyTW91c2UoVE0pIChodHRwOi8vd3d3Lm1lbWJlcm1vdXNlLmNvbSkKICogKGMpIE1lbWJlck1vdXNlLCBMTEMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqLwpjbGFzcyBNTV9MaW1lTGlnaHRTaGlwcGluZ01ldGhvZHNWaWV3IGV4dGVuZHMgTU1fUkJBQ1Byb2R1Y3RNYW5hZ2VyVmlldwp7CQoJcHVibGljIHN0YXRpYyAkTU1fSlNBQ1RJT05fR0VUX0xJTUVMSUdIVF9TSElQUElOR19NRVRIT0RTID0gImdldExpbWVMaWdodFNoaXBwaW5nTWV0aG9kcyI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9HRVRfTElNRUxJR0hUX1NISVBQSU5HX0RFU0NSSVBUSU9OID0gImdldExMU2hpcHBpbmdEZXNjcmlwdGlvbiI7CgkKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TQVZFOgoJCQkJCXJldHVybiAkdGhpcy0+c2F2ZUxpbWVMaWdodFNoaXBwaW5nTWV0aG9kKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUxpbWVMaWdodFNoaXBwaW5nTWV0aG9kKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0dFVF9MSU1FTElHSFRfU0hJUFBJTkdfTUVUSE9EUzoKCQkJCQlyZXR1cm4gJHRoaXMtPmdldExpbWVMaWdodFNoaXBwaW5nTWV0aG9kcygkcG9zdCk7CgkJCQkJCgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9HRVRfTElNRUxJR0hUX1NISVBQSU5HX0RFU0NSSVBUSU9OOgoJCQkJCXJldHVybiAkdGhpcy0+Z2V0TGltZUxpZ2h0U2hpcHBpbmdEZXNjcmlwdGlvbigkcG9zdCk7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YSgkcG9zdCkKCXsKCQlyZXR1cm4gcGFyZW50OjpnZXREYXRhKE1NX1RBQkxFX0xJTUVMSUdIVF9TSElQUElOR19NRVRIT0RTLCBudWxsLCAkcG9zdCk7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gc2F2ZUxpbWVMaWdodFNoaXBwaW5nTWV0aG9kKCRwb3N0KQoJewoJCSRsaW1lTGlnaHRTaGlwcGluZ01ldGhvZCA9IG5ldyBNTV9MaW1lTGlnaHRTaGlwcGluZ01ldGhvZCgpOwoJCQoJCWlmKGlzc2V0KCRwb3N0WyJpZCJdKSAmJiBpbnR2YWwoJHBvc3RbImlkIl0pID4gMCkgCgkJewoJCQkkbGltZUxpZ2h0U2hpcHBpbmdNZXRob2QgPSBuZXcgTU1fTGltZUxpZ2h0U2hpcHBpbmdNZXRob2QoJHBvc3RbImlkIl0pOwoJCQkKCQkJaWYoISRsaW1lTGlnaHRTaGlwcGluZ01ldGhvZC0+aXNWYWxpZCgpKQoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJDYW5ub3QgdXBkYXRlIExpbWUgTGlnaHQgc2hpcHBpbmcgbWV0aG9kIG1hcHBpbmcuIEludmFsaWQgSUQgJ3skcG9zdFsnaWQnXX0nIHBhc3NlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQkJfQoJCX0KCQkKCQkvLyBnZXQgTGltZSBMaWdodCBzaGlwcGluZyBtZXRob2QKCQkkbGltZUxpZ2h0U2VydmljZSA9IE1NX1BheW1lbnRTZXJ2aWNlRmFjdG9yeTo6Z2V0UGF5bWVudFNlcnZpY2UoTU1fUGF5bWVudFNlcnZpY2U6OiRMSU1FTElHSFRfU0VSVklDRV9UT0tFTik7CgkJJHJlc3VsdCA9ICRsaW1lTGlnaHRTZXJ2aWNlLT5nZXRTaGlwcGluZ01ldGhvZCgkcG9zdFsibGltZWxpZ2h0X3NoaXBwaW5nX21ldGhvZF9pZCJdKTsKCQkKCQlpZihNTV9SZXNwb25zZTo6aXNFcnJvcigkcmVzdWx0KSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNhbm5vdCBzYXZlIExpbWUgTGlnaHQgc2hpcHBpbmcgbWV0aG9kIG1hcHBpbmcuIEludmFsaWQgTGltZSBMaWdodCBzaGlwcGluZyBtZXRob2QgSUQgJ3skcG9zdFsnbGltZWxpZ2h0X3NoaXBwaW5nX21ldGhvZF9pZCddfScgcGFzc2VkLiIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCQkKCQkkbGxTaGlwcGluZ0luZm8gPSAkcmVzdWx0LT5tZXNzYWdlOwoJCQoJCS8vIGdldCBNZW1iZXJNb3VzZSBzaGlwcGluZyBtZXRob2QKCQkkc3BsaXQgPSBleHBsb2RlKCItIiwgJHBvc3RbIm1tX29wdGlvbl9rZXkiXSk7CgkJJHRva2VuID0gJHNwbGl0WzBdOwoJCQoJCS8vZ2V0IHRoZSBzaGlwcGluZyBtZXRob2QKCQkkc2hpcHBpbmdNZXRob2QgPSBNTV9TaGlwcGluZ01ldGhvZDo6Z2V0U2hpcHBpbmdNZXRob2RCeVRva2VuKCR0b2tlbik7CgkJJHNoaXBwaW5nT3B0aW9uID0gbnVsbDsKCQkKCQlpZigkc2hpcHBpbmdNZXRob2QpCgkJewoJCQkkb3B0aW9uUmV0cmlldmFsUmVzcG9uc2UgPSAkc2hpcHBpbmdNZXRob2QtPmdldFNoaXBwaW5nT3B0aW9uQnlLZXkobmV3IE1NX09yZGVyKCksICRwb3N0WyJtbV9vcHRpb25fa2V5Il0pOwoJCQkkc2hpcHBpbmdPcHRpb24gPSAkb3B0aW9uUmV0cmlldmFsUmVzcG9uc2UtPm1lc3NhZ2U7CgkJCQoJCQlpZigkc2hpcHBpbmdPcHRpb24pCgkJCXsKCQkJCSRtbVNoaXBwaW5nTWV0aG9kTmFtZSA9ICJ7JHNoaXBwaW5nT3B0aW9uLT5nZXROYW1lKCl9ICh7JHNoaXBwaW5nT3B0aW9uLT5nZXRSYXRlKHRydWUpfSkiOwoJCQl9CgkJfQoJCQoJCWlmKGlzX251bGwoJHNoaXBwaW5nT3B0aW9uKSkKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkNhbm5vdCBzYXZlIExpbWUgTGlnaHQgc2hpcHBpbmcgbWV0aG9kIG1hcHBpbmcuIEludmFsaWQgTWVtYmVyTW91c2Ugc2hpcHBpbmcgbWV0aG9kICd7JHBvc3RbIm1tX29wdGlvbl9rZXkiXX0nIHBhc3NlZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkJCgkJLy8gdmFsaWRhdGUgbWFwcGluZwoJCSRyYXRlTWlzbWF0Y2ggPSAiIjsKCQkKCQlpZihmbG9hdHZhbCgkbGxTaGlwcGluZ0luZm9bImluaXRpYWxfYW1vdW50Il0pICE9ICRzaGlwcGluZ09wdGlvbi0+Z2V0UmF0ZSgpKQoJCXsKCQkJJHJhdGVNaXNtYXRjaCA9ICJSQVRFIE1JU01BVENIXG4iOwoJCQkkcmF0ZU1pc21hdGNoIC49ICJMaW1lIExpZ2h0IFJhdGU6ICIuX21tZigkbGxTaGlwcGluZ0luZm9bImluaXRpYWxfYW1vdW50Il0sICJVU0QiKS4iXG4iOwoJCQkkcmF0ZU1pc21hdGNoIC49ICJNZW1iZXJNb3VzZSBSYXRlOiAiLiRzaGlwcGluZ09wdGlvbi0+Z2V0UmF0ZSh0cnVlKS4iXG5cbiI7CgkJfQoJCQoJCWlmKCFlbXB0eSgkcmF0ZU1pc21hdGNoKSkKCQl7CgkJCSRlcnJvck1zZyA9ICJJbnZhbGlkIHNoaXBwaW5nIG1ldGhvZCBtYXBwaW5nOlxuTGltZSBMaWdodCBzaGlwcGluZyBtZXRob2Qgc2V0dGluZ3MgbXVzdCBtYXRjaCB0aGUgTWVtYmVyTW91c2Ugc2hpcHBpbmcgbWV0aG9kIHNldHRpbmdzLlxuXG4iOwoJCQkJCgkJCSRlcnJvck1zZyAuPSAkcmF0ZU1pc21hdGNoOwoJCQkJCgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJGVycm9yTXNnLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9CgkgCQoJIAkkbGltZUxpZ2h0U2hpcHBpbmdNZXRob2QtPnNldE1NT3B0aW9uS2V5KCRwb3N0WyJtbV9vcHRpb25fa2V5Il0pOwoJIAkkbGltZUxpZ2h0U2hpcHBpbmdNZXRob2QtPnNldExpbWVMaWdodFNoaXBwaW5nTWV0aG9kSWQoJHBvc3RbImxpbWVsaWdodF9zaGlwcGluZ19tZXRob2RfaWQiXSk7CgkgCSRsaW1lTGlnaHRTaGlwcGluZ01ldGhvZC0+c2V0TGltZUxpZ2h0U2hpcHBpbmdNZXRob2ROYW1lKCRwb3N0WyJsaW1lbGlnaHRfc2hpcHBpbmdfbWV0aG9kX25hbWUiXSk7CgkJCgkJcmV0dXJuICRsaW1lTGlnaHRTaGlwcGluZ01ldGhvZC0+Y29tbWl0RGF0YSgpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHJlbW92ZUxpbWVMaWdodFNoaXBwaW5nTWV0aG9kKCRwb3N0KQoJewoJCWdsb2JhbCAkd3BkYjsKCQkKCQlpZihpc3NldCgkcG9zdFsiaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJpZCJdKSA+IDApCgkJewoJCQkkbGltZUxpZ2h0U2hpcHBpbmdNZXRob2QgPSBuZXcgTU1fTGltZUxpZ2h0U2hpcHBpbmdNZXRob2QoJHBvc3RbImlkIl0sIGZhbHNlKTsKCQkJJHJlc3VsdCA9ICRsaW1lTGlnaHRTaGlwcGluZ01ldGhvZC0+ZGVsZXRlKCk7CgkJCQoJCQlpZigkcmVzdWx0KSAKCQkJewoJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgpOwoJCQl9IAoJCQllbHNlIAoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFcnJvciByZW1vdmluZyBMaW1lIExpZ2h0IHNoaXBwaW5nIG1ldGhvZCBtYXBwaW5nIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCX0KCQl9CgkJCgkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVW5hYmxlIHRvIGRlbGV0ZSBMaW1lIExpZ2h0IHNoaXBwaW5nIG1ldGhvZCBtYXBwaW5nLiBObyBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gZ2V0TGltZUxpZ2h0U2hpcHBpbmdNZXRob2RzKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJjYW1wYWlnbl9pZCJdKSkKCQl7CgkJCSRsaW1lTGlnaHRTZXJ2aWNlID0gTU1fUGF5bWVudFNlcnZpY2VGYWN0b3J5OjpnZXRQYXltZW50U2VydmljZShNTV9QYXltZW50U2VydmljZTo6JExJTUVMSUdIVF9TRVJWSUNFX1RPS0VOKTsKCQkJcmV0dXJuIE1NX0h0bWxVdGlsczo6Z2VuZXJhdGVTZWxlY3Rpb25zTGlzdCgkbGltZUxpZ2h0U2VydmljZS0+Z2V0U2hpcHBpbmdNZXRob2RzQnlDYW1wYWlnbigkcG9zdFsiY2FtcGFpZ25faWQiXSkpOwoJCX0KCQllbHNlCgkJewoJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJFcnJvciByZXRyaWV2aW5nIHNoaXBwaW5nIG1ldGhvZHMuIE5vIGNhbXBhaWduIElEIHNwZWNpZmllZC4iLCBNTV9SZXNwb25zZTo6JEVSUk9SKTsKCQl9Cgl9CgkKCXByaXZhdGUgZnVuY3Rpb24gZ2V0TGltZUxpZ2h0U2hpcHBpbmdEZXNjcmlwdGlvbigkcG9zdCkKCXsKCQlpZihpc3NldCgkcG9zdFsic2hpcHBpbmdfaWQiXSkpCgkJewoJCQkkbGltZUxpZ2h0U2VydmljZSA9IE1NX1BheW1lbnRTZXJ2aWNlRmFjdG9yeTo6Z2V0UGF5bWVudFNlcnZpY2UoTU1fUGF5bWVudFNlcnZpY2U6OiRMSU1FTElHSFRfU0VSVklDRV9UT0tFTik7CgkJCXJldHVybiAkbGltZUxpZ2h0U2VydmljZS0+Z2V0U2hpcHBpbmdEZXNjcmlwdGlvbigkcG9zdFsic2hpcHBpbmdfaWQiXSk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkVycm9yIHJldHJpZXZpbmcgc2hpcHBpbmcgaW5mb3JtYXRpb24uIE5vIHNoaXBwaW5nIG1ldGhvZCBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJfQoJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(245, 'commissionprofile', '', 0, '2018-11-21 06:38:55'),
(246, 'membershiplevelsview', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(247, 'employee', '', 0, '2018-11-21 06:38:55'),
(248, 'paypalipnlogview', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUGF5UGFsSVBOTG9nVmlldyBleHRlbmRzIE1NX1JCQUNHZW5lcmFsRW1wbG95ZWVWaWV3CnsKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TRUFSQ0ggPSAic2VhcmNoIjsKCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TRUFSQ0g6CgkJCQkJcmV0dXJuICR0aGlzLT5nZW5lcmF0ZURhdGFHcmlkKCRwb3N0KTsKCQkJCQkKCQkJCWRlZmF1bHQ6CgkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkcmVzcG9uc2UpOwoJCQl9CgkJfQoJCWVsc2UgCgkJewoJCQlyZXR1cm4gJHJlc3BvbnNlOwoJCX0KCX0KCQoJcHVibGljIGZ1bmN0aW9uIGdlbmVyYXRlRGF0YUdyaWQoJHBvc3Q9bnVsbCkKCXsKCQlyZXR1cm4gTU1fVEVNUExBVEU6OmdlbmVyYXRlKE1NX01PRFVMRVMuIi9wYXlwYWxfaXBuX2xvZy5kYXRhZ3JpZC5waHAiLCAkcG9zdCk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YSgkcG9zdCwgTU1fRGF0YUdyaWQgJGRnKQoJewoJCSR3aGVyZUNsYXVzZSA9IGFycmF5KCk7CgkJCgkJaWYoIWVtcHR5KCRwb3N0WyJtZW1iZXJfaWQiXSkgJiYgaW50dmFsKCRwb3N0WyJtZW1iZXJfaWQiXSk+MCkKCQl7CgkJCWFycmF5X3B1c2goJHdoZXJlQ2xhdXNlLCAiKHVzZXJfaWQ9JyIuaW50dmFsKCRwb3N0WyJtZW1iZXJfaWQiXSkuIicpIik7CgkJfQoJCWlmKCFlbXB0eSgkcG9zdFsidHJhbnNhY3Rpb25faWQiXSkgJiYgaW50dmFsKCRwb3N0WyJ0cmFuc2FjdGlvbl9pZCJdKT4wKQoJCXsKCQkJYXJyYXlfcHVzaCgkd2hlcmVDbGF1c2UsICIodHhuX2lkPSciLmludHZhbCgkcG9zdFsidHJhbnNhY3Rpb25faWQiXSkuIicpIik7CgkJfSAgCgkJCgkJaWYoIWVtcHR5KCRwb3N0WyJmcm9tX2RhdGUiXSkpCgkJewoJCQkkZnJvbURhdGUgPSBNTV9VdGlsczo6ZGF0ZVRvVVRDKCRwb3N0Wydmcm9tX2RhdGUnXSwiWS1tLWQiLCIwMDowMDowMCIpOwoJCQlhcnJheV9wdXNoKCR3aGVyZUNsYXVzZSwgIihyZWNlaXZlZCA+PSAneyRmcm9tRGF0ZX0nKSIpOwoJCQkKCQkJaWYoIWVtcHR5KCRwb3N0WyJ0b19kYXRlIl0pKQoJCQl7CQkKCQkJCSR0b0RhdGUgPSBNTV9VdGlsczo6ZGF0ZVRvVVRDKCRwb3N0Wyd0b19kYXRlJ10sIlktbS1kIiwiMjM6NTk6NTkiKTsKCQkJCWFycmF5X3B1c2goJHdoZXJlQ2xhdXNlLCAiKHJlY2VpdmVkIDw9ICd7JHRvRGF0ZX0nKSIpOwoJCQl9CgkJfQoJCgkJJHdoZXJlQ2xhdXNlID0gam9pbigiIEFORCAiLCAkd2hlcmVDbGF1c2UpOwoJCQoJCSRwYXlwYWxJZEZpZWxkID0gTU1fVEFCTEVfUEFZUEFMX0lQTl9MT0cuIi5pZCI7CgkJJGZpZWxkcyA9IGFycmF5KCRwYXlwYWxJZEZpZWxkLCAndHhuX2lkJywgJ3R4bl90eXBlJywgJ3N1YnNjcl9pZCcsICdwYXltZW50X3N0YXR1cycsICdpcG5fY29udGVudCcsICdyZWNlaXZlZCcsICdvcmRlcl9pZCcsICdvcmRlcl9udW1iZXInLCAndXNlcl9pZCcpOwoJCXJldHVybiBzZWxmOjpnZXREYXRhKE1NX1RBQkxFX1BBWVBBTF9JUE5fTE9HLCAkZmllbGRzLCAkZGcsICR3aGVyZUNsYXVzZSk7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXREYXRhKCR0YWJsZU5hbWUsICRmaWVsZHM9bnVsbCwgTU1fRGF0YUdyaWQgJGRnPW51bGwsICR3aGVyZSA9ICIiLCAkZ2V0VG90YWw9ZmFsc2UpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCgkJJGNvbHVtbnMgPSAoaXNfbnVsbCgkZmllbGRzKSkgPyAidGJsLioiIDogaW1wbG9kZSgiLCIsICRmaWVsZHMpOwoJCgkJJHNxbFJlc3VsdENvdW50ID0gIlNFTEVDVCBjb3VudChkaXN0aW5jdCBpZCkgYXMgdG90YWwgRlJPTSAiLiR0YWJsZU5hbWU7CgkJaWYoIWVtcHR5KCR3aGVyZSkpCgkJewoJCQlpZihwcmVnX21hdGNoKCIvXih3aGVyZSkvIiwgc3RydG9sb3dlcih0cmltKCR3aGVyZSkpKSkKCQkJewoJCQkJJHNxbFJlc3VsdENvdW50Lj0gIiB7JHdoZXJlfSAiOwoJCQl9CgkJCWVsc2UKCQkJewoJCQkJJHNxbFJlc3VsdENvdW50Lj0gIiB3aGVyZSB7JHdoZXJlfSAiOwoJCQl9CgkJfQoJCgkJJGNvdW50Um93ID0gJHdwZGItPmdldF9yb3coJHNxbFJlc3VsdENvdW50KTsKCQoJCSRwYXlwYWxJUE5UYWJsZSA9IE1NX1RBQkxFX1BBWVBBTF9JUE5fTE9HOwoJCSRvcmRlcnNUYWJsZSA9IE1NX1RBQkxFX09SREVSUzsKCQkkZnJvbUNsYXVzZSA9ICJ7JHBheXBhbElQTlRhYmxlfSBKT0lOIHskb3JkZXJzVGFibGV9IG9uICh7JHBheXBhbElQTlRhYmxlfS5vcmRlcl9pZCA9IHskb3JkZXJzVGFibGV9LmlkKSI7CgkJCgkJaWYoJGNvdW50Um93KQoJCXsKCQkJJHNxbCA9ICJTRUxFQ1QgJ3skY291bnRSb3ctPnRvdGFsfScgYXMgdG90YWwsICIuJGNvbHVtbnMuIiBGUk9NIHskZnJvbUNsYXVzZX0gIjsKCQl9CgkJZWxzZQoJCXsKCQkJJHNxbCA9ICJTRUxFQ1QgIi4kY29sdW1ucy4iIEZST00geyRmcm9tQ2xhdXNlfSAiOwoJCX0KCQoJCWlmKCFlbXB0eSgkd2hlcmUpKQoJCXsKCQkJaWYocHJlZ19tYXRjaCgiL14od2hlcmUpLyIsIHN0cnRvbG93ZXIodHJpbSgkd2hlcmUpKSkpCgkJCXsKCQkJCSRzcWwuPSAiIHskd2hlcmV9ICI7CgkJCX0KCQkJZWxzZQoJCQl7CgkJCQkkc3FsLj0gIiB3aGVyZSB7JHdoZXJlfSAiOwoJCQl9CgkJfQoJCgkJaWYoIWlzX251bGwoJGRnKSAmJiAhaXNfbnVsbCgkZGctPnNvcnRCeSkgJiYgIWVtcHR5KCRkZy0+c29ydEJ5KSkKCQl7CgkJCSRzcWwuPSAiT1JERVIgQlkgeyRkZy0+c29ydEJ5fSB7JGRnLT5zb3J0RGlyfSI7CgkJfQoJCQoJCWlmKCRnZXRUb3RhbCkKCQl7CgkJCSRyZXN1bHQgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoJHNxbCk7CgkJCXJldHVybiAkcmVzdWx0OwoJCX0KCQoJCWlmKCFpc19udWxsKCRkZykpCgkJewoJCQkkc3FsIC49ICRkZy0+Z2V0TGltaXRTcWwoKTsKCQl9CgkJJHJlc3VsdCA9ICR3cGRiLT5nZXRfcmVzdWx0cygkc3FsKTsKCgkJaWYoISRyZXN1bHQgfHwgaXNfbnVsbCgkcmVzdWx0KSkKCQl7CgkJCXJldHVybiBhcnJheSgpOwoJCX0KCQoJCXJldHVybiAkcmVzdWx0OwoJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(249, 'transactionkey', '', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(250, 'defaultemailserviceprovider', 'Y2xhc3MgTU1fRGVmYXVsdEVtYWlsU2VydmljZVByb3ZpZGVyIGV4dGVuZHMgTU1fQWJzdHJhY3RFbWFpbFNlcnZpY2VQcm92aWRlciB7CgkJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRwcm92aWRlcl9pbmZvKSB7CgkJCXBhcmVudDo6X19jb25zdHJ1Y3QoJHByb3ZpZGVyX2luZm8pOwoJCX0KCQkKCQkvKioKCQkgKiBSZXR1cm5zIGFuIGVtcHR5IGFycmF5LCBzaW5jZSBubyBsaXN0cyBjYW4gYmUgY29uZmlndXJlZCB1c2luZyB0aGUgZGVmYXVsdCBwcm92aWRlcgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRMaXN0cygpIHsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZShhcnJheSgpKTsKCQl9CgkJCgkJLyoqCgkJICogUmV0dXJucyBhbiBvYmplY3QgY2FwYWJsZSBvZiByZW5kZXJpbmcgdGhlIGRlZmF1bHQgb3B0aW9ucyBkaWFsb2cKCQkgKiBAcGFyYW0gQXJyYXkgJHBvc3QgQW55IGRhdGEgcG9zdGVkIG5lY2Vzc2FyeSB0byBkcmF3IHRoZSBvcHRpb25zIGRpYWxvZwoJCSAqIEByZXR1cm4gT2JqZWN0IG9mIHR5cGUgTU1fRW1haWxTZXJ2aWNlUHJvdmlkZXJEaWFsb2cgcmVwcmVzZW50aW5nIHRoZSBkaWFsb2cgdG8gZHJhdwoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiByZW5kZXJPcHRpb25zRGlhbG9nKCRwb3N0KSB7CgkJCSRmb3JtID0gbmV3IE1NX0VtYWlsU2VydmljZVByb3ZpZGVyRGlhbG9nKCk7CgkJCSRmb3JtLT5jb250cm9scyA9ICc8YnV0dG9uIGlkPSJlbWFpbC1zZXJ2aWNlLXByb3ZpZGVyLXNhdmUiIGNsYXNzPSJtbS11aS1idXR0b24gYmx1ZSIgb25DbGljaz0ibW1qcy5wcm92aWRlck9wdGlvbnNTYXZlKFwnXCcpOyByZXR1cm4gZmFsc2U7IiBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7Ij5TYXZlIFNldHRpbmdzPC9idXR0b24+JzsKCQkJcmV0dXJuICRmb3JtOwoJCX0KCQkKCQkvKioKCQkgKiBSZXNwb25kcyB0byBkYXRhIGNvbGxlY3RlZCBmcm9tIHRoZSBmb3JtIHJlbmRlcmVkIGJ5IHJlbmRlck9wdGlvbnNEaWFsb2cKCQkgKiBAc2VlIE1NX0Fic3RyYWN0RW1haWxTZXJ2aWNlUHJvdmlkZXI6OmhhbmRsZU9wdGlvbnNEaWFsb2coKQoJCSAqIEBwYXJhbSAkb3B0aW9uRGF0YSBBcnJheSBjb250YWluaW5nIHRoZSBwb3N0ZWQgdmFsdWVzCgkJICogQHJldHVybiBNTV9SZXNwb25zZSBvYmplY3QgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmUKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gaGFuZGxlT3B0aW9uc0RpYWxvZygkb3B0aW9uRGF0YSkgCgkJewoJCQlpZiAoaXNfYXJyYXkoJG9wdGlvbkRhdGEpKSAKCQkJewoJCQkJJHByb3ZpZGVyX3Rva2VuID0gJG9wdGlvbkRhdGFbJ3Byb3ZpZGVyX3Rva2VuJ107CgkJCQkKCQkJCSRwcm92aWRlcl9lbnRpdHkgPSBuZXcgTU1fRW1haWxTZXJ2aWNlUHJvdmlkZXIoKTsKCQkJCSRwcm92aWRlcl9lbnRpdHktPnNldFRva2VuKCRwcm92aWRlcl90b2tlbik7CgkJCQkkcHJvdmlkZXJfZW50aXR5LT5nZXREYXRhKCk7CgkJCQlpZiAoJHByb3ZpZGVyX2VudGl0eS0+aXNWYWxpZCgpKSAKCQkJCXsKCQkJCQkvL2ZpcnN0IHdyaXRlIHRoZSBwcm92aWRlcidzIGNvbmZpZ3VyYXRpb24gb3B0aW9ucwoJCQkJCSRwcm92aWRlcl9lbnRpdHktPnNldEFjdGl2ZSh0cnVlKTsKCQkJCQkkY29tbWl0X3Jlc3BvbnNlID0gJHByb3ZpZGVyX2VudGl0eS0+Y29tbWl0RGF0YSgpOwoJCQkJCWlmICgkY29tbWl0X3Jlc3BvbnNlLT50eXBlID09IE1NX1Jlc3BvbnNlOjokRVJST1IpIAoJCQkJCXsKCQkJCQkJLy9wYXNzIHRocm91Z2ggZXJyb3JzIGNvbW1pdHRpbmcgdG8gdGhlIGRhdGFiYXNlCgkJCQkJCXJldHVybiAkY29tbWl0X3Jlc3BvbnNlOwoJCQkJCX0KCQkJCQllbHNlIHsKCQkJCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgiVGhlIERlZmF1bHQgTWFpbCBTZXJ2aWNlIFByb3ZpZGVyIGhhcyBiZWVuIGNvbmZpZ3VyZWQgc3VjY2Vzc2Z1bGx5IixNTV9SZXNwb25zZTo6JFNVQ0NFU1MpOwkKCQkJCQl9CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCS8vZmFpbGVkIHRvIGxvYWQgZW50aXR5IGZyb20gdGFibGUKCQkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCJGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncyIsTU1fUmVzcG9uc2U6OiRFUlJPUik7CgkJCQl9CgkJCX0KCQl9CgkJCgl9Cg==', 0, '2018-11-21 06:38:55'),
(251, 'aweberapi', 'LyoqCiAqIE1NX0FXZWJlckFQSQogKgogKiBDcmVhdGVzIGEgY29ubmVjdGlvbiB0byB0aGUgTU1fQVdlYmVyQVBJIGZvciBhIGdpdmVuIGNvbnN1bWVyIGFwcGxpY2F0aW9uLgogKiBUaGlzIGlzIGdlbmVyYWxseSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHRoaXMgbGlicmFyeS4gIEluc3RhbmNlcyBjYW4gYmUKICogY3JlYXRlZCBkaXJlY3RseSB3aXRoIGNvbnN1bWVyS2V5IGFuZCBjb25zdW1lclNlY3JldC4KICogQHVzZXMgTU1fQVdlYmVyQVBJQmFzZQogKiBAcGFja2FnZQogKiBAdmVyc2lvbiAkaWQkCiAqLwpjbGFzcyBNTV9BV2ViZXJBUEkgZXh0ZW5kcyBNTV9BV2ViZXJBUElCYXNlIHsKCgkvKioKCSAqIEB2YXIgU3RyaW5nIENvbnN1bWVyIEtleQoJICovCglwdWJsaWMgJGNvbnN1bWVyS2V5ICAgID0gZmFsc2U7CgoJLyoqCgkgKiBAdmFyIFN0cmluZyBDb25zdW1lciBTZWNyZXQKCSAqLwoJcHVibGljICRjb25zdW1lclNlY3JldCA9IGZhbHNlOwoKCS8qKgoJICogQHZhciBPYmplY3QgLSBQb3B1bGF0ZWQgaW4gc2V0QWRhcHRlcigpCgkgKi8KCXB1YmxpYyAkYWRhcHRlciA9IGZhbHNlOwoKCS8qKgoJICogVXNlcyB0aGUgYXBwJ3MgYXV0aG9yaXphdGlvbiBjb2RlIHRvIGZldGNoIGFuIGFjY2VzcyB0b2tlbgoJICoKCSAqIEBwYXJhbSBTdHJpbmcgQXV0aG9yaXphdGlvbiBjb2RlIGZyb20gYXV0aG9yaXplIGFwcCBwYWdlCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0RGF0YUZyb21Bd2ViZXJJRCgkc3RyaW5nKSB7CgkJbGlzdCgkY29uc3VtZXJLZXksICRjb25zdW1lclNlY3JldCwgJHJlcXVlc3RUb2tlbiwgJHRva2VuU2VjcmV0LCAkdmVyaWZpZXIpID0gTU1fQVdlYmVyQVBJOjpfcGFyc2VBd2ViZXJJRCgkc3RyaW5nKTsKCgkJaWYgKCEkdmVyaWZpZXIpIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoJCSRhd2ViZXIgPSBuZXcgTU1fQXdlYmVyQVBJKCRjb25zdW1lcktleSwgJGNvbnN1bWVyU2VjcmV0KTsKCQkkYXdlYmVyLT5hZGFwdGVyLT51c2VyLT5yZXF1ZXN0VG9rZW4gPSAkcmVxdWVzdFRva2VuOwoJCSRhd2ViZXItPmFkYXB0ZXItPnVzZXItPnRva2VuU2VjcmV0ID0gJHRva2VuU2VjcmV0OwoJCSRhd2ViZXItPmFkYXB0ZXItPnVzZXItPnZlcmlmaWVyID0gJHZlcmlmaWVyOwoJCWxpc3QoJGFjY2Vzc1Rva2VuLCAkYWNjZXNzU2VjcmV0KSA9ICRhd2ViZXItPmdldEFjY2Vzc1Rva2VuKCk7CgkJcmV0dXJuIGFycmF5KCRjb25zdW1lcktleSwgJGNvbnN1bWVyU2VjcmV0LCAkYWNjZXNzVG9rZW4sICRhY2Nlc3NTZWNyZXQpOwoJfQoKCXByb3RlY3RlZCBzdGF0aWMgZnVuY3Rpb24gX3BhcnNlQVdlYmVySUQoJHN0cmluZykgewoJCSR2YWx1ZXMgPSBleHBsb2RlKCd8JywgJHN0cmluZyk7CgkJaWYgKGNvdW50KCR2YWx1ZXMpIDwgNSkgewoJCQlyZXR1cm4gbnVsbDsKCQl9CgkJcmV0dXJuIGFycmF5X3NsaWNlKCR2YWx1ZXMsIDAsIDUpOwoJfQoKCS8qKgoJICogU2V0cyB0aGUgY29uc3VtZXIga2V5IGFuZCBzZWNyZXQgZm9yIHRoZSBBUEkgb2JqZWN0LiAgVGhlCgkgKiBrZXkgYW5kIHNlY3JldCBhcmUgbGlzdGVkIGluIHRoZSBNeSBBcHBzIHBhZ2UgaW4gdGhlIGxhYnMuYXdlYmVyLmNvbQoJICogQ29udHJvbCBQYW5lbCBPUiwgaW4gdGhlIGNhc2Ugb2YgZGlzdHJpYnV0ZWQgYXBwcywgd2lsbCBiZSByZXR1cm5lZAoJICogZnJvbSB0aGUgZ2V0RGF0YUZyb21Bd2ViZXJJRCgpIGZ1bmN0aW9uCgkgKgoJICogQHBhcmFtIFN0cmluZyBDb25zdW1lciBLZXkKCSAqIEBwYXJhbSBTdHJpbmcgQ29uc3VtZXIgU2VjcmV0CgkgKiBAcmV0dXJuIG51bGwKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRrZXksICRzZWNyZXQpIHsKCQkvLyBMb2FkIGtleSAvIHNlY3JldAoJCSR0aGlzLT5jb25zdW1lcktleSAgICA9ICRrZXk7CgkJJHRoaXMtPmNvbnN1bWVyU2VjcmV0ID0gJHNlY3JldDsKCgkJJHRoaXMtPnNldEFkYXB0ZXIoKTsKCX0KCgkvKioKCSAqIFJldHVybnMgdGhlIGF1dGhvcml6ZSBVUkwgYnkgYXBwZW5kaW5nIHRoZSByZXF1ZXN0CgkgKiB0b2tlbiB0byB0aGUgZW5kIG9mIHRoZSBBdXRob3JpemUgVVJJLCBpZiBpdCBleGlzdHMKCSAqCgkgKiBAcmV0dXJuIHN0cmluZyBUaGUgQXV0aG9yaXphdGlvbiBVUkwKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEF1dGhvcml6ZVVybCgpIHsKCQkkcmVxdWVzdFRva2VuID0gJHRoaXMtPnVzZXItPnJlcXVlc3RUb2tlbjsKCQlyZXR1cm4gKGVtcHR5KCRyZXF1ZXN0VG9rZW4pKSA/CgkJJHRoaXMtPmFkYXB0ZXItPmFwcC0+Z2V0QXV0aG9yaXplVXJsKCkKCQk6CgkJJHRoaXMtPmFkYXB0ZXItPmFwcC0+Z2V0QXV0aG9yaXplVXJsKCkgLiAiP29hdXRoX3Rva2VuPXskdGhpcy0+dXNlci0+cmVxdWVzdFRva2VufSI7Cgl9CgoJLyoqCgkgKiBTZXRzIHRoZSBhZGFwdGVyIGZvciB1c2Ugd2l0aCB0aGUgQVBJCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRBZGFwdGVyKCRhZGFwdGVyPW51bGwpIHsKCQlpZiAoZW1wdHkoJGFkYXB0ZXIpKSB7CgkJCSRzZXJ2aWNlUHJvdmlkZXIgPSBuZXcgTU1fQVdlYmVyU2VydmljZVByb3ZpZGVyKCk7CgkJCSRhZGFwdGVyID0gbmV3IE1NX09BdXRoQXBwbGljYXRpb24oJHNlcnZpY2VQcm92aWRlcik7CgkJCSRhZGFwdGVyLT5jb25zdW1lcktleSA9ICR0aGlzLT5jb25zdW1lcktleTsKCQkJJGFkYXB0ZXItPmNvbnN1bWVyU2VjcmV0ID0gJHRoaXMtPmNvbnN1bWVyU2VjcmV0OwoJCX0KCQkkdGhpcy0+YWRhcHRlciA9ICRhZGFwdGVyOwoJfQoKCS8qKgoJICogRmV0Y2hlcyBhY2NvdW50IGRhdGEgZm9yIHRoZSBhc3NvY2lhdGVkIGFjY291bnQKCSAqCgkgKiBAcGFyYW0gU3RyaW5nIEFjY2VzcyBUb2tlbiAoT25seSBvcHRpb25hbC9jYWNoZWQgaWYgeW91IGNhbGxlZCBnZXRBY2Nlc3NUb2tlbigpIGVhcmxpZXIKCSAqICAgICAgb24gdGhlIHNhbWUgcGFnZSkKCSAqIEBwYXJhbSBTdHJpbmcgQWNjZXNzIFRva2VuIFNlY3JldCAoT25seSBvcHRpb25hbC9jYWNoZWQgaWYgeW91IGNhbGxlZCBnZXRBY2Nlc3NUb2tlbigpIGVhcmxpZXIKCSAqICAgICAgb24gdGhlIHNhbWUgcGFnZSkKCSAqIEByZXR1cm4gT2JqZWN0IE1NX0FXZWJlckNvbGxlY3Rpb24gT2JqZWN0IHdpdGggdGhlIHJlcXVlc3RlZAoJICogICAgIGFjY291bnQgZGF0YQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0QWNjb3VudCgkdG9rZW49ZmFsc2UsICRzZWNyZXQ9ZmFsc2UpIHsKCQlpZiAoJHRva2VuICYmICRzZWNyZXQpIHsKCQkJJHVzZXIgPSBuZXcgTU1fT0F1dGhVc2VyKCk7CgkJCSR1c2VyLT5hY2Nlc3NUb2tlbiA9ICR0b2tlbjsKCQkJJHVzZXItPnRva2VuU2VjcmV0ID0gJHNlY3JldDsKCQkJJHRoaXMtPmFkYXB0ZXItPnVzZXIgPSAkdXNlcjsKCQl9CgoJCSRib2R5ID0gJHRoaXMtPmFkYXB0ZXItPnJlcXVlc3QoJ0dFVCcsICcvYWNjb3VudHMnKTsKCQkkYWNjb3VudHMgPSAkdGhpcy0+cmVhZFJlc3BvbnNlKCRib2R5LCAnL2FjY291bnRzJyk7CgkJcmV0dXJuICRhY2NvdW50c1swXTsKCX0KCgkvKioKCSAqIFBIUCBBdXRvbWFnaWMKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9fZ2V0KCRpdGVtKSB7CgkJaWYgKCRpdGVtID09ICd1c2VyJykgcmV0dXJuICR0aGlzLT5hZGFwdGVyLT51c2VyOwoJCXRyaWdnZXJfZXJyb3IoIkNvdWxkIG5vdCBmaW5kIFwieyRpdGVtfVwiIik7Cgl9CgoJLyoqCgkgKiBSZXF1ZXN0IGEgcmVxdWVzdCB0b2tlbiBmcm9tIEFXZWJlciBhbmQgYXNzb2NpYXRlIHRoZQoJICogcHJvdmlkZWQgJGNhbGxiYWNrVXJsIHdpdGggdGhlIG5ldyB0b2tlbgoJICogQHBhcmFtIFN0cmluZyBUaGUgVVJMIHdoZXJlIHVzZXJzIHNob3VsZCBiZSByZWRpcmVjdGVkCgkgKiAgICAgb25jZSB0aGV5IGF1dGhvcml6ZSB5b3VyIGFwcAoJICogQHJldHVybiBBcnJheSBDb250YWlucyB0aGUgcmVxdWVzdCB0b2tlbiBhcyB0aGUgZmlyc3QgaXRlbQoJICogICAgIGFuZCB0aGUgcmVxdWVzdCB0b2tlbiBzZWNyZXQgYXMgdGhlIHNlY29uZCBpdGVtIG9mIHRoZSBhcnJheQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0UmVxdWVzdFRva2VuKCRjYWxsYmFja1VybCkgewoJCSRyZXF1ZXN0VG9rZW4gPSAkdGhpcy0+YWRhcHRlci0+Z2V0UmVxdWVzdFRva2VuKCRjYWxsYmFja1VybCk7CgkJcmV0dXJuIGFycmF5KCRyZXF1ZXN0VG9rZW4sICR0aGlzLT51c2VyLT50b2tlblNlY3JldCk7Cgl9CgoJLyoqCgkgKiBSZXF1ZXN0IGFuIGFjY2VzcyB0b2tlbiB1c2luZyB0aGUgcmVxdWVzdCB0b2tlbnMgc3RvcmVkIGluIHRoZQoJICogY3VycmVudCB1c2VyIG9iamVjdC4gIFlvdSB3b3VsZCB3YW50IHRvIGZpcnN0IHNldCB0aGUgcmVxdWVzdCB0b2tlbnMKCSAqIG9uIHRoZSB1c2VyIGJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gdmlhOgoJICoKCSAqICAgICRhd2ViZXItPnVzZXItPnRva2VuU2VjcmV0ICA9ICRfQ09PS0lFWydyZXF1ZXN0VG9rZW5TZWNyZXQnXTsKCSAqICAgICRhd2ViZXItPnVzZXItPnJlcXVlc3RUb2tlbiA9ICRfR0VUWydvYXV0aF90b2tlbiddOwoJICogICAgJGF3ZWJlci0+dXNlci0+dmVyaWZpZXIgICAgID0gJF9HRVRbJ29hdXRoX3ZlcmlmaWVyJ107CgkgKgoJICogQHJldHVybiBBcnJheSBDb250YWlucyB0aGUgYWNjZXNzIHRva2VuIGFzIHRoZSBmaXJzdCBpdGVtCgkgKiAgICAgYW5kIHRoZSBhY2Nlc3MgdG9rZW4gc2VjcmV0IGFzIHRoZSBzZWNvbmQgaXRlbSBvZiB0aGUgYXJyYXkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuKCkgewoJCXJldHVybiAkdGhpcy0+YWRhcHRlci0+Z2V0QWNjZXNzVG9rZW4oKTsKCX0KfQo=', 0, '2018-11-21 06:38:55'),
(252, 'socialloginview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX1NvY2lhbExvZ2luVmlldyBleHRlbmRzIE1NX1ZpZXcKewkKCXB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpCgl7CgkJcGFyZW50OjpfX2NvbnN0cnVjdCgpOwoJfQoJCiAJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CiAJCiAJcHVibGljIGZ1bmN0aW9uIGdldFZpZXdEYXRhKCR1c2VySWQsTU1fRGF0YUdyaWQgJGRnPW51bGwpCgl7CgkJJHJlc3VsdHMgPSBNTV9BYnN0cmFjdFNvY2lhbExvZ2luRXh0ZW5zaW9uOjpnZXRMaW5rZWRTb2NpYWxNZWRpYUFjY291bnRzRm9yVXNlcigkdXNlcklkKTsKCQlyZXR1cm4gJHJlc3VsdHM7Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZW5lcmF0ZVJvd3MoJGRhdGEsICRyZW5kZXJGb3JBZG1pbj10cnVlKQoJewoJCS8vY29sdW1ucyBhcmU6IE5ldHdvcmsgKHByb3ZpZGVyKSwgQWNjb3VudCBOYW1lLCBhbmQgQWN0aW9uCgkJJG15YWNjb3VudFVybCA9IE1NX0NvcmVQYWdlRW5naW5lOjpnZXRVcmwoTU1fQ29yZVBhZ2VUeXBlOjokTVlfQUNDT1VOVCwgbnVsbCk7CgkJJHJvd3MgPSBhcnJheSgpOwoJCQoJCWZvcmVhY2goJGRhdGEgYXMgJGxpbmtlZEFjY291bnQpCgkJewoJCQkkcHJvdmlkZXIgPSBNTV9FeHRlbnNpb25zRmFjdG9yeTo6Z2V0RXh0ZW5zaW9uKCRsaW5rZWRBY2NvdW50LT50b2tlbik7CgkJCSRwcm92aWRlck5hbWUgPSAoIWlzX251bGwoJHByb3ZpZGVyKSk/JHByb3ZpZGVyLT5nZXRQcm92aWRlck5hbWUoKTokbGlua2VkQWNjb3VudC0+bmFtZTsKCQkJCgkJCXN3aXRjaChzdHJ0b2xvd2VyKCRsaW5rZWRBY2NvdW50LT50b2tlbikpCgkJCXsKCQkJCWNhc2Ugc3RydG9sb3dlcihNTV9FeHRlbnNpb246OiRMSU5LRURJTl9MT0dJTl9UT0tFTik6CgkJCQkJJHByb3ZpZGVySW1hZ2UgPSBNTV9VdGlsczo6Z2V0SWNvbignbGlua2VkaW4tc3F1YXJlJywgJ2JsdWUnLCAnMS41ZW0nLCAnMnB4Jyk7CgkJCQkJYnJlYWs7CgkJCQkJCgkJCQljYXNlIHN0cnRvbG93ZXIoTU1fRXh0ZW5zaW9uOjokRkFDRUJPT0tfTE9HSU5fVE9LRU4pOgoJCQkJCSRwcm92aWRlckltYWdlID0gTU1fVXRpbHM6OmdldEljb24oJ2ZhY2Vib29rLXNxdWFyZScsICdibHVlJywgJzEuNWVtJywgJzJweCcpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSBzdHJ0b2xvd2VyKE1NX0V4dGVuc2lvbjo6JEdPT0dMRV9MT0dJTl9UT0tFTik6CgkJCQkJJHByb3ZpZGVySW1hZ2UgPSBNTV9VdGlsczo6Z2V0SWNvbignZ29vZ2xlJywgJ2JsYWNrJywgJzEuNWVtJywgJzNweCcpOwoJCQkJCWJyZWFrOwoJCQkJCQoJCQkJY2FzZSBzdHJ0b2xvd2VyKE1NX0V4dGVuc2lvbjo6JFRXSVRURVJfTE9HSU5fVE9LRU4pOgoJCQkJCSRwcm92aWRlckltYWdlID0gTU1fVXRpbHM6OmdldEljb24oJ3R3aXR0ZXInLCAnbGlnaHQtYmx1ZScsICcxLjVlbScsICcycHgnKTsKCQkJCQlicmVhazsKCQkJfQoJCQkKCQkJJGNybnRSb3cgPSBhcnJheQoJCQkoCgkJCQlhcnJheSggJ2NvbnRlbnQnID0+ICJ7JHByb3ZpZGVySW1hZ2V9IHskcHJvdmlkZXJOYW1lfSIpLAoJCQkJYXJyYXkoICdjb250ZW50JyA9PiAkbGlua2VkQWNjb3VudC0+dW5pcXVlX2lkKQoJCQkpOwoJCQkKCQkJaWYoISRyZW5kZXJGb3JBZG1pbikKCQkJewoJCQkJJGFjdGlvbnMgPSAiIjsKCQkJCWlmICgkbGlua2VkQWNjb3VudC0+cmVtb3ZhYmxlID09IDEpCgkJCQl7CgkJCQkJJGFjdGlvbnMgLj0gIjxhIGhyZWY9XCJqYXZhc2NyaXB0Om15YWNjb3VudF9qcy51bmxpbmtTb2NpYWxOZXR3b3JrKCd7JGxpbmtlZEFjY291bnQtPmlkfScsJ3skbGlua2VkQWNjb3VudC0+dXNlcl9pZH0nKTtcIj5EZWxldGU8L2E+ICI7CgkJCQl9CgkJCQllbHNlIAoJCQkJewoJCQkJCSRhY3Rpb25zIC49ICI8YSBocmVmPVwiamF2YXNjcmlwdDpteWFjY291bnRfanMuY2hhbmdlTGlua2VkU29jaWFsTmV0d29yaygneyRsaW5rZWRBY2NvdW50LT5pZH0nLCd7JG15YWNjb3VudFVybH0nKTtcIj5DaGFuZ2U8L2E+ICI7CgkJCQl9CgkJCQkkY3JudFJvd1tdID0gYXJyYXkoICdjb250ZW50JyA9PiAkYWN0aW9ucywgImF0dHIiID0+ICJub3dyYXAiKTsKCQkJfQoJCQkKCQkJJHJvd3NbXSA9ICRjcm50Um93OwoJCX0KCQkKCQlyZXR1cm4gJHJvd3M7Cgl9Cn0K', 0, '2018-11-21 06:38:55'),
(253, 'ordernumbergeneratorfactory', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBUaGUgT3JkZXJOdW1iZXJHZW5lcmF0b3IgRmFjdG9yeSByZXRyaWV2ZXMgYW4gb3JkZXIgbnVtYmVyIGdlbmVyYXRvciBiYXNlZCBvbiBhIHRva2VuCiAqLwogCmNsYXNzIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yRmFjdG9yeSAKewoJCgkvKioKCSAqIFJldHVybnMgYSBzcGVjaWZpYyBvcmRlciBudW1iZXIgZ2VuZXJhdG9yCgkgKiAKCSAqIEBwYXJhbSBTdHJpbmcgJHRva2VuIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgbnVtYmVyIGdlbmVyYXRvciB0byByZXRyaWV2ZQoJICogQHJldHVybiBNTV9PcmRlck51bWJlckdlbmVyYXRvciBBbiBpbnN0YW5jZSBvZiB0eXBlIE1NX09yZGVyTnVtYmVyR2VuZXJhdG9yIChvciBzdWJjbGFzcykKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRPcmRlck51bWJlckdlbmVyYXRvcigkdG9rZW4pCgl7CgkJc3dpdGNoICgkdG9rZW4pIAoJCXsKCQkJZGVmYXVsdDoKCQkJCS8vb25seSBvbmUgb3JkZXIgbnVtYmVyIGdlbmVyYXRvciB0byBzdGFydCwgcmV0dXJuIHRoZSBkZWZhdWwKCQkJCXJldHVybiBuZXcgTU1fRGVmYXVsdE9yZGVyTnVtYmVyR2VuZXJhdG9yKCk7CgkJCQlicmVhazsKCQl9Cgl9CQp9Cg==', 0, '2018-11-21 06:38:55'),
(254, 'paymentservicefactory', '', 0, '2018-11-21 06:38:55'),
(255, 'errortagprocessor', 'Y2xhc3MgTU1fRXJyb3JUYWdQcm9jZXNzb3IKewkKCXB1YmxpYyBzdGF0aWMgJFRBR19FUlJPUl9NRVNTQUdFID0gIm1tX2Vycm9yX21lc3NhZ2UiOwoJCgkKCS8qKgoJICogVGFrZXMgYSBTbWFydFRhZyBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgaXMgcmVsYXRlZCB0byBlcnJvcnMuCgkgKiAKCSAqIEBwYXJhbSBTdHJpbmcgJHNtYXJ0VGFnIHRoZSBuYW1lIG9mIHRoZSBTbWFydFRhZwoJICogQHJldHVybiBCb29sZWFuIHJldHVybnMgdHJ1ZSBpZiB0aGUgU21hcnRUYWcgcGFzc2VkIGlzIHJlbGF0ZWQgdG8gZXJyb3JzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzRXJyb3JTbWFydFRhZygkc21hcnRUYWcpCgl7IAoJCXN3aXRjaCgkc21hcnRUYWcpIAoJCXsKCQkJY2FzZSBzZWxmOjokVEFHX0VSUk9SX01FU1NBR0U6CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCQoJCgkvKioKCSAqIFRha2VzIGEgU21hcnRUYWcgbmFtZSBhbmQgYSBudW1iZXIgb2YgcHJvcGVydGllcyByZWxhdGVkIHRvIHRoZSBTbWFydFRhZyBhbmQgbWFrZXMgYSBjYWxsIHRvIAoJICogdGhlIGFwcHJvcHJpYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBTbWFydFRhZyBuYW1lLgoJICogQHBhcmFtIFN0cmluZyAkc21hcnRUYWcgdGhlIG5hbWUgb2YgdGhlIFNtYXJ0VGFnCgkgKiBAcGFyYW0gU3RyaW5nICRjb250ZW50IHRoZSBjb250ZW50IHRvIHByb2Nlc3MKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcHJvY2Vzc1NtYXJ0VGFnKCRzbWFydFRhZywgJGNvbnRlbnQsICRhdHRzLCAkY29kZSkKCXsKCQlzd2l0Y2goJHNtYXJ0VGFnKSAKCQl7CgkJCWNhc2Ugc2VsZjo6JFRBR19FUlJPUl9NRVNTQUdFOgoJCQkJcmV0dXJuIHNlbGY6Om1tX2Vycm9yX21lc3NhZ2UoJGNvbnRlbnQsICRhdHRzLCAkY29kZSk7CgkJCQkKCQkJZGVmYXVsdDoKCQkJCXJldHVybiAiSW52YWxpZCBFcnJvciBTbWFydFRhZyB7JHNtYXJ0VGFnfSBmb3VuZC4iOwoJCX0KCX0KCgkKCS8qKgoJICogVGhpcyBmdW5jdGlvbiBwcm9jZXNzZXMgdGhlIE1NX0Vycm9yX01lc3NhZ2UgdGFnLiBJdCBpcyByZXNwb25zaWJsZSBmb3IgCgkgKiByZXR1cm5pbmcgdGhlIGVycm9yIG1lc3NhZ2UgYmFzZWQgb24gdGhlIGVycm9yIGNvZGUgb3IgbWVzc2FnZSBwYXNzZWQgaW4gdGhlIFVSTC4KCSAqIEBwYXJhbSBTdHJpbmcgJGNvbnRlbnQgdGhlIGNvbnRlbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgU21hcnRUYWcgKGlmIGFueSkKCSAqIEBwYXJhbSBBcnJheSAkYXR0cyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBhdHRyaWJ1dGVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgU21hcnRUYWcKCSAqIEBwYXJhbSBTdHJpbmcgJGNvZGUgdGhlIHJhdyB2ZXJzaW9uIG9mIHRoZSBTbWFydFRhZyBuYW1lIChpLmUuIG5vdCBjYXNlLWluc2VudGl2ZSwgbm90IGJyb2tlbiB1cCBpbnRvIHBhcnRzKQoJICogQHJldHVybiBTdHJpbmcgYSBzdHJpbmcgYmFzZWQgb24gdGhlICRjb250ZW50IHBhc3NlZCB3aXRoIGFsbCBTbWFydFRhZ3MgcHJvY2Vzc2VkCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbW1fZXJyb3JfbWVzc2FnZSgkY29udGVudCwgJGF0dHMsICRjb2RlKQoJewkKCQkkbWVzc2FnZSA9IE1NX0Vycm9yOjpnZXRNZXNzYWdlKCk7CgkJcmV0dXJuIF9tbXQoJG1lc3NhZ2UpOwoJfQp9Cg==', 0, '2018-11-21 06:38:55'),
(256, 'customfieldview', 'LyoqCiAqIAogKiBNZW1iZXJNb3VzZShUTSkgKGh0dHA6Ly93d3cubWVtYmVybW91c2UuY29tKQogKiAoYykgTWVtYmVyTW91c2UsIExMQy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICovCmNsYXNzIE1NX0N1c3RvbUZpZWxkVmlldyBleHRlbmRzIE1NX1JCQUNHZW5lcmFsRW1wbG95ZWVWaWV3CnsKCXB1YmxpYyBzdGF0aWMgJE1NX0pTQUNUSU9OX0NBTkNFTF9DUkVBVElPTiA9ICJjYW5jZWxDcmVhdGlvbiI7CglwdWJsaWMgc3RhdGljICRNTV9KU0FDVElPTl9TSE9XX1NNQVJUVEFHUyA9ICJzaG93Q2hlY2tvdXRGb3JtU21hcnRUYWdzIjsKCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQoJewoJCXBhcmVudDo6X19jb25zdHJ1Y3QoKTsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHBlcmZvcm1BY3Rpb24oJHBvc3QpIAoJewkKCQkkcmVzcG9uc2UgPSBwYXJlbnQ6OnBlcmZvcm1BY3Rpb24oJHBvc3QpOwoJCQoJCWlmKCEoJHJlc3BvbnNlIGluc3RhbmNlb2YgTU1fUmVzcG9uc2UpKQoJCXsKCQkJc3dpdGNoKCRwb3N0W3NlbGY6OiRNTV9KU0FDVElPTl0pIAoJCQl7CgkJCQljYXNlIHNlbGY6OiRNTV9KU0FDVElPTl9TQVZFOgoJCQkJCXJldHVybiAkdGhpcy0+c2F2ZUN1c3RvbUZpZWxkKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX0NBTkNFTF9DUkVBVElPTjoKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUN1c3RvbUZpZWxkKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1JFTU9WRToKCQkJCQlyZXR1cm4gJHRoaXMtPnJlbW92ZUN1c3RvbUZpZWxkKCRwb3N0KTsKCQkJCQkKCQkJCWNhc2Ugc2VsZjo6JE1NX0pTQUNUSU9OX1NIT1dfU01BUlRUQUdTOgoJCQkJCXJldHVybiAkdGhpcy0+c2hvd0NoZWNrb3V0Rm9ybVNtYXJ0VGFncygkcG9zdCk7CgkJCQkJCgkJCQlkZWZhdWx0OgoJCQkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoJHJlc3BvbnNlKTsKCQkJfQoJCX0KCQllbHNlIAoJCXsKCQkJcmV0dXJuICRyZXNwb25zZTsKCQl9Cgl9CgkKCXB1YmxpYyBmdW5jdGlvbiBnZXRWaWV3RGF0YShNTV9EYXRhR3JpZCAkZGcpCgl7CgkJZ2xvYmFsICR3cGRiOwoJCQoJCSRyb3dzID0gcGFyZW50OjpnZXREYXRhKE1NX1RBQkxFX0NVU1RPTV9GSUVMRFMsIG51bGwsICRkZywgImlzX2hpZGRlbiA9ICcwJyIpOwoJCQoJCXJldHVybiAkcm93czsKCX0KCQoJcHVibGljIGZ1bmN0aW9uIHJlbW92ZUN1c3RvbUZpZWxkKCRwb3N0KQoJewoJCWlmKGlzc2V0KCRwb3N0WyJpZCJdKSAmJiBpbnR2YWwoJHBvc3RbImlkIl0pID4gMCkKCQl7CgkJCSRjdXN0b21GaWVsZCA9IG5ldyBNTV9DdXN0b21GaWVsZCgkcG9zdFsiaWQiXSwgZmFsc2UpOwoJCQkkcmVzdWx0ID0gJGN1c3RvbUZpZWxkLT5kZWxldGUoKTsKCQkJCgkJCWlmKCRyZXN1bHQpIAoJCQl7CgkJCQlyZXR1cm4gbmV3IE1NX1Jlc3BvbnNlKCk7CgkJCX0gCgkJfQoJCQoJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIlVuYWJsZSB0byBkZWxldGUgY3VzdG9tIGZpZWxkLiBObyBJRCBzcGVjaWZpZWQuIiwgTU1fUmVzcG9uc2U6OiRFUlJPUik7Cgl9CgkKCQoJcHJpdmF0ZSBmdW5jdGlvbiBzYXZlQ3VzdG9tRmllbGQoJHBvc3QpCgl7CQoJCSRjdXN0b21GaWVsZCA9IG5ldyBNTV9DdXN0b21GaWVsZCgpOwoJCQoJCWlmKGlzc2V0KCRwb3N0WyJtbV9pZCJdKSAmJiBpbnR2YWwoJHBvc3RbIm1tX2lkIl0pID4gMCkgCgkJewoJCQkkY3VzdG9tRmllbGQtPnNldElkKCRwb3N0WyJtbV9pZCJdKTsKCQl9CgkJCgkJJGN1c3RvbUZpZWxkLT5zZXREaXNwbGF5TmFtZSgkcG9zdFsibW1fZGlzcGxheV9uYW1lIl0pOwoJCSRjdXN0b21GaWVsZC0+c2V0U2hvd09uTXlBY2NvdW50KCRwb3N0WyJtbV9zaG93X29uX215X2FjY291bnQiXSk7CgkJJGN1c3RvbUZpZWxkLT5zZXRUeXBlKCRwb3N0WyJtbV9maWVsZF90eXBlIl0pOwoJCQoJCS8vIHNldCBvcHRpb25zCgkJJGN1c3RvbUZpZWxkLT5kZWxldGVPcHRpb25zKCk7CgkJCgkJaWYoTU1fQ3VzdG9tRmllbGQ6OnR5cGVSZXF1aXJlc09wdGlvbnMoJHBvc3RbIm1tX2ZpZWxkX3R5cGUiXSkpCgkJewoJCQlmb3JlYWNoKCRwb3N0IGFzICRrZXkgPT4gJHZhbHVlKSAKCQkJewoJCQkJaWYoc3RycG9zKCRrZXksICdtbV9maWVsZF9vcHRpb25fJykgPT09IDApIAoJCQkJewoJCQkJCWlmKCFlbXB0eSgkdmFsdWUpKQoJCQkJCXsKCQkJCQkJJGN1c3RvbUZpZWxkLT5hZGRPcHRpb24oJHZhbHVlKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgkJCgkJcmV0dXJuICRjdXN0b21GaWVsZC0+Y29tbWl0RGF0YSgpOwoJfQoJCglwcml2YXRlIGZ1bmN0aW9uIHNob3dDaGVja291dEZvcm1TbWFydFRhZ3MoJHBvc3QpCgl7CgkJaWYoaXNzZXQoJHBvc3RbImN1c3RvbV9maWVsZF9pZCJdKSAmJiBpc3NldCgkcG9zdFsiY3VzdG9tX2ZpZWxkX25hbWUiXSkpCgkJewoJCQkkZGF0YSA9IG5ldyBzdGRDbGFzcygpOwoJCQkkZGF0YS0+Y3VzdG9tRmllbGRJZCA9ICRwb3N0WyJjdXN0b21fZmllbGRfaWQiXTsKCQkJJGRhdGEtPmN1c3RvbUZpZWxkTmFtZSA9IHN0cmlwc2xhc2hlcygkcG9zdFsiY3VzdG9tX2ZpZWxkX25hbWUiXSk7CgkJCQkKCQkJJGNvbnRlbnQgPSBNTV9URU1QTEFURTo6Z2VuZXJhdGUoTU1fTU9EVUxFUy4iLyIuTU1fTU9EVUxFX0NVU1RPTV9GSUVMRFMuIi5zbWFydHRhZ3MuZGlhbG9nLnBocCIsICRkYXRhKTsKCQkJcmV0dXJuIG5ldyBNTV9SZXNwb25zZSgkY29udGVudCk7CgkJfQoJCWVsc2UKCQl7CgkJCXJldHVybiBuZXcgTU1fUmVzcG9uc2UoIkN1c3RvbSBmaWVsZCBJRCBhbmQgbmFtZSBhcmUgcmVxdWlyZWQgdG8gZGlzcGxheSBjaGVja291dCBmb3JtIFNtYXJ0VGFncyIsIE1NX1Jlc3BvbnNlOjokRVJST1IpOwoJCX0KCX0KfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(257, 'braintreeservice', '', 0, '2018-11-21 06:38:55'),
(258, 'reportdatagridmodel', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVwb3J0RGF0YWdyaWRNb2RlbCBleHRlbmRzIE1NX0Fic3RyYWN0UmVwb3J0RGF0YU1vZGVsCnsKCXB1YmxpYyBzdGF0aWMgJEJMQU5LX1JPVyA9ICJibGFua19yb3ciOwoJcHJvdGVjdGVkICRjb2x1bW5IZWFkZXJzID0gYXJyYXkoKTsKCXByb3RlY3RlZCAkcm93cyA9IGFycmF5KCk7Cglwcm90ZWN0ZWQgJG9wdGlvbnMgPSBhcnJheSgpOwkKCQoJCglwdWJsaWMgZnVuY3Rpb24gc2V0Q29sdW1uSGVhZGVyc0Zyb21BcnJheSgkaGVhZGVyQXJyYXk9YXJyYXkoKSkKCXsKCQlmb3JlYWNoICgkaGVhZGVyQXJyYXkgYXMgJGNvbHVtbk5hbWU9PiRoZWFkZXJJbmZvKQoJCXsKCQkJJHRoaXMtPmFkZENvbHVtbkhlYWRlcigkY29sdW1uTmFtZSwkaGVhZGVySW5mbyk7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBhZGRDb2x1bW5IZWFkZXIoJGNvbHVtbk5hbWUsICRjb2x1bW5EZWZpbml0aW9ucykKCXsKCQkkdGhpcy0+Y29sdW1uSGVhZGVyc1skY29sdW1uTmFtZV0gPSAkY29sdW1uRGVmaW5pdGlvbnMgKyBhcnJheSgic29ydGFibGUiPT50cnVlKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gcmVtb3ZlQ29sdW1uSGVhZGVyKCRjb2x1bW5OYW1lKQoJewoJCWlmIChpc3NldCgkdGhpcy0+Y29sdW1uSGVhZGVyc1skY29sdW1uTmFtZV0pKQoJCXsKCQkJdW5zZXQoJHRoaXMtPmNvbHVtbkhlYWRlcnNbJGNvbHVtbk5hbWVdKTsKCQl9Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGFkZFJvdygkcm93RGF0YSwkZXhwYW5kZWRDb250ZW50PSIiLCRleHBhbmRPbkxvYWQ9ZmFsc2UpCgl7CgkJaWYgKGlzX2FycmF5KCRyb3dEYXRhKSkKCQl7CgkJCSRuZXdSb3cgPSBhcnJheSgiZGF0YSIgPT4gJHJvd0RhdGEpOwoJCQlpZiAoIWVtcHR5KCRleHBhbmRlZENvbnRlbnQpKQoJCQl7CgkJCQkkbmV3Um93WydleHBhbmRlZENvbnRlbnQnXSA9ICRleHBhbmRlZENvbnRlbnQ7CgkJCQkkbmV3Um93WydleHBhbmRPbkxvYWQnXSA9ICRleHBhbmRPbkxvYWQ7CgkJCX0KCQkJJHRoaXMtPnJvd3NbXSA9ICRuZXdSb3c7CgkJfQoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBhZGRCbGFua1JvdygpCgl7CgkJJHRoaXMtPnJvd3NbXSA9IGFycmF5KCJkYXRhIiA9PiBzZWxmOjokQkxBTktfUk9XKTsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0RmlsdGVyYWJsZUNvbHVtbnMoKQoJewoJCSRmaWx0ZXJhYmxlID0gYXJyYXkoKTsKCQlmb3JlYWNoICgkdGhpcy0+Y29sdW1uSGVhZGVycyBhcyAkaz0+JHYpCgkJewoJCQlpZiAoJHZbImZpbHRlcmFibGUiXSA9PSB0cnVlKQoJCQl7CgkJCQkkZmlsdGVyYWJsZVska10gPSAkdjsKCQkJfQoJCX0KCQlyZXR1cm4gJGZpbHRlcmFibGU7Cgl9CgkKCQoJcHVibGljIGZ1bmN0aW9uIGdldENvbHVtbnMoKQoJewoJCXJldHVybiAkdGhpcy0+Y29sdW1uSGVhZGVyczsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Um93cygpCgl7CgkJcmV0dXJuICR0aGlzLT5yb3dzOwoJfQkKCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0TnVtUm93cygpCgl7CgkJcmV0dXJuIGlzX2FycmF5KCR0aGlzLT5yb3dzKT9jb3VudCgkdGhpcy0+cm93cyk6MDsKCX0KfQ==', 0, '2018-11-21 06:38:55'),
(259, 'affiliateproviderfeatures', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBNTV9BZmZpbGlhdGVQcm92aWRlckZlYXR1cmVzIGlzIGEgY2xhc3MgdGhhdCBzZXJ2ZXMgYXMgYSBjb250YWluZXIgZm9yIGEgc2V0IG9mIGNvbnN0YW50cyByZXByZXNlbnRpbmcgZmVhdHVyZXMKICogdGhhdCBtYXkgYmUgaW1wbGVtZW50ZWQgYnkgaW5kaXZpZHVhbCBhZmZpbGlhdGUgcHJvdmlkZXJzCiAqLwpjbGFzcyBNTV9BZmZpbGlhdGVQcm92aWRlckZlYXR1cmVzIAp7Cgljb25zdCBDVVNUT01fUkVCSUxMX0NPTU1JU1NJT05TID0gMTsKCWNvbnN0IERFRkFVTFRfQUZGSUxJQVRFX0lEID0gMjsKCWNvbnN0IEFGRklMSUFURV9BQ0NPVU5UX0NSRUFUSU9OID0gMzsKCWNvbnN0IENPTU1JU1NJT05fVFJBQ0tJTkcgPSA0OwoJY29uc3QgQ09NTUlTU0lPTl9UUkFDS0lOR19CWV9DT1VQT04gPSA1OwoJY29uc3QgQ09NTUlTU0lPTl9UUkFDS0lOR19CWV9JUF9BRERSRVNTID0gNjsKfQo=', 0, '2018-11-21 06:38:55');
INSERT INTO `mm_container` (`id`, `name`, `obj`, `is_system`, `date_added`) VALUES
(260, 'reportbarchart', 'LyoqCiAqCiAqIE1lbWJlck1vdXNlKFRNKSAoaHR0cDovL3d3dy5tZW1iZXJtb3VzZS5jb20pCiAqIChjKSBNZW1iZXJNb3VzZSwgTExDLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKi8KY2xhc3MgTU1fUmVwb3J0QmFyQ2hhcnQgZXh0ZW5kcyBNTV9SZXBvcnRWaXN1YWxFbGVtZW50CnsKCQoJcHJvdGVjdGVkICRjYXRlZ29yeUZpZWxkID0gImNhdGVnb3J5IjsKCQoJcHJvdGVjdGVkICR2YWx1ZUZpZWxkID0gInZhbHVlIjsKCQoJcHJvdGVjdGVkICRvcmllbnRhdGlvbiA9ICIiOwoJCglwcm90ZWN0ZWQgJHZhbHVlQXhpc1RpdGxlID0gIiI7CgkKCXByb3RlY3RlZCAkY2F0ZWdvcnlBeGlzVGl0bGUgPSAiIjsKCQoJcHJvdGVjdGVkICRiYWxsb29uVGV4dCA9ICIiOwoJCglwcm90ZWN0ZWQgJHRpdGxlID0gIiI7CgkKCXByb3RlY3RlZCAkY3VycmVuY3lWYWx1ZXMgPSBmYWxzZTsKCQoJcHJvdGVjdGVkICRsYWJlbFJvdGF0aW9uID0gNDU7CgkKCXB1YmxpYyBzdGF0aWMgJEhPUklaT05UQUxfT1JJRU5UQVRJT04gPSAiaG9yaXpvbnRhbCI7CglwdWJsaWMgc3RhdGljICRWRVJUSUNBTF9PUklFTlRBVElPTiA9ICJ2ZXJ0aWNhbCI7CgoJCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGNvbnRhaW5lcj0iIiwkZGlyZWN0aXZlcz0iIikKCXsKCQlwYXJlbnQ6Ol9fY29uc3RydWN0KCRjb250YWluZXIsJGRpcmVjdGl2ZXMpOwoJfQoJCgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRKYXZhc2NyaXB0RGVwZW5kZW5jaWVzKCkKCXsKCQlyZXR1cm4gYXJyYXkgKAoJCQkJTU1fUExVR0lOX1VSTC4iL3Jlc291cmNlcy9qcy9hbWNoYXJ0cy9hbWNoYXJ0cy9hbWNoYXJ0cy5qcyIsCgkJCQlNTV9QTFVHSU5fVVJMLiIvcmVzb3VyY2VzL2pzL2FtY2hhcnRzL2FtY2hhcnRzL3NlcmlhbC5qcyIgCgkJKTsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIHJlbmRlcihNTV9SZXBvcnRDYXRlZ29yeVZhbHVlTW9kZWwgJG1vZGVsID0gbnVsbCkKCXsKCQlpZiAoZW1wdHkoJHRoaXMtPmJhbGxvb25UZXh0KSkKCQl7CgkJCSR0aGlzLT5zZXRCYWxsb29uVGV4dCgiW1t7JHRoaXMtPmNhdGVnb3J5RmllbGR9XV0gOiBbW3skdGhpcy0+dmFsdWVGaWVsZH1dXSIpOwoJCX0KCQkKCQlpZiAoIWlzX251bGwoJG1vZGVsKSkKCQl7CgkJCSR0aGlzLT5zZXRNb2RlbCgkbW9kZWwpOwoJCX0KCQkKCQkkb3V0cHV0ID0gIiI7CgkJaWYgKCFlbXB0eSgkdGhpcy0+Y29udGFpbmVyKSYmKCR0aGlzLT5tb2RlbCBpbnN0YW5jZW9mIE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbCkpCgkJewoJCQkkdmFsdWVzID0gJHRoaXMtPm1vZGVsLT5nZXRWYWx1ZXMoKTsKCQkJaWYgKGlzX2FycmF5KCR2YWx1ZXMpKQoJCQl7CgkJCQlpZiAoJHRoaXMtPmN1cnJlbmN5VmFsdWVzKQoJCQkJewoJCQkJCSR0aGlzLT5zZXRCYWxsb29uVGV4dCgiW1t7JHRoaXMtPmNhdGVnb3J5RmllbGR9XV0gOiBbW2JhbGxvb25dXSIpOwoJCQkJfQoJCQkJJGNvbG9yQ291bnRlciA9IDA7CgkJCQkkbWV0YU92ZXJyaWRlID0gYXJyYXkoJ3Bvc3RmaXhfaXNvJz0+ZmFsc2UpOwoJCQkJZm9yZWFjaCgkdmFsdWVzIGFzICYkdikKCQkJCXsKCQkJCQlpZiAoJHRoaXMtPmN1cnJlbmN5VmFsdWVzICYmIGlzX251bWVyaWMoJHZbJHRoaXMtPnZhbHVlRmllbGRdKSkKCQkJCQl7CgkJCQkJCSR2WydiYWxsb29uJ10gPSBfbW1vZigkdlskdGhpcy0+dmFsdWVGaWVsZF0sX21tZmMoKSwkbWV0YU92ZXJyaWRlKTsKCQkJCQl9CgkJCQkJJHZbJ2NvbG9yJ10gPSAkdGhpcy0+Z2V0Q29sb3JGb3JQb3NpdGlvbigkY29sb3JDb3VudGVyKyspOwoJCQkJfQoJCQl9CgkJCSRqc29uRGF0YSA9IGpzb25fZW5jb2RlKCR2YWx1ZXMpOwoJCQkkb3V0cHV0IC49ICI8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+XG4iOwoJCQkkb3V0cHV0IC49ICJqUXVlcnkoZnVuY3Rpb24oKSB7XG4iOwoJCQkkb3V0cHV0IC49ICJ2YXIgeyR0aGlzLT5jb250YWluZXJ9X2NoYXJ0ID0gQW1DaGFydHMubWFrZUNoYXJ0KCd7JHRoaXMtPmNvbnRhaW5lcn0nLCB7XG4iOwoJCQkkb3V0cHV0IC49ICIJJ3RoZW1lJzogJ25vbmUnLFxuIjsKCQkJJG91dHB1dCAuPSAiCSd0eXBlJzogJ3NlcmlhbCcsXG4iOwoJCQkkb3V0cHV0IC49ICIJJ3N0YXJ0RHVyYXRpb24nOiAyLFxuIjsKCQkJJG91dHB1dCAuPSAiCSdkYXRhUHJvdmlkZXInOiB7JGpzb25EYXRhfSxcbiI7CgkJCSRvdXRwdXQgLj0gIgkndmFsdWVBeGVzJzogW3tcbiI7CgkJCSRvdXRwdXQgLj0gIgkJJ3Bvc2l0aW9uJzogJ2xlZnQnLFxuIjsKCQkJaWYgKCR0aGlzLT5jdXJyZW5jeVZhbHVlcykKCQkJewoJCQkJJG91dHB1dCAuPSAiCSdwcmVjaXNpb24nOiAyLFxuIjsKCQkJfQoJCQkkb3V0cHV0IC49ICIJCSd0aXRsZSc6ICd7JHRoaXMtPnZhbHVlQXhpc1RpdGxlfSdcbiI7CgkJCSRvdXRwdXQgLj0gIgl9XSxcbiI7CgkJCSRvdXRwdXQgLj0gIgknZ3JhcGhzJzogW3tcbiI7CgkJCWlmICghZW1wdHkoJHRoaXMtPmJhbGxvb25UZXh0KSkKCQkJewoJCQkJJG91dHB1dCAuPSAiJ2JhbGxvb25UZXh0JzogJ3skdGhpcy0+YmFsbG9vblRleHR9JyxcbiI7CgkJCX0KCQkJJG91dHB1dCAuPSAiCSdjb2xvckZpZWxkJzogJ2NvbG9yJyxcbiI7CgkJCSRvdXRwdXQgLj0gIgknZmlsbEFscGhhcyc6IDEsXG4iOwoJCQkkb3V0cHV0IC49ICIJJ2xpbmVBbHBoYSc6IDAuMSxcbiI7CgkJCSRvdXRwdXQgLj0gIgknZml4ZWRDb2x1bW5XaWR0aCc6IDUwLFxuIjsKCQkJJG91dHB1dCAuPSAiCSd0eXBlJzogJ2NvbHVtbicsXG4iOwoJCQkkb3V0cHV0IC49ICIJJ3ZhbHVlRmllbGQnOiAneyR0aGlzLT52YWx1ZUZpZWxkfSdcbiI7CgkJCSRvdXRwdXQgLj0gIgl9XSxcbiI7CgkJCSRvdXRwdXQgLj0gIgknZGVwdGgzRCc6IDIwLFxuIjsKCQkJJG91dHB1dCAuPSAiCSdhbmdsZSc6IDMwLFxuIjsKCQkJJHJvdGF0ZSA9ICgkdGhpcy0+b3JpZW50YXRpb24gIT09IHNlbGY6OiRWRVJUSUNBTF9PUklFTlRBVElPTik/InRydWUiOiJmYWxzZSI7CgkJCSRvdXRwdXQgLj0gIgkncm90YXRlJzogeyRyb3RhdGV9LFxuIjsKCQkJJG91dHB1dCAuPSAiCSdjaGFydEN1cnNvcic6IHtcbiI7CgkJCSRvdXRwdXQgLj0gIgknY2F0ZWdvcnlCYWxsb29uRW5hYmxlZCc6IGZhbHNlLFxuIjsKCQkJJG91dHB1dCAuPSAiCSdjdXJzb3JBbHBoYSc6IDAsXG4iOwoJCQkkb3V0cHV0IC49ICIJJ3pvb21hYmxlJzogZmFsc2VcbiI7CgkJCSRvdXRwdXQgLj0gIgl9LFxuIjsKCQkJJG91dHB1dCAuPSAiCSdjYXRlZ29yeUZpZWxkJzogJ3skdGhpcy0+Y2F0ZWdvcnlGaWVsZH0nLFxuIjsKCQkJJG91dHB1dCAuPSAiCSdjYXRlZ29yeUF4aXMnOiB7XG4iOwoJCQkkb3V0cHV0IC49ICIJJ2dyaWRQb3NpdGlvbic6ICdzdGFydCcsXG4iOwoJCQkkb3V0cHV0IC49ICIJJ3RpdGxlJzoneyR0aGlzLT5jYXRlZ29yeUF4aXNUaXRsZX0nLFxuIjsKCQkJJG91dHB1dCAuPSAiCSdsYWJlbFJvdGF0aW9uJzogeyR0aGlzLT5sYWJlbFJvdGF0aW9ufSxcbiI7CgkJCSRvdXRwdXQgLj0gIgl9XG4iOwoJCQkkb3V0cHV0IC49ICJ9KTtcbiI7CgkJCSRvdXRwdXQgLj0gIn0pOyI7CgkJCSRvdXRwdXQgLj0gIjwvc2NyaXB0PlxuIjsKCQl9CgkJcmV0dXJuICRvdXRwdXQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRDYXRlZ29yeUZpZWxkKCkKCXsKCQlyZXR1cm4gJHRoaXMtPmNhdGVnb3J5RmllbGQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRDYXRlZ29yeUZpZWxkKCRjYXRlZ29yeUZpZWxkKQoJewoJCSR0aGlzLT5jYXRlZ29yeUZpZWxkID0gJGNhdGVnb3J5RmllbGQ7CgkJcmV0dXJuICR0aGlzOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gZ2V0VmFsdWVGaWVsZCgpCgl7CgkJcmV0dXJuICR0aGlzLT52YWx1ZUZpZWxkOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gc2V0VmFsdWVGaWVsZCgkdmFsdWVGaWVsZCkKCXsKCQkkdGhpcy0+dmFsdWVGaWVsZCA9ICR2YWx1ZUZpZWxkOwoJCXJldHVybiAkdGhpczsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIGdldE9yaWVudGF0aW9uKCkKCXsKCQlyZXR1cm4gJHRoaXMtPm9yaWVudGF0aW9uOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gc2V0T3JpZW50YXRpb24oJG9yaWVudGF0aW9uKQoJewoJCSR0aGlzLT5vcmllbnRhdGlvbiA9ICRvcmllbnRhdGlvbjsKCQlyZXR1cm4gJHRoaXM7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRWYWx1ZUF4aXNUaXRsZSgpCgl7CgkJcmV0dXJuICR0aGlzLT52YWx1ZUF4aXNUaXRsZTsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIHNldFZhbHVlQXhpc1RpdGxlKCR2YWx1ZUF4aXNUaXRsZSkKCXsKCQkkdGhpcy0+dmFsdWVBeGlzVGl0bGUgPSAkdmFsdWVBeGlzVGl0bGU7CgkJcmV0dXJuICR0aGlzOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q2F0ZWdvcnlBeGlzVGl0bGUoKQoJewoJCXJldHVybiAkdGhpcy0+Y2F0ZWdvcnlBeGlzVGl0bGU7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRDYXRlZ29yeUF4aXNUaXRsZSgkY2F0ZWdvcnlBeGlzVGl0bGUpCgl7CgkJJHRoaXMtPmNhdGVnb3J5QXhpc1RpdGxlID0gJGNhdGVnb3J5QXhpc1RpdGxlOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gZ2V0QmFsbG9vblRleHQoKQoJewoJCXJldHVybiAkdGhpcy0+YmFsbG9vblRleHQ7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBzZXRCYWxsb29uVGV4dCgkYmFsbG9vblRleHQpCgl7CgkJJHRoaXMtPmJhbGxvb25UZXh0ID0gJGJhbGxvb25UZXh0OwoJCXJldHVybiAkdGhpczsKCX0gCgoKCXB1YmxpYyBmdW5jdGlvbiBnZXRUaXRsZSgpCgl7CgkJcmV0dXJuICR0aGlzLT50aXRsZTsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIHNldFRpdGxlKCR0aXRsZSkKCXsKCQkkdGhpcy0+dGl0bGUgPSAkdGl0bGU7CgkJcmV0dXJuICR0aGlzOwoJfQoJCgkKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY3JlYXRlRnJvbVRvcFJlc3VsdHMoJGVsZW1lbnRJZGVudGlmaWVyLCAkY2F0ZWdvcnlGaWVsZCwgJHZhbHVlRmllbGQsICRudW1SZWNvcmRzLCBNTV9SZXBvcnRSZXNwb25zZSAkcmVzdWx0T2JqZWN0LCAkZGlyZWN0aXZlcz1hcnJheSgpKQoJewoJCWlmICghTU1fUmVwb3J0UmVzcG9uc2U6OmlzU3VjY2VzcygkcmVzdWx0T2JqZWN0KSkKCQl7CgkJCXJldHVybiBudWxsOwoJCX0KCQkkYmFyID0gbmV3IE1NX1JlcG9ydEJhckNoYXJ0KCRlbGVtZW50SWRlbnRpZmllciwkZGlyZWN0aXZlcyk7CgkJCgkJLy9jcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgZGF0YSBtb2RlbAoJCSRtb2RlbCA9IE1NX1JlcG9ydENhdGVnb3J5VmFsdWVNb2RlbDo6Y3JlYXRlRnJvbVRvcFJlc3VsdHMoJHJlc3VsdE9iamVjdC0+bWVzc2FnZSwgJGNhdGVnb3J5RmllbGQsICR2YWx1ZUZpZWxkLCAkbnVtUmVjb3Jkcyk7CgkJJGJhci0+c2V0TW9kZWwoJG1vZGVsKTsKCQlyZXR1cm4gJGJhcjsKCX0KCQoJCglwdWJsaWMgZnVuY3Rpb24gZ2V0Q3VycmVuY3lWYWx1ZXMoKSAKCXsKCQlyZXR1cm4gJHRoaXMtPmN1cnJlbmN5VmFsdWVzOwoJfQoJCgkKCXB1YmxpYyBmdW5jdGlvbiBzZXRDdXJyZW5jeVZhbHVlcygkdmFsdWVzQXJlQ3VycmVuY3kpIAoJewoJCSR0aGlzLT5jdXJyZW5jeVZhbHVlcyA9ICR2YWx1ZXNBcmVDdXJyZW5jeTsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIGdldExhYmVsUm90YXRpb24oKQoJewoJCXJldHVybiAkdGhpcy0+bGFiZWxSb3RhdGlvbjsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIHNldExhYmVsUm90YXRpb24oJGxhYmVsUm90YXRpb24pCgl7CgkJJHRoaXMtPmxhYmVsUm90YXRpb24gPSAkbGFiZWxSb3RhdGlvbjsKCX0KCQoJCn0K', 0, '2018-11-21 06:38:55'),
(261, 'aweberapiexception', 'LyoqCiAqIFRocm93biB3aGVuIHRoZSBBUEkgcmV0dXJucyBhbiBlcnJvci4gKEhUVFAgc3RhdHVzID49IDQwMCkKICoKICoKICogQHVzZXMgTU1fQVdlYmVyRXhjZXB0aW9uCiAqIEBwYWNrYWdlCiAqIEB2ZXJzaW9uICRpZCQKICovCmNsYXNzIE1NX0FXZWJlckFQSUV4Y2VwdGlvbiBleHRlbmRzIE1NX0FXZWJlckV4Y2VwdGlvbiB7CgoJcHVibGljICR0eXBlOwoJcHVibGljICRzdGF0dXM7CglwdWJsaWMgJG1lc3NhZ2U7CglwdWJsaWMgJGRvY3VtZW50YXRpb25fdXJsOwoJcHVibGljICR1cmw7CgoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCRlcnJvciwgJHVybCkgewoJCS8vIHJlY29yZCBzcGVjaWZpYyBkZXRhaWxzIG9mIHRoZSBBUEkgZXhjZXB0aW9uIGZvciBwcm9jZXNzaW5nCgkJJHRoaXMtPnVybCA9ICR1cmw7CgkJJHRoaXMtPnR5cGUgPSAkZXJyb3JbJ3R5cGUnXTsKCQkkdGhpcy0+c3RhdHVzID0gYXJyYXlfa2V5X2V4aXN0cygnc3RhdHVzJywgJGVycm9yKSA/ICRlcnJvclsnc3RhdHVzJ10gOiAnJzsKCQkkdGhpcy0+bWVzc2FnZSA9ICRlcnJvclsnbWVzc2FnZSddOwoJCSR0aGlzLT5kb2N1bWVudGF0aW9uX3VybCA9ICRlcnJvclsnZG9jdW1lbnRhdGlvbl91cmwnXTsKCgkJcGFyZW50OjpfX2NvbnN0cnVjdCgkdGhpcy0+bWVzc2FnZSk7Cgl9Cn0K', 0, '2018-11-21 06:38:55');

-- --------------------------------------------------------

--
-- Table structure for table `mm_core_pages`
--

CREATE TABLE `mm_core_pages` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `page_id` bigint(20) UNSIGNED DEFAULT NULL,
  `core_page_type_id` int(11) UNSIGNED NOT NULL,
  `ref_type` enum('member_type','error_type','access_tag','product') COLLATE utf8_unicode_ci DEFAULT NULL,
  `ref_id` int(11) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_core_pages`
--

INSERT INTO `mm_core_pages` (`id`, `page_id`, `core_page_type_id`, `ref_type`, `ref_id`) VALUES
(1, 5, 1, NULL, NULL),
(2, 6, 2, NULL, NULL),
(3, 7, 3, NULL, NULL),
(4, 8, 4, NULL, NULL),
(5, 10, 5, NULL, NULL),
(6, 12, 6, NULL, NULL),
(7, 15, 7, NULL, NULL),
(9, NULL, 9, NULL, NULL),
(10, 14, 10, NULL, NULL),
(11, 9, 11, NULL, NULL),
(12, 13, 12, NULL, NULL),
(13, 11, 13, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `mm_core_page_types`
--

CREATE TABLE `mm_core_page_types` (
  `id` int(11) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `visible` tinyint(4) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_core_page_types`
--

INSERT INTO `mm_core_page_types` (`id`, `name`, `visible`) VALUES
(1, 'Member Home', 1),
(2, 'Save the Sale', 1),
(3, 'Error', 1),
(4, 'Login', 1),
(5, 'Forgot Password', 1),
(6, 'Checkout', 1),
(7, 'Confirmation', 1),
(9, 'Free Confirmation', 0),
(10, 'My Account', 1),
(11, 'Logout', 1),
(12, 'Redeem Gift', 1),
(13, 'Reset Password', 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_countries`
--

CREATE TABLE `mm_countries` (
  `iso` char(2) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
  `printable_name` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
  `iso3` char(3) COLLATE utf8_unicode_ci DEFAULT NULL,
  `numcode` smallint(6) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_countries`
--

INSERT INTO `mm_countries` (`iso`, `name`, `printable_name`, `iso3`, `numcode`) VALUES
('AD', 'ANDORRA', 'Andorra', 'AND', 20),
('AE', 'UNITED ARAB EMIRATES', 'United Arab Emirates', 'ARE', 784),
('AF', 'AFGHANISTAN', 'Afghanistan', 'AFG', 4),
('AG', 'ANTIGUA AND BARBUDA', 'Antigua and Barbuda', 'ATG', 28),
('AI', 'ANGUILLA', 'Anguilla', 'AIA', 660),
('AL', 'ALBANIA', 'Albania', 'ALB', 8),
('AM', 'ARMENIA', 'Armenia', 'ARM', 51),
('AN', 'NETHERLANDS ANTILLES', 'Netherlands Antilles', 'ANT', 530),
('AO', 'ANGOLA', 'Angola', 'AGO', 24),
('AQ', 'ANTARCTICA', 'Antarctica', NULL, NULL),
('AR', 'ARGENTINA', 'Argentina', 'ARG', 32),
('AS', 'AMERICAN SAMOA', 'American Samoa', 'ASM', 16),
('AT', 'AUSTRIA', 'Austria', 'AUT', 40),
('AU', 'AUSTRALIA', 'Australia', 'AUS', 36),
('AW', 'ARUBA', 'Aruba', 'ABW', 533),
('AZ', 'AZERBAIJAN', 'Azerbaijan', 'AZE', 31),
('BA', 'BOSNIA AND HERZEGOVINA', 'Bosnia and Herzegovina', 'BIH', 70),
('BB', 'BARBADOS', 'Barbados', 'BRB', 52),
('BD', 'BANGLADESH', 'Bangladesh', 'BGD', 50),
('BE', 'BELGIUM', 'Belgium', 'BEL', 56),
('BF', 'BURKINA FASO', 'Burkina Faso', 'BFA', 854),
('BG', 'BULGARIA', 'Bulgaria', 'BGR', 100),
('BH', 'BAHRAIN', 'Bahrain', 'BHR', 48),
('BI', 'BURUNDI', 'Burundi', 'BDI', 108),
('BJ', 'BENIN', 'Benin', 'BEN', 204),
('BM', 'BERMUDA', 'Bermuda', 'BMU', 60),
('BN', 'BRUNEI DARUSSALAM', 'Brunei Darussalam', 'BRN', 96),
('BO', 'BOLIVIA', 'Bolivia', 'BOL', 68),
('BR', 'BRAZIL', 'Brazil', 'BRA', 76),
('BS', 'BAHAMAS', 'Bahamas', 'BHS', 44),
('BT', 'BHUTAN', 'Bhutan', 'BTN', 64),
('BV', 'BOUVET ISLAND', 'Bouvet Island', NULL, NULL),
('BW', 'BOTSWANA', 'Botswana', 'BWA', 72),
('BY', 'BELARUS', 'Belarus', 'BLR', 112),
('BZ', 'BELIZE', 'Belize', 'BLZ', 84),
('CA', 'CANADA', 'Canada', 'CAN', 124),
('CC', 'COCOS (KEELING) ISLANDS', 'Cocos (Keeling) Islands', NULL, NULL),
('CD', 'CONGO, THE DEMOCRATIC REPUBLIC OF THE', 'Congo, the Democratic Republic of the', 'COD', 180),
('CF', 'CENTRAL AFRICAN REPUBLIC', 'Central African Republic', 'CAF', 140),
('CG', 'CONGO', 'Congo', 'COG', 178),
('CH', 'SWITZERLAND', 'Switzerland', 'CHE', 756),
('CI', 'COTE D\'IVOIRE', 'Cote D\'Ivoire', 'CIV', 384),
('CK', 'COOK ISLANDS', 'Cook Islands', 'COK', 184),
('CL', 'CHILE', 'Chile', 'CHL', 152),
('CM', 'CAMEROON', 'Cameroon', 'CMR', 120),
('CN', 'CHINA', 'China', 'CHN', 156),
('CO', 'COLOMBIA', 'Colombia', 'COL', 170),
('CR', 'COSTA RICA', 'Costa Rica', 'CRI', 188),
('CS', 'SERBIA AND MONTENEGRO', 'Serbia and Montenegro', NULL, NULL),
('CU', 'CUBA', 'Cuba', 'CUB', 192),
('CV', 'CAPE VERDE', 'Cape Verde', 'CPV', 132),
('CX', 'CHRISTMAS ISLAND', 'Christmas Island', NULL, NULL),
('CY', 'CYPRUS', 'Cyprus', 'CYP', 196),
('CZ', 'CZECH REPUBLIC', 'Czech Republic', 'CZE', 203),
('DE', 'GERMANY', 'Germany', 'DEU', 276),
('DJ', 'DJIBOUTI', 'Djibouti', 'DJI', 262),
('DK', 'DENMARK', 'Denmark', 'DNK', 208),
('DM', 'DOMINICA', 'Dominica', 'DMA', 212),
('DO', 'DOMINICAN REPUBLIC', 'Dominican Republic', 'DOM', 214),
('DZ', 'ALGERIA', 'Algeria', 'DZA', 12),
('EC', 'ECUADOR', 'Ecuador', 'ECU', 218),
('EE', 'ESTONIA', 'Estonia', 'EST', 233),
('EG', 'EGYPT', 'Egypt', 'EGY', 818),
('EH', 'WESTERN SAHARA', 'Western Sahara', 'ESH', 732),
('ER', 'ERITREA', 'Eritrea', 'ERI', 232),
('ES', 'SPAIN', 'Spain', 'ESP', 724),
('ET', 'ETHIOPIA', 'Ethiopia', 'ETH', 231),
('FI', 'FINLAND', 'Finland', 'FIN', 246),
('FJ', 'FIJI', 'Fiji', 'FJI', 242),
('FK', 'FALKLAND ISLANDS (MALVINAS)', 'Falkland Islands (Malvinas)', 'FLK', 238),
('FM', 'MICRONESIA, FEDERATED STATES OF', 'Micronesia, Federated States of', 'FSM', 583),
('FO', 'FAROE ISLANDS', 'Faroe Islands', 'FRO', 234),
('FR', 'FRANCE', 'France', 'FRA', 250),
('GA', 'GABON', 'Gabon', 'GAB', 266),
('GB', 'UNITED KINGDOM', 'United Kingdom', 'GBR', 826),
('GD', 'GRENADA', 'Grenada', 'GRD', 308),
('GE', 'GEORGIA', 'Georgia', 'GEO', 268),
('GF', 'FRENCH GUIANA', 'French Guiana', 'GUF', 254),
('GH', 'GHANA', 'Ghana', 'GHA', 288),
('GI', 'GIBRALTAR', 'Gibraltar', 'GIB', 292),
('GL', 'GREENLAND', 'Greenland', 'GRL', 304),
('GM', 'GAMBIA', 'Gambia', 'GMB', 270),
('GN', 'GUINEA', 'Guinea', 'GIN', 324),
('GP', 'GUADELOUPE', 'Guadeloupe', 'GLP', 312),
('GQ', 'EQUATORIAL GUINEA', 'Equatorial Guinea', 'GNQ', 226),
('GR', 'GREECE', 'Greece', 'GRC', 300),
('GS', 'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS', 'South Georgia and the South Sandwich Islands', NULL, NULL),
('GT', 'GUATEMALA', 'Guatemala', 'GTM', 320),
('GU', 'GUAM', 'Guam', 'GUM', 316),
('GW', 'GUINEA-BISSAU', 'Guinea-Bissau', 'GNB', 624),
('GY', 'GUYANA', 'Guyana', 'GUY', 328),
('HK', 'HONG KONG', 'Hong Kong', 'HKG', 344),
('HM', 'HEARD ISLAND AND MCDONALD ISLANDS', 'Heard Island and Mcdonald Islands', NULL, NULL),
('HN', 'HONDURAS', 'Honduras', 'HND', 340),
('HR', 'CROATIA', 'Croatia', 'HRV', 191),
('HT', 'HAITI', 'Haiti', 'HTI', 332),
('HU', 'HUNGARY', 'Hungary', 'HUN', 348),
('ID', 'INDONESIA', 'Indonesia', 'IDN', 360),
('IE', 'IRELAND', 'Ireland', 'IRL', 372),
('IL', 'ISRAEL', 'Israel', 'ISR', 376),
('IN', 'INDIA', 'India', 'IND', 356),
('IO', 'BRITISH INDIAN OCEAN TERRITORY', 'British Indian Ocean Territory', NULL, NULL),
('IQ', 'IRAQ', 'Iraq', 'IRQ', 368),
('IR', 'IRAN, ISLAMIC REPUBLIC OF', 'Iran, Islamic Republic of', 'IRN', 364),
('IS', 'ICELAND', 'Iceland', 'ISL', 352),
('IT', 'ITALY', 'Italy', 'ITA', 380),
('JM', 'JAMAICA', 'Jamaica', 'JAM', 388),
('JO', 'JORDAN', 'Jordan', 'JOR', 400),
('JP', 'JAPAN', 'Japan', 'JPN', 392),
('KE', 'KENYA', 'Kenya', 'KEN', 404),
('KG', 'KYRGYZSTAN', 'Kyrgyzstan', 'KGZ', 417),
('KH', 'CAMBODIA', 'Cambodia', 'KHM', 116),
('KI', 'KIRIBATI', 'Kiribati', 'KIR', 296),
('KM', 'COMOROS', 'Comoros', 'COM', 174),
('KN', 'SAINT KITTS AND NEVIS', 'Saint Kitts and Nevis', 'KNA', 659),
('KP', 'KOREA, DEMOCRATIC PEOPLE\'S REPUBLIC OF', 'Korea, Democratic People\'s Republic of', 'PRK', 408),
('KR', 'KOREA, REPUBLIC OF', 'Korea, Republic of', 'KOR', 410),
('KW', 'KUWAIT', 'Kuwait', 'KWT', 414),
('KY', 'CAYMAN ISLANDS', 'Cayman Islands', 'CYM', 136),
('KZ', 'KAZAKHSTAN', 'Kazakhstan', 'KAZ', 398),
('LA', 'LAO PEOPLE\'S DEMOCRATIC REPUBLIC', 'Lao People\'s Democratic Republic', 'LAO', 418),
('LB', 'LEBANON', 'Lebanon', 'LBN', 422),
('LC', 'SAINT LUCIA', 'Saint Lucia', 'LCA', 662),
('LI', 'LIECHTENSTEIN', 'Liechtenstein', 'LIE', 438),
('LK', 'SRI LANKA', 'Sri Lanka', 'LKA', 144),
('LR', 'LIBERIA', 'Liberia', 'LBR', 430),
('LS', 'LESOTHO', 'Lesotho', 'LSO', 426),
('LT', 'LITHUANIA', 'Lithuania', 'LTU', 440),
('LU', 'LUXEMBOURG', 'Luxembourg', 'LUX', 442),
('LV', 'LATVIA', 'Latvia', 'LVA', 428),
('LY', 'LIBYAN ARAB JAMAHIRIYA', 'Libyan Arab Jamahiriya', 'LBY', 434),
('MA', 'MOROCCO', 'Morocco', 'MAR', 504),
('MC', 'MONACO', 'Monaco', 'MCO', 492),
('MD', 'MOLDOVA, REPUBLIC OF', 'Moldova, Republic of', 'MDA', 498),
('MG', 'MADAGASCAR', 'Madagascar', 'MDG', 450),
('MH', 'MARSHALL ISLANDS', 'Marshall Islands', 'MHL', 584),
('MK', 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF', 'Macedonia, the Former Yugoslav Republic of', 'MKD', 807),
('ML', 'MALI', 'Mali', 'MLI', 466),
('MM', 'MYANMAR', 'Myanmar', 'MMR', 104),
('MN', 'MONGOLIA', 'Mongolia', 'MNG', 496),
('MO', 'MACAO', 'Macao', 'MAC', 446),
('MP', 'NORTHERN MARIANA ISLANDS', 'Northern Mariana Islands', 'MNP', 580),
('MQ', 'MARTINIQUE', 'Martinique', 'MTQ', 474),
('MR', 'MAURITANIA', 'Mauritania', 'MRT', 478),
('MS', 'MONTSERRAT', 'Montserrat', 'MSR', 500),
('MT', 'MALTA', 'Malta', 'MLT', 470),
('MU', 'MAURITIUS', 'Mauritius', 'MUS', 480),
('MV', 'MALDIVES', 'Maldives', 'MDV', 462),
('MW', 'MALAWI', 'Malawi', 'MWI', 454),
('MX', 'MEXICO', 'Mexico', 'MEX', 484),
('MY', 'MALAYSIA', 'Malaysia', 'MYS', 458),
('MZ', 'MOZAMBIQUE', 'Mozambique', 'MOZ', 508),
('NA', 'NAMIBIA', 'Namibia', 'NAM', 516),
('NC', 'NEW CALEDONIA', 'New Caledonia', 'NCL', 540),
('NE', 'NIGER', 'Niger', 'NER', 562),
('NF', 'NORFOLK ISLAND', 'Norfolk Island', 'NFK', 574),
('NG', 'NIGERIA', 'Nigeria', 'NGA', 566),
('NI', 'NICARAGUA', 'Nicaragua', 'NIC', 558),
('NL', 'NETHERLANDS', 'Netherlands', 'NLD', 528),
('NO', 'NORWAY', 'Norway', 'NOR', 578),
('NP', 'NEPAL', 'Nepal', 'NPL', 524),
('NR', 'NAURU', 'Nauru', 'NRU', 520),
('NU', 'NIUE', 'Niue', 'NIU', 570),
('NZ', 'NEW ZEALAND', 'New Zealand', 'NZL', 554),
('OM', 'OMAN', 'Oman', 'OMN', 512),
('PA', 'PANAMA', 'Panama', 'PAN', 591),
('PE', 'PERU', 'Peru', 'PER', 604),
('PF', 'FRENCH POLYNESIA', 'French Polynesia', 'PYF', 258),
('PG', 'PAPUA NEW GUINEA', 'Papua New Guinea', 'PNG', 598),
('PH', 'PHILIPPINES', 'Philippines', 'PHL', 608),
('PK', 'PAKISTAN', 'Pakistan', 'PAK', 586),
('PL', 'POLAND', 'Poland', 'POL', 616),
('PM', 'SAINT PIERRE AND MIQUELON', 'Saint Pierre and Miquelon', 'SPM', 666),
('PN', 'PITCAIRN', 'Pitcairn', 'PCN', 612),
('PR', 'PUERTO RICO', 'Puerto Rico', 'PRI', 630),
('PS', 'PALESTINIAN TERRITORY, OCCUPIED', 'Palestinian Territory, Occupied', NULL, NULL),
('PT', 'PORTUGAL', 'Portugal', 'PRT', 620),
('PW', 'PALAU', 'Palau', 'PLW', 585),
('PY', 'PARAGUAY', 'Paraguay', 'PRY', 600),
('QA', 'QATAR', 'Qatar', 'QAT', 634),
('RE', 'REUNION', 'Reunion', 'REU', 638),
('RO', 'ROMANIA', 'Romania', 'ROM', 642),
('RU', 'RUSSIAN FEDERATION', 'Russian Federation', 'RUS', 643),
('RW', 'RWANDA', 'Rwanda', 'RWA', 646),
('SA', 'SAUDI ARABIA', 'Saudi Arabia', 'SAU', 682),
('SB', 'SOLOMON ISLANDS', 'Solomon Islands', 'SLB', 90),
('SC', 'SEYCHELLES', 'Seychelles', 'SYC', 690),
('SD', 'SUDAN', 'Sudan', 'SDN', 736),
('SE', 'SWEDEN', 'Sweden', 'SWE', 752),
('SG', 'SINGAPORE', 'Singapore', 'SGP', 702),
('SH', 'SAINT HELENA', 'Saint Helena', 'SHN', 654),
('SI', 'SLOVENIA', 'Slovenia', 'SVN', 705),
('SJ', 'SVALBARD AND JAN MAYEN', 'Svalbard and Jan Mayen', 'SJM', 744),
('SK', 'SLOVAKIA', 'Slovakia', 'SVK', 703),
('SL', 'SIERRA LEONE', 'Sierra Leone', 'SLE', 694),
('SM', 'SAN MARINO', 'San Marino', 'SMR', 674),
('SN', 'SENEGAL', 'Senegal', 'SEN', 686),
('SO', 'SOMALIA', 'Somalia', 'SOM', 706),
('SR', 'SURINAME', 'Suriname', 'SUR', 740),
('ST', 'SAO TOME AND PRINCIPE', 'Sao Tome and Principe', 'STP', 678),
('SV', 'EL SALVADOR', 'El Salvador', 'SLV', 222),
('SY', 'SYRIAN ARAB REPUBLIC', 'Syrian Arab Republic', 'SYR', 760),
('SZ', 'SWAZILAND', 'Swaziland', 'SWZ', 748),
('TC', 'TURKS AND CAICOS ISLANDS', 'Turks and Caicos Islands', 'TCA', 796),
('TD', 'CHAD', 'Chad', 'TCD', 148),
('TF', 'FRENCH SOUTHERN TERRITORIES', 'French Southern Territories', NULL, NULL),
('TG', 'TOGO', 'Togo', 'TGO', 768),
('TH', 'THAILAND', 'Thailand', 'THA', 764),
('TJ', 'TAJIKISTAN', 'Tajikistan', 'TJK', 762),
('TK', 'TOKELAU', 'Tokelau', 'TKL', 772),
('TL', 'TIMOR-LESTE', 'Timor-Leste', NULL, NULL),
('TM', 'TURKMENISTAN', 'Turkmenistan', 'TKM', 795),
('TN', 'TUNISIA', 'Tunisia', 'TUN', 788),
('TO', 'TONGA', 'Tonga', 'TON', 776),
('TR', 'TURKEY', 'Turkey', 'TUR', 792),
('TT', 'TRINIDAD AND TOBAGO', 'Trinidad and Tobago', 'TTO', 780),
('TV', 'TUVALU', 'Tuvalu', 'TUV', 798),
('TW', 'TAIWAN', 'Taiwan', 'TWN', 158),
('TZ', 'TANZANIA, UNITED REPUBLIC OF', 'Tanzania, United Republic of', 'TZA', 834),
('UA', 'UKRAINE', 'Ukraine', 'UKR', 804),
('UG', 'UGANDA', 'Uganda', 'UGA', 800),
('UM', 'UNITED STATES MINOR OUTLYING ISLANDS', 'United States Minor Outlying Islands', 'UMI', 581),
('US', 'UNITED STATES', 'United States', 'USA', 840),
('UY', 'URUGUAY', 'Uruguay', 'URY', 858),
('UZ', 'UZBEKISTAN', 'Uzbekistan', 'UZB', 860),
('VA', 'HOLY SEE (VATICAN CITY STATE)', 'Holy See (Vatican City State)', 'VAT', 336),
('VC', 'SAINT VINCENT AND THE GRENADINES', 'Saint Vincent and the Grenadines', 'VCT', 670),
('VE', 'VENEZUELA', 'Venezuela', 'VEN', 862),
('VG', 'VIRGIN ISLANDS, BRITISH', 'Virgin Islands, British', 'VGB', 92),
('VI', 'VIRGIN ISLANDS, U.S.', 'Virgin Islands, U.s.', 'VIR', 850),
('VN', 'VIET NAM', 'Viet Nam', 'VNM', 704),
('VU', 'VANUATU', 'Vanuatu', 'VUT', 548),
('WF', 'WALLIS AND FUTUNA', 'Wallis and Futuna', 'WLF', 876),
('WS', 'SAMOA', 'Samoa', 'WSM', 882),
('YE', 'YEMEN', 'Yemen', 'YEM', 887),
('YT', 'MAYOTTE', 'Mayotte', NULL, NULL),
('ZA', 'SOUTH AFRICA', 'South Africa', 'ZAF', 710),
('ZM', 'ZAMBIA', 'Zambia', 'ZMB', 894),
('ZW', 'ZIMBABWE', 'Zimbabwe', 'ZWE', 716);

-- --------------------------------------------------------

--
-- Table structure for table `mm_country_subdivisions`
--

CREATE TABLE `mm_country_subdivisions` (
  `iso` char(2) COLLATE utf8_unicode_ci NOT NULL,
  `code` varchar(10) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(80) COLLATE utf8_unicode_ci NOT NULL,
  `type` varchar(55) COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_country_subdivisions`
--

INSERT INTO `mm_country_subdivisions` (`iso`, `code`, `name`, `type`) VALUES
('AD', '03', 'Encamp', 'Parish'),
('AD', '04', 'La Massana', 'Parish'),
('AD', '05', 'Ordino', 'Parish'),
('AD', '06', 'Sant Julià de Lòria', 'Parish'),
('AD', '07', 'Andorra la Vella', 'Parish'),
('AD', '08', 'Escaldes-Engordany', 'Parish'),
('AE', 'AJ', '\'Ajman', 'Emirate'),
('AE', 'AZ', 'Abu Z¸aby [Abu Dhabi]', 'Emirate'),
('AE', 'DU', 'Dubayy [Dubai]', 'Emirate'),
('AE', 'FU', 'Al Fujayrah', 'Emirate'),
('AE', 'RK', 'Ras al Khaymah', 'Emirate'),
('AE', 'SH', 'Ash Shariqah [Sharjah]', 'Emirate'),
('AE', 'UQ', 'Umm al Qaywayn', 'Emirate'),
('AF', 'BAL', 'Balkh', 'Province'),
('AF', 'BAM', 'Bamyan', 'Province'),
('AF', 'BDG', 'Badghis', 'Province'),
('AF', 'BDS', 'Badakhshan', 'Province'),
('AF', 'BGL', 'Baghlan', 'Province'),
('AF', 'DAY', 'Daykundi', 'Province'),
('AF', 'FRA', 'Farah', 'Province'),
('AF', 'FYB', 'Faryab', 'Province'),
('AF', 'GHA', 'Ghazni', 'Province'),
('AF', 'GHO', 'Ghor', 'Province'),
('AF', 'HEL', 'Helmand', 'Province'),
('AF', 'HER', 'Herat', 'Province'),
('AF', 'JOW', 'Jowzjan', 'Province'),
('AF', 'KAB', 'Kabul [Kabol]', 'Province'),
('AF', 'KAN', 'Kandahar', 'Province'),
('AF', 'KAP', 'Kapisa', 'Province'),
('AF', 'KDZ', 'Kondoz [Kunduz]', 'Province'),
('AF', 'KHO', 'Khost', 'Province'),
('AF', 'KNR', 'Konar [Kunar]', 'Province'),
('AF', 'LAG', 'Laghman', 'Province'),
('AF', 'LOG', 'Logar', 'Province'),
('AF', 'NAN', 'Nangrahar [Nangarhar]', 'Province'),
('AF', 'NIM', 'Nimroz', 'Province'),
('AF', 'NUR', 'Nuristan', 'Province'),
('AF', 'PAN', 'Panjshayr', 'Province'),
('AF', 'PAR', 'Parwan', 'Province'),
('AF', 'PIA', 'Paktia', 'Province'),
('AF', 'PKA', 'Paktika', 'Province'),
('AF', 'SAM', 'Samangan', 'Province'),
('AF', 'SAR', 'Sar-e Pul', 'Province'),
('AF', 'TAK', 'Takhar', 'Province'),
('AF', 'URU', 'Oruzgan [Uruzgan]', 'Province'),
('AF', 'WAR', 'Wardak [Wardag]', 'Province'),
('AF', 'ZAB', 'Zabol [Zabul]', 'Province'),
('AG', '03', 'Saint George', 'Parish'),
('AG', '04', 'Saint Johns', 'Parish'),
('AG', '05', 'Saint Mary', 'Parish'),
('AG', '06', 'Saint Paul', 'Parish'),
('AG', '07', 'Saint Peter', 'Parish'),
('AG', '08', 'Saint Philip', 'Parish'),
('AG', '10', 'Barbuda', 'Dependency'),
('AG', '11', 'Redonda', ''),
('AL', 'BR', 'Berat', 'District'),
('AL', 'BU', 'Bulqizë', 'District'),
('AL', 'DI', 'Dibër', 'District'),
('AL', 'DL', 'Delvinë', 'District'),
('AL', 'DR', 'Durrës', 'District'),
('AL', 'DV', 'Devoll', 'District'),
('AL', 'EL', 'Elbasan', 'District'),
('AL', 'ER', 'Kolonjë', 'District'),
('AL', 'FR', 'Fier', 'District'),
('AL', 'GJ', 'Gjirokastër', 'District'),
('AL', 'GR', 'Gramsh', 'District'),
('AL', 'HA', 'Has', 'District'),
('AL', 'KA', 'Kavajë', 'District'),
('AL', 'KB', 'Kurbin', 'District'),
('AL', 'KC', 'Kuçovë', 'District'),
('AL', 'KO', 'Korçë', 'District'),
('AL', 'KR', 'Krujë', 'District'),
('AL', 'KU', 'Kukës', 'District'),
('AL', 'LB', 'Librazhd', 'District'),
('AL', 'LE', 'Lezhë', 'District'),
('AL', 'LU', 'Lushnjë', 'District'),
('AL', 'MK', 'Mallakastër', 'District'),
('AL', 'MM', 'Malësi e Madhe', 'District'),
('AL', 'MR', 'Mirditë', 'District'),
('AL', 'MT', 'Mat', 'District'),
('AL', 'PG', 'Pogradec', 'District'),
('AL', 'PQ', 'Peqin', 'District'),
('AL', 'PR', 'Përmet', 'District'),
('AL', 'PU', 'Pukë', 'District'),
('AL', 'SH', 'Shkodër', 'District'),
('AL', 'SK', 'Skrapar', 'District'),
('AL', 'SR', 'Sarandë', 'District'),
('AL', 'TE', 'Tepelenë', 'District'),
('AL', 'TP', 'Tropojë', 'District'),
('AL', 'TR', 'Tiranë', 'District'),
('AL', 'VL', 'Vlorë', 'District'),
('AM', 'AG', 'Aragac?otn', 'Region'),
('AM', 'AR', 'Ararat', 'Region'),
('AM', 'AV', 'Armavir', 'Region'),
('AM', 'ER', 'Erevan', 'City'),
('AM', 'GR', 'Gegark\'unik\'', 'Region'),
('AM', 'KT', 'Kotayk\'', 'Region'),
('AM', 'LO', 'Lo?y', 'Region'),
('AM', 'SH', 'irak', 'Region'),
('AM', 'SU', 'Syunik\'', 'Region'),
('AM', 'TV', 'Tavu', 'Region'),
('AM', 'VD', 'Vayoc Jor', 'Region'),
('AO', 'BGO', 'Bengo', 'Province'),
('AO', 'BGU', 'Benguela', 'Province'),
('AO', 'BIE', 'Bié', 'Province'),
('AO', 'CAB', 'Cabinda', 'Province'),
('AO', 'CCU', 'Cuando-Cubango', 'Province'),
('AO', 'CNN', 'Cunene', 'Province'),
('AO', 'CNO', 'Cuanza Norte', 'Province'),
('AO', 'CUS', 'Cuanza Sul', 'Province'),
('AO', 'HUA', 'Huambo', 'Province'),
('AO', 'HUI', 'Huíla', 'Province'),
('AO', 'LNO', 'Lunda Norte', 'Province'),
('AO', 'LSU', 'Lunda Sul', 'Province'),
('AO', 'LUA', 'Luanda', 'Province'),
('AO', 'MAL', 'Malange', 'Province'),
('AO', 'MOX', 'Moxico', 'Province'),
('AO', 'NAM', 'Namibe', 'Province'),
('AO', 'UIG', 'Uíge', 'Province'),
('AO', 'ZAI', 'Zaire', 'Province'),
('AR', 'A', 'Salta', 'Province'),
('AR', 'B', 'Buenos Aires', 'Province'),
('AR', 'C', 'Ciudad Autónoma de Buenos Aires', 'City'),
('AR', 'D', 'San Luis', 'Province'),
('AR', 'E', 'Entre Ríos', 'Province'),
('AR', 'F', 'La Rioja', 'Province'),
('AR', 'G', 'Santiago del Estero', 'Province'),
('AR', 'H', 'Chaco', 'Province'),
('AR', 'J', 'San Juan', 'Province'),
('AR', 'K', 'Catamarca', 'Province'),
('AR', 'L', 'La Pampa', 'Province'),
('AR', 'M', 'Mendoza', 'Province'),
('AR', 'N', 'Misiones', 'Province'),
('AR', 'P', 'Formosa', 'Province'),
('AR', 'Q', 'Neuquén', 'Province'),
('AR', 'R', 'Río Negro', 'Province'),
('AR', 'S', 'Santa Fe', 'Province'),
('AR', 'T', 'Tucumán', 'Province'),
('AR', 'U', 'Chubut', 'Province'),
('AR', 'V', 'Tierra del Fuego', 'Province'),
('AR', 'W', 'Corrientes', 'Province'),
('AR', 'X', 'Córdoba', 'Province'),
('AR', 'Y', 'Jujuy', 'Province'),
('AR', 'Z', 'Santa Cruz', 'Province'),
('AT', '1', 'Burgenland', 'Bundesland'),
('AT', '2', 'Kärnten', 'Bundesland'),
('AT', '3', 'Niederösterreich', 'Bundesland'),
('AT', '4', 'Oberösterreich', 'Bundesland'),
('AT', '5', 'Salzburg', 'Bundesland'),
('AT', '6', 'Steiermark', 'Bundesland'),
('AT', '7', 'Tirol', 'Bundesland'),
('AT', '8', 'Vorarlberg', 'Bundesland'),
('AT', '9', 'Wien', 'Bundesland'),
('AU', 'ACT', 'Australian Capital Territory', 'Territory'),
('AU', 'NSW', 'New South Wales', 'State'),
('AU', 'NT', 'Northern Territory', 'Territory'),
('AU', 'QLD', 'Queensland', 'State'),
('AU', 'SA', 'South Australia', 'State'),
('AU', 'TAS', 'Tasmania', 'State'),
('AU', 'VIC', 'Victoria', 'State'),
('AU', 'WA', 'Western Australia', 'State'),
('AZ', 'ABS', 'Abseron', 'Rayon'),
('AZ', 'AGA', 'Agstafa', 'Rayon'),
('AZ', 'AGC', 'Agcab?di', 'Rayon'),
('AZ', 'AGM', 'Agdam', 'Rayon'),
('AZ', 'AGS', 'Agdas', 'Rayon'),
('AZ', 'AGU', 'Agsu', 'Rayon'),
('AZ', 'AST', 'Astara', 'Rayon'),
('AZ', 'BA', 'Baki', 'City'),
('AZ', 'BAB', 'Bab?k', 'Rayon'),
('AZ', 'BAL', 'Balak?n', 'Rayon'),
('AZ', 'BAR', 'B?rd?', 'Rayon'),
('AZ', 'BEY', 'Beyl?qan', 'Rayon'),
('AZ', 'BIL', 'Bil?suvar', 'Rayon'),
('AZ', 'CAB', 'C?brayil', 'Rayon'),
('AZ', 'CAL', 'C?lilabad', 'Rayon'),
('AZ', 'CUL', 'Culfa', 'Rayon'),
('AZ', 'DAS', 'Dask?s?n', 'Rayon'),
('AZ', 'FUZ', 'Füzuli', 'Rayon'),
('AZ', 'GA', 'G?nc?', 'City'),
('AZ', 'GAD', 'G?d?b?y', 'Rayon'),
('AZ', 'GOR', 'Goranboy', 'Rayon'),
('AZ', 'GOY', 'Göyçay', 'Rayon'),
('AZ', 'GYG', 'Göygöl', 'Rayon'),
('AZ', 'HAC', 'Haciqabul', 'Rayon'),
('AZ', 'IMI', 'Imisli', 'Rayon'),
('AZ', 'ISM', 'Ismayilli', 'Rayon'),
('AZ', 'KAL', 'K?lb?c?r', 'Rayon'),
('AZ', 'KAN', 'K?ng?rli', 'Rayon'),
('AZ', 'KUR', 'Kürd?mir', 'Rayon'),
('AZ', 'LA', 'L?nk?ran', 'City'),
('AZ', 'LAC', 'Laçin', 'Rayon'),
('AZ', 'LAN', 'L?nk?ran', 'Rayon'),
('AZ', 'LER', 'Lerik', 'Rayon'),
('AZ', 'MAS', 'Masalli', 'Rayon'),
('AZ', 'MI', 'Ming?çevir', 'City'),
('AZ', 'NA', 'Naftalan', 'City'),
('AZ', 'NEF', 'Neftçala', 'Rayon'),
('AZ', 'NV', 'Naxçývan', 'Municipality'),
('AZ', 'NX', 'Naxçivan', 'Autonomous republic'),
('AZ', 'OGU', 'Oguz', 'Rayon'),
('AZ', 'ORD', 'Ordubad', 'Rayon'),
('AZ', 'QAB', 'Q?b?l?', 'Rayon'),
('AZ', 'QAX', 'Qax', 'Rayon'),
('AZ', 'QAZ', 'Qazax', 'Rayon'),
('AZ', 'QBA', 'Quba', 'Rayon'),
('AZ', 'QBI', 'Qubadli', 'Rayon'),
('AZ', 'QOB', 'Qobustan', 'Rayon'),
('AZ', 'QUS', 'Qusar', 'Rayon'),
('AZ', 'SA', 'S?ki', 'City'),
('AZ', 'SAB', 'Sabirabad', 'Rayon'),
('AZ', 'SAD', 'S?d?r?k', 'Rayon'),
('AZ', 'SAH', 'Sahbuz', 'Rayon'),
('AZ', 'SAK', 'S?ki', 'Rayon'),
('AZ', 'SAL', 'Salyan', 'Rayon'),
('AZ', 'SAR', 'S?rur', 'Rayon'),
('AZ', 'SAT', 'Saatli', 'Rayon'),
('AZ', 'SBN', 'Sabran', 'Rayon'),
('AZ', 'SIY', 'Siy?z?n', 'Rayon'),
('AZ', 'SKR', 'S?mkir', 'Rayon'),
('AZ', 'SM', 'Sumqayit', 'City'),
('AZ', 'SMI', 'Samaxi', 'Rayon'),
('AZ', 'SMX', 'Samux', 'Rayon'),
('AZ', 'SR', 'Sirvan', 'Municipality'),
('AZ', 'SUS', 'Susa', 'Rayon'),
('AZ', 'TAR', 'T?rt?r', 'Rayon'),
('AZ', 'TOV', 'Tovuz', 'Rayon'),
('AZ', 'UCA', 'Ucar', 'Rayon'),
('AZ', 'XA', 'Xank?ndi', 'City'),
('AZ', 'XAC', 'Xaçmaz', 'Rayon'),
('AZ', 'XCI', 'Xocali', 'Rayon'),
('AZ', 'XIZ', 'Xizi', 'Rayon'),
('AZ', 'XVD', 'Xocav?nd', 'Rayon'),
('AZ', 'YAR', 'Yardimli', 'Rayon'),
('AZ', 'YE', 'Yevlax', 'City'),
('AZ', 'YEV', 'Yevlax', 'Rayon'),
('AZ', 'ZAN', 'Z?ngilan', 'Rayon'),
('AZ', 'ZAQ', 'Zaqatala', 'Rayon'),
('AZ', 'ZAR', 'Z?rdab', 'Rayon'),
('BA', '01', 'Unsko-Sanski Kanton', 'Kanton'),
('BA', '02', 'Posavski Kanton', 'Kanton'),
('BA', '03', 'Tuzlanski Kanton', 'Kanton'),
('BA', '04', 'Zenicko-Dobojski Kanton', 'Kanton'),
('BA', '05', 'Bosansko-Podrinjski Kanton', 'Kanton'),
('BA', '06', 'Srednjobosanski Kanton', 'Kanton'),
('BA', '07', 'Hercegovacko-Neretvanski Kanton', 'Kanton'),
('BA', '08', 'Zapadno-Hercegovacki Kanton', 'Kanton'),
('BA', '09', 'Kanton Sarajevo', 'Kanton'),
('BA', '10', 'Hercegovacko-Bosanski Kanton', 'Kanton'),
('BA', 'BRC', 'Brcko distrikt', 'Entity'),
('BA', 'SRP', 'Republika Srpska', 'Entity'),
('BB', '01', 'Christ Church', 'Parish'),
('BB', '02', 'Saint Andrew', 'Parish'),
('BB', '03', 'Saint George', 'Parish'),
('BB', '04', 'Saint James', 'Parish'),
('BB', '05', 'Saint John', 'Parish'),
('BB', '06', 'Saint Joseph', 'Parish'),
('BB', '07', 'Saint Lucy', 'Parish'),
('BB', '08', 'Saint Michael', 'Parish'),
('BB', '09', 'Saint Peter', 'Parish'),
('BB', '10', 'Saint Philip', 'Parish'),
('BB', '11', 'Saint Thomas', 'Parish'),
('BD', '01', 'Bandarban zila', 'District'),
('BD', '02', 'Barguna zila', 'District'),
('BD', '03', 'Bogra zila', 'District'),
('BD', '04', 'Brahmanbaria zila', 'District'),
('BD', '05', 'Bagerhat zila', 'District'),
('BD', '06', 'Barisal zila', 'District'),
('BD', '07', 'Bhola zila', 'District'),
('BD', '08', 'Comilla zila', 'District'),
('BD', '09', 'Chandpur zila', 'District'),
('BD', '10', 'Chittagong zila', 'District'),
('BD', '11', 'Cox\'s Bazar zila', 'District'),
('BD', '12', 'Chuadanga zila', 'District'),
('BD', '13', 'Dhaka zila', 'District'),
('BD', '14', 'Dinajpur zila', 'District'),
('BD', '15', 'Faridpur zila', 'District'),
('BD', '16', 'Feni zila', 'District'),
('BD', '17', 'Gopalganj zila', 'District'),
('BD', '18', 'Gazipur zila', 'District'),
('BD', '19', 'Gaibandha zila', 'District'),
('BD', '20', 'Habiganj zila', 'District'),
('BD', '21', 'Jamalpur zila', 'District'),
('BD', '22', 'Jessore zila', 'District'),
('BD', '23', 'Jhenaidah zila', 'District'),
('BD', '24', 'Jaipurhat zila', 'District'),
('BD', '25', 'Jhalakati zila', 'District'),
('BD', '26', 'Kishoreganj zila', 'District'),
('BD', '27', 'Khulna zila', 'District'),
('BD', '28', 'Kurigram zila', 'District'),
('BD', '29', 'Khagrachari zila', 'District'),
('BD', '30', 'Kushtia zila', 'District'),
('BD', '31', 'Lakshmipur zila', 'District'),
('BD', '32', 'Lalmonirhat zila', 'District'),
('BD', '33', 'Manikganj zila', 'District'),
('BD', '34', 'Mymensingh zila', 'District'),
('BD', '35', 'Munshiganj zila', 'District'),
('BD', '36', 'Madaripur zila', 'District'),
('BD', '37', 'Magura zila', 'District'),
('BD', '38', 'Moulvibazar zila', 'District'),
('BD', '39', 'Meherpur zila', 'District'),
('BD', '40', 'Narayanganj zila', 'District'),
('BD', '41', 'Netrakona zila', 'District'),
('BD', '42', 'Narsingdi zila', 'District'),
('BD', '43', 'Narail zila', 'District'),
('BD', '44', 'Natore zila', 'District'),
('BD', '45', 'Nawabganj zila', 'District'),
('BD', '46', 'Nilphamari zila', 'District'),
('BD', '47', 'Noakhali zila', 'District'),
('BD', '48', 'Naogaon zila', 'District'),
('BD', '49', 'Pabna zila', 'District'),
('BD', '50', 'Pirojpur zila', 'District'),
('BD', '51', 'Patuakhali zila', 'District'),
('BD', '52', 'Panchagarh zila', 'District'),
('BD', '53', 'Rajbari zila', 'District'),
('BD', '54', 'Rajshahi zila', 'District'),
('BD', '55', 'Rangpur zila', 'District'),
('BD', '56', 'Rangamati zila', 'District'),
('BD', '57', 'Sherpur zila', 'District'),
('BD', '58', 'Satkhira zila', 'District'),
('BD', '59', 'Sirajganj zila', 'District'),
('BD', '60', 'Sylhet zila', 'District'),
('BD', '61', 'Sunamganj zila', 'District'),
('BD', '62', 'Shariatpur zila', 'District'),
('BD', '63', 'Tangail zila', 'District'),
('BD', '64', 'Thakurgaon zila', 'District'),
('BE', 'BRU', 'Bruxelles-Capitale, Région de (fr), Brussels Hoofdstedelijk Gewest (nl)', 'Region'),
('BE', 'VAN', 'Antwerpen   (VLG)', 'Province'),
('BE', 'VBR', 'Vlaams Brabant (VLG)', 'Province'),
('BE', 'VLG', 'Vlaamse Gewest (nl)', 'Region'),
('BE', 'VLI', 'Limburg (VLG)', 'Province'),
('BE', 'VOV', 'Oost-Vlaanderen (VLG)', 'Province'),
('BE', 'VWV', 'West-Vlaanderen (VLG)', 'Province'),
('BE', 'WAL', 'Wallonne, Région (fr)', 'Region'),
('BE', 'WBR', 'Brabant Wallon (WAL)', 'Province'),
('BE', 'WHT', 'Hainaut (WAL)', 'Province'),
('BE', 'WLG', 'Liège (WAL)', 'Province'),
('BE', 'WLX', 'Luxembourg (WAL)', 'Province'),
('BE', 'WNA', 'Namur (WAL)', 'Province'),
('BF', 'BAL', 'Balé', 'Province'),
('BF', 'BAM', 'Bam', 'Province'),
('BF', 'BAN', 'Banwa', 'Province'),
('BF', 'BAZ', 'Bazégaga', 'Province'),
('BF', 'BGR', 'Bougouriba', 'Province'),
('BF', 'BLG', 'Boulgou', 'Province'),
('BF', 'BLK', 'Boulkiemdé', 'Province'),
('BF', 'COM', 'Comoé', 'Province'),
('BF', 'GAN', 'Ganzourgou', 'Province'),
('BF', 'GNA', 'Gnagna', 'Province'),
('BF', 'GOU', 'Gourma', 'Province'),
('BF', 'HOU', 'Houet', 'Province'),
('BF', 'IOB', 'Ioba', 'Province'),
('BF', 'KAD', 'Kadiogo', 'Province'),
('BF', 'KEN', 'Kénédougou', 'Province'),
('BF', 'KMD', 'Komondjari', 'Province'),
('BF', 'KMP', 'Kompienga', 'Province'),
('BF', 'KOP', 'Koulpélogo', 'Province'),
('BF', 'KOS', 'Kossi', 'Province'),
('BF', 'KOT', 'Kouritenga', 'Province'),
('BF', 'KOW', 'Kourwéogo', 'Province'),
('BF', 'LER', 'Léraba', 'Province'),
('BF', 'LOR', 'Loroum', 'Province'),
('BF', 'MOU', 'Mouhoun', 'Province'),
('BF', 'NAM', 'Namentenga', 'Province'),
('BF', 'NAO', 'Nahouri', 'Province'),
('BF', 'NAY', 'Nayala', 'Province'),
('BF', 'NOU', 'Noumbiel', 'Province'),
('BF', 'OUB', 'Oubritenga', 'Province'),
('BF', 'OUD', 'Oudalan', 'Province'),
('BF', 'PAS', 'Passoré', 'Province'),
('BF', 'PON', 'Poni', 'Province'),
('BF', 'SEN', 'Séno', 'Province'),
('BF', 'SIS', 'Sissili', 'Province'),
('BF', 'SMT', 'Sanmatenga', 'Province'),
('BF', 'SNG', 'Sanguié', 'Province'),
('BF', 'SOM', 'Soum', 'Province'),
('BF', 'SOR', 'Sourou', 'Province'),
('BF', 'TAP', 'Tapoa', 'Province'),
('BF', 'TUI', 'Tui', 'Province'),
('BF', 'YAG', 'Yagha', 'Province'),
('BF', 'YAT', 'Yatenga', 'Province'),
('BF', 'ZIR', 'Ziro', 'Province'),
('BF', 'ZON', 'Zondoma', 'Province'),
('BF', 'ZOU', 'Zoundwéogo', 'Province'),
('BG', '01', 'Blagoevgrad', 'Region'),
('BG', '02', 'Burgas', 'Region'),
('BG', '03', 'Varna', 'Region'),
('BG', '04', 'Veliko Tarnovo', 'Region'),
('BG', '05', 'Vidin', 'Region'),
('BG', '06', 'Vratsa', 'Region'),
('BG', '07', 'Gabrovo', 'Region'),
('BG', '08', 'Dobrich', 'Region'),
('BG', '09', 'Kardzhali', 'Region'),
('BG', '10', 'Kjustendil', 'Region'),
('BG', '11', 'Lovech', 'Region'),
('BG', '12', 'Montana', 'Region'),
('BG', '13', 'Pazardzik', 'Region'),
('BG', '14', 'Pernik', 'Region'),
('BG', '15', 'Pleven', 'Region'),
('BG', '16', 'Plovdiv', 'Region'),
('BG', '17', 'Razgrad', 'Region'),
('BG', '18', 'Ruse', 'Region'),
('BG', '19', 'Silistra', 'Region'),
('BG', '20', 'Sliven', 'Region'),
('BG', '21', 'Smolyan', 'Region'),
('BG', '22', 'Sofija-Grad', 'Region'),
('BG', '23', 'Sofija', 'Region'),
('BG', '24', 'Stara Zagora', 'Region'),
('BG', '25', 'Targovishte', 'Region'),
('BG', '26', 'Haskovo', 'Region'),
('BG', '27', 'Shumen', 'Region'),
('BG', '28', 'Yambol', 'Region'),
('BH', '13', 'Al Manamah (Al Asimah)', 'Governorat'),
('BH', '14', 'Al Janubiyah', 'Governorat'),
('BH', '15', 'Al Mu?arraq', 'Governorat'),
('BH', '16', 'Al Wustá', 'Governorat'),
('BH', '17', 'Ash Shamaliyah', 'Governorat'),
('BI', 'BB', 'Bubanza', 'Province'),
('BI', 'BL', 'Bujumbura Rural', 'Province'),
('BI', 'BM', 'Bujumbura Mairie', 'Province'),
('BI', 'BR', 'Bururi', 'Province'),
('BI', 'CA', 'Cankuzo', 'Province'),
('BI', 'CI', 'Cibitoke', 'Province'),
('BI', 'GI', 'Gitega', 'Province'),
('BI', 'KI', 'Kirundo', 'Province'),
('BI', 'KR', 'Karuzi', 'Province'),
('BI', 'KY', 'Kayanza', 'Province'),
('BI', 'MA', 'Makamba', 'Province'),
('BI', 'MU', 'Muramvya', 'Province'),
('BI', 'MW', 'Mwaro', 'Province'),
('BI', 'MY', 'Muyinga', 'Province'),
('BI', 'NG', 'Ngozi', 'Province'),
('BI', 'RT', 'Rutana', 'Province'),
('BI', 'RY', 'Ruyigi', 'Province'),
('BJ', 'AK', 'Atakora', 'Department'),
('BJ', 'AL', 'Alibori', 'Department'),
('BJ', 'AQ', 'Atlantique', 'Department'),
('BJ', 'BO', 'Borgou', 'Department'),
('BJ', 'CO', 'Collines', 'Department'),
('BJ', 'DO', 'Donga', 'Department'),
('BJ', 'KO', 'Kouffo', 'Department'),
('BJ', 'LI', 'Littoral', 'Department'),
('BJ', 'MO', 'Mono', 'Department'),
('BJ', 'OU', 'Ouémé', 'Department'),
('BJ', 'PL', 'Plateau', 'Department'),
('BJ', 'ZO', 'Zou', 'Department'),
('BN', 'BE', 'Belait', 'District'),
('BN', 'BM', 'Brunei-Muara', 'District'),
('BN', 'TE', 'Temburong', 'District'),
('BN', 'TU', 'Tutong', 'District'),
('BO', 'B', 'El Beni', 'Department'),
('BO', 'C', 'Cochabamba', 'Department'),
('BO', 'H', 'Chuquisaca', 'Department'),
('BO', 'L', 'La Paz', 'Department'),
('BO', 'N', 'Pando', 'Department'),
('BO', 'O', 'Oruro', 'Department'),
('BO', 'P', 'Potosí', 'Department'),
('BO', 'S', 'Santa Cruz', 'Department'),
('BO', 'T', 'Tarija', 'Department'),
('BR', 'AC', 'Acre', 'State'),
('BR', 'AL', 'Alagoas', 'State'),
('BR', 'AM', 'Amazonas', 'State'),
('BR', 'AP', 'Amapá', 'State'),
('BR', 'BA', 'Bahia', 'State'),
('BR', 'CE', 'Ceará', 'State'),
('BR', 'DF', 'Distrito Federal', 'Federal district'),
('BR', 'ES', 'Espírito Santo', 'State'),
('BR', 'GO', 'Goiás', 'State'),
('BR', 'MA', 'Maranhão', 'State'),
('BR', 'MG', 'Minas Gerais', 'State'),
('BR', 'MS', 'Mato Grosso do Sul', 'State'),
('BR', 'MT', 'Mato Grosso', 'State'),
('BR', 'PA', 'Pará', 'State'),
('BR', 'PB', 'Paraíba', 'State'),
('BR', 'PE', 'Pernambuco', 'State'),
('BR', 'PI', 'Piauí', 'State'),
('BR', 'PR', 'Paraná', 'State'),
('BR', 'RJ', 'Rio de Janeiro', 'State'),
('BR', 'RN', 'Rio Grande do Norte', 'State'),
('BR', 'RO', 'Rondônia', 'State'),
('BR', 'RR', 'Roraima', 'State'),
('BR', 'RS', 'Rio Grande do Sul', 'State'),
('BR', 'SC', 'Santa Catarina', 'State'),
('BR', 'SE', 'Sergipe', 'State'),
('BR', 'SP', 'São Paulo', 'State'),
('BR', 'TO', 'Tocantins', 'State'),
('BS', 'AK', 'Acklins', 'District'),
('BS', 'BI', 'Bimini', 'District'),
('BS', 'BP', 'Black Point', 'District'),
('BS', 'BY', 'Berry Islands', 'District'),
('BS', 'CE', 'Central Eleuthera', 'District'),
('BS', 'CI', 'Cat Island', 'District'),
('BS', 'CK', 'Crooked Island and Long Cay', 'District'),
('BS', 'CO', 'Central Abaco', 'District'),
('BS', 'CS', 'Central Andros', 'District'),
('BS', 'EG', 'East Grand Bahama', 'District'),
('BS', 'EX', 'Exuma', 'District'),
('BS', 'FP', 'Freeport', 'District'),
('BS', 'GC', 'Grand Cay', 'District'),
('BS', 'HI', 'Harbour Island', 'District'),
('BS', 'HT', 'Hope Town', 'District'),
('BS', 'IN', 'Inagua', 'District'),
('BS', 'LI', 'Long Island', 'District'),
('BS', 'MC', 'Mangrove Cay', 'District'),
('BS', 'MG', 'Mayaguana', 'District'),
('BS', 'MI', 'Moores Island', 'District'),
('BS', 'NE', 'North Eleuthera', 'District'),
('BS', 'NO', 'North Abaco', 'District'),
('BS', 'NS', 'North Andros', 'District'),
('BS', 'RC', 'Rum Cay', 'District'),
('BS', 'RI', 'Ragged Island', 'District'),
('BS', 'SA', 'South Andros', 'District'),
('BS', 'SE', 'South Eleuthera', 'District'),
('BS', 'SO', 'South Abaco', 'District'),
('BS', 'SS', 'San Salvador', 'District'),
('BS', 'SW', 'Spanish Wells', 'District'),
('BS', 'WG', 'West Grand Bahama', 'District'),
('BT', '11', 'Paro', 'District'),
('BT', '12', 'Chhukha', 'District'),
('BT', '13', 'Ha', 'District'),
('BT', '14', 'Samtse', 'District'),
('BT', '15', 'Thimphu', 'District'),
('BT', '21', 'Tsirang', 'District'),
('BT', '22', 'Dagana', 'District'),
('BT', '23', 'Punakha', 'District'),
('BT', '24', 'Wangdue Phodrang', 'District'),
('BT', '31', 'Sarpang', 'District'),
('BT', '32', 'Trongsa', 'District'),
('BT', '33', 'Bumthang', 'District'),
('BT', '34', 'Zhemgang', 'District'),
('BT', '41', 'Trashigang', 'District'),
('BT', '42', 'Monggar', 'District'),
('BT', '43', 'Pemagatshel', 'District'),
('BT', '44', 'Lhuentse', 'District'),
('BT', '45', 'Samdrup Jongkha', 'District'),
('BT', 'GA', 'Gasa', 'District'),
('BT', 'TY', 'Trashi Yangtse', 'District'),
('BW', 'CE', 'Central', 'District'),
('BW', 'GH', 'Ghanzi', 'District'),
('BW', 'KG', 'Kgalagadi', 'District'),
('BW', 'KL', 'Kgatleng', 'District'),
('BW', 'KW', 'Kweneng', 'District'),
('BW', 'NE', 'North-East', 'District'),
('BW', 'NW', 'North-West', 'District'),
('BW', 'SE', 'South-East', 'District'),
('BW', 'SO', 'Southern', 'District'),
('BY', 'BR', 'Brestskaya voblasts\' (be) - Brestskaya oblast\' (ru)', 'Oblast'),
('BY', 'HM', 'Horad Minsk', 'City'),
('BY', 'HO', 'Homyel\'skaya voblasts\' (be) - Gomel\'skaya oblast\' (ru)', 'Oblast'),
('BY', 'HR', 'Hrodzenskaya voblasts\' (be) - Grodnenskaya oblast\' (ru)', 'Oblast'),
('BY', 'MA', 'Mahilyowskaya voblasts\' (be) - Mogilevskaya oblast\' (ru)', 'Oblast'),
('BY', 'MI', 'Minskaya voblasts\' (be) - Minskaya oblast\' (ru)', 'Oblast'),
('BY', 'VI', 'Vitsyebskaya voblasts\' (be) - Vitebskaya oblast\' (ru)', 'Oblast'),
('BZ', 'BZ', 'Belize', 'District'),
('BZ', 'CY', 'Cayo', 'District'),
('BZ', 'CZL', 'Corozal', 'District'),
('BZ', 'OW', 'Orange Walk', 'District'),
('BZ', 'SC', 'Stann Creek', 'District'),
('BZ', 'TOL', 'Toledo', 'District'),
('CA', 'AB', 'Alberta', 'Province'),
('CA', 'BC', 'British Columbia', 'Province'),
('CA', 'MB', 'Manitoba', 'Province'),
('CA', 'NB', 'New Brunswick', 'Province'),
('CA', 'NL', 'Newfoundland and Labrador', 'Province'),
('CA', 'NS', 'Nova Scotia', 'Province'),
('CA', 'NT', 'Northwest Territories', 'Territory'),
('CA', 'NU', 'Nunavut', 'Territory'),
('CA', 'ON', 'Ontario', 'Province'),
('CA', 'PE', 'Prince Edward Island', 'Province'),
('CA', 'QC', 'Quebec', 'Province'),
('CA', 'SK', 'Saskatchewan', 'Province'),
('CA', 'YT', 'Yukon Territory', 'Territory'),
('CD', 'BC', 'Bas-Congo', 'Province'),
('CD', 'BN', 'Bandundu', 'Province'),
('CD', 'EQ', 'Équateur', 'Province'),
('CD', 'KA', 'Katanga', 'Province'),
('CD', 'KE', 'Kasai-Oriental', 'Province'),
('CD', 'KN', 'Kinshasa', 'City'),
('CD', 'KW', 'Kasai-Occidental', 'Province'),
('CD', 'MA', 'Maniema', 'Province'),
('CD', 'NK', 'Nord-Kivu', 'Province'),
('CD', 'OR', 'Orientale', 'Province'),
('CD', 'SK', 'Sud-Kivu', 'Province'),
('CF', 'AC', 'Ouham', 'Prefecture'),
('CF', 'BB', 'Bamingui-Bangoran', 'Prefecture'),
('CF', 'BGF', 'Bangui', 'Commune'),
('CF', 'BK', 'Basse-Kotto', 'Prefecture'),
('CF', 'HK', 'Haute-Kotto', 'Prefecture'),
('CF', 'HM', 'Haut-Mbomou', 'Prefecture'),
('CF', 'HS', 'Mambéré-Kadéï', 'Prefecture'),
('CF', 'KB', 'Nana-Grébizi', 'economic prefecture'),
('CF', 'KG', 'Kémo', 'Prefecture'),
('CF', 'LB', 'Lobaye', 'Prefecture'),
('CF', 'MB', 'Mbomou', 'Prefecture'),
('CF', 'MP', 'Ombella-Mpoko', 'Prefecture'),
('CF', 'NM', 'Nana-Mambéré', 'Prefecture'),
('CF', 'OP', 'Ouham-Pendé', 'Prefecture'),
('CF', 'SE', 'Sangha-Mbaéré', 'economic prefecture'),
('CF', 'UK', 'Ouaka', 'Prefecture'),
('CF', 'VK', 'Vakaga', 'Prefecture'),
('CG', '11', 'Bouenza', 'Region'),
('CG', '12', 'Pool', 'Region'),
('CG', '13', 'Sangha', 'Region'),
('CG', '14', 'Plateaux', 'Region'),
('CG', '15', 'Cuvette-Ouest', 'Region'),
('CG', '2', 'Lékoumou', 'Region'),
('CG', '5', 'Kouilou', 'Region'),
('CG', '7', 'Likouala', 'Region'),
('CG', '8', 'Cuvette', 'Region'),
('CG', '9', 'Niari', 'Region'),
('CG', 'BZV', 'Brazzaville', 'Capital'),
('CH', 'AG', 'Aargau (de)', 'Canton'),
('CH', 'AI', 'Appenzell Innerrhoden (de)', 'Canton'),
('CH', 'AR', 'Appenzell Ausserrhoden (de)', 'Canton'),
('CH', 'BE', 'Bern (de)', 'Canton'),
('CH', 'BL', 'Basel-Landschaft (de)', 'Canton'),
('CH', 'BS', 'Basel-Stadt (de)', 'Canton'),
('CH', 'FR', 'Fribourg (fr)', 'Canton'),
('CH', 'GE', 'Genève (fr)', 'Canton'),
('CH', 'GL', 'Glarus (de)', 'Canton'),
('CH', 'GR', 'Graubünden (de)', 'Canton'),
('CH', 'JU', 'Jura (fr)', 'Canton'),
('CH', 'LU', 'Luzern (de)', 'Canton'),
('CH', 'NE', 'Neuchâtel (fr)', 'Canton'),
('CH', 'NW', 'Nidwalden (de)', 'Canton'),
('CH', 'OW', 'Obwalden (de)', 'Canton'),
('CH', 'SG', 'Sankt Gallen (de)', 'Canton'),
('CH', 'SH', 'Schaffhausen (de)', 'Canton'),
('CH', 'SO', 'Solothurn (de)', 'Canton'),
('CH', 'SZ', 'Schwyz (de)', 'Canton'),
('CH', 'TG', 'Thurgau (de)', 'Canton'),
('CH', 'TI', 'Ticino (it)', 'Canton'),
('CH', 'UR', 'Uri (de)', 'Canton'),
('CH', 'VD', 'Vaud (fr)', 'Canton'),
('CH', 'VS', 'Valais (fr)', 'Canton'),
('CH', 'ZG', 'Zug (de)', 'Canton'),
('CH', 'ZH', 'Zürich (de)', 'Canton'),
('CI', '01', 'Lagunes (Région des)', 'Region'),
('CI', '02', 'Haut-Sassandra (Région du)', 'Region'),
('CI', '03', 'Savanes (Région des)', 'Region'),
('CI', '04', 'Vallée du Bandama (Région de la)', 'Region'),
('CI', '05', 'Moyen-Comoé (Région du)', 'Region'),
('CI', '06', '18 Montagnes (Région des)', 'Region'),
('CI', '07', 'Lacs (Région des)', 'Region'),
('CI', '08', 'Zanzan (Région du)', 'Region'),
('CI', '09', 'Bas-Sassandra (Région du)', 'Region'),
('CI', '10', 'Denguélé (Région du)', 'Region'),
('CI', '11', 'Nzi-Comoé (Région)', 'Region'),
('CI', '12', 'Marahoué (Région de la)', 'Region'),
('CI', '13', 'Sud-Comoé (Région du)', 'Region'),
('CI', '14', 'Worodougou (Région du)', 'Region'),
('CI', '15', 'Sud-Bandama (Région du)', 'Region'),
('CI', '16', 'Agnébi (Région de l\')', 'Region'),
('CI', '17', 'Bafing (Région du)', 'Region'),
('CI', '18', 'Fromager (Région du)', 'Region'),
('CI', '19', 'Moyen-Cavally (Région du)', 'Region'),
('CL', 'AI', 'Aisén del General Carlos Ibáñez del Campo', 'Region'),
('CL', 'AN', 'Antofagasta', 'Region'),
('CL', 'AP', 'Arica y Parinacota', 'Region'),
('CL', 'AR', 'Araucanía', 'Region'),
('CL', 'AT', 'Atacama', 'Region'),
('CL', 'BI', 'Bío-Bío', 'Region'),
('CL', 'CO', 'Coquimbo', 'Region'),
('CL', 'LI', 'Libertador General Bernardo O\'Higgins', 'Region'),
('CL', 'LL', 'Los Lagos', 'Region'),
('CL', 'LR', 'Los Ríos', 'Region'),
('CL', 'MA', 'Magallanes y Antártica Chilena', 'Region'),
('CL', 'ML', 'Maule', 'Region'),
('CL', 'RM', 'Región Metropolitana de Santiago', 'Region'),
('CL', 'TA', 'Tarapacá', 'Region'),
('CL', 'VS', 'Valparaíso', 'Region'),
('CM', 'AD', 'Adamaoua', 'Region'),
('CM', 'CE', 'Centre', 'Region'),
('CM', 'EN', 'Far North', 'Region'),
('CM', 'ES', 'East', 'Region'),
('CM', 'LT', 'Littoral', 'Region'),
('CM', 'NO', 'North', 'Region'),
('CM', 'NW', 'North-West', 'Region'),
('CM', 'OU', 'West', 'Region'),
('CM', 'SU', 'South', 'Region'),
('CM', 'SW', 'South-West', 'Region'),
('CN', '11', 'Beijing', 'Municipality'),
('CN', '12', 'Tianjin', 'Municipality'),
('CN', '13', 'Hebei', 'Province'),
('CN', '14', 'Shanxi', 'Province'),
('CN', '15', 'Nei Mongol (mn)', 'Autonomous Region'),
('CN', '21', 'Liaoning', 'Province'),
('CN', '22', 'Jilin', 'Province'),
('CN', '23', 'Heilongjiang', 'Province'),
('CN', '31', 'Shanghai', 'Municipality'),
('CN', '32', 'Jiangsu', 'Province'),
('CN', '33', 'Zhejiang', 'Province'),
('CN', '34', 'Anhui', 'Province'),
('CN', '35', 'Fujian', 'Province'),
('CN', '36', 'Jiangxi', 'Province'),
('CN', '37', 'Shandong', 'Province'),
('CN', '41', 'Henan', 'Province'),
('CN', '42', 'Hubei', 'Province'),
('CN', '43', 'Hunan', 'Province'),
('CN', '44', 'Guangdong', 'Province'),
('CN', '45', 'Guangxi', 'Autonomous Region'),
('CN', '46', 'Hainan', 'Province'),
('CN', '50', 'Chongqing', 'Municipality'),
('CN', '51', 'Sichuan', 'Province'),
('CN', '52', 'Guizhou', 'Province'),
('CN', '53', 'Yunnan', 'Province'),
('CN', '54', 'Xizang', 'Autonomous Region'),
('CN', '61', 'Shaanxi', 'Province'),
('CN', '62', 'Gansu', 'Province'),
('CN', '63', 'Qinghai', 'Province'),
('CN', '64', 'Ningxia', 'Autonomous Region'),
('CN', '65', 'Xinjiang', 'Autonomous Region'),
('CN', '71', 'Taiwan', 'Province'),
('CN', '91', 'Xianggang', 'Special Administrative Region'),
('CN', '92', 'Aomen', 'Special Administrative Region'),
('CO', 'AMA', 'Amazonas', 'Department'),
('CO', 'ANT', 'Antioquia', 'Department'),
('CO', 'ARA', 'Arauca', 'Department'),
('CO', 'ATL', 'Atlántico', 'Department'),
('CO', 'BOL', 'Bolívar', 'Department'),
('CO', 'BOY', 'Boyacá', 'Department'),
('CO', 'CAL', 'Caldas', 'Department'),
('CO', 'CAQ', 'Caquetá', 'Department'),
('CO', 'CAS', 'Casanare', 'Department'),
('CO', 'CAU', 'Cauca', 'Department'),
('CO', 'CES', 'Cesar', 'Department'),
('CO', 'CHO', 'Chocó', 'Department'),
('CO', 'COR', 'Córdoba', 'Department'),
('CO', 'CUN', 'Cundinamarca', 'Department'),
('CO', 'DC', 'Distrito Capital de Bogotá', 'Capital district'),
('CO', 'GUA', 'Guainía', 'Department'),
('CO', 'GUV', 'Guaviare', 'Department'),
('CO', 'HUI', 'Huila', 'Department'),
('CO', 'LAG', 'La Guajira', 'Department'),
('CO', 'MAG', 'Magdalena', 'Department'),
('CO', 'MET', 'Meta', 'Department'),
('CO', 'NAR', 'Nariño', 'Department'),
('CO', 'NSA', 'Norte de Santander', 'Department'),
('CO', 'PUT', 'Putumayo', 'Department'),
('CO', 'QUI', 'Quindío', 'Department'),
('CO', 'RIS', 'Risaralda', 'Department'),
('CO', 'SAN', 'Santander', 'Department'),
('CO', 'SAP', 'San Andrés, Providencia y Santa Catalina', 'Department'),
('CO', 'SUC', 'Sucre', 'Department'),
('CO', 'TOL', 'Tolima', 'Department'),
('CO', 'VAC', 'Valle del Cauca', 'Department'),
('CO', 'VAU', 'Vaupés', 'Department'),
('CO', 'VID', 'Vichada', 'Department'),
('CR', 'A', 'Alajuela', 'Province'),
('CR', 'C', 'Cartago', 'Province'),
('CR', 'G', 'Guanacaste', 'Province'),
('CR', 'H', 'Heredia', 'Province'),
('CR', 'L', 'Limón', 'Province'),
('CR', 'P', 'Puntarenas', 'Province'),
('CR', 'SJ', 'San José', 'Province'),
('CU', '01', 'Pinar del Río', 'Province'),
('CU', '02', 'La Habana', 'Province'),
('CU', '03', 'Ciudad de La Habana', 'Province'),
('CU', '04', 'Matanzas', 'Province'),
('CU', '05', 'Villa Clara', 'Province'),
('CU', '06', 'Cienfuegos', 'Province'),
('CU', '07', 'Sancti Spíritus', 'Province'),
('CU', '08', 'Ciego de Ávila', 'Province'),
('CU', '09', 'Camagüey', 'Province'),
('CU', '10', 'Las Tunas', 'Province'),
('CU', '11', 'Holguín', 'Province'),
('CU', '12', 'Granma', 'Province'),
('CU', '13', 'Santiago de Cuba', 'Province'),
('CU', '14', 'Guantánamo', 'Province'),
('CU', '99', 'Isla de la Juventud', 'Special municipality'),
('CV', 'BR', 'Brava', 'Municipality'),
('CV', 'BV', 'Boa Vista', 'Municipality'),
('CV', 'CA', 'Santa Catarina', 'Municipality'),
('CV', 'CF', 'Santa Catarina do Fogo', 'Municipality'),
('CV', 'CR', 'Santa Cruz', 'Municipality'),
('CV', 'CS', 'Calheta de São Miguel', 'Municipality'),
('CV', 'MA', 'Maio', 'Municipality'),
('CV', 'MO', 'Mosteiros', 'Municipality'),
('CV', 'PA', 'Paúl', 'Municipality'),
('CV', 'PN', 'Porto Novo', 'Municipality'),
('CV', 'PR', 'Praia', 'Municipality'),
('CV', 'RB', 'Ribeira Brava', 'Municipality'),
('CV', 'RG', 'Ribeira Grande', 'Municipality'),
('CV', 'RS', 'Ribeira Grande de Santiago', 'Municipality'),
('CV', 'SD', 'São Domingos', 'Municipality'),
('CV', 'SF', 'São Filipe', 'Municipality'),
('CV', 'SL', 'Sal', 'Municipality'),
('CV', 'SM', 'São Miguel', 'Municipality'),
('CV', 'SS', 'São Salvador do Mundo', 'Municipality'),
('CV', 'SV', 'São Vicente', 'Municipality'),
('CV', 'TA', 'Tarrafal', 'Municipality'),
('CV', 'TS', 'Tarrafal de São Nicolau', 'Municipality'),
('CY', '01', 'Lefkosia', 'District'),
('CY', '02', 'Lemesos', 'District'),
('CY', '03', 'Larnaka', 'District'),
('CY', '04', 'Ammochostos', 'District'),
('CY', '05', 'Pafos', 'District'),
('CY', '06', 'Keryneia', 'District'),
('CZ', 'JC', 'Jihoceský kraj', 'Region'),
('CZ', 'JM', 'Jihomoravský kraj', 'Region'),
('CZ', 'KA', 'Karlovarský kraj', 'Region'),
('CZ', 'KR', 'Královéhradecký kraj', 'Region'),
('CZ', 'LI', 'Liberecký kraj', 'Region'),
('CZ', 'MO', 'Moravskoslezský kraj', 'Region'),
('CZ', 'OL', 'Olomoucký kraj', 'Region'),
('CZ', 'PA', 'Pardubický kraj', 'Region'),
('CZ', 'PL', 'Plzenský kraj', 'Region'),
('CZ', 'PR', 'Praha, hlavní mesto', 'Region'),
('CZ', 'ST', 'Stredoceský kraj', 'Region'),
('CZ', 'US', 'Ústecký kraj', 'Region'),
('CZ', 'VY', 'Vysocina', 'Region'),
('CZ', 'ZL', 'Zlínský kraj', 'Region'),
('DE', 'BB', 'Brandenburg', 'Land'),
('DE', 'BE', 'Berlin', 'Land'),
('DE', 'BW', 'Baden-Württemberg', 'Land'),
('DE', 'BY', 'Bayern', 'Land'),
('DE', 'HB', 'Bremen', 'Land'),
('DE', 'HE', 'Hessen', 'Land'),
('DE', 'HH', 'Hamburg', 'Land'),
('DE', 'MV', 'Mecklenburg-Vorpommern', 'Land'),
('DE', 'NI', 'Niedersachsen', 'Land'),
('DE', 'NW', 'Nordrhein-Westfalen', 'Land'),
('DE', 'RP', 'Rheinland-Pfalz', 'Land'),
('DE', 'SH', 'Schleswig-Holstein', 'Land'),
('DE', 'SL', 'Saarland', 'Land'),
('DE', 'SN', 'Sachsen', 'Land'),
('DE', 'ST', 'Sachsen-Anhalt', 'Land'),
('DE', 'TH', 'Thüringen', 'Land'),
('DJ', 'AR', 'Arta', 'District'),
('DJ', 'AS', 'Ali Sabieh', 'District'),
('DJ', 'DI', 'Dikhil', 'District'),
('DJ', 'DJ', 'Djibouti', 'City'),
('DJ', 'OB', 'Obock', 'District'),
('DJ', 'TA', 'Tadjoura', 'District'),
('DK', '81', 'Region Nordjylland', 'Region'),
('DK', '82', 'Region Midtjylland', 'Region'),
('DK', '83', 'Region Syddanmark', 'Region'),
('DK', '84', 'Region Hovedstaden', 'Region'),
('DK', '85', 'Region Sjælland', 'Region'),
('DM', '02', 'Saint Andrew', ''),
('DM', '03', 'Saint David', ''),
('DM', '04', 'Saint George', ''),
('DM', '05', 'Saint John', ''),
('DM', '06', 'Saint Joseph', ''),
('DM', '07', 'Saint Luke', ''),
('DM', '08', 'Saint Mark', ''),
('DM', '09', 'Saint Patrick', ''),
('DM', '10', 'Saint Paul', ''),
('DM', '11', 'Saint Peter', ''),
('DO', '01', 'Distrito Nacional (Santo Domingo)', 'District'),
('DO', '02', 'Azua', 'Province'),
('DO', '03', 'Bahoruco', 'Province'),
('DO', '04', 'Barahona', 'Province'),
('DO', '05', 'Dajabón', 'Province'),
('DO', '06', 'Duarte', 'Province'),
('DO', '07', 'La Estrelleta [Elías Piña]', 'Province'),
('DO', '08', 'El Seybo [El Seibo]', 'Province'),
('DO', '09', 'Espaillat', 'Province'),
('DO', '10', 'Independencia', 'Province'),
('DO', '11', 'La Altagracia', 'Province'),
('DO', '12', 'La Romana', 'Province'),
('DO', '13', 'La Vega', 'Province'),
('DO', '14', 'María Trinidad Sánchez', 'Province'),
('DO', '15', 'Monte Cristi', 'Province'),
('DO', '16', 'Pedernales', 'Province'),
('DO', '17', 'Peravia', 'Province'),
('DO', '18', 'Puerto Plata', 'Province'),
('DO', '19', 'Salcedo', 'Province'),
('DO', '20', 'Samaná', 'Province'),
('DO', '21', 'San Cristóbal', 'Province'),
('DO', '22', 'San Juan', 'Province'),
('DO', '23', 'San Pedro de Macorís', 'Province'),
('DO', '24', 'Sánchez Ramírez', 'Province'),
('DO', '25', 'Santiago', 'Province'),
('DO', '26', 'Santiago Rodríguez', 'Province'),
('DO', '27', 'Valverde', 'Province'),
('DO', '28', 'Monseñor Nouel', 'Province'),
('DO', '29', 'Monte Plata', 'Province'),
('DO', '30', 'Hato Mayor', 'Province'),
('DO', '31', 'San José de Ocoa', 'Province'),
('DO', '32', 'Santo Domingo', 'Province'),
('DZ', '01', 'Adrar', 'Province'),
('DZ', '02', 'Chlef', 'Province'),
('DZ', '03', 'Laghouat', 'Province'),
('DZ', '04', 'Oum el Bouaghi', 'Province'),
('DZ', '05', 'Batna', 'Province'),
('DZ', '06', 'Béjaïa', 'Province'),
('DZ', '07', 'Biskra', 'Province'),
('DZ', '08', 'Béchar', 'Province'),
('DZ', '09', 'Blida', 'Province'),
('DZ', '10', 'Bouira', 'Province'),
('DZ', '11', 'Tamanghasset', 'Province'),
('DZ', '12', 'Tébessa', 'Province'),
('DZ', '13', 'Tlemcen', 'Province'),
('DZ', '14', 'Tiaret', 'Province'),
('DZ', '15', 'Tizi Ouzou', 'Province'),
('DZ', '16', 'Alger', 'Province'),
('DZ', '17', 'Djelfa', 'Province'),
('DZ', '18', 'Jijel', 'Province'),
('DZ', '19', 'Sétif', 'Province'),
('DZ', '20', 'Saïda', 'Province'),
('DZ', '21', 'Skikda', 'Province'),
('DZ', '22', 'Sidi Bel Abbès', 'Province'),
('DZ', '23', 'Annaba', 'Province'),
('DZ', '24', 'Guelma', 'Province'),
('DZ', '25', 'Constantine', 'Province'),
('DZ', '26', 'Médéa', 'Province'),
('DZ', '27', 'Mostaganem', 'Province'),
('DZ', '28', 'Msila', 'Province'),
('DZ', '29', 'Mascara', 'Province'),
('DZ', '30', 'Ouargla', 'Province'),
('DZ', '31', 'Oran', 'Province'),
('DZ', '32', 'El Bayadh', 'Province'),
('DZ', '33', 'Illizi', 'Province'),
('DZ', '34', 'Bordj Bou Arréridj', 'Province'),
('DZ', '35', 'Boumerdès', 'Province'),
('DZ', '36', 'El Tarf', 'Province'),
('DZ', '37', 'Tindouf', 'Province'),
('DZ', '38', 'Tissemsilt', 'Province'),
('DZ', '39', 'El Oued', 'Province'),
('DZ', '40', 'Khenchela', 'Province'),
('DZ', '41', 'Souk Ahras', 'Province'),
('DZ', '42', 'Tipaza', 'Province'),
('DZ', '43', 'Mila', 'Province'),
('DZ', '44', 'Aïn Defla', 'Province'),
('DZ', '45', 'Naama', 'Province'),
('DZ', '46', 'Aïn Témouchent', 'Province'),
('DZ', '47', 'Ghardaïa', 'Province'),
('DZ', '48', 'Relizane', 'Province'),
('EC', 'A', 'Azuay', 'Province'),
('EC', 'B', 'Bolívar', 'Province'),
('EC', 'C', 'Carchi', 'Province'),
('EC', 'D', 'Orellana', 'Province'),
('EC', 'E', 'Esmeraldas', 'Province'),
('EC', 'F', 'Cañar', 'Province'),
('EC', 'G', 'Guayas', 'Province'),
('EC', 'H', 'Chimborazo', 'Province'),
('EC', 'I', 'Imbabura', 'Province'),
('EC', 'L', 'Loja', 'Province'),
('EC', 'M', 'Manabí', 'Province'),
('EC', 'N', 'Napo', 'Province'),
('EC', 'O', 'El Oro', 'Province'),
('EC', 'P', 'Pichincha', 'Province'),
('EC', 'R', 'Los Ríos', 'Province'),
('EC', 'S', 'Morona-Santiago', 'Province'),
('EC', 'SD', 'Santo Domingo de los Tsáchilas', 'Province'),
('EC', 'SE', 'Santa Elena', 'Province'),
('EC', 'T', 'Tungurahua', 'Province'),
('EC', 'U', 'Sucumbíos', 'Province'),
('EC', 'W', 'Galápagos', 'Province'),
('EC', 'X', 'Cotopaxi', 'Province'),
('EC', 'Y', 'Pastaza', 'Province'),
('EC', 'Z', 'Zamora-Chinchipe', 'Province'),
('EE', '37', 'Harjumaa', 'County'),
('EE', '39', 'Hiiumaa', 'County'),
('EE', '44', 'Ida-Virumaa', 'County'),
('EE', '49', 'Jõgevamaa', 'County'),
('EE', '51', 'Järvamaa', 'County'),
('EE', '57', 'Läänemaa', 'County'),
('EE', '59', 'Lääne-Virumaa', 'County'),
('EE', '65', 'Põlvamaa', 'County'),
('EE', '67', 'Pärnumaa', 'County'),
('EE', '70', 'Raplamaa', 'County'),
('EE', '74', 'Saaremaa', 'County'),
('EE', '78', 'Tartumaa', 'County'),
('EE', '82', 'Valgamaa', 'County'),
('EE', '84', 'Viljandimaa', 'County'),
('EE', '86', 'Võrumaa', 'County'),
('EG', 'ALX', 'AI Iskandariyah', 'Governorate'),
('EG', 'ASN', 'Aswan', 'Governorate'),
('EG', 'AST', 'Asyut', 'Governorate'),
('EG', 'BA', 'AI Bah¸r al Ah¸mar', 'Governorate'),
('EG', 'BH', 'AI Buh¸ayrah', 'Governorate'),
('EG', 'BNS', 'Bani Suwayf', 'Governorate'),
('EG', 'C', 'AI Qahirah', 'Governorate'),
('EG', 'DK', 'Ad Daqahliyah', 'Governorate'),
('EG', 'DT', 'Dumyat', 'Governorate'),
('EG', 'FYM', 'AI Fayyum', 'Governorate'),
('EG', 'GH', 'AI Gharbiyah', 'Governorate'),
('EG', 'GZ', 'AI Jizah', 'Governorate'),
('EG', 'HU', '?ulwan', 'Governorate'),
('EG', 'IS', 'AI Isma \'iliyah', 'Governorate'),
('EG', 'JS', 'Janub Sina\'', 'Governorate'),
('EG', 'KB', 'AI Qalyubiyah', 'Governorate'),
('EG', 'KFS', 'Kafr ash Shaykh', 'Governorate'),
('EG', 'KN', 'Qina', 'Governorate'),
('EG', 'LX', 'Al Uqsur', 'Governorate'),
('EG', 'MN', 'AI Minya', 'Governorate'),
('EG', 'MNF', 'AI Minufiyah', 'Governorate'),
('EG', 'MT', 'Matruh', 'Governorate'),
('EG', 'PTS', 'Bur Sa\'id', 'Governorate'),
('EG', 'SHG', 'Suhaj', 'Governorate'),
('EG', 'SHR', 'Ash Sharqiyah', 'Governorate'),
('EG', 'SIN', 'Shamal Sina\'', 'Governorate'),
('EG', 'SU', 'As Sadis min Uktubar', 'Governorate'),
('EG', 'SUZ', 'As Suways', 'Governorate'),
('EG', 'WAD', 'AI Wadi al Jadid', 'Governorate'),
('ER', 'AN', 'Anseba', 'Region'),
('ER', 'DK', 'Debubawi Keyih Bahri [Debub-Keih-Bahri]', 'Region'),
('ER', 'DU', 'Debub', 'Region'),
('ER', 'GB', 'Gash-Barka', 'Region'),
('ER', 'MA', 'Maakel [Maekel]', 'Region'),
('ER', 'SK', 'Semenawi Keyih Bahri [Semien-Keih-Bahri]', 'Region'),
('ES', 'A', 'Alicante / Alacant', 'Province'),
('ES', 'AB', 'Albacete', 'Province'),
('ES', 'AL', 'Almería', 'Province'),
('ES', 'AV', 'Ávila', 'Province'),
('ES', 'B', 'Barcelona  [Barcelona]', 'Province'),
('ES', 'BA', 'Badajoz', 'Province'),
('ES', 'BI', 'Vizcaya / Biskaia', 'Province'),
('ES', 'BU', 'Burgos', 'Province'),
('ES', 'C', 'A Coruña  [La Coruña]', 'Province'),
('ES', 'CA', 'Cádiz', 'Province'),
('ES', 'CC', 'Cáceres', 'Province'),
('ES', 'CE', 'Ceuta', 'Autonomous city in North Africa'),
('ES', 'CO', 'Córdoba', 'Province'),
('ES', 'CR', 'Ciudad Real', 'Province'),
('ES', 'CS', 'Castellón / Castelló', 'Province'),
('ES', 'CU', 'Cuenca', 'Province'),
('ES', 'GC', 'Las Palmas', 'Province'),
('ES', 'GI', 'Girona  [Gerona]', 'Province'),
('ES', 'GR', 'Granada', 'Province'),
('ES', 'GU', 'Guadalajara', 'Province'),
('ES', 'H', 'Huelva', 'Province'),
('ES', 'HU', 'Huesca', 'Province'),
('ES', 'J', 'Jaén', 'Province'),
('ES', 'L', 'Lleida  [Lérida]', 'Province'),
('ES', 'LE', 'León', 'Province'),
('ES', 'LO', 'La Rioja', 'Province'),
('ES', 'LU', 'Lugo  [Lugo]', 'Province'),
('ES', 'M', 'Madrid', 'Province'),
('ES', 'MA', 'Málaga', 'Province'),
('ES', 'ML', 'Melilla', 'Autonomous city in North Africa'),
('ES', 'MU', 'Murcia', 'Province'),
('ES', 'NA', 'Navarra / Nafarroa', 'Province'),
('ES', 'O', 'Asturias', 'Province'),
('ES', 'OR', 'Ourense  [Orense]', 'Province'),
('ES', 'P', 'Palencia', 'Province'),
('ES', 'PM', 'Balears  [Baleares]', 'Province'),
('ES', 'PO', 'Pontevedra  [Pontevedra]', 'Province'),
('ES', 'S', 'Cantabria', 'Province'),
('ES', 'SA', 'Salamanca', 'Province'),
('ES', 'SE', 'Sevilla', 'Province'),
('ES', 'SG', 'Segovia', 'Province'),
('ES', 'SO', 'Soria', 'Province'),
('ES', 'SS', 'Guipúzcoa / Gipuzkoa', 'Province'),
('ES', 'T', 'Tarragona  [Tarragona]', 'Province'),
('ES', 'TE', 'Teruel', 'Province'),
('ES', 'TF', 'Santa Cruz de Tenerife', 'Province'),
('ES', 'TO', 'Toledo', 'Province'),
('ES', 'V', 'Valencia / València', 'Province'),
('ES', 'VA', 'Valladolid', 'Province'),
('ES', 'VI', 'Álava / Araba', 'Province'),
('ES', 'Z', 'Zaragoza', 'Province'),
('ES', 'ZA', 'Zamora', 'Province'),
('ET', 'AA', 'Adis Abeba', 'Administration'),
('ET', 'AF', 'Afar', 'State'),
('ET', 'AM', 'Amara', 'State'),
('ET', 'BE', 'Binshangul Gumuz', 'State'),
('ET', 'DD', 'Dire Dawa', 'Administration'),
('ET', 'GA', 'Gambela Hizboch', 'State'),
('ET', 'HA', 'Hareri Hizb', 'State'),
('ET', 'OR', 'Oromiya', 'State'),
('ET', 'SN', 'YeDebub Biheroch Bihereseboch na Hizboch', 'State'),
('ET', 'SO', 'Sumale', 'State'),
('ET', 'TI', 'Tigray', 'State'),
('FI', '01', 'Ahvenanmaan maakunta', 'Region'),
('FI', '02', 'Etelä-Karjala', 'Region'),
('FI', '03', 'Etelä-Pohjanmaa', 'Region'),
('FI', '04', 'Etelä-Savo', 'Region'),
('FI', '05', 'Kainuu', 'Region'),
('FI', '06', 'Kanta-Häme', 'Region'),
('FI', '07', 'Keski-Pohjanmaa', 'Region'),
('FI', '08', 'Keski-Suomi', 'Region'),
('FI', '09', 'Kymenlaakso', 'Region'),
('FI', '10', 'Lappi', 'Region'),
('FI', '11', 'Pirkanmaa', 'Region'),
('FI', '12', 'Pohjanmaa', 'Region'),
('FI', '13', 'Pohjois-Karjala', 'Region'),
('FI', '14', 'Pohjois-Pohjanmaa', 'Region'),
('FI', '15', 'Pohjois-Savo', 'Region'),
('FI', '16', 'Päijät-Häme', 'Region'),
('FI', '17', 'Satakunta', 'Region'),
('FI', '18', 'Uusimaa', 'Region'),
('FI', '19', 'Varsinais-Suomi', 'Region'),
('FJ', 'C', 'Central', 'Division'),
('FJ', 'E', 'Eastern', 'Division'),
('FJ', 'N', 'Northern', 'Division'),
('FJ', 'R', 'Rotuma', 'Dependency'),
('FJ', 'W', 'Western', 'Division'),
('FM', 'KSA', 'Kosrae', 'State'),
('FM', 'PNI', 'Pohnpei', 'State'),
('FM', 'TRK', 'Chuuk', 'State'),
('FM', 'YAP', 'Yap', 'State'),
('FR', '01', 'Ain', 'Metropolitan department'),
('FR', '02', 'Aisne', 'Metropolitan department'),
('FR', '03', 'Allier', 'Metropolitan department'),
('FR', '04', 'Alpes-de-Haute-Provence', 'Metropolitan department'),
('FR', '05', 'Hautes-Alpes', 'Metropolitan department'),
('FR', '06', 'Alpes-Maritimes', 'Metropolitan department'),
('FR', '07', 'Ardèche', 'Metropolitan department'),
('FR', '08', 'Ardennes', 'Metropolitan department'),
('FR', '09', 'Ariège', 'Metropolitan department'),
('FR', '10', 'Aube', 'Metropolitan department'),
('FR', '11', 'Aude', 'Metropolitan department'),
('FR', '12', 'Aveyron', 'Metropolitan department'),
('FR', '13', 'Bouches-du-Rhône', 'Metropolitan department'),
('FR', '14', 'Calvados', 'Metropolitan department'),
('FR', '15', 'Cantal', 'Metropolitan department'),
('FR', '16', 'Charente', 'Metropolitan department'),
('FR', '17', 'Charente-Maritime', 'Metropolitan department'),
('FR', '18', 'Cher', 'Metropolitan department'),
('FR', '19', 'Corrèze', 'Metropolitan department'),
('FR', '21', 'Côte-d\'Or', 'Metropolitan department'),
('FR', '22', 'Côtes-d\'Armor', 'Metropolitan department'),
('FR', '23', 'Creuse', 'Metropolitan department'),
('FR', '24', 'Dordogne', 'Metropolitan department'),
('FR', '25', 'Doubs', 'Metropolitan department'),
('FR', '26', 'Drôme', 'Metropolitan department'),
('FR', '27', 'Eure', 'Metropolitan department'),
('FR', '28', 'Eure-et-Loir', 'Metropolitan department'),
('FR', '29', 'Finistère', 'Metropolitan department'),
('FR', '2A', 'Corse-du-Sud', 'Metropolitan department'),
('FR', '2B', 'Haute-Corse', 'Metropolitan department'),
('FR', '30', 'Gard', 'Metropolitan department'),
('FR', '31', 'Haute-Garonne', 'Metropolitan department'),
('FR', '32', 'Gers', 'Metropolitan department'),
('FR', '33', 'Gironde', 'Metropolitan department'),
('FR', '34', 'Hérault', 'Metropolitan department'),
('FR', '35', 'Ille-et-Vilaine', 'Metropolitan department'),
('FR', '36', 'Indre', 'Metropolitan department'),
('FR', '37', 'Indre-et-Loire', 'Metropolitan department'),
('FR', '38', 'Isère', 'Metropolitan department'),
('FR', '39', 'Jura', 'Metropolitan department'),
('FR', '40', 'Landes', 'Metropolitan department'),
('FR', '41', 'Loir-et-Cher', 'Metropolitan department'),
('FR', '42', 'Loire', 'Metropolitan department'),
('FR', '43', 'Haute-Loire', 'Metropolitan department'),
('FR', '44', 'Loire-Atlantique', 'Metropolitan department'),
('FR', '45', 'Loiret', 'Metropolitan department'),
('FR', '46', 'Lot', 'Metropolitan department'),
('FR', '47', 'Lot-et-Garonne', 'Metropolitan department'),
('FR', '48', 'Lozère', 'Metropolitan department'),
('FR', '49', 'Maine-et-Loire', 'Metropolitan department'),
('FR', '50', 'Manche', 'Metropolitan department'),
('FR', '51', 'Marne', 'Metropolitan department'),
('FR', '52', 'Haute-Marne', 'Metropolitan department'),
('FR', '53', 'Mayenne', 'Metropolitan department'),
('FR', '54', 'Meurthe-et-Moselle', 'Metropolitan department'),
('FR', '55', 'Meuse', 'Metropolitan department'),
('FR', '56', 'Morbihan', 'Metropolitan department'),
('FR', '57', 'Moselle', 'Metropolitan department'),
('FR', '58', 'Nièvre', 'Metropolitan department'),
('FR', '59', 'Nord', 'Metropolitan department'),
('FR', '60', 'Oise', 'Metropolitan department'),
('FR', '61', 'Orne', 'Metropolitan department'),
('FR', '62', 'Pas-de-Calais', 'Metropolitan department'),
('FR', '63', 'Puy-de-Dôme', 'Metropolitan department'),
('FR', '64', 'Pyrénées-Atlantiques', 'Metropolitan department'),
('FR', '65', 'Hautes-Pyrénées', 'Metropolitan department'),
('FR', '66', 'Pyrénées-Orientales', 'Metropolitan department'),
('FR', '67', 'Bas-Rhin', 'Metropolitan department'),
('FR', '68', 'Haut-Rhin', 'Metropolitan department'),
('FR', '69', 'Rhône', 'Metropolitan department'),
('FR', '70', 'Haute-Saône', 'Metropolitan department'),
('FR', '71', 'Saône-et-Loire', 'Metropolitan department'),
('FR', '72', 'Sarthe', 'Metropolitan department'),
('FR', '73', 'Savoie', 'Metropolitan department'),
('FR', '74', 'Haute-Savoie', 'Metropolitan department'),
('FR', '75', 'Paris', 'Metropolitan department'),
('FR', '76', 'Seine-Maritime', 'Metropolitan department'),
('FR', '77', 'Seine-et-Marne', 'Metropolitan department'),
('FR', '78', 'Yvelines', 'Metropolitan department'),
('FR', '79', 'Deux-Sèvres', 'Metropolitan department'),
('FR', '80', 'Somme', 'Metropolitan department'),
('FR', '81', 'Tarn', 'Metropolitan department'),
('FR', '82', 'Tarn-et-Garonne', 'Metropolitan department'),
('FR', '83', 'Var', 'Metropolitan department'),
('FR', '84', 'Vaucluse', 'Metropolitan department'),
('FR', '85', 'Vendée', 'Metropolitan department'),
('FR', '86', 'Vienne', 'Metropolitan department'),
('FR', '87', 'Haute-Vienne', 'Metropolitan department'),
('FR', '88', 'Vosges', 'Metropolitan department'),
('FR', '89', 'Yonne', 'Metropolitan department'),
('FR', '90', 'Territoire de Belfort', 'Metropolitan department'),
('FR', '91', 'Essonne', 'Metropolitan department'),
('FR', '92', 'Hauts-de-Seine', 'Metropolitan department'),
('FR', '93', 'Seine-Saint-Denis', 'Metropolitan department'),
('FR', '94', 'Val-de-Marne', 'Metropolitan department'),
('FR', '95', 'Val-d\'Oise', 'Metropolitan department'),
('GA', '1', 'Estuaire', 'Province'),
('GA', '2', 'Haut-Ogooué', 'Province'),
('GA', '3', 'Moyen-Ogooué', 'Province'),
('GA', '4', 'Ngounié', 'Province'),
('GA', '5', 'Nyanga', 'Province'),
('GA', '6', 'Ogooué-Ivindo', 'Province'),
('GA', '7', 'Ogooué-Lolo', 'Province'),
('GA', '8', 'Ogooué-Maritime', 'Province'),
('GA', '9', 'Woleu-Ntem', 'Province'),
('GB', 'ABD', 'Aberdeenshire', 'Subdivision'),
('GB', 'ABE', 'Aberdeen City', 'Subdivision'),
('GB', 'AGB', 'Argyll and Bute', 'Subdivision'),
('GB', 'AGY', 'Isle of Anglesey [Sir Ynys Môn GB-YNM]', 'Subdivision'),
('GB', 'ANS', 'Angus', 'Subdivision'),
('GB', 'ANT', 'Antrim', 'Subdivision'),
('GB', 'ARD', 'Ards', 'Subdivision'),
('GB', 'ARM', 'Armagh', 'Subdivision'),
('GB', 'BAS', 'Bath and North East Somerset', 'Subdivision'),
('GB', 'BBD', 'Blackburn with Darwen', 'Subdivision'),
('GB', 'BDF', 'Bedford', 'Subdivision'),
('GB', 'BDG', 'Barking and Dagenham', 'Subdivision'),
('GB', 'BEN', 'Brent', 'Subdivision'),
('GB', 'BEX', 'Bexley', 'Subdivision'),
('GB', 'BFS', 'Belfast', 'Subdivision'),
('GB', 'BGE', 'Bridgend [Pen-y-bont ar Ogwr GB-POG]', 'Subdivision'),
('GB', 'BGW', 'Blaenau Gwent', 'Subdivision'),
('GB', 'BIR', 'Birmingham', 'Subdivision'),
('GB', 'BKM', 'Buckinghamshire', 'County'),
('GB', 'BLA', 'Ballymena', 'Subdivision'),
('GB', 'BLY', 'Ballymoney', 'Subdivision'),
('GB', 'BMH', 'Bournemouth', 'Subdivision'),
('GB', 'BNB', 'Banbridge', 'Subdivision'),
('GB', 'BNE', 'Barnet', 'Subdivision'),
('GB', 'BNH', 'Brighton and Hove', 'Subdivision'),
('GB', 'BNS', 'Barnsley', 'Subdivision'),
('GB', 'BOL', 'Bolton', 'Subdivision'),
('GB', 'BPL', 'Blackpool', 'Subdivision'),
('GB', 'BRC', 'Bracknell Forest', 'Subdivision'),
('GB', 'BRD', 'Bradford', 'Subdivision'),
('GB', 'BRY', 'Bromley', 'Subdivision'),
('GB', 'BST', 'Bristol, City of', 'Subdivision'),
('GB', 'BUR', 'Bury', 'Subdivision'),
('GB', 'CAM', 'Cambridgeshire', 'County'),
('GB', 'CAY', 'Caerphilly [Caerffili GB-CAF]', 'Subdivision'),
('GB', 'CBF', 'Central Bedfordshire', ''),
('GB', 'CGN', 'Ceredigion [Sir Ceredigion]', 'Subdivision'),
('GB', 'CGV', 'Craigavon', 'Subdivision'),
('GB', 'CHE', 'Cheshire East', ''),
('GB', 'CHW', 'Cheshire West and Chester', ''),
('GB', 'CKF', 'Carrickfergus', 'Subdivision'),
('GB', 'CKT', 'Cookstown', 'Subdivision'),
('GB', 'CLD', 'Calderdale', 'Subdivision'),
('GB', 'CLK', 'Clackmannanshire', 'Subdivision'),
('GB', 'CLR', 'Coleraine', 'Subdivision'),
('GB', 'CMA', 'Cumbria', 'County'),
('GB', 'CMD', 'Camden', 'Subdivision'),
('GB', 'CMN', 'Carmarthenshire [Sir Gaerfyrddin GB-GFY]', 'Subdivision'),
('GB', 'CON', 'Cornwall', 'Subdivision'),
('GB', 'COV', 'Coventry', 'Subdivision'),
('GB', 'CRF', 'Cardiff [Caerdydd GB-CRD]', 'Subdivision'),
('GB', 'CRY', 'Croydon', 'Subdivision'),
('GB', 'CSR', 'Castlereagh', 'Subdivision'),
('GB', 'CWY', 'Conwy', 'Subdivision'),
('GB', 'DAL', 'Darlington', 'Subdivision'),
('GB', 'DBY', 'Derbyshire', 'County'),
('GB', 'DEN', 'Denbighshire [Sir Ddinbych GB-DDB]', 'Subdivision'),
('GB', 'DER', 'Derby', 'Subdivision'),
('GB', 'DEV', 'Devon', 'County'),
('GB', 'DGN', 'Dungannon', 'Subdivision'),
('GB', 'DGY', 'Dumfries and Galloway', 'Subdivision'),
('GB', 'DNC', 'Doncaster', 'Subdivision'),
('GB', 'DND', 'Dundee City', 'Subdivision'),
('GB', 'DOR', 'Dorset', 'County'),
('GB', 'DOW', 'Down', 'Subdivision');
INSERT INTO `mm_country_subdivisions` (`iso`, `code`, `name`, `type`) VALUES
('GB', 'DRY', 'Derry', 'Subdivision'),
('GB', 'DUD', 'Dudley', 'Subdivision'),
('GB', 'DUR', 'Durham', 'Subdivision'),
('GB', 'DVV', 'Devon', 'Subdivision'),
('GB', 'EAL', 'Ealing', 'Subdivision'),
('GB', 'EAY', 'East Ayrshire', 'Subdivision'),
('GB', 'EDH', 'Edinburgh, City of', 'Subdivision'),
('GB', 'EDU', 'East Dunbartonshire', 'Subdivision'),
('GB', 'ELN', 'East Lothian', 'Subdivision'),
('GB', 'ELS', 'Eilean Siar', 'Subdivision'),
('GB', 'ENF', 'Enfield', 'Subdivision'),
('GB', 'ERW', 'East Renfrewshire', 'Subdivision'),
('GB', 'ERY', 'East Riding of Yorkshire', 'Subdivision'),
('GB', 'ESS', 'Essex', 'County'),
('GB', 'ESX', 'East Sussex', 'County'),
('GB', 'FAL', 'Falkirk', 'Subdivision'),
('GB', 'FER', 'Fermanagh', 'Subdivision'),
('GB', 'FIF', 'Fife', 'Subdivision'),
('GB', 'FLN', 'Flintshire [Sir y Fflint GB-FFL]', 'Subdivision'),
('GB', 'GAT', 'Gateshead', 'Subdivision'),
('GB', 'GLG', 'Glasgow City', 'Subdivision'),
('GB', 'GLS', 'Gloucestershire', 'County'),
('GB', 'GRE', 'Greenwich', 'Subdivision'),
('GB', 'GWN', 'Gwynedd', 'Subdivision'),
('GB', 'HAL', 'Halton', 'Subdivision'),
('GB', 'HAM', 'Hampshire', 'County'),
('GB', 'HAV', 'Havering', 'Subdivision'),
('GB', 'HCK', 'Hackney', 'Subdivision'),
('GB', 'HEF', 'Herefordshire, County of', 'Subdivision'),
('GB', 'HIL', 'Hillingdon', 'Subdivision'),
('GB', 'HLD', 'Highland', 'Subdivision'),
('GB', 'HMF', 'Hammersmith and Fulham', 'Subdivision'),
('GB', 'HNS', 'Hounslow', 'Subdivision'),
('GB', 'HPL', 'Hartlepool', 'Subdivision'),
('GB', 'HRT', 'Hertfordshire', 'County'),
('GB', 'HRW', 'Harrow', 'Subdivision'),
('GB', 'HRY', 'Haringey', 'Subdivision'),
('GB', 'IOW', 'Isle of Wight', 'Subdivision'),
('GB', 'ISL', 'Islington', 'Subdivision'),
('GB', 'IVC', 'Inverclyde', 'Subdivision'),
('GB', 'KEC', 'Kensington and Chelsea', 'Subdivision'),
('GB', 'KEN', 'Kent', 'County'),
('GB', 'KHL', 'Kingston upon Hull, City of', 'Subdivision'),
('GB', 'KIR', 'Kirklees', 'Subdivision'),
('GB', 'KTT', 'Kingston upon Thames', 'Subdivision'),
('GB', 'KWL', 'Knowsley', 'Subdivision'),
('GB', 'LAN', 'Lancashire', 'County'),
('GB', 'LBH', 'Lambeth', 'Subdivision'),
('GB', 'LCE', 'Leicester', 'Subdivision'),
('GB', 'LDS', 'Leeds', 'Subdivision'),
('GB', 'LEC', 'Leicestershire', 'County'),
('GB', 'LEW', 'Lewisham', 'Subdivision'),
('GB', 'LIN', 'Lincolnshire', 'County'),
('GB', 'LIV', 'Liverpool', 'Subdivision'),
('GB', 'LMV', 'Limavady', 'Subdivision'),
('GB', 'LND', 'London, City of', 'City Corporation'),
('GB', 'LRN', 'Larne', 'Subdivision'),
('GB', 'LSB', 'Lisburn', 'Subdivision'),
('GB', 'LUT', 'Luton', 'Subdivision'),
('GB', 'MAN', 'Manchester', 'Subdivision'),
('GB', 'MDB', 'Middlesbrough', 'Subdivision'),
('GB', 'MDW', 'Medway', 'Subdivision'),
('GB', 'MFT', 'Magherafelt', 'Subdivision'),
('GB', 'MIK', 'Milton Keynes', 'Subdivision'),
('GB', 'MLN', 'Midlothian', 'Subdivision'),
('GB', 'MON', 'Monmouthshire [Sir Fynwy GB-FYN]', 'Subdivision'),
('GB', 'MRT', 'Merton', 'Subdivision'),
('GB', 'MRY', 'Moray', 'Subdivision'),
('GB', 'MTY', 'Merthyr Tydfil [Merthyr Tudful GB-MTU]', 'Subdivision'),
('GB', 'MYL', 'Moyle', 'Subdivision'),
('GB', 'NAY', 'North Ayrshire', 'Subdivision'),
('GB', 'NBL', 'Northumberland', 'Subdivision'),
('GB', 'NDN', 'North Down', 'Subdivision'),
('GB', 'NEL', 'North East Lincolnshire', 'Subdivision'),
('GB', 'NET', 'Newcastle upon Tyne', 'Subdivision'),
('GB', 'NFK', 'Norfolk', 'County'),
('GB', 'NGM', 'Nottingham', 'Subdivision'),
('GB', 'NLK', 'North Lanarkshire', 'Subdivision'),
('GB', 'NLN', 'North Lincolnshire', 'Subdivision'),
('GB', 'NSM', 'North Somerset', 'Subdivision'),
('GB', 'NTA', 'Newtownabbey', 'Subdivision'),
('GB', 'NTH', 'Northamptonshire', 'County'),
('GB', 'NTL', 'Neath Port Talbot [Castell-nedd Port Talbot GB-CTL]', 'Subdivision'),
('GB', 'NTT', 'Nottinghamshire', 'County'),
('GB', 'NTY', 'North Tyneside', 'Subdivision'),
('GB', 'NWM', 'Newham', 'Subdivision'),
('GB', 'NWP', 'Newport [Casnewydd GB-CNW]', 'Subdivision'),
('GB', 'NYK', 'North Yorkshire', 'County'),
('GB', 'NYM', 'Newry and Mourne', 'Subdivision'),
('GB', 'OLD', 'Oldham', 'Subdivision'),
('GB', 'OMH', 'Omagh', 'Subdivision'),
('GB', 'ORK', 'Orkney Islands', 'Subdivision'),
('GB', 'OXF', 'Oxfordshire', 'County'),
('GB', 'PEM', 'Pembrokeshire [Sir Benfro GB-BNF]', 'Subdivision'),
('GB', 'PKN', 'Perth and Kinross', 'Subdivision'),
('GB', 'PLY', 'Plymouth', 'Subdivision'),
('GB', 'POL', 'Poole', 'Subdivision'),
('GB', 'POR', 'Portsmouth', 'Subdivision'),
('GB', 'POW', 'Powys', 'Subdivision'),
('GB', 'PTE', 'Peterborough', 'Subdivision'),
('GB', 'RCC', 'Redcar and Cleveland', 'Subdivision'),
('GB', 'RCH', 'Rochdale', 'Subdivision'),
('GB', 'RCT', 'Rhondda, Cynon, Taff [Rhondda, Cynon,Taf]', 'Subdivision'),
('GB', 'RDB', 'Redbridge', 'Subdivision'),
('GB', 'RDG', 'Reading', 'Subdivision'),
('GB', 'RFW', 'Renfrewshire', 'Subdivision'),
('GB', 'RIC', 'Richmond upon Thames', 'Subdivision'),
('GB', 'ROT', 'Rotherham', 'Subdivision'),
('GB', 'RUT', 'Rutland', 'Subdivision'),
('GB', 'SAW', 'Sandwell', 'Subdivision'),
('GB', 'SAY', 'South Ayrshire', 'Subdivision'),
('GB', 'SCB', 'Scottish Borders, The', 'Subdivision'),
('GB', 'SFK', 'Suffolk', 'County'),
('GB', 'SFT', 'Sefton', 'Subdivision'),
('GB', 'SGC', 'South Gloucestershire', 'Subdivision'),
('GB', 'SHF', 'Sheffield', 'Subdivision'),
('GB', 'SHN', 'St. Helens', 'Subdivision'),
('GB', 'SHR', 'Shropshire', 'Subdivision'),
('GB', 'SKP', 'Stockport', 'Subdivision'),
('GB', 'SLF', 'Salford', 'Subdivision'),
('GB', 'SLG', 'Slough', 'Subdivision'),
('GB', 'SLK', 'South Lanarkshire', 'Subdivision'),
('GB', 'SND', 'Sunderland', 'Subdivision'),
('GB', 'SOL', 'Solihull', 'Subdivision'),
('GB', 'SOM', 'Somerset', 'County'),
('GB', 'SOS', 'Southend-on-Sea', 'Subdivision'),
('GB', 'SRY', 'Surrey', 'County'),
('GB', 'STB', 'Strabane', 'Subdivision'),
('GB', 'STE', 'Stoke-on-Trent', 'Subdivision'),
('GB', 'STG', 'Stirling', 'Subdivision'),
('GB', 'STH', 'Southampton', 'Subdivision'),
('GB', 'STN', 'Sutton', 'Subdivision'),
('GB', 'STS', 'Staffordshire', 'County'),
('GB', 'STT', 'Stockton-on-Tees', 'Subdivision'),
('GB', 'STY', 'South Tyneside', 'Subdivision'),
('GB', 'SWA', 'Swansea [Abertawe GB-ATA]', 'Subdivision'),
('GB', 'SWD', 'Swindon', 'Subdivision'),
('GB', 'SWK', 'Southwark', 'Subdivision'),
('GB', 'TAM', 'Tameside', 'Subdivision'),
('GB', 'TFW', 'Telford and Wrekin', 'Subdivision'),
('GB', 'THR', 'Thurrock', 'Subdivision'),
('GB', 'TOB', 'Torbay', 'Subdivision'),
('GB', 'TOF', 'Torfaen [Tor-faen]', 'Subdivision'),
('GB', 'TRF', 'Trafford', 'Subdivision'),
('GB', 'TWH', 'Tower Hamlets', 'Subdivision'),
('GB', 'VGL', 'Vale of Glamorgan, The [Bro Morgannwg GB-BMG]', 'Subdivision'),
('GB', 'WAR', 'Warwickshire', 'County'),
('GB', 'WBK', 'West Berkshire', 'Subdivision'),
('GB', 'WDU', 'West Dunbartonshire', 'Subdivision'),
('GB', 'WFT', 'Waltham Forest', 'Subdivision'),
('GB', 'WGN', 'Wigan', 'Subdivision'),
('GB', 'WIL', 'Wiltshire', 'Subdivision'),
('GB', 'WKF', 'Wakefield', 'Subdivision'),
('GB', 'WLL', 'Walsall', 'Subdivision'),
('GB', 'WLN', 'West Lothian', 'Subdivision'),
('GB', 'WLV', 'Wolverhampton', 'Subdivision'),
('GB', 'WND', 'Wandsworth', 'Subdivision'),
('GB', 'WNM', 'Windsor and Maidenhead', 'Subdivision'),
('GB', 'WOK', 'Wokingham', 'Subdivision'),
('GB', 'WOR', 'Worcestershire', 'County'),
('GB', 'WRL', 'Wirral', 'Subdivision'),
('GB', 'WRT', 'Warrington', 'Subdivision'),
('GB', 'WRX', 'Wrexham [Wrecsam GB-WRC]', 'Subdivision'),
('GB', 'WSM', 'Westminster', 'Subdivision'),
('GB', 'WSX', 'West Sussex', 'County'),
('GB', 'YOR', 'York', 'Subdivision'),
('GB', 'ZET', 'Shetland Islands', 'Subdivision'),
('GD', '01', 'Saint Andrew', 'Parish'),
('GD', '02', 'Saint David', 'Parish'),
('GD', '03', 'Saint George', 'Parish'),
('GD', '04', 'Saint John', 'Parish'),
('GD', '05', 'Saint Mark', 'Parish'),
('GD', '06', 'Saint Patrick', 'Parish'),
('GD', '10', 'Southern Grenadine Islands', 'Dependency'),
('GE', 'AB', 'Abkhazia', 'Autonomous republic'),
('GE', 'AJ', 'Ajaria', 'Autonomous republic'),
('GE', 'GU', 'Guria', 'Region'),
('GE', 'IM', 'Imeret\'i', 'Region'),
('GE', 'KA', 'Kakhet\'i', 'Region'),
('GE', 'KK', 'K\'vemo K\'art\'li', 'Region'),
('GE', 'MM', 'Mts\'khet\'a-Mt\'ianet\'i', 'Region'),
('GE', 'RL', 'Racha-Lechkhumi-Kvemo Svaneti', 'Region'),
('GE', 'SJ', 'Samts\'khe-Javakhet\'i', 'Region'),
('GE', 'SK', 'Shida K\'art\'li', 'Region'),
('GE', 'SZ', 'Samegrelo-Zemo Svanet\'i', 'Region'),
('GE', 'TB', 'T\'bilisi', 'City'),
('GH', 'AA', 'Greater Accra', 'Region'),
('GH', 'AH', 'Ashanti', 'Region'),
('GH', 'BA', 'Brong-Ahafo', 'Region'),
('GH', 'CP', 'Central', 'Region'),
('GH', 'EP', 'Eastern', 'Region'),
('GH', 'NP', 'Northern', 'Region'),
('GH', 'TV', 'Volta', 'Region'),
('GH', 'UE', 'Upper East', 'Region'),
('GH', 'UW', 'Upper West', 'Region'),
('GH', 'WP', 'Western', 'Region'),
('GM', 'B', 'Banjul', 'City'),
('GM', 'L', 'Lower River', 'Division'),
('GM', 'M', 'Central River', 'Division'),
('GM', 'N', 'North Bank', 'Division'),
('GM', 'U', 'Upper River', 'Division'),
('GM', 'W', 'Western', 'Division'),
('GN', 'BE', 'Beyla', 'Prefecture'),
('GN', 'BF', 'Boffa', 'Prefecture'),
('GN', 'BK', 'Boké', 'Prefecture'),
('GN', 'CO', 'Coyah', 'Prefecture'),
('GN', 'DB', 'Dabola', 'Prefecture'),
('GN', 'DI', 'Dinguiraye', 'Prefecture'),
('GN', 'DL', 'Dalaba', 'Prefecture'),
('GN', 'DU', 'Dubréka', 'Prefecture'),
('GN', 'FA', 'Faranah', 'Prefecture'),
('GN', 'FO', 'Forécariah', 'Prefecture'),
('GN', 'FR', 'Fria', 'Prefecture'),
('GN', 'GA', 'Gaoual', 'Prefecture'),
('GN', 'GU', 'Guékédou', 'Prefecture'),
('GN', 'KA', 'Kankan', 'Prefecture'),
('GN', 'KB', 'Koubia', 'Prefecture'),
('GN', 'KD', 'Kindia', 'Prefecture'),
('GN', 'KE', 'Kérouané', 'Prefecture'),
('GN', 'KN', 'Koundara', 'Prefecture'),
('GN', 'KO', 'Kouroussa', 'Prefecture'),
('GN', 'KS', 'Kissidougou', 'Prefecture'),
('GN', 'LA', 'Labé', 'Prefecture'),
('GN', 'LE', 'Lélouma', 'Prefecture'),
('GN', 'LO', 'Lola', 'Prefecture'),
('GN', 'MC', 'Macenta', 'Prefecture'),
('GN', 'MD', 'Mandiana', 'Prefecture'),
('GN', 'ML', 'Mali', 'Prefecture'),
('GN', 'MM', 'Mamou', 'Prefecture'),
('GN', 'NZ', 'Nzérékoré', 'Prefecture'),
('GN', 'PI', 'Pita', 'Prefecture'),
('GN', 'SI', 'Siguiri', 'Prefecture'),
('GN', 'TE', 'Télimélé', 'Prefecture'),
('GN', 'TO', 'Tougué', 'Prefecture'),
('GN', 'YO', 'Yomou', 'Prefecture'),
('GQ', 'AN', 'Annobón', 'Province'),
('GQ', 'BN', 'Bioko Norte', 'Province'),
('GQ', 'BS', 'Bioko Sur', 'Province'),
('GQ', 'CS', 'Centro Sur', 'Province'),
('GQ', 'KN', 'Kie-Ntem', 'Province'),
('GQ', 'LI', 'Litoral', 'Province'),
('GQ', 'WN', 'Wele-Nzás', 'Province'),
('GR', '01', 'Aitolia kai Akarnania', 'Department'),
('GR', '03', 'Voiotia', 'Department'),
('GR', '04', 'Evvoia', 'Department'),
('GR', '05', 'Evrytania', 'Department'),
('GR', '06', 'Fthiotida', 'Department'),
('GR', '07', 'Fokida', 'Department'),
('GR', '11', 'Argolida', 'Department'),
('GR', '12', 'Arkadia', 'Department'),
('GR', '13', 'Achaïa', 'Department'),
('GR', '14', 'Ileia', 'Department'),
('GR', '15', 'Korinthia', 'Department'),
('GR', '16', 'Lakonia', 'Department'),
('GR', '17', 'Messinia', 'Department'),
('GR', '21', 'Zakynthos', 'Department'),
('GR', '22', 'Kerkyra', 'Department'),
('GR', '23', 'Kefallonia', 'Department'),
('GR', '24', 'Lefkada', 'Department'),
('GR', '31', 'Arta', 'Department'),
('GR', '32', 'Thesprotia', 'Department'),
('GR', '33', 'Ioannina', 'Department'),
('GR', '34', 'Preveza', 'Department'),
('GR', '41', 'Karditsa', 'Department'),
('GR', '42', 'Larisa', 'Department'),
('GR', '43', 'Magnisia', 'Department'),
('GR', '44', 'Trikala', 'Department'),
('GR', '51', 'Grevena', 'Department'),
('GR', '52', 'Drama', 'Department'),
('GR', '53', 'Imathia', 'Department'),
('GR', '54', 'Thessaloniki', 'Department'),
('GR', '55', 'Kavala', 'Department'),
('GR', '56', 'Kastoria', 'Department'),
('GR', '57', 'Kilkis', 'Department'),
('GR', '58', 'Kozani', 'Department'),
('GR', '59', 'Pella', 'Department'),
('GR', '61', 'Pieria', 'Department'),
('GR', '62', 'Serres', 'Department'),
('GR', '63', 'Florina', 'Department'),
('GR', '64', 'Chalkidiki', 'Department'),
('GR', '69', 'Agio Oros', 'Self-Governed part'),
('GR', '71', 'Evros', 'Department'),
('GR', '72', 'Xanthi', 'Department'),
('GR', '73', 'Rodopi', 'Department'),
('GR', '81', 'Dodekanisos', 'Department'),
('GR', '82', 'Kyklades', 'Department'),
('GR', '83', 'Lesvos', 'Department'),
('GR', '84', 'Samos', 'Department'),
('GR', '85', 'Chios', 'Department'),
('GR', '91', 'Irakleio', 'Department'),
('GR', '92', 'Lasithi', 'Department'),
('GR', '93', 'Rethymno', 'Department'),
('GR', '94', 'Chania', 'Department'),
('GR', 'A1', 'Attiki', 'Department'),
('GT', 'AV', 'Alta Verapaz', 'Department'),
('GT', 'BV', 'Baja Verapaz', 'Department'),
('GT', 'CM', 'Chimaltenango', 'Department'),
('GT', 'CQ', 'Chiquimula', 'Department'),
('GT', 'ES', 'Escuintla', 'Department'),
('GT', 'GU', 'Guatemala', 'Department'),
('GT', 'HU', 'Huehuetenango', 'Department'),
('GT', 'IZ', 'Izabal', 'Department'),
('GT', 'JA', 'Jalapa', 'Department'),
('GT', 'JU', 'Jutiapa', 'Department'),
('GT', 'PE', 'Petén', 'Department'),
('GT', 'PR', 'El Progreso', 'Department'),
('GT', 'QC', 'Quiché', 'Department'),
('GT', 'QZ', 'Quetzaltenango', 'Department'),
('GT', 'RE', 'Retalhuleu', 'Department'),
('GT', 'SA', 'Sacatepéquez', 'Department'),
('GT', 'SM', 'San Marcos', 'Department'),
('GT', 'SO', 'Sololá', 'Department'),
('GT', 'SR', 'Santa Rosa', 'Department'),
('GT', 'SU', 'Suchitepéquez', 'Department'),
('GT', 'TO', 'Totonicapán', 'Department'),
('GT', 'ZA', 'Zacapa', 'Department'),
('GW', 'BA', 'Bafatá', 'Region'),
('GW', 'BL', 'Bolama', 'Region'),
('GW', 'BM', 'Biombo', 'Region'),
('GW', 'BS', 'Bissau', 'Autonomous sector'),
('GW', 'CA', 'Cacheu', 'Region'),
('GW', 'GA', 'Gabú', 'Region'),
('GW', 'OI', 'Oio', 'Region'),
('GW', 'QU', 'Quinara', 'Region'),
('GW', 'TO', 'Tombali', 'Region'),
('GY', 'BA', 'Barima-Waini', 'Region'),
('GY', 'CU', 'Cuyuni-Mazaruni', 'Region'),
('GY', 'DE', 'Demerara-Mahaica', 'Region'),
('GY', 'EB', 'East Berbice-Corentyne', 'Region'),
('GY', 'ES', 'Essequibo Islands-West Demerara', 'Region'),
('GY', 'MA', 'Mahaica-Berbice', 'Region'),
('GY', 'PM', 'Pomeroon-Supenaam', 'Region'),
('GY', 'PT', 'Potaro-Siparuni', 'Region'),
('GY', 'UD', 'Upper Demerara-Berbice', 'Region'),
('GY', 'UT', 'Upper Takutu-Upper Essequibo', 'Region'),
('HN', 'AT', 'Atlántida', 'Department'),
('HN', 'CH', 'Choluteca', 'Department'),
('HN', 'CL', 'Colón', 'Department'),
('HN', 'CM', 'Comayagua', 'Department'),
('HN', 'CP', 'Copán', 'Department'),
('HN', 'CR', 'Cortés', 'Department'),
('HN', 'EP', 'El Paraíso', 'Department'),
('HN', 'FM', 'Francisco Morazán', 'Department'),
('HN', 'GD', 'Gracias a Dios', 'Department'),
('HN', 'IB', 'Islas de la Bahía', 'Department'),
('HN', 'IN', 'Intibucá', 'Department'),
('HN', 'LE', 'Lempira', 'Department'),
('HN', 'LP', 'La Paz', 'Department'),
('HN', 'OC', 'Ocotepeque', 'Department'),
('HN', 'OL', 'Olancho', 'Department'),
('HN', 'SB', 'Santa Bárbara', 'Department'),
('HN', 'VA', 'Valle', 'Department'),
('HN', 'YO', 'Yoro', 'Department'),
('HR', '01', 'Zagrebacka upanija', 'County'),
('HR', '02', 'Krapinsko-zagorska upanija', 'County'),
('HR', '03', 'Sisacko-moslavacka upanija', 'County'),
('HR', '04', 'Karlovacka upanija', 'County'),
('HR', '05', 'Varadinska upanija', 'County'),
('HR', '06', 'Koprivnicko-krievacka upanija', 'County'),
('HR', '07', 'Bjelovarsko-bilogorska upanija', 'County'),
('HR', '08', 'Primorsko-goranska upanija', 'County'),
('HR', '09', 'Licko-senjska upanija', 'County'),
('HR', '10', 'Viroviticko-podravska upanija', 'County'),
('HR', '11', 'Poeko-slavonska upanija', 'County'),
('HR', '12', 'Brodsko-posavska upanija', 'County'),
('HR', '13', 'Zadarska upanija', 'County'),
('HR', '14', 'Osjecko-baranjska upanija', 'County'),
('HR', '15', 'ibensko-kninska upanija', 'County'),
('HR', '16', 'Vukovarsko-srijemska upanija', 'County'),
('HR', '17', 'Splitsko-dalmatinska upanija', 'County'),
('HR', '18', 'Istarska upanija', 'County'),
('HR', '19', 'Dubrovacko-neretvanska upanija', 'County'),
('HR', '20', 'Medimurska upanija', 'County'),
('HR', '21', 'Grad Zagreb', 'City'),
('HT', 'AR', 'Artibonite', 'Department'),
('HT', 'CE', 'Centre', 'Department'),
('HT', 'GA', 'Grande-Anse', 'Department'),
('HT', 'ND', 'Nord', 'Department'),
('HT', 'NE', 'Nord-Est', 'Department'),
('HT', 'NI', 'Nippes', 'Department'),
('HT', 'NO', 'Nord-Ouest', 'Department'),
('HT', 'OU', 'Ouest', 'Department'),
('HT', 'SD', 'Sud', 'Department'),
('HT', 'SE', 'Sud-Est', 'Department'),
('HU', 'BA', 'Baranya', 'County'),
('HU', 'BC', 'Békéscsaba', 'City of county right'),
('HU', 'BE', 'Békés', 'County'),
('HU', 'BK', 'Bács-Kiskun', 'County'),
('HU', 'BU', 'Budapest', 'Capital City'),
('HU', 'BZ', 'Borsod-Abaúj-Zemplén', 'County'),
('HU', 'CS', 'Csongrád', 'County'),
('HU', 'DE', 'Debrecen', 'City of county right'),
('HU', 'DU', 'Dunaujváros', 'City of county right'),
('HU', 'EG', 'Eger', 'City of county right'),
('HU', 'ER', 'Érd', 'City of county right'),
('HU', 'FE', 'Fejér', 'County'),
('HU', 'GS', 'Gyór-Moson-Sopron', 'County'),
('HU', 'GY', 'Gyór', 'City of county right'),
('HU', 'HB', 'Hajdú-Bihar', 'County'),
('HU', 'HE', 'Heves', 'County'),
('HU', 'HV', 'Hódmezóvásárhely', 'City of county right'),
('HU', 'JN', 'Jász-Nagykun-Szolnok', 'County'),
('HU', 'KE', 'Komárom-Esztergom', 'County'),
('HU', 'KM', 'Kecskemét', 'City of county right'),
('HU', 'KV', 'Kaposvár', 'City of county right'),
('HU', 'MI', 'Miskolc', 'City of county right'),
('HU', 'NK', 'Nagykanizsa', 'City of county right'),
('HU', 'NO', 'Nógrád', 'County'),
('HU', 'NY', 'Nyíregyháza', 'City of county right'),
('HU', 'PE', 'Pest', 'County'),
('HU', 'PS', 'Pécs', 'City of county right'),
('HU', 'SD', 'Szeged', 'City of county right'),
('HU', 'SF', 'Székesfehérvár', 'City of county right'),
('HU', 'SH', 'Szombathely', 'City of county right'),
('HU', 'SK', 'Szolnok', 'City of county right'),
('HU', 'SN', 'Sopron', 'City of county right'),
('HU', 'SO', 'Somogy', 'County'),
('HU', 'SS', 'Szekszárd', 'City of county right'),
('HU', 'ST', 'Salgótarján', 'City of county right'),
('HU', 'SZ', 'Szabolcs-Szatmár-Bereg', 'County'),
('HU', 'TB', 'Tatabánya', 'City of county right'),
('HU', 'TO', 'Tolna', 'County'),
('HU', 'VA', 'Vas', 'County'),
('HU', 'VE', 'Veszprém', 'County'),
('HU', 'VM', 'Veszprém', 'City of county right'),
('HU', 'ZA', 'Zala', 'County'),
('HU', 'ZE', 'Zalaegerszeg', 'City of county right'),
('ID', 'AC', 'Aceh', 'Autononous province'),
('ID', 'BA', 'Bali', 'Province'),
('ID', 'BB', 'Bangka Belitung', 'Province'),
('ID', 'BE', 'Bengkulu', 'Province'),
('ID', 'BT', 'Banten', 'Province'),
('ID', 'GO', 'Gorontalo', 'Province'),
('ID', 'JA', 'Jambi', 'Province'),
('ID', 'JB', 'Jawa Barat', 'Province'),
('ID', 'JI', 'Jawa Timur', 'Province'),
('ID', 'JK', 'Jakarta Raya', 'Special district'),
('ID', 'JT', 'Jawa Tengah', 'Province'),
('ID', 'KB', 'Kalimantan Barat', 'Province'),
('ID', 'KI', 'Kalimantan Timur', 'Province'),
('ID', 'KR', 'Kepulauan Riau', 'Province'),
('ID', 'KS', 'Kalimantan Selatan', 'Province'),
('ID', 'KT', 'Kalimantan Tengah', 'Province'),
('ID', 'LA', 'Lampung', 'Province'),
('ID', 'ML', 'Maluku', 'Province'),
('ID', 'MU', 'Maluku Utara', 'Province'),
('ID', 'NB', 'Nusa Tenggara Barat', 'Province'),
('ID', 'NT', 'Nusa Tenggara Timur', 'Province'),
('ID', 'PA', 'Papua', 'Province'),
('ID', 'PB', 'Papua Barat', 'Province'),
('ID', 'RI', 'Riau', 'Province'),
('ID', 'SA', 'Sulawesi Utara', 'Province'),
('ID', 'SB', 'Sumatera Barat', 'Province'),
('ID', 'SG', 'Sulawesi Tenggara', 'Province'),
('ID', 'SN', 'Sulawesi Selatan', 'Province'),
('ID', 'SR', 'Sulawesi Barat', 'Province'),
('ID', 'SS', 'Sumatera Selatan', 'Province'),
('ID', 'ST', 'Sulawesi Tengah', 'Province'),
('ID', 'SU', 'Sumatera Utara', 'Province'),
('ID', 'YO', 'Yogyakarta', 'Special region'),
('IE', 'CE', 'Clare', 'County'),
('IE', 'CN', 'Cavan', 'County'),
('IE', 'CO', 'Cork', 'Province'),
('IE', 'CW', 'Carlow', 'County'),
('IE', 'D', 'Dublin', 'County'),
('IE', 'DL', 'Donegal', 'County'),
('IE', 'G', 'Galway', 'County'),
('IE', 'KE', 'Kildare', 'County'),
('IE', 'KK', 'Kilkenny', 'County'),
('IE', 'KY', 'Kerry', 'County'),
('IE', 'LD', 'Longford', 'County'),
('IE', 'LH', 'Louth', 'County'),
('IE', 'LK', 'Limerick', 'County'),
('IE', 'LM', 'Leitrim', 'County'),
('IE', 'LS', 'Laois', 'County'),
('IE', 'MH', 'Meath', 'County'),
('IE', 'MN', 'Monaghan', 'County'),
('IE', 'MO', 'Mayo', 'County'),
('IE', 'OY', 'Offaly', 'County'),
('IE', 'RN', 'Roscommon', 'County'),
('IE', 'SO', 'Sligo', 'County'),
('IE', 'TA', 'Tipperary', 'County'),
('IE', 'WD', 'Waterford', 'County'),
('IE', 'WH', 'Westmeath', 'County'),
('IE', 'WW', 'Wicklow', 'County'),
('IE', 'WX', 'Wexford', 'County'),
('IL', 'D', 'HaDarom', 'District'),
('IL', 'HA', 'Hefa', 'District'),
('IL', 'JM', 'Yerushalayim', 'District'),
('IL', 'M', 'HaMerkaz', 'District'),
('IL', 'TA', 'Tel-Aviv', 'District'),
('IL', 'Z', 'HaZafon', 'District'),
('IN', 'AN', 'Andaman and Nicobar Islands', 'Union territory'),
('IN', 'AP', 'Andhra Pradesh', 'State'),
('IN', 'AR', 'Arunachal Pradesh', 'State'),
('IN', 'AS', 'Assam', 'State'),
('IN', 'BR', 'Bihar', 'State'),
('IN', 'CH', 'Chandigarh', 'Union territory'),
('IN', 'CT', 'Chhattisgarh', 'State'),
('IN', 'DD', 'Daman and Diu', 'Union territory'),
('IN', 'DL', 'Delhi', 'Union territory'),
('IN', 'DN', 'Dadra and Nagar Haveli', 'Union territory'),
('IN', 'GA', 'Goa', 'State'),
('IN', 'GJ', 'Gujarat', 'State'),
('IN', 'HP', 'Himachal Pradesh', 'State'),
('IN', 'HR', 'Haryana', 'State'),
('IN', 'JH', 'Jharkhand', 'State'),
('IN', 'JK', 'Jammu and Kashmir', 'State'),
('IN', 'KA', 'Karnataka', 'State'),
('IN', 'KL', 'Kerala', 'State'),
('IN', 'LD', 'Lakshadweep', 'Union territory'),
('IN', 'MH', 'Maharashtra', 'State'),
('IN', 'ML', 'Meghalaya', 'State'),
('IN', 'MN', 'Manipur', 'State'),
('IN', 'MP', 'Madhya Pradesh', 'State'),
('IN', 'MZ', 'Mizoram', 'State'),
('IN', 'NL', 'Nagaland', 'State'),
('IN', 'OR', 'Orissa', 'State'),
('IN', 'PB', 'Punjab', 'State'),
('IN', 'PY', 'Pondicherry', 'Union territory'),
('IN', 'RJ', 'Rajasthan', 'State'),
('IN', 'SK', 'Sikkim', 'State'),
('IN', 'TN', 'Tamil Nadu', 'State'),
('IN', 'TR', 'Tripura', 'State'),
('IN', 'UP', 'Uttar Pradesh', 'State'),
('IN', 'UT', 'Uttarakhand', 'State'),
('IN', 'WB', 'West Bengal', 'State'),
('IQ', 'AN', 'AI Anbar', 'Governorate'),
('IQ', 'AR', 'Arbil', 'Governorate'),
('IQ', 'BA', 'Al Basrah', 'Governorate'),
('IQ', 'BB', 'Babil', 'Governorate'),
('IQ', 'BG', 'Baghdad', 'Governorate'),
('IQ', 'DA', 'Dahuk', 'Governorate'),
('IQ', 'DI', 'Diyalá', 'Governorate'),
('IQ', 'DQ', 'Dhi Qar', 'Governorate'),
('IQ', 'KA', 'Karbala\'', 'Governorate'),
('IQ', 'MA', 'Maysan', 'Governorate'),
('IQ', 'MU', 'AI Muthanná', 'Governorate'),
('IQ', 'NA', 'An Najaf', 'Governorate'),
('IQ', 'NI', 'Ninawá', 'Governorate'),
('IQ', 'QA', 'Al Qadisiyah', 'Governorate'),
('IQ', 'SD', 'Salah ad Din', 'Governorate'),
('IQ', 'SU', 'As Sulaymaniyah', 'Governorate'),
('IQ', 'TS', 'At Ta\'mim', 'Governorate'),
('IQ', 'WA', 'Wasit', 'Governorate'),
('IR', '01', 'AZarbayjan-e Sharqi', 'Province'),
('IR', '02', 'AZarbayjan-e Gharbi', 'Province'),
('IR', '03', 'Ardabil', 'Province'),
('IR', '04', 'Esfahan', 'Province'),
('IR', '05', 'Ilam', 'Province'),
('IR', '06', 'Bushehr', 'Province'),
('IR', '07', 'Tehran', 'Province'),
('IR', '08', 'Chahar Mahall va Bakhtiari', 'Province'),
('IR', '10', 'Khuzestan', 'Province'),
('IR', '11', 'Zanjan', 'Province'),
('IR', '12', 'Semnan', 'Province'),
('IR', '13', 'Sistan va Baluchestan', 'Province'),
('IR', '14', 'Fars', 'Province'),
('IR', '15', 'Kerman', 'Province'),
('IR', '16', 'Kordestan', 'Province'),
('IR', '17', 'Kermanshah', 'Province'),
('IR', '18', 'Kohkiluyeh va Buyer Ahmad', 'Province'),
('IR', '19', 'Gilan', 'Province'),
('IR', '20', 'Lorestan', 'Province'),
('IR', '21', 'Mazandaran', 'Province'),
('IR', '22', 'Markazi', 'Province'),
('IR', '23', 'Hormozgan', 'Province'),
('IR', '24', 'Hamadan', 'Province'),
('IR', '25', 'Yazd', 'Province'),
('IR', '26', 'Qom', 'Province'),
('IR', '27', 'Golestan', 'Province'),
('IR', '28', 'Qazvin', 'Province'),
('IR', '29', 'Khorasan-e Janubi', 'Province'),
('IR', '30', 'Khorasan-e Razavi', 'Province'),
('IR', '31', 'Khorasan-e Shemali', 'Province'),
('IS', '0', 'Reykjavík', 'Region'),
('IS', '1', 'Höfuðborgarsvæði utan Reykjavíkur', 'Region'),
('IS', '2', 'Suðurnes', 'Region'),
('IS', '3', 'Vesturland', 'Region'),
('IS', '4', 'Vestfirðir', 'Region'),
('IS', '5', 'Norðurland vestra', 'Region'),
('IS', '6', 'Norðurland eystra', 'Region'),
('IS', '7', 'Austurland', 'Region'),
('IS', '8', 'Suðurland', 'Region'),
('IT', 'AG', 'Agrigento', 'Province'),
('IT', 'AL', 'Alessandria', 'Province'),
('IT', 'AN', 'Ancona', 'Province'),
('IT', 'AO', 'Aosta / Aoste (fr)', 'Province'),
('IT', 'AP', 'Ascoli Piceno', 'Province'),
('IT', 'AQ', 'L\'Aquila', 'Province'),
('IT', 'AR', 'Arezzo', 'Province'),
('IT', 'AT', 'Asti', 'Province'),
('IT', 'AV', 'Avellino', 'Province'),
('IT', 'BA', 'Bari', 'Province'),
('IT', 'BG', 'Bergamo', 'Province'),
('IT', 'BI', 'Biella', 'Province'),
('IT', 'BL', 'Belluno', 'Province'),
('IT', 'BN', 'Benevento', 'Province'),
('IT', 'BO', 'Bologna', 'Province'),
('IT', 'BR', 'Brindisi', 'Province'),
('IT', 'BS', 'Brescia', 'Province'),
('IT', 'BT', 'Barletta-Andria-Trani', 'Province'),
('IT', 'BZ', 'Bolzano / Bozen (de)', 'Province'),
('IT', 'CA', 'Cagliari', 'Province'),
('IT', 'CB', 'Campobasso', 'Province'),
('IT', 'CE', 'Caserta', 'Province'),
('IT', 'CH', 'Chieti', 'Province'),
('IT', 'CI', 'Carbonia-Iglesias', 'Province'),
('IT', 'CL', 'Caltanissetta', 'Province'),
('IT', 'CN', 'Cuneo', 'Province'),
('IT', 'CO', 'Como', 'Province'),
('IT', 'CR', 'Cremona', 'Province'),
('IT', 'CS', 'Cosenza', 'Province'),
('IT', 'CT', 'Catania', 'Province'),
('IT', 'CZ', 'Catanzaro', 'Province'),
('IT', 'EN', 'Enna', 'Province'),
('IT', 'FC', 'Forlì-Cesena', 'Province'),
('IT', 'FE', 'Ferrara', 'Province'),
('IT', 'FG', 'Foggia', 'Province'),
('IT', 'FI', 'Firenze', 'Province'),
('IT', 'FM', 'Fermo', 'Province'),
('IT', 'FR', 'Frosinone', 'Province'),
('IT', 'GE', 'Genova', 'Province'),
('IT', 'GO', 'Gorizia', 'Province'),
('IT', 'GR', 'Grosseto', 'Province'),
('IT', 'IM', 'Imperia', 'Province'),
('IT', 'IS', 'Isernia', 'Province'),
('IT', 'KR', 'Crotone', 'Province'),
('IT', 'LC', 'Lecco', 'Province'),
('IT', 'LE', 'Lecce', 'Province'),
('IT', 'LI', 'Livorno', 'Province'),
('IT', 'LO', 'Lodi', 'Province'),
('IT', 'LT', 'Latina', 'Province'),
('IT', 'LU', 'Lucca', 'Province'),
('IT', 'MB', 'Monza e Brianza', 'Province'),
('IT', 'MC', 'Macerata', 'Province'),
('IT', 'ME', 'Messina', 'Province'),
('IT', 'MI', 'Milano', 'Province'),
('IT', 'MN', 'Mantova', 'Province'),
('IT', 'MO', 'Modena', 'Province'),
('IT', 'MS', 'Massa-Carrara', 'Province'),
('IT', 'MT', 'Matera', 'Province'),
('IT', 'NA', 'Napoli', 'Province'),
('IT', 'NO', 'Novara', 'Province'),
('IT', 'NU', 'Nuoro', 'Province'),
('IT', 'OG', 'Ogliastra', 'Province'),
('IT', 'OR', 'Oristano', 'Province'),
('IT', 'OT', 'Olbia-Tempio', 'Province'),
('IT', 'PA', 'Palermo', 'Province'),
('IT', 'PC', 'Piacenza', 'Province'),
('IT', 'PD', 'Padova', 'Province'),
('IT', 'PE', 'Pescara', 'Province'),
('IT', 'PG', 'Perugia', 'Province'),
('IT', 'PI', 'Pisa', 'Province'),
('IT', 'PN', 'Pordenone', 'Province'),
('IT', 'PO', 'Prato', 'Province'),
('IT', 'PR', 'Parma', 'Province'),
('IT', 'PT', 'Pistoia', 'Province'),
('IT', 'PU', 'Pesaro e Urbino', 'Province'),
('IT', 'PV', 'Pavia', 'Province'),
('IT', 'PZ', 'Potenza', 'Province'),
('IT', 'RA', 'Ravenna', 'Province'),
('IT', 'RC', 'Reggio Calabria', 'Province'),
('IT', 'RE', 'Reggio Emilia', 'Province'),
('IT', 'RG', 'Ragusa', 'Province'),
('IT', 'RI', 'Rieti', 'Province'),
('IT', 'RM', 'Roma', 'Province'),
('IT', 'RN', 'Rimini', 'Province'),
('IT', 'RO', 'Rovigo', 'Province'),
('IT', 'SA', 'Salerno', 'Province'),
('IT', 'SI', 'Siena', 'Province'),
('IT', 'SO', 'Sondrio', 'Province'),
('IT', 'SP', 'La Spezia', 'Province'),
('IT', 'SR', 'Siracusa', 'Province'),
('IT', 'SS', 'Sassari', 'Province'),
('IT', 'SV', 'Savona', 'Province'),
('IT', 'TA', 'Taranto', 'Province'),
('IT', 'TE', 'Teramo', 'Province'),
('IT', 'TN', 'Trento', 'Province'),
('IT', 'TO', 'Torino', 'Province'),
('IT', 'TP', 'Trapani', 'Province'),
('IT', 'TR', 'Terni', 'Province'),
('IT', 'TS', 'Trieste', 'Province'),
('IT', 'TV', 'Treviso', 'Province'),
('IT', 'UD', 'Udine', 'Province'),
('IT', 'VA', 'Varese', 'Province'),
('IT', 'VB', 'Verbano-Cusio-Ossola', 'Province'),
('IT', 'VC', 'Vercelli', 'Province'),
('IT', 'VE', 'Venezia', 'Province'),
('IT', 'VI', 'Vicenza', 'Province'),
('IT', 'VR', 'Verona', 'Province'),
('IT', 'VS', 'Medio Campidano', 'Province'),
('IT', 'VT', 'Viterbo', 'Province'),
('IT', 'VV', 'Vibo Valentia', 'Province'),
('JM', '01', 'Kingston', 'Partish'),
('JM', '02', 'Saint Andrew', 'Partish'),
('JM', '03', 'Saint Thomas', 'Partish'),
('JM', '04', 'Portland', 'Partish'),
('JM', '05', 'Saint Mary', 'Partish'),
('JM', '06', 'Saint Ann', 'Partish'),
('JM', '07', 'Trelawny', 'Partish'),
('JM', '08', 'Saint James', 'Partish'),
('JM', '09', 'Hanover', 'Partish'),
('JM', '10', 'Westmoreland', 'Partish'),
('JM', '11', 'Saint Elizabeth', 'Partish'),
('JM', '12', 'Manchester', 'Partish'),
('JM', '13', 'Clarendon', 'Partish'),
('JM', '14', 'Saint Catherine', 'Partish'),
('JO', 'AJ', '\'Ajlun', 'Governorate'),
('JO', 'AM', '\'Amman', 'Governorate'),
('JO', 'AQ', 'Al\'Aqaba', 'Governorate'),
('JO', 'AT', 'At Tafilah', 'Governorate'),
('JO', 'AZ', 'Az Zarqa\'', 'Governorate'),
('JO', 'BA', 'AI Balqa\'', 'Governorate'),
('JO', 'IR', 'Irbid', 'Governorate'),
('JO', 'JA', 'Jarash', 'Governorate'),
('JO', 'KA', 'AI Karak', 'Governorate'),
('JO', 'MA', 'AI Mafraq', 'Governorate'),
('JO', 'MD', 'Madaba', 'Governorate'),
('JO', 'MN', 'Ma\'an', 'Governorate'),
('JP', '01', 'Hokkaido', 'Prefecture'),
('JP', '02', 'Aomori', 'Prefecture'),
('JP', '03', 'Iwate', 'Prefecture'),
('JP', '04', 'Miyagi', 'Prefecture'),
('JP', '05', 'Akita', 'Prefecture'),
('JP', '06', 'Yamagata', 'Prefecture'),
('JP', '07', 'Hukusima [Fukushima]', 'Prefecture'),
('JP', '08', 'Ibaraki', 'Prefecture'),
('JP', '09', 'Totigi [Tochigi]', 'Prefecture'),
('JP', '10', 'Gunma', 'Prefecture'),
('JP', '11', 'Saitama', 'Prefecture'),
('JP', '12', 'Tiba [Chiba]', 'Prefecture'),
('JP', '13', 'Tokyo', 'Prefecture'),
('JP', '14', 'Kanagawa', 'Prefecture'),
('JP', '15', 'Niigata', 'Prefecture'),
('JP', '16', 'Toyama', 'Prefecture'),
('JP', '17', 'Isikawa [Ishikawa]', 'Prefecture'),
('JP', '18', 'Hukui [Fukui]', 'Prefecture'),
('JP', '19', 'Yamanasi [Yamanashi]', 'Prefecture'),
('JP', '20', 'Nagano', 'Prefecture'),
('JP', '21', 'Gihu [Gifu]', 'Prefecture'),
('JP', '22', 'Sizuoka [Shizuoka]', 'Prefecture'),
('JP', '23', 'Aiti [Aichi]', 'Prefecture'),
('JP', '24', 'Mie', 'Prefecture'),
('JP', '25', 'Siga [Shiga]', 'Prefecture'),
('JP', '26', 'Kyoto', 'Prefecture'),
('JP', '27', 'Osaka', 'Prefecture'),
('JP', '28', 'Hyogo', 'Prefecture'),
('JP', '29', 'Nara', 'Prefecture'),
('JP', '30', 'Wakayama', 'Prefecture'),
('JP', '31', 'Tottori', 'Prefecture'),
('JP', '32', 'Simane [Shimane]', 'Prefecture'),
('JP', '33', 'Okayama', 'Prefecture'),
('JP', '34', 'Hirosima [Hiroshima]', 'Prefecture'),
('JP', '35', 'Yamaguti [Yamaguchi]', 'Prefecture'),
('JP', '36', 'Tokusima [Tokushima]', 'Prefecture'),
('JP', '37', 'Kagawa', 'Prefecture'),
('JP', '38', 'Ehime', 'Prefecture'),
('JP', '39', 'Koti [Kochi]', 'Prefecture'),
('JP', '40', 'Hukuoka [Fukuoka]', 'Prefecture'),
('JP', '41', 'Saga', 'Prefecture'),
('JP', '42', 'Nagasaki', 'Prefecture'),
('JP', '43', 'Kumamoto', 'Prefecture'),
('JP', '44', 'Oita', 'Prefecture'),
('JP', '45', 'Miyazaki', 'Prefecture'),
('JP', '46', 'Kagosima [Kagoshima]', 'Prefecture'),
('JP', '47', 'Okinawa', 'Prefecture'),
('KE', '110', 'Nairobi Municipality', 'Municipality'),
('KE', '200', 'Central', 'Province'),
('KE', '300', 'Coast', 'Province'),
('KE', '400', 'Eastern', 'Province'),
('KE', '500', 'North-Eastern', 'Province'),
('KE', '600', 'Nyanza', 'Province'),
('KE', '700', 'Rift Valley', 'Province'),
('KE', '800', 'Western', 'Province'),
('KG', 'B', 'Batken', 'Region'),
('KG', 'C', 'Chü', 'Region'),
('KG', 'GB', 'Bishkek', 'City'),
('KG', 'J', 'Jalal-Abad', 'Region'),
('KG', 'N', 'Naryn', 'Region'),
('KG', 'O', 'Osh', 'Region'),
('KG', 'T', 'Talas', 'Region'),
('KG', 'Y', 'Ysyk-Köl', 'Region'),
('KH', '1', 'Banteay Mean Chey [Bântéay Méanchey]', 'Province'),
('KH', '10', 'Kracheh [Krâchéh]', 'Province'),
('KH', '11', 'Mondol Kiri [Môndól Kiri]', 'Province'),
('KH', '12', 'Phnom Penh [Phnum Pénh]', 'Autonomous municipality'),
('KH', '13', 'Preah Vihear [Preah Vihéar]', 'Province'),
('KH', '14', 'Prey Veaeng [Prey Vêng]', 'Province'),
('KH', '15', 'Pousaat [Pouthisat]', 'Province'),
('KH', '16', 'Rotanak Kiri [Rôtânôkiri]', 'Province'),
('KH', '17', 'Siem Reab [Siemréab]', 'Province'),
('KH', '18', 'Krong Preah Sihanouk [Krong Preah Sihanouk]', 'Autonomous municipality'),
('KH', '19', 'Stueng Traeng [Stng Trêng]', 'Province'),
('KH', '2', 'Baat Dambang [Batdâmbâng]', 'Province'),
('KH', '20', 'Svaay Rieng [Svay Rieng]', 'Province'),
('KH', '21', 'Taakaev [Takêv]', 'Province'),
('KH', '22', 'Otdar Mean Chey [Otdâr Méanchey]', 'Province'),
('KH', '23', 'Krong Kaeb [Krong Kêb]', 'Autonomous municipality'),
('KH', '24', 'Krong Pailin [Krong Pailin]', 'Autonomous municipality'),
('KH', '3', 'Kampong Chaam [Kâmpóng Cham]', 'Province'),
('KH', '4', 'Kampong Chhnang [Kâmpóng Chhnang]', 'Province'),
('KH', '5', 'Kampong Spueu [Kâmpóng Sp]', 'Province'),
('KH', '6', 'Kampong Thum [Kâmpóng Thum]', 'Province'),
('KH', '7', 'Kampot [Kâmpôt]', 'Province'),
('KH', '8', 'Kandaal [Kândal]', 'Province'),
('KH', '9', 'Kaoh Kong [Kaôh Kong]', 'Province'),
('KI', 'G', 'Gilbert Islands', 'Group of islands'),
('KI', 'L', 'Line Islands', 'Group of islands'),
('KI', 'P', 'Phoenix Islands', 'Group of islands'),
('KM', 'A', 'Anjouan', 'Governorate'),
('KM', 'G', 'Grande Comore', 'Governorate'),
('KM', 'M', 'Mohéli', 'Governorate'),
('KN', '01', 'Christ Church Nichola Town', 'Parish'),
('KN', '02', 'Saint Anne Sandy Point', 'Parish'),
('KN', '03', 'Saint George Basseterre', 'Parish'),
('KN', '04', 'Saint George Gingerland', 'Parish'),
('KN', '05', 'Saint James Windward', 'Parish'),
('KN', '06', 'Saint John Capisterre', 'Parish'),
('KN', '07', 'Saint John Figtree', 'Parish'),
('KN', '08', 'Saint Mary Cayon', 'Parish'),
('KN', '09', 'Saint Paul Capisterre', 'Parish'),
('KN', '10', 'Saint Paul Charlestown', 'Parish'),
('KN', '11', 'Saint Peter Basseterre', 'Parish'),
('KN', '12', 'Saint Thomas Lowland', 'Parish'),
('KN', '13', 'Saint Thomas Middle Island', 'Parish'),
('KN', '15', 'Trinity Palmetto Point', 'Parish'),
('KP', '01', 'Phyeongyang', 'Capital City'),
('KP', '02', 'Phyeongannamto', 'Province'),
('KP', '03', 'Phyeonganpukto', 'Province'),
('KP', '04', 'Jakangto', 'Province'),
('KP', '05', 'Hwanghainamto', 'Province'),
('KP', '06', 'Hwanghaipukto', 'Province'),
('KP', '07', 'Kangweonto', 'Province'),
('KP', '08', 'Hamkyeongnamto', 'Province'),
('KP', '09', 'Hamkyeongpukto', 'Province'),
('KP', '10', 'Yanggang-do', 'Province'),
('KP', '13', 'Nason', 'Special City'),
('KR', '11', 'Seoul Teugbyeolsi [Seoul-T\'ukpyolshi]', 'Capital Metropolitan City'),
('KR', '26', 'Busan Gwang\'yeogsi [Pusan-Kwangyokshi]', 'Metropolitan city'),
('KR', '27', 'Daegu Gwang\'yeogsi [Taegu-Kwangyokshi]', 'Metropolitan city'),
('KR', '28', 'Incheon Gwang\'yeogsi [Inch\'on-Kwangyokshi]', 'Metropolitan city'),
('KR', '29', 'Gwangju Gwang\'yeogsi [Kwangju-Kwangyokshi]', 'Metropolitan city'),
('KR', '30', 'Daejeon Gwang\'yeogsi [Taejon-Kwangyokshi]', 'Metropolitan city'),
('KR', '31', 'Ulsan Gwang\'yeogsi [Ulsan-Kwangyokshi]', 'Metropolitan city'),
('KR', '41', 'Gyeonggido [Kyonggi-do]', 'Province'),
('KR', '42', 'Gang\'weondo [Kang-won-do]', 'Province'),
('KR', '43', 'Chungcheongbugdo [Ch\'ungch\'ongbuk-do]', 'Province'),
('KR', '44', 'Chungcheongnamdo [Ch\'ungch\'ongnam-do]', 'Province'),
('KR', '45', 'Jeonrabugdo [Chollabuk-do]', 'Province'),
('KR', '46', 'Jeonranamdo [Chollanam-do]', 'Province'),
('KR', '47', 'Gyeongsangbugdo [Kyongsangbuk-do]', 'Province'),
('KR', '48', 'Gyeongsangnamdo [Kyongsangnam-do]', 'Province'),
('KR', '49', 'Jejudo [Cheju-do]', 'Province'),
('KW', 'AH', 'Al Ahmadi', ''),
('KW', 'FA', 'Al Farwaniyah', ''),
('KW', 'HA', 'Hawalli', ''),
('KW', 'JA', 'Al Jahrah', ''),
('KW', 'KU', 'Al Kuwayt', ''),
('KW', 'MU', 'Mubarak al Kabir', ''),
('KZ', 'AKM', 'Aqmola oblysy', 'Region'),
('KZ', 'AKT', 'Aqtobe oblysy', 'Region'),
('KZ', 'ALA', 'Almaty', 'City'),
('KZ', 'ALM', 'Almaty oblysy', 'Region'),
('KZ', 'AST', 'Astana', 'City'),
('KZ', 'ATY', 'Atyrau oblysy', 'Region'),
('KZ', 'KAR', 'Qaraghandy oblysy', 'Region'),
('KZ', 'KUS', 'Qostanay oblysy', 'Region'),
('KZ', 'KZY', 'Qyzylorda oblysy', 'Region'),
('KZ', 'MAN', 'Mangghystau oblysy', 'Region'),
('KZ', 'PAV', 'Pavlodar oblysy', 'Region'),
('KZ', 'SEV', 'Soltüstik Qazaqstan oblysy', 'Region'),
('KZ', 'VOS', 'Shyghys Qazaqstan oblysy', 'Region'),
('KZ', 'YUZ', 'Ongtüstik Qazaqstan oblysy', 'Region'),
('KZ', 'ZAP', 'Batys Qazaqstan oblysy', 'Region'),
('KZ', 'ZHA', 'Zhambyl oblysy', 'Region'),
('LA', 'AT', 'Attapu [Attopeu]', 'Province'),
('LA', 'BK', 'Bokèo', 'Province'),
('LA', 'BL', 'Bolikhamxai [Borikhane]', 'Province'),
('LA', 'CH', 'Champasak [Champassak]', 'Province'),
('LA', 'HO', 'Houaphan', 'Province'),
('LA', 'KH', 'Khammouan', 'Province'),
('LA', 'LM', 'Louang Namtha', 'Province'),
('LA', 'LP', 'Louangphabang [Louang Prabang)', 'Province'),
('LA', 'OU', 'Oudomxai [Oudomsai]', 'Province'),
('LA', 'PH', 'Phôngsali [Phong Saly]', 'Province'),
('LA', 'SL', 'Salavan [Saravane]', 'Province'),
('LA', 'SV', 'Savannakhét', 'Province'),
('LA', 'VI', 'Vientiane', 'Province'),
('LA', 'VT', 'Vientiane', 'Prefecture'),
('LA', 'XA', 'Xaignabouli [Sayaboury]', 'Province'),
('LA', 'XE', 'Xékong [Sékong]', 'Province'),
('LA', 'XI', 'Xiangkhoang [Xieng Khouang]', 'Province'),
('LA', 'XN', 'Xaisômboun', ''),
('LB', 'AK', 'Aakkâr', 'Governorate'),
('LB', 'AS', 'Loubnâne ech Chemâli', 'Governorate'),
('LB', 'BA', 'Beiroût', 'Governorate'),
('LB', 'BH', 'Baalbek-Hermel', 'Governorate'),
('LB', 'BI', 'El Béqaa', 'Governorate'),
('LB', 'JA', 'Loubnâne ej Jnoûbi', 'Governorate'),
('LB', 'JL', 'Jabal Loubnâne', 'Governorate'),
('LB', 'NA', 'Nabatîyé', 'Governorate'),
('LI', '01', 'Balzers', ''),
('LI', '02', 'Eschen', ''),
('LI', '03', 'Gamprin', ''),
('LI', '04', 'Mauren', ''),
('LI', '05', 'Planken', ''),
('LI', '06', 'Ruggell', ''),
('LI', '07', 'Schaan', ''),
('LI', '08', 'Schellenberg', ''),
('LI', '09', 'Triesen', ''),
('LI', '10', 'Triesenberg', ''),
('LI', '11', 'Vaduz', ''),
('LK', '1', 'Basnahira Palata', 'Province'),
('LK', '11', 'Colombo', 'District'),
('LK', '12', 'Gampaha', 'District'),
('LK', '13', 'Kalutara', 'District'),
('LK', '2', 'Madhyama Palata', 'Province'),
('LK', '21', 'Kandy', 'District'),
('LK', '22', 'Matale', 'District'),
('LK', '23', 'Nuwara Eliya', 'District'),
('LK', '3', 'Dakunu Palata', 'Province'),
('LK', '31', 'Galle', 'District'),
('LK', '32', 'Matara', 'District'),
('LK', '33', 'Hambantota', 'District'),
('LK', '4', 'Uturu Palata', 'Province'),
('LK', '41', 'Jaffna', 'District'),
('LK', '42', 'Kilinochchi', 'District'),
('LK', '43', 'Mannar', 'District'),
('LK', '44', 'Vavuniya', 'District'),
('LK', '45', 'Mullaittivu', 'District'),
('LK', '5', 'Negenahira Palata', 'Province'),
('LK', '51', 'Batticaloa', 'District'),
('LK', '52', 'Ampara', 'District'),
('LK', '53', 'Trincomalee', 'District'),
('LK', '6', 'Wayamba Palata', 'Province'),
('LK', '61', 'Kurunegala', 'District'),
('LK', '62', 'Puttalam', 'District'),
('LK', '7', 'Uturumeda Palata', 'Province'),
('LK', '71', 'Anuradhapura', 'District'),
('LK', '72', 'Polonnaruwa', 'District'),
('LK', '8', 'Uva Palata', 'Province'),
('LK', '81', 'Badulla', 'District'),
('LK', '82', 'Monaragala', 'District'),
('LK', '9', 'Sabaragamuwa Palata', 'Province'),
('LK', '91', 'Ratnapura', 'District'),
('LK', '92', 'Kegalla', 'District'),
('LR', 'BG', 'Bong', 'County'),
('LR', 'BM', 'Bomi', 'County'),
('LR', 'CM', 'Grand Cape Mount', 'County'),
('LR', 'GB', 'Grand Bassa', 'County'),
('LR', 'GG', 'Grand Gedeh', 'County'),
('LR', 'GK', 'Grand Kru', 'County'),
('LR', 'GP', 'Gbarpolu', 'County'),
('LR', 'LO', 'Lofa', 'County'),
('LR', 'MG', 'Margibi', 'County'),
('LR', 'MO', 'Montserrado', 'County'),
('LR', 'MY', 'Maryland', 'County'),
('LR', 'NI', 'Nimba', 'County'),
('LR', 'RG', 'River Gee', 'County'),
('LR', 'RI', 'Rivercess', 'County'),
('LR', 'SI', 'Sinoe', 'County'),
('LS', 'A', 'Maseru', 'District'),
('LS', 'B', 'Butha-Buthe', 'District'),
('LS', 'C', 'Leribe', 'District'),
('LS', 'D', 'Berea', 'District'),
('LS', 'E', 'Mafeteng', 'District'),
('LS', 'F', 'Mohale\'s Hoek', 'District'),
('LS', 'G', 'Quthing', 'District'),
('LS', 'H', 'Qacha\'s Nek', 'District'),
('LS', 'J', 'Mokhotlong', 'District'),
('LS', 'K', 'Thaba-Tseka', 'District'),
('LT', 'AL', 'Alytaus Apskritis', 'County'),
('LT', 'KL', 'Klaipédos Apskritis', 'County'),
('LT', 'KU', 'Kauno Apskritis', 'County'),
('LT', 'MR', 'Marijampolés Apskritis', 'County'),
('LT', 'PN', 'Panevéio Apskritis', 'County'),
('LT', 'SA', 'iauliu Apskritis', 'County'),
('LT', 'TA', 'Tauragés Apskritis', 'County'),
('LT', 'TE', 'Teliu Apskritis', 'County'),
('LT', 'UT', 'Utenos Apskritis', 'County'),
('LT', 'VL', 'Vilniaus Apskritis', 'County'),
('LU', 'D', 'Diekirch', 'District'),
('LU', 'G', 'Grevenmacher', 'District'),
('LU', 'L', 'Luxembourg (fr)', 'District'),
('LV', '001', 'Aglonas novads (Aglona)', 'Municipality'),
('LV', '002', 'Aizkraukles novads (Aizkraukle)', 'Municipality'),
('LV', '003', 'Aizputes novads (Aizpute)', 'Municipality'),
('LV', '004', 'Aknistes novads (Akniste)', 'Municipality'),
('LV', '005', 'Alojas novads (Aloja)', 'Municipality'),
('LV', '006', 'Alsungas novads (Alsunga)', 'Municipality'),
('LV', '007', 'Aluksnes novads (Aluksne)', 'Municipality'),
('LV', '008', 'Amatas novads (Amata)', 'Municipality'),
('LV', '009', 'Apes novads (Ape)', 'Municipality'),
('LV', '010', 'Auces novads (Auce)', 'Municipality'),
('LV', '011', 'Adau novads (Adai)', 'Municipality'),
('LV', '012', 'Babites novads (Babite)', 'Municipality'),
('LV', '013', 'Baldones novads (Baldone)', 'Municipality'),
('LV', '014', 'Baltinavas novads (Baltinava)', 'Municipality'),
('LV', '015', 'Balvu novads (Balvi)', 'Municipality'),
('LV', '016', 'Bauskas novads (Bauska)', 'Municipality'),
('LV', '017', 'Beverinas novads (Beverina)', 'Municipality'),
('LV', '018', 'Brocenu novads (Broceni)', 'Municipality'),
('LV', '019', 'Burtnieku novads (Burtnieki)', 'Municipality'),
('LV', '020', 'Carnikavas novads (Carnikava)', 'Municipality'),
('LV', '021', 'Cesvaines novads (Cesvaine)', 'Municipality'),
('LV', '022', 'Cesu novads (Cesis)', 'Municipality'),
('LV', '023', 'Ciblas novads (Cibla)', 'Municipality'),
('LV', '024', 'Dagdas novads (Dagda)', 'Municipality'),
('LV', '025', 'Daugavpils novads (Daugavpils)', 'Municipality'),
('LV', '026', 'Dobeles novads (Dobele)', 'Municipality'),
('LV', '027', 'Dundagas novads (Dundaga)', 'Municipality'),
('LV', '028', 'Durbes novads (Durbe)', 'Municipality'),
('LV', '029', 'Engures novads (Engure)', 'Municipality'),
('LV', '030', 'Erglu novads (Ergli)', 'Municipality'),
('LV', '031', 'Garkalnes novads (Garkalne)', 'Municipality'),
('LV', '032', 'Grobinas novads (Grobina)', 'Municipality'),
('LV', '033', 'Gulbenes novads (Gulbene)', 'Municipality'),
('LV', '034', 'Iecavas novads (Iecava)', 'Municipality'),
('LV', '035', 'Ikkiles novads (Ikkile)', 'Municipality'),
('LV', '036', 'Ilukstes novads (Ilukste)', 'Municipality'),
('LV', '037', 'Incukalna novads (Incukalns)', 'Municipality'),
('LV', '038', 'Jaunjelgavas novads (Jaunjelgava)', 'Municipality'),
('LV', '039', 'Jaunpiebalgas novads (Jaunpiebalga)', 'Municipality'),
('LV', '040', 'Jaunpils novads (Jaunpils)', 'Municipality'),
('LV', '041', 'Jelgavas novads (Jelgava)', 'Municipality'),
('LV', '042', 'Jekabpils novads (Jekabpils)', 'Municipality'),
('LV', '043', 'Kandavas novads (Kandava)', 'Municipality'),
('LV', '044', 'Karsavas novads (Karsava)', 'Municipality'),
('LV', '045', 'Kocenu novads', 'Municipality'),
('LV', '046', 'Kokneses novads (Koknese)', 'Municipality'),
('LV', '047', 'Kraslavas novads (Kraslava)', 'Municipality'),
('LV', '048', 'Krimuldas novads (Krimulda)', 'Municipality'),
('LV', '049', 'Krustpils novads (Krustpils)', 'Municipality'),
('LV', '050', 'Kuldigas novads (Kuldiga)', 'Municipality'),
('LV', '051', 'Keguma novads (Kegums)', 'Municipality'),
('LV', '052', 'Kekavas novads (Kekava)', 'Municipality'),
('LV', '053', 'Lielvardes novads (Lielvarde)', 'Municipality'),
('LV', '054', 'Limbau novads (Limbai)', 'Municipality'),
('LV', '055', 'Ligatnes novads (Ligatne)', 'Municipality'),
('LV', '056', 'Livanu novads (Livani)', 'Municipality'),
('LV', '057', 'Lubanas novads (Lubana)', 'Municipality'),
('LV', '058', 'Ludzas novads (Ludza)', 'Municipality'),
('LV', '059', 'Madonas novads (Madona)', 'Municipality'),
('LV', '060', 'Mazsalacas novads (Mazsalaca)', 'Municipality'),
('LV', '061', 'Malpils novads (Malpils)', 'Municipality'),
('LV', '062', 'Marupes novads (Marupe)', 'Municipality'),
('LV', '063', 'Mersraga novads', 'Municipality'),
('LV', '064', 'Naukenu novads (Naukeni)', 'Municipality'),
('LV', '065', 'Neretas novads (Nereta)', 'Municipality'),
('LV', '066', 'Nicas novads (Nica)', 'Municipality'),
('LV', '067', 'Ogres novads (Ogre)', 'Municipality'),
('LV', '068', 'Olaines novads (Olaine)', 'Municipality'),
('LV', '069', 'Ozolnieku novads (Ozolnieki)', 'Municipality'),
('LV', '070', 'Pargaujas novads (Pargauja)', 'Municipality'),
('LV', '071', 'Pavilostas novads (Pavilosta)', 'Municipality'),
('LV', '072', 'Plavinu novads (Plavinas)', 'Municipality'),
('LV', '073', 'Preilu novads (Preili)', 'Municipality'),
('LV', '074', 'Priekules novads (Priekule)', 'Municipality'),
('LV', '075', 'Priekulu novads (Priekuli)', 'Municipality'),
('LV', '076', 'Raunas novads (Rauna)', 'Municipality'),
('LV', '077', 'Rezeknes novads (Rezekne)', 'Municipality'),
('LV', '078', 'Riebinu novads (Riebini)', 'Municipality'),
('LV', '079', 'Rojas novads (Roja)', 'Municipality'),
('LV', '080', 'Ropau novads (Ropai)', 'Municipality'),
('LV', '081', 'Rucavas novads (Rucava)', 'Municipality'),
('LV', '082', 'Rugaju novads (Rugaji)', 'Municipality'),
('LV', '083', 'Rundales novads (Rundale)', 'Municipality'),
('LV', '084', 'Rujienas novads (Rujiena)', 'Municipality'),
('LV', '085', 'Salas novads (Sala)', 'Municipality'),
('LV', '086', 'Salacgrivas novads (Salacgriva)', 'Municipality'),
('LV', '087', 'Salaspils novads (Salaspils)', 'Municipality'),
('LV', '088', 'Saldus novads (Saldus)', 'Municipality'),
('LV', '089', 'Saulkrastu novads (Saulkrasti)', 'Municipality'),
('LV', '090', 'Sejas novads (Seja)', 'Municipality'),
('LV', '091', 'Siguldas novads (Sigulda)', 'Municipality'),
('LV', '092', 'Skriveru novads (Skriveri)', 'Municipality'),
('LV', '093', 'Skrundas novads (Skrunda)', 'Municipality'),
('LV', '094', 'Smiltenes novads (Smiltene)', 'Municipality'),
('LV', '095', 'Stopinu novads (Stopini)', 'Municipality'),
('LV', '096', 'Strencu novads (Strenci)', 'Municipality'),
('LV', '097', 'Talsu novads (Talsi)', 'Municipality'),
('LV', '098', 'Tervetes novads (Tervete)', 'Municipality'),
('LV', '099', 'Tukuma novads (Tukums)', 'Municipality'),
('LV', '100', 'Vainodes novads (Vainode)', 'Municipality'),
('LV', '101', 'Valkas novads (Valka)', 'Municipality'),
('LV', '102', 'Varaklanu novads (Varaklani)', 'Municipality'),
('LV', '103', 'Varkavas novads (Varkava)', 'Municipality'),
('LV', '104', 'Vecpiebalgas novads (Vecpiebalga)', 'Municipality'),
('LV', '105', 'Vecumnieku novads (Vecumnieki)', 'Municipality'),
('LV', '106', 'Ventspils novads (Ventspils)', 'Municipality'),
('LV', '107', 'Viesites novads (Viesite)', 'Municipality'),
('LV', '108', 'Vilakas novads (Vilaka)', 'Municipality'),
('LV', '109', 'Vilanu novads (Vilani)', 'Municipality'),
('LV', '110', 'Zilupes novads (Zilupe)', 'Municipality'),
('LV', 'DGV', 'Daugavpils', 'City'),
('LV', 'JEL', 'Jelgava', 'City'),
('LV', 'JKB', 'Jekabpils', 'City'),
('LV', 'JUR', 'Jurmala', 'City'),
('LV', 'LPX', 'Liepdja', 'City'),
('LV', 'REZ', 'Rezekne', 'City'),
('LV', 'RIX', 'Riga', 'City'),
('LV', 'VEN', 'Ventspils', 'City'),
('LV', 'VMR', 'Valmiera', 'City'),
('LY', 'BU', 'Al Butnan', 'Popularate'),
('LY', 'DR', 'Darnah', 'Popularate'),
('LY', 'GT', 'Ghat', 'Popularate'),
('LY', 'JA', 'Al Jabal al Akhdar', 'Popularate'),
('LY', 'JG', 'Al Jabal al Gharbi', 'Popularate'),
('LY', 'JI', 'Al Jifarah', 'Popularate'),
('LY', 'JU', 'Al Jufrah', 'Popularate'),
('LY', 'KF', 'Al Kufrah', 'Popularate'),
('LY', 'MB', 'Al Marqab', 'Popularate'),
('LY', 'MI', 'Misratah', 'Popularate'),
('LY', 'MJ', 'Al Marj', 'Popularate'),
('LY', 'MQ', 'Murzuq', 'Popularate'),
('LY', 'NL', 'Nalut', 'Popularate'),
('LY', 'NQ', 'An Nuqat al Khams', 'Popularate'),
('LY', 'SB', 'Sabha', 'Popularate'),
('LY', 'SR', 'Surt', 'Popularate'),
('LY', 'TB', 'Tarabulus', 'Popularate'),
('LY', 'WA', 'Al Wa?at', 'Popularate'),
('LY', 'WD', 'Wadi al Hayat', 'Popularate'),
('LY', 'WS', 'Wadi ash Shati?', 'Popularate'),
('LY', 'ZA', 'Az Zawiyah', 'Popularate'),
('MA', '01', 'Tanger-Tétouan', 'Economic Region'),
('MA', '02', 'Gharb-Chrarda-Beni Hssen', 'Economic Region'),
('MA', '03', 'Taza-Al Hoceima-Taounate', 'Economic Region'),
('MA', '04', 'L\'Oriental', 'Economic Region'),
('MA', '05', 'Fès-Boulemane', 'Economic Region'),
('MA', '06', 'Meknès-Tafilalet', 'Economic Region'),
('MA', '07', 'Rabat-Salé-Zemmour-Zaer', 'Economic Region'),
('MA', '08', 'Grand Casablanca', 'Economic Region'),
('MA', '09', 'Chaouia-Ouardigha', 'Economic Region'),
('MA', '10', 'Doukhala-Abda', 'Economic Region'),
('MA', '11', 'Marrakech-Tensift-Al Haouz', 'Economic Region'),
('MA', '12', 'Tadla-Azilal', 'Economic Region'),
('MA', '13', 'Sous-Massa-Draa', 'Economic Region'),
('MA', '14', 'Guelmim-Es Smara', 'Economic Region'),
('MA', '15', 'Laâyoune-Boujdour-Sakia el Hamra', 'Economic Region'),
('MA', '16', 'Oued ed Dahab-Lagouira', 'Economic Region'),
('MA', 'AGD', 'Agadir*', 'Prefecture'),
('MA', 'AOU', 'Aousserd', 'Prefecture'),
('MA', 'ASZ', 'Assa-Zag', 'Province'),
('MA', 'AZI', 'Azilal', 'Province'),
('MA', 'BEM', 'Beni Mellal', 'Province'),
('MA', 'BER', 'Berkane', 'Province'),
('MA', 'BES', 'Ben Slimane', 'Province'),
('MA', 'BOD', 'Boujdour (EH)', 'Province'),
('MA', 'BOM', 'Boulemane', 'Province'),
('MA', 'CAS', 'Casablanca [Dar el Beïda]*', 'Prefecture'),
('MA', 'CHE', 'Chefchaouene', 'Province'),
('MA', 'CHI', 'Chichaoua', 'Province'),
('MA', 'CHT', 'Chtouka-Ait Baha', 'Province'),
('MA', 'ERR', 'Errachidia', 'Province'),
('MA', 'ESI', 'Essaouira', 'Province'),
('MA', 'ESM', 'Es Smara (EH)', 'Province'),
('MA', 'FAH', 'Fahs-Beni Makada', 'Prefecture'),
('MA', 'FES', 'Fès*', 'Prefecture'),
('MA', 'FIG', 'Figuig', 'Province'),
('MA', 'GUE', 'Guelmim', 'Province'),
('MA', 'HAJ', 'El Hajeb', 'Province'),
('MA', 'HAO', 'Al Haouz', 'Province'),
('MA', 'HOC', 'Al Hoceïma', 'Province'),
('MA', 'IFR', 'Ifrane', 'Province'),
('MA', 'INE', 'Inezgane-Ait Melloul', 'Prefecture'),
('MA', 'IRA', 'Jerada', 'Province'),
('MA', 'JDI', 'El Jadida', 'Province'),
('MA', 'KEN', 'Kènitra', 'Province'),
('MA', 'KES', 'Kelaat Sraghna', 'Province'),
('MA', 'KHE', 'Khemisset', 'Province'),
('MA', 'KHN', 'Khenifra', 'Province'),
('MA', 'KHO', 'Khouribga', 'Province'),
('MA', 'LAA', 'Laâyoune* (EH)', 'Prefecture'),
('MA', 'LAR', 'Larache', 'Province'),
('MA', 'MED', 'Médiouna', 'Province'),
('MA', 'MEK', 'Meknès*', 'Prefecture'),
('MA', 'MMD', 'Marrakech-Medina', 'Prefecture'),
('MA', 'MMN', 'Marrakech-Menara', 'Prefecture'),
('MA', 'MOH', 'Mohammadia', 'Prefecture'),
('MA', 'MOU', 'Moulay Yacoub', 'Province'),
('MA', 'NAD', 'Nador', 'Province'),
('MA', 'NOU', 'Nouaceur', 'Province'),
('MA', 'OUA', 'Ouarzazate', 'Province'),
('MA', 'OUD', 'Oued ed Dahab (EH)', 'Province'),
('MA', 'OUJ', 'Oujda*', 'Prefecture'),
('MA', 'RAB', 'Rabat', 'Prefecture'),
('MA', 'SAF', 'Safi', 'Province'),
('MA', 'SAL', 'Salé', 'Prefecture'),
('MA', 'SEF', 'Sefrou', 'Province');
INSERT INTO `mm_country_subdivisions` (`iso`, `code`, `name`, `type`) VALUES
('MA', 'SET', 'Settat', 'Province'),
('MA', 'SIK', 'Sidi Kacem', 'Province'),
('MA', 'SKH', 'Skhirate-Témara', 'Prefecture'),
('MA', 'SYB', 'Sidi Youssef Ben Ali', 'Prefecture'),
('MA', 'TAI', 'Taourirt', 'Province'),
('MA', 'TAO', 'Taounate', 'Province'),
('MA', 'TAR', 'Taroudannt', 'Province'),
('MA', 'TAT', 'Tata', 'Province'),
('MA', 'TAZ', 'Taza', 'Province'),
('MA', 'TET', 'Tétouan*', 'Prefecture'),
('MA', 'TIZ', 'Tiznit', 'Province'),
('MA', 'TNG', 'Tanger', 'Province'),
('MA', 'TNT', 'Tan-Tan', 'Province'),
('MA', 'ZAG', 'Zagora', 'Province'),
('MD', 'AN', 'Anenii Noi', 'District'),
('MD', 'BA', 'Balti', 'City'),
('MD', 'BD', 'Tighina', 'City'),
('MD', 'BR', 'Briceni', 'District'),
('MD', 'BS', 'Basarabeasca', 'District'),
('MD', 'CA', 'Cahul', 'District'),
('MD', 'CL', 'Calarasi', 'District'),
('MD', 'CM', 'Cimislia', 'District'),
('MD', 'CR', 'Criuleni', 'District'),
('MD', 'CS', 'Causeni', 'District'),
('MD', 'CT', 'Cantemir', 'District'),
('MD', 'CU', 'Chisinau', 'City'),
('MD', 'DO', 'Donduseni', 'District'),
('MD', 'DR', 'Drochia', 'District'),
('MD', 'DU', 'Dubasari', 'District'),
('MD', 'ED', 'Edinet', 'District'),
('MD', 'FA', 'Falesti', 'District'),
('MD', 'FL', 'Floresti', 'District'),
('MD', 'GA', 'Gagauzia, Unitatea teritoriala autonoma (UTAG)', 'Autonomous territory unit'),
('MD', 'GL', 'Glodeni', 'District'),
('MD', 'HI', 'Hîncesti', 'District'),
('MD', 'IA', 'Ialoveni', 'District'),
('MD', 'LE', 'Leova', 'District'),
('MD', 'NI', 'Nisporeni', 'District'),
('MD', 'OC', 'Ocniþa', 'District'),
('MD', 'OR', 'Orhei', 'District'),
('MD', 'RE', 'Rezina', 'District'),
('MD', 'RI', 'Rîºcani', 'District'),
('MD', 'SD', 'Soldanesti', 'District'),
('MD', 'SI', 'Sîngerei', 'District'),
('MD', 'SN', 'Stînga Nistrului, unitatea teritoriala din', 'Territorial unit'),
('MD', 'SO', 'Soroca', 'District'),
('MD', 'ST', 'Straseni', 'District'),
('MD', 'SV', 'Stefan Voda', 'District'),
('MD', 'TA', 'Taraclia', 'District'),
('MD', 'TE', 'Telenesti', 'District'),
('MD', 'UN', 'Ungheni', 'District'),
('ME', '01', 'Andrijevica', ''),
('ME', '02', 'Bar', ''),
('ME', '03', 'Berane', ''),
('ME', '04', 'Bijelo Polje', ''),
('ME', '05', 'Budva', ''),
('ME', '06', 'Cetinje', ''),
('ME', '07', 'Danilovgrad', ''),
('ME', '08', 'Herceg-Novi', ''),
('ME', '09', 'Kolain', ''),
('ME', '10', 'Kotor', ''),
('ME', '11', 'Mojkovac', ''),
('ME', '12', 'Nikic´', ''),
('ME', '13', 'Plav', ''),
('ME', '14', 'Pljevlja', ''),
('ME', '15', 'Pluine', ''),
('ME', '16', 'Podgorica', ''),
('ME', '17', 'Roaje', ''),
('ME', '18', 'avnik', ''),
('ME', '19', 'Tivat', ''),
('ME', '20', 'Ulcinj', ''),
('ME', '21', 'abljak', ''),
('MG', 'A', 'Toamasina', 'Province'),
('MG', 'D', 'Antsiranana', 'Province'),
('MG', 'F', 'Fianarantsoa', 'Province'),
('MG', 'M', 'Mahajanga', 'Province'),
('MG', 'T', 'Antananarivo', 'Province'),
('MG', 'U', 'Toliara', 'Province'),
('MH', 'ALK', 'Ailuk', 'Municipality'),
('MH', 'ALL', 'Ailinglapalap', 'Municipality'),
('MH', 'ARN', 'Arno', 'Municipality'),
('MH', 'AUR', 'Aur', 'Municipality'),
('MH', 'EBO', 'Ebon', 'Municipality'),
('MH', 'ENI', 'Eniwetok', 'Municipality'),
('MH', 'JAB', 'Jabat', 'Municipality'),
('MH', 'JAL', 'Jaluit', 'Municipality'),
('MH', 'KIL', 'Kili', 'Municipality'),
('MH', 'KWA', 'Kwajalein', 'Municipality'),
('MH', 'L', 'Ralik chain', 'Chains (of islands)'),
('MH', 'LAE', 'Lae', 'Municipality'),
('MH', 'LIB', 'Lib', 'Municipality'),
('MH', 'LIK', 'Likiep', 'Municipality'),
('MH', 'MAJ', 'Majuro', 'Municipality'),
('MH', 'MAL', 'Maloelap', 'Municipality'),
('MH', 'MEJ', 'Mejit', 'Municipality'),
('MH', 'MIL', 'Mili', 'Municipality'),
('MH', 'NMK', 'Namorik', 'Municipality'),
('MH', 'NMU', 'Namu', 'Municipality'),
('MH', 'RON', 'Rongelap', 'Municipality'),
('MH', 'T', 'Ratak chain', 'Chains (of islands)'),
('MH', 'UJA', 'Ujae', 'Municipality'),
('MH', 'UTI', 'Utirik', 'Municipality'),
('MH', 'WTH', 'Wotho', 'Municipality'),
('MH', 'WW', 'Wotje', 'Municipality'),
('MK', '01', 'Aerodrom *', ''),
('MK', '02', 'Aracinovo', ''),
('MK', '03', 'Berovo', ''),
('MK', '04', 'Bitola', ''),
('MK', '05', 'Bogdanci', ''),
('MK', '06', 'Bogovinje', ''),
('MK', '07', 'Bosilovo', ''),
('MK', '08', 'Brvenica', ''),
('MK', '09', 'Butel *', ''),
('MK', '10', 'Valandovo', ''),
('MK', '11', 'Vasilevo', ''),
('MK', '12', 'Vevcani', ''),
('MK', '13', 'Veles', ''),
('MK', '14', 'Vinica', ''),
('MK', '15', 'Vranetica', ''),
('MK', '16', 'Vrapcite', ''),
('MK', '17', 'Gazi Baba *', ''),
('MK', '18', 'Gevgelija', ''),
('MK', '19', 'Gostivar', ''),
('MK', '20', 'Gradsko', ''),
('MK', '21', 'Debar', ''),
('MK', '22', 'Debarca', ''),
('MK', '23', 'Delcevo', ''),
('MK', '24', 'Demir Kapija', ''),
('MK', '25', 'Demir Hisar', ''),
('MK', '26', 'Dojran', ''),
('MK', '27', 'Dolneni', ''),
('MK', '28', 'Drugovo', ''),
('MK', '29', 'Gjorce Petrov *', ''),
('MK', '30', 'elino', ''),
('MK', '31', 'Zajas', ''),
('MK', '32', 'Zelenikovo', ''),
('MK', '33', 'Zrnovci', ''),
('MK', '34', 'Ilinden', ''),
('MK', '35', 'Jegunovce', ''),
('MK', '36', 'Kavadarci', ''),
('MK', '37', 'Karbinci', ''),
('MK', '38', 'Karpo *', ''),
('MK', '39', 'Kisela Voda *', ''),
('MK', '40', 'Kicevo', ''),
('MK', '41', 'Konce', ''),
('MK', '42', 'Kocani', ''),
('MK', '43', 'Kratovo', ''),
('MK', '44', 'Kriva Palanka', ''),
('MK', '45', 'Krivogatani', ''),
('MK', '46', 'Kruevo', ''),
('MK', '47', 'Kumanovo', ''),
('MK', '48', 'Lipkovo', ''),
('MK', '49', 'Lozovo', ''),
('MK', '50', 'Mavrovo-i-Rostua', ''),
('MK', '51', 'Makedonska Kamenica', ''),
('MK', '52', 'Makedonski Brod', ''),
('MK', '53', 'Mogila', ''),
('MK', '54', 'Negotino', ''),
('MK', '55', 'Novaci', ''),
('MK', '56', 'Novo Selo', ''),
('MK', '57', 'Oslomej', ''),
('MK', '58', 'Ohrid', ''),
('MK', '59', 'Petrovec', ''),
('MK', '60', 'Pehcevo', ''),
('MK', '61', 'Plasnica', ''),
('MK', '62', 'Prilep', ''),
('MK', '63', 'Probitip', ''),
('MK', '64', 'Radovi', ''),
('MK', '65', 'Rankovce', ''),
('MK', '66', 'Resen', ''),
('MK', '67', 'Rosoman', ''),
('MK', '68', 'Saraj *', ''),
('MK', '69', 'Sveti Nikole', ''),
('MK', '70', 'Sopite', ''),
('MK', '71', 'Staro Nagoricane', ''),
('MK', '72', 'Struga', ''),
('MK', '73', 'Strumica', ''),
('MK', '74', 'Studenicani', ''),
('MK', '75', 'Tearce', ''),
('MK', '76', 'Tetovo', ''),
('MK', '77', 'Centar *', ''),
('MK', '78', 'Centar upa', ''),
('MK', '79', 'Cair *', ''),
('MK', '80', 'Caka', ''),
('MK', '81', 'Ceinovo-Obleevo', ''),
('MK', '82', 'Cucer Sandevo', ''),
('MK', '83', 'tip', ''),
('MK', '84', 'uto Orizari *', ''),
('ML', '1', 'Kayes', 'Region'),
('ML', '2', 'Koulikoro', 'Region'),
('ML', '3', 'Sikasso', 'Region'),
('ML', '4', 'Ségou', 'Region'),
('ML', '5', 'Mopti', 'Region'),
('ML', '6', 'Tombouctou', 'Region'),
('ML', '7', 'Gao', 'Region'),
('ML', '8', 'Kidal', 'Region'),
('ML', 'BKO', 'Bamako', 'District'),
('MM', '01', 'Sagaing', 'Division'),
('MM', '02', 'Bago', 'Division'),
('MM', '03', 'Magway', 'Division'),
('MM', '04', 'Mandalay', 'Division'),
('MM', '05', 'Tanintharyi', 'Division'),
('MM', '06', 'Yangon', 'Division'),
('MM', '07', 'Ayeyarwady', 'Division'),
('MM', '11', 'Kachin', 'State'),
('MM', '12', 'Kayah', 'State'),
('MM', '13', 'Kayin', 'State'),
('MM', '14', 'Chin', 'State'),
('MM', '15', 'Mon', 'State'),
('MM', '16', 'Rakhine', 'State'),
('MM', '17', 'Shan', 'State'),
('MN', '035', 'Orhon', 'Province'),
('MN', '037', 'Darhan uul', 'Province'),
('MN', '039', 'Hentiy', 'Province'),
('MN', '041', 'Hövagöl', 'Province'),
('MN', '043', 'Hovd', 'Province'),
('MN', '046', 'Uvs', 'Province'),
('MN', '047', 'Töv', 'Province'),
('MN', '049', 'Selenge', 'Province'),
('MN', '051', 'Sühbaatar', 'Province'),
('MN', '053', 'Ömnögovi', 'Province'),
('MN', '055', 'Övörhangay', 'Province'),
('MN', '057', 'Dzavhan', 'Province'),
('MN', '059', 'Dundgovi', 'Province'),
('MN', '061', 'Dornod', 'Province'),
('MN', '063', 'Dornogovi', 'Province'),
('MN', '064', 'Govi-Sumber', 'Province'),
('MN', '065', 'Govi-Altay', 'Province'),
('MN', '067', 'Bulgan', 'Province'),
('MN', '069', 'Bayanhongor', 'Province'),
('MN', '071', 'Bayan-Ölgiy', 'Province'),
('MN', '073', 'Arhangay', 'Province'),
('MN', '1', 'Ulaanbaatar', 'Capital city'),
('MR', '01', 'Hodh ech Chargui', 'Region'),
('MR', '02', 'Hodh el Gharbi', 'Region'),
('MR', '03', 'Assaba', 'Region'),
('MR', '04', 'Gorgol', 'Region'),
('MR', '05', 'Brakna', 'Region'),
('MR', '06', 'Trarza', 'Region'),
('MR', '07', 'Adrar', 'Region'),
('MR', '08', 'Dakhlet Nouadhibou', 'Region'),
('MR', '09', 'Tagant', 'Region'),
('MR', '10', 'Guidimaka', 'Region'),
('MR', '11', 'Tiris Zemmour', 'Region'),
('MR', '12', 'Inchiri', 'Region'),
('MR', 'NKC', 'Nouakchott', 'District'),
('MT', '01', 'Attard', ''),
('MT', '02', 'Balzan', ''),
('MT', '03', 'Birgu', ''),
('MT', '04', 'Birkirkara', ''),
('MT', '05', 'Birzebbuga', ''),
('MT', '06', 'Bormla', ''),
('MT', '07', 'Dingli', ''),
('MT', '08', 'Fgura', ''),
('MT', '09', 'Floriana', ''),
('MT', '10', 'Fontana', ''),
('MT', '11', 'Gudja', ''),
('MT', '12', 'Gzira', ''),
('MT', '13', 'Ghajnsielem', ''),
('MT', '14', 'Gharb', ''),
('MT', '15', 'Gharghur', ''),
('MT', '16', 'Ghasri', ''),
('MT', '17', 'Ghaxaq', ''),
('MT', '18', 'Hamrun', ''),
('MT', '19', 'Iklin', ''),
('MT', '20', 'Isla', ''),
('MT', '21', 'Kalkara', ''),
('MT', '22', 'Kercem', ''),
('MT', '23', 'Kirkop', ''),
('MT', '24', 'Lija', ''),
('MT', '25', 'Luqa', ''),
('MT', '26', 'Marsa', ''),
('MT', '27', 'Marsaskala', ''),
('MT', '28', 'Marsaxlokk', ''),
('MT', '29', 'Mdina', ''),
('MT', '30', 'Mellieha', ''),
('MT', '31', 'Mgarr', ''),
('MT', '32', 'Mosta', ''),
('MT', '33', 'Mqabba', ''),
('MT', '34', 'Msida', ''),
('MT', '35', 'Mtarfa', ''),
('MT', '36', 'Munxar', ''),
('MT', '37', 'Nadur', ''),
('MT', '38', 'Naxxar', ''),
('MT', '39', 'Paola', ''),
('MT', '40', 'Pembroke', ''),
('MT', '41', 'Pietà', ''),
('MT', '42', 'Qala', ''),
('MT', '43', 'Qormi', ''),
('MT', '44', 'Qrendi', ''),
('MT', '45', 'Rabat Gozo', ''),
('MT', '46', 'Rabat Malta', ''),
('MT', '47', 'Safi', ''),
('MT', '48', 'Saint Julian\'s', ''),
('MT', '49', 'Saint John', ''),
('MT', '50', 'Saint Lawrence', ''),
('MT', '51', 'Saint Paul\'s Bay', ''),
('MT', '52', 'Sannat', ''),
('MT', '53', 'Saint Lucia\'s', ''),
('MT', '54', 'Santa Venera', ''),
('MT', '55', 'Siggiewi', ''),
('MT', '56', 'Sliema', ''),
('MT', '57', 'Swieqi', ''),
('MT', '58', 'Ta\' Xbiex', ''),
('MT', '59', 'Tarxien', ''),
('MT', '60', 'Valletta', ''),
('MT', '61', 'Xaghra', ''),
('MT', '62', 'Xewkija', ''),
('MT', '63', 'Xghajra', ''),
('MT', '64', 'Zabbar', ''),
('MT', '65', 'Zebbug Gozo', ''),
('MT', '66', 'Zebbug Malta', ''),
('MT', '67', 'Zejtun', ''),
('MT', '68', 'Zurrieq', ''),
('MU', 'AG', 'Agalega Islands', 'Dependency'),
('MU', 'BL', 'Black River', 'District'),
('MU', 'BR', 'Beau Bassin-Rose Hill', 'City'),
('MU', 'CC', 'Cargados Carajos Shoals [Saint Brandon Islands]', 'Dependency'),
('MU', 'CU', 'Curepipe', 'City'),
('MU', 'FL', 'Flacq', 'District'),
('MU', 'GP', 'Grand Port', 'District'),
('MU', 'MO', 'Moka', 'District'),
('MU', 'PA', 'Pamplemousses', 'District'),
('MU', 'PLx', 'Port Louis', 'City'),
('MU', 'PU', 'Part Louis', 'District'),
('MU', 'PW', 'Plaines wilhems', 'District'),
('MU', 'QB', 'Quatre Bornes', 'City'),
('MU', 'RO', 'Rodrigues Island', 'Dependency'),
('MU', 'RR', 'Rivière du Rempart', 'District'),
('MU', 'SA', 'Savanne', 'District'),
('MU', 'VP', 'Vacoas-Phoenix', 'City'),
('MV', '00', 'Ari Atholhu Dhekunuburi', 'Administrative atoll'),
('MV', '01', 'Seenu', 'Administrative atoll'),
('MV', '02', 'Alif', 'Administrative atoll'),
('MV', '03', 'Lhaviyani', 'Administrative atoll'),
('MV', '04', 'Vaavu', 'Administrative atoll'),
('MV', '05', 'Laamu', 'Administrative atoll'),
('MV', '07', 'Haa Alif', 'Administrative atoll'),
('MV', '08', 'Thaa', 'Administrative atoll'),
('MV', '12', 'Meemu', 'Administrative atoll'),
('MV', '13', 'Raa', 'Administrative atoll'),
('MV', '14', 'Faafu', 'Administrative atoll'),
('MV', '17', 'Dhaalu', 'Administrative atoll'),
('MV', '20', 'Baa', 'Administrative atoll'),
('MV', '23', 'Haa Dhaalu', 'Administrative atoll'),
('MV', '24', 'Shaviyani', 'Administrative atoll'),
('MV', '25', 'Noonu', 'Administrative atoll'),
('MV', '26', 'Kaafu', 'Administrative atoll'),
('MV', '27', 'Gaaf Alif', 'Administrative atoll'),
('MV', '28', 'Gaafu Dhaalu', 'Administrative atoll'),
('MV', '29', 'Gnaviyani', 'Administrative atoll'),
('MV', 'CE', 'Medhu', 'Province'),
('MV', 'LE', 'Neno', 'District'),
('MV', 'MLE', 'Male', 'Capital'),
('MV', 'NC', 'Medhu-Uthuru', 'Province'),
('MV', 'NO', 'Uthuru', 'Province'),
('MV', 'SC', 'Medhu-Dhekunu', 'Province'),
('MV', 'SU', 'Dhekunu', 'Province'),
('MV', 'UN', 'Mathi-Uthuru', 'Province'),
('MV', 'US', 'Mathi-Dhekunu', 'Province'),
('MW', 'BA', 'Balaka', 'District'),
('MW', 'BL', 'Blantyre', 'District'),
('MW', 'C', 'Central', 'Region'),
('MW', 'CK', 'Chikwawa', 'District'),
('MW', 'CR', 'Chiradzulu', 'District'),
('MW', 'CT', 'Chitipa', 'District'),
('MW', 'DE', 'Dedza', 'District'),
('MW', 'DO', 'Dowa', 'District'),
('MW', 'KR', 'Karonga', 'District'),
('MW', 'KS', 'Kasungu', 'District'),
('MW', 'LI', 'Lilongwe', 'District'),
('MW', 'LK', 'Likoma Island', 'District'),
('MW', 'MC', 'Mchinji', 'District'),
('MW', 'MG', 'Mangochi', 'District'),
('MW', 'MH', 'Machinga', 'District'),
('MW', 'MU', 'Mulanje', 'District'),
('MW', 'MW', 'Mwanza', 'District'),
('MW', 'MZ', 'Mzimba', 'District'),
('MW', 'N', 'Northern', 'Region'),
('MW', 'NB', 'Nkhata Bay', 'District'),
('MW', 'NI', 'Ntchisi', 'District'),
('MW', 'NK', 'Nkhotakota', 'District'),
('MW', 'NS', 'Nsanje', 'District'),
('MW', 'NU', 'Ntcheu', 'District'),
('MW', 'PH', 'Phalombe', 'District'),
('MW', 'RU', 'Rumphi', 'District'),
('MW', 'S', 'Southern', 'Region'),
('MW', 'SA', 'Salima', 'District'),
('MW', 'TH', 'Thyolo', 'District'),
('MW', 'ZO', 'Zomba', 'District'),
('MX', 'AGU', 'Aguascalientes', 'State'),
('MX', 'BCN', 'Baja California', 'State'),
('MX', 'BCS', 'Baja California Sur', 'State'),
('MX', 'CAM', 'Campeche', 'State'),
('MX', 'CHH', 'Chihuahua', 'State'),
('MX', 'CHP', 'Chiapas', 'State'),
('MX', 'COA', 'Coahuila', 'State'),
('MX', 'COL', 'Colima', 'State'),
('MX', 'DIF', 'Distrito Federal', 'Federal District'),
('MX', 'DUR', 'Durango', 'State'),
('MX', 'GRO', 'Guerrero', 'State'),
('MX', 'GUA', 'Guanajuato', 'State'),
('MX', 'HID', 'Hidalgo', 'State'),
('MX', 'JAL', 'Jalisco', 'State'),
('MX', 'MEX', 'México', 'State'),
('MX', 'MIC', 'Michoacán', 'State'),
('MX', 'MOR', 'Morelos', 'State'),
('MX', 'NAY', 'Nayarit', 'State'),
('MX', 'NLE', 'Nuevo León', 'State'),
('MX', 'OAX', 'Oaxaca', 'State'),
('MX', 'PUE', 'Puebla', 'State'),
('MX', 'QUE', 'Querétaro', 'State'),
('MX', 'ROO', 'Quintana Roo', 'State'),
('MX', 'SIN', 'Sinaloa', 'State'),
('MX', 'SLP', 'San Luis Potosí', 'State'),
('MX', 'SON', 'Sonora', 'State'),
('MX', 'TAB', 'Tabasco', 'State'),
('MX', 'TAM', 'Tamaulipas', 'State'),
('MX', 'TLA', 'Tlaxcala', 'State'),
('MX', 'VER', 'Veracruz', 'State'),
('MX', 'YUC', 'Yucatán', 'State'),
('MX', 'ZAC', 'Zacatecas', 'State'),
('MY', '01', 'Johor', 'State'),
('MY', '02', 'Kedah', 'State'),
('MY', '03', 'Kelantan', 'State'),
('MY', '04', 'Melaka', 'State'),
('MY', '05', 'Negeri Sembilan', 'State'),
('MY', '06', 'Pahang', 'State'),
('MY', '07', 'Pulau Pinang', 'State'),
('MY', '08', 'Perak', 'State'),
('MY', '09', 'Perlis', 'State'),
('MY', '10', 'Selangor', 'State'),
('MY', '11', 'Terengganu', 'State'),
('MY', '12', 'Sabah', 'State'),
('MY', '13', 'Sarawak', 'State'),
('MY', '14', 'Wilayah Persekutuan Kuala Lumpur', 'Federal territory'),
('MY', '15', 'Wilayah Persekutuan Labuan', 'Federal territory'),
('MY', '16', 'Wilayah Persekutuan Putrajaya', 'Federal territory'),
('MZ', 'A', 'Niaosa', 'Province'),
('MZ', 'B', 'Manica', 'Province'),
('MZ', 'G', 'Gaza', 'Province'),
('MZ', 'I', 'Inhambane', 'Province'),
('MZ', 'L', 'Maputo', 'Province'),
('MZ', 'MPM', 'Maputo', 'City'),
('MZ', 'N', 'Nampula', 'Province'),
('MZ', 'P', 'Cabo Delgado', 'Province'),
('MZ', 'Q', 'Zambézia', 'Province'),
('MZ', 'S', 'Sofala', 'Province'),
('MZ', 'T', 'Tete', 'Province'),
('NA', 'CA', 'Caprivi', 'Region'),
('NA', 'ER', 'Erongo', 'Region'),
('NA', 'HA', 'Hardap', 'Region'),
('NA', 'KA', 'Karas', 'Region'),
('NA', 'KH', 'Khomas', 'Region'),
('NA', 'KU', 'Kunene', 'Region'),
('NA', 'OD', 'Otjozondjupa', 'Region'),
('NA', 'OH', 'Omaheke', 'Region'),
('NA', 'OK', 'Okavango', 'Region'),
('NA', 'ON', 'Oshana', 'Region'),
('NA', 'OS', 'Omusati', 'Region'),
('NA', 'OT', 'Oshikoto', 'Region'),
('NA', 'OW', 'Ohangwena', 'Region'),
('NE', '1', 'Agadez', 'Department'),
('NE', '2', 'Diffa', 'Department'),
('NE', '3', 'Dosso', 'Department'),
('NE', '4', 'Maradi', 'Department'),
('NE', '5', 'Tahoua', 'Department'),
('NE', '6', 'Tillabéri', 'Department'),
('NE', '7', 'Zinder', 'Department'),
('NE', '8', 'Niamey', 'Urban community'),
('NG', 'AB', 'Abia', 'State'),
('NG', 'AD', 'Adamawa', 'State'),
('NG', 'AK', 'Akwa Ibom', 'State'),
('NG', 'AN', 'Anambra', 'State'),
('NG', 'BA', 'Bauchi', 'State'),
('NG', 'BB', 'Bbonyi', 'State'),
('NG', 'BE', 'Benue', 'State'),
('NG', 'BK', 'Bkiti', 'State'),
('NG', 'BO', 'Borno', 'State'),
('NG', 'BY', 'Bayelsa', 'State'),
('NG', 'CR', 'Cross River', 'State'),
('NG', 'DE', 'Delta', 'State'),
('NG', 'ED', 'Edo', 'State'),
('NG', 'EN', 'Enugu', 'State'),
('NG', 'FC', 'Abuja Capital Territory', 'Capital territory'),
('NG', 'GO', 'Gombe', 'State'),
('NG', 'IM', 'Imo', 'State'),
('NG', 'JI', 'Jigawa', 'State'),
('NG', 'KD', 'Kaduna', 'State'),
('NG', 'KE', 'Kebbi', 'State'),
('NG', 'KN', 'Kano', 'State'),
('NG', 'KO', 'Kogi', 'State'),
('NG', 'KT', 'Katsina', 'State'),
('NG', 'KW', 'Kwara', 'State'),
('NG', 'LA', 'Lagos', 'State'),
('NG', 'NA', 'Nassarawa', 'State'),
('NG', 'NI', 'Niger', 'State'),
('NG', 'OG', 'Ogun', 'State'),
('NG', 'ON', 'Ondo', 'State'),
('NG', 'OS', 'Osun', 'State'),
('NG', 'OY', 'Oyo', 'State'),
('NG', 'PL', 'Plateau', 'State'),
('NG', 'RI', 'Rivers', 'State'),
('NG', 'SO', 'Sokoto', 'State'),
('NG', 'TA', 'Taraba', 'State'),
('NG', 'YO', 'Yobe', 'State'),
('NG', 'ZA', 'Zamfara', 'State'),
('NI', 'AN', 'Atlántico Norte', 'Autonomous region'),
('NI', 'AS', 'Atlántico Sur', 'Autonomous region'),
('NI', 'BO', 'Boaco', 'Department'),
('NI', 'CA', 'Carazo', 'Department'),
('NI', 'CI', 'Chinandega', 'Department'),
('NI', 'CO', 'Chontales', 'Department'),
('NI', 'ES', 'Estelí', 'Department'),
('NI', 'GR', 'Granada', 'Department'),
('NI', 'JI', 'Jinotega', 'Department'),
('NI', 'LE', 'León', 'Department'),
('NI', 'MD', 'Madriz', 'Department'),
('NI', 'MN', 'Managua', 'Department'),
('NI', 'MS', 'Masaya', 'Department'),
('NI', 'MT', 'Matagalpa', 'Department'),
('NI', 'NS', 'Nueva Segovia', 'Department'),
('NI', 'RI', 'Rivas', 'Department'),
('NI', 'SJ', 'Río San Juan', 'Department'),
('NL', 'DR', 'Drenthe', 'Province'),
('NL', 'FL', 'Flevoland', 'Province'),
('NL', 'FR', 'Friesland', 'Province'),
('NL', 'GE', 'Gelderland', 'Province'),
('NL', 'GR', 'Groningen', 'Province'),
('NL', 'LI', 'Limburg', 'Province'),
('NL', 'NB', 'Noord-Brabant', 'Province'),
('NL', 'NH', 'Noord-Holland', 'Province'),
('NL', 'OV', 'Overijssel', 'Province'),
('NL', 'UT', 'Utrecht', 'Province'),
('NL', 'ZE', 'Zeeland', 'Province'),
('NL', 'ZH', 'Zuid-Holland', 'Province'),
('NO', '01', 'Østfold', 'County'),
('NO', '02', 'Akershus', 'County'),
('NO', '03', 'Oslo', 'County'),
('NO', '04', 'Hedmark', 'County'),
('NO', '05', 'Oppland', 'County'),
('NO', '06', 'Buskerud', 'County'),
('NO', '07', 'Vestfold', 'County'),
('NO', '08', 'Telemark', 'County'),
('NO', '09', 'Aust-Agder', 'County'),
('NO', '10', 'Vest-Agder', 'County'),
('NO', '11', 'Rogaland', 'County'),
('NO', '12', 'Hordaland', 'County'),
('NO', '14', 'Sogn og Fjordane', 'County'),
('NO', '15', 'Møre og Romsdal', 'County'),
('NO', '16', 'Sør-Trøndelag', 'County'),
('NO', '17', 'Nord-Trøndelag', 'County'),
('NO', '18', 'Nordland', 'County'),
('NO', '19', 'Troms', 'County'),
('NO', '20', 'Finnmark', 'County'),
('NO', '21', 'Svalbard (Arctic Region) (See also country code SJ)', 'Arctic region'),
('NO', '22', 'Jan Mayen (Arctic Region) (See also country code SJ)', 'Arctic region'),
('NP', 'BA', 'Bagmati', 'Zone'),
('NP', 'BH', 'Bheri', 'Zone'),
('NP', 'DH', 'Dhawalagiri', 'Zone'),
('NP', 'GA', 'Gandaki', 'Zone'),
('NP', 'JA', 'Janakpur', 'Zone'),
('NP', 'KA', 'Karnali', 'Zone'),
('NP', 'KO', 'Kosi [Koshi]', 'Zone'),
('NP', 'LU', 'Lumbini', 'Zone'),
('NP', 'MA', 'Mahakali', 'Zone'),
('NP', 'ME', 'Mechi', 'Zone'),
('NP', 'NA', 'Narayani', 'Zone'),
('NP', 'RA', 'Rapti', 'Zone'),
('NP', 'SA', 'Sagarmatha', 'Zone'),
('NP', 'SE', 'Seti', 'Zone'),
('NR', '01', 'Aiwo', ''),
('NR', '02', 'Anabar', ''),
('NR', '03', 'Anetan', ''),
('NR', '04', 'Anibare', ''),
('NR', '05', 'Baiti', ''),
('NR', '06', 'Boe', ''),
('NR', '07', 'Buada', ''),
('NR', '08', 'Denigomodu', ''),
('NR', '09', 'Ewa', ''),
('NR', '10', 'Ijuw', ''),
('NR', '11', 'Meneng', ''),
('NR', '12', 'Nibok', ''),
('NR', '13', 'Uaboe', ''),
('NR', '14', 'Yaren', ''),
('NZ', 'AUK', 'Auckland', 'Region'),
('NZ', 'BOP', 'Bay of Plenty', 'Region'),
('NZ', 'CAN', 'Canterbury', 'Region'),
('NZ', 'CIT', 'Chatham Islands Territory', 'Special Island Authorithy'),
('NZ', 'GIS', 'Gisborne District', 'Unitary Authority'),
('NZ', 'HKB', 'Hawkes\'s Bay', 'Region'),
('NZ', 'MBH', 'Marlborough District', 'Unitary Authority'),
('NZ', 'MWT', 'Manawatu-Wanganui', 'Region'),
('NZ', 'NSN', 'Nelson City', 'Unitary Authority'),
('NZ', 'NTL', 'Northland', 'Region'),
('NZ', 'OTA', 'Otago', 'Region'),
('NZ', 'STL', 'Southland', 'Region'),
('NZ', 'TAS', 'Tasman District', 'Unitary Authority'),
('NZ', 'TKI', 'Taranaki', 'Region'),
('NZ', 'WGN', 'Wellington', 'Region'),
('NZ', 'WKO', 'Waikato', 'Region'),
('NZ', 'WTC', 'West Coast', 'Region'),
('OM', 'BA', 'Al Batinah', 'Region'),
('OM', 'BU', 'Al Buraymi', 'governorate'),
('OM', 'DA', 'Ad Dakhiliyah', 'Region'),
('OM', 'MA', 'Masqat', 'governorate'),
('OM', 'MU', 'Musandam', 'governorate'),
('OM', 'SH', 'Ash Sharqiyah', 'Region'),
('OM', 'WU', 'AI Wusta', 'Region'),
('OM', 'ZA', 'Az Zahirah', 'Region'),
('OM', 'ZU', 'Z¸ufar', 'governorate'),
('PA', '1', 'Bocas del Toro', 'Province'),
('PA', '2', 'Coclé', 'Province'),
('PA', '3', 'Colón', 'Province'),
('PA', '4', 'Chiriquí', 'Province'),
('PA', '5', 'Darién', 'Province'),
('PA', '6', 'Herrera', 'Province'),
('PA', '7', 'Los Santos', 'Province'),
('PA', '8', 'Panamá', 'Province'),
('PA', '9', 'Veraguas', 'Province'),
('PA', 'EM', 'Emberá', 'indigenous region'),
('PA', 'KY', 'Kuna Yala', 'indigenous region'),
('PA', 'NB', 'Ngöbe-Buglé', 'indigenous region'),
('PE', 'AMA', 'Amazonas', 'Department'),
('PE', 'ANC', 'Ancash', 'Department'),
('PE', 'APU', 'Apurímac', 'Department'),
('PE', 'ARE', 'Arequipa', 'Department'),
('PE', 'AYA', 'Ayacucho', 'Department'),
('PE', 'CAJ', 'Cajamarca', 'Department'),
('PE', 'CAL', 'El Callao', 'Constitutiona Provincel'),
('PE', 'CUS', 'Cuzco [Cusco]', 'Department'),
('PE', 'HUC', 'Huánuco', 'Department'),
('PE', 'HUV', 'Huancavelica', 'Department'),
('PE', 'ICA', 'Ica', 'Department'),
('PE', 'JUN', 'Junín', 'Department'),
('PE', 'LAL', 'La Libertad', 'Department'),
('PE', 'LAM', 'Lambayeque', 'Department'),
('PE', 'LIM', 'Lima', 'Department'),
('PE', 'LOR', 'Loreto', 'Department'),
('PE', 'MDD', 'Madre de Dios', 'Department'),
('PE', 'MOQ', 'Moquegua', 'Department'),
('PE', 'PAS', 'Pasco', 'Department'),
('PE', 'PIU', 'Piura', 'Department'),
('PE', 'PUN', 'Puno', 'Department'),
('PE', 'SAM', 'San Martín', 'Department'),
('PE', 'TAC', 'Tacna', 'Department'),
('PE', 'TUM', 'Tumbes', 'Department'),
('PE', 'UCA', 'Ucayali', 'Department'),
('PG', 'CPK', 'Chimbu', 'Province'),
('PG', 'CPM', 'Central', 'Province'),
('PG', 'EBR', 'East New Britain', 'Province'),
('PG', 'EHG', 'Eastern Highlands', 'Province'),
('PG', 'EPW', 'Enga', 'Province'),
('PG', 'ESW', 'East Sepik', 'Province'),
('PG', 'GPK', 'Gulf', 'Province'),
('PG', 'MBA', 'Milne Bay', 'Province'),
('PG', 'MPL', 'Morobe', 'Province'),
('PG', 'MPM', 'Madang', 'Province'),
('PG', 'MRL', 'Manus', 'Province'),
('PG', 'NCD', 'National Capital District (Port Moresby)', 'District'),
('PG', 'NIK', 'New Ireland', 'Province'),
('PG', 'NPP', 'Northern', 'Province'),
('PG', 'NSB', 'Bougainville', 'autonomous region'),
('PG', 'SAN', 'Sandaun (West Sepik)', 'Province'),
('PG', 'SHM', 'Southern Highlands', 'Province'),
('PG', 'WBK', 'West New Britain', 'Province'),
('PG', 'WHM', 'Western Highlands', 'Province'),
('PG', 'WPD', 'Western', 'Province'),
('PH', 'ABR', 'Abra', 'Province'),
('PH', 'AGN', 'Agusan del Norte', 'Province'),
('PH', 'AGS', 'Agusan del Sur', 'Province'),
('PH', 'AKL', 'Aklan', 'Province'),
('PH', 'ALB', 'Albay', 'Province'),
('PH', 'ANT', 'Antique', 'Province'),
('PH', 'APA', 'Apayao', 'Province'),
('PH', 'AUR', 'Aurora', 'Province'),
('PH', 'BAN', 'Bataan', 'Province'),
('PH', 'BAS', 'Basilan', 'Province'),
('PH', 'BEN', 'Benguet', 'Province'),
('PH', 'BIL', 'Biliran', 'Province'),
('PH', 'BOH', 'Bohol', 'Province'),
('PH', 'BTG', 'Batangas', 'Province'),
('PH', 'BTN', 'Batanes', 'Province'),
('PH', 'BUK', 'Bukidnon', 'Province'),
('PH', 'BUL', 'Bulacan', 'Province'),
('PH', 'CAG', 'Cagayan', 'Province'),
('PH', 'CAM', 'Camiguin', 'Province'),
('PH', 'CAN', 'Camarines Norte', 'Province'),
('PH', 'CAP', 'Capiz', 'Province'),
('PH', 'CAS', 'Camarines Sur', 'Province'),
('PH', 'CAT', 'Catanduanes', 'Province'),
('PH', 'CAV', 'Cavite', 'Province'),
('PH', 'CEB', 'Cebu', 'Province'),
('PH', 'COM', 'Compostela Valley', 'Province'),
('PH', 'DAO', 'Davao Oriental', 'Province'),
('PH', 'DAS', 'Davao del Sur', 'Province'),
('PH', 'DAV', 'Davao', 'Province'),
('PH', 'DIN', 'Dinagat Islands', 'Province'),
('PH', 'EAS', 'Eastern Samar', 'Province'),
('PH', 'GUI', 'Guimaras', 'Province'),
('PH', 'IFU', 'Ifugao', 'Province'),
('PH', 'ILI', 'Iloilo', 'Province'),
('PH', 'ILN', 'Ilocos Norte', 'Province'),
('PH', 'ILS', 'Ilocoq Sur', 'Province'),
('PH', 'ISA', 'Isabela', 'Province'),
('PH', 'KAL', 'Kalinga-Apayao', 'Province'),
('PH', 'LAG', 'Laguna', 'Province'),
('PH', 'LAN', 'Lanao del Norte', 'Province'),
('PH', 'LAS', 'Lanao del Sur', 'Province'),
('PH', 'LEY', 'Leyte', 'Province'),
('PH', 'LUN', 'La Union', 'Province'),
('PH', 'MAG', 'Maguindanao', 'Province'),
('PH', 'MAS', 'Masbate', 'Province'),
('PH', 'MDC', 'Mindoro Occidental', 'Province'),
('PH', 'MDR', 'Mindoro Oriental', 'Province'),
('PH', 'MOU', 'Mountain Province', 'Province'),
('PH', 'MSC', 'Misamis Occidental', 'Province'),
('PH', 'MSR', 'Misamis Oriental', 'Province'),
('PH', 'NCO', 'North Cotabato', 'Province'),
('PH', 'NEC', 'Negros occidental', 'Province'),
('PH', 'NER', 'Negros oriental', 'Province'),
('PH', 'NSA', 'Northern Samar', 'Province'),
('PH', 'NUE', 'Nueva Ecija', 'Province'),
('PH', 'NUV', 'Nueva Vizcaya', 'Province'),
('PH', 'PAM', 'Pampanga', 'Province'),
('PH', 'PAN', 'Pangasinan', 'Province'),
('PH', 'PLW', 'Palawan', 'Province'),
('PH', 'QUE', 'Quezon', 'Province'),
('PH', 'QUI', 'Quirino', 'Province'),
('PH', 'RIZ', 'Rizal', 'Province'),
('PH', 'ROM', 'Romblon', 'Province'),
('PH', 'SAR', 'Sarangani', 'Province'),
('PH', 'SCO', 'South Cotabato', 'Province'),
('PH', 'SIG', 'Siquijor', 'Province'),
('PH', 'SLE', 'Southern Leyte', 'Province'),
('PH', 'SLU', 'Sulu', 'Province'),
('PH', 'SOR', 'Sorsogon', 'Province'),
('PH', 'SUK', 'Sultan Kudarat', 'Province'),
('PH', 'SUN', 'Surigao del Norte', 'Province'),
('PH', 'SUR', 'Surigao del Sur', 'Province'),
('PH', 'TAR', 'Tarlac', 'Province'),
('PH', 'TAW', 'Tawi-Tawi', 'Province'),
('PH', 'WSA', 'Western Samar', 'Province'),
('PH', 'ZAN', 'Zamboanga del Norte', 'Province'),
('PH', 'ZAS', 'Zamboanga del Sur', 'Province'),
('PH', 'ZMB', 'Zambales', 'Province'),
('PH', 'ZSI', 'Zamboanga Sibuguey [Zamboanga Sibugay]', 'Province'),
('PK', 'BA', 'Baluchistan', 'Province'),
('PK', 'GB', 'Gilgit-Baltistan', 'Pakistan administrered area'),
('PK', 'IS', 'Islamabad', 'Federal capital territory'),
('PK', 'JK', 'Azad Kashmir', 'Pakistan administrered area'),
('PK', 'KP', 'Khyber Pakhtunkhwa', 'Province'),
('PK', 'PB', 'Punjab', 'Province'),
('PK', 'SD', 'Sind', 'Province'),
('PK', 'TA', 'Federally Administered Tribal Areas', 'Territory'),
('PL', 'DS', 'Dolnoslaskie', 'Province'),
('PL', 'KP', 'Kujawsko-pomorskie', 'Province'),
('PL', 'LB', 'Lubuskie', 'Province'),
('PL', 'LD', 'Lódzkie', 'Province'),
('PL', 'LU', 'Lubelskie', 'Province'),
('PL', 'MA', 'Malopolskie', 'Province'),
('PL', 'MZ', 'Mazowieckie', 'Province'),
('PL', 'OP', 'Opolskie', 'Province'),
('PL', 'PD', 'Podlaskie', 'Province'),
('PL', 'PK', 'Podkarpackie', 'Province'),
('PL', 'PM', 'Pomorskie', 'Province'),
('PL', 'SK', 'Swietokrzyskie', 'Province'),
('PL', 'SL', 'Slaskie', 'Province'),
('PL', 'WN', 'Warminsko-mazurskie', 'Province'),
('PL', 'WP', 'Wielkopolskie', 'Province'),
('PL', 'ZP', 'Zachodniopomorskie', 'Province'),
('PT', '01', 'Aveiro', 'District'),
('PT', '02', 'Beja', 'District'),
('PT', '03', 'Braga', 'District'),
('PT', '04', 'Bragança', 'District'),
('PT', '05', 'Castelo Branco', 'District'),
('PT', '06', 'Coimbra', 'District'),
('PT', '07', 'Évora', 'District'),
('PT', '08', 'Faro', 'District'),
('PT', '09', 'Guarda', 'District'),
('PT', '10', 'Leiria', 'District'),
('PT', '11', 'Lisboa', 'District'),
('PT', '12', 'Portalegre', 'District'),
('PT', '13', 'Porto', 'District'),
('PT', '14', 'Santarém', 'District'),
('PT', '15', 'Setúbal', 'District'),
('PT', '16', 'Viana do Castelo', 'District'),
('PT', '17', 'Vila Real', 'District'),
('PT', '18', 'Viseu', 'District'),
('PT', '20', 'Região Autónoma dos Açores', 'Autonomous region'),
('PT', '30', 'Região Autónoma da Madeira', 'Autonomous region'),
('PW', '002', 'Aimeliik', ''),
('PW', '004', 'Airai', ''),
('PW', '010', 'Angaur', ''),
('PW', '050', 'Hatobohei', ''),
('PW', '100', 'Kayangel', ''),
('PW', '150', 'Koror', ''),
('PW', '212', 'Melekeok', ''),
('PW', '214', 'Ngaraard', ''),
('PW', '218', 'Ngarchelong', ''),
('PW', '222', 'Ngardmau', ''),
('PW', '224', 'Ngatpang', ''),
('PW', '226', 'Ngchesar', ''),
('PW', '227', 'Ngeremlengui', ''),
('PW', '228', 'Ngiwal', ''),
('PW', '350', 'Peleliu', ''),
('PW', '370', 'Sonsorol', ''),
('PY', '1', 'Concepción', 'Department'),
('PY', '10', 'Alto Paraná', 'Department'),
('PY', '11', 'Central', 'Department'),
('PY', '12', 'Ñeembucú', 'Department'),
('PY', '13', 'Amambay', 'Department'),
('PY', '14', 'Canindeyú', 'Department'),
('PY', '15', 'Presidente Hayes', 'Department'),
('PY', '16', 'Alto Paraguay', 'Department'),
('PY', '19', 'Boquerón', 'Department'),
('PY', '2', 'San Pedro', 'Department'),
('PY', '3', 'Cordillera', 'Department'),
('PY', '4', 'Guairá', 'Department'),
('PY', '5', 'Caaguazú', 'Department'),
('PY', '6', 'Caazapá', 'Department'),
('PY', '7', 'Itapúa', 'Department'),
('PY', '8', 'Misiones', 'Department'),
('PY', '9', 'Paraguarí', 'Department'),
('PY', 'ASU', 'Asunción', 'Capital'),
('QA', 'DA', 'Ad Dawhah', 'Municipality'),
('QA', 'KH', 'Al Khawr', 'Municipality'),
('QA', 'MS', 'Madinat ash Shamal', 'Municipality'),
('QA', 'RA', 'Ar Rayyan', 'Municipality'),
('QA', 'US', 'Umm Salal', 'Municipality'),
('QA', 'WA', 'Al Wakrah', 'Municipality'),
('QA', 'ZA', 'Az¸ Z¸aayin', 'Municipality'),
('RO', 'AB', 'Alba', 'Departments'),
('RO', 'AG', 'Arges', 'Departments'),
('RO', 'AR', 'Arad', 'Departments'),
('RO', 'B', 'Bucuresti', 'Municipality'),
('RO', 'BC', 'Bacau', 'Departments'),
('RO', 'BH', 'Bihor', 'Departments'),
('RO', 'BN', 'Bistrita-Nasaud', 'Departments'),
('RO', 'BR', 'Braila', 'Departments'),
('RO', 'BT', 'Botosani', 'Departments'),
('RO', 'BV', 'Brasov', 'Departments'),
('RO', 'BZ', 'Buzau', 'Departments'),
('RO', 'CJ', 'Cluj', 'Departments'),
('RO', 'CL', 'Calarasi', 'Departments'),
('RO', 'CS', 'Caras-Severin', 'Departments'),
('RO', 'CT', 'Constarta', 'Departments'),
('RO', 'CV', 'Covasna', 'Departments'),
('RO', 'DB', 'Dâmbovita', 'Departments'),
('RO', 'DJ', 'Dolj', 'Departments'),
('RO', 'GJ', 'Gorj', 'Departments'),
('RO', 'GL', 'Galati', 'Departments'),
('RO', 'GR', 'Giurgiu', 'Departments'),
('RO', 'HD', 'Hunedoara', 'Departments'),
('RO', 'HR', 'Harghita', 'Departments'),
('RO', 'IF', 'Ilfov', 'Departments'),
('RO', 'IL', 'Ialomita', 'Departments'),
('RO', 'IS', 'Iasi', 'Departments'),
('RO', 'MH', 'Mehedinti', 'Departments'),
('RO', 'MM', 'Maramures', 'Departments'),
('RO', 'MS', 'Mures', 'Departments'),
('RO', 'NT', 'Neamt', 'Departments'),
('RO', 'OT', 'Olt', 'Departments'),
('RO', 'PH', 'Prahova', 'Departments'),
('RO', 'SB', 'Sibiu', 'Departments'),
('RO', 'SJ', 'Salaj', 'Departments'),
('RO', 'SM', 'Satu Mare', 'Departments'),
('RO', 'SV', 'Suceava', 'Departments'),
('RO', 'TL', 'Tulcea', 'Departments'),
('RO', 'TM', 'Timis', 'Departments'),
('RO', 'TR', 'Teleorman', 'Departments'),
('RO', 'VL', 'Vâlcea', 'Departments'),
('RO', 'VN', 'Vrancea', 'Departments'),
('RO', 'VS', 'Vaslui', 'Departments'),
('RS', '00', 'Beograd', 'City'),
('RS', '01', 'Severna Backa', 'District'),
('RS', '02', 'Srednji Banat', 'District'),
('RS', '03', 'Severni Banat', 'District'),
('RS', '04', 'Juni Banat', 'District'),
('RS', '05', 'Zapadna Backa', 'District'),
('RS', '06', 'Juna Backa', 'District'),
('RS', '07', 'Srem', 'District'),
('RS', '08', 'Macva', 'District'),
('RS', '09', 'Kolubara', 'District'),
('RS', '10', 'Podunavlje', 'District'),
('RS', '11', 'Branicevo', 'District'),
('RS', '12', 'umadija', 'District'),
('RS', '13', 'Pomoravlje', 'District'),
('RS', '14', 'Bor', 'District'),
('RS', '15', 'Zajecar', 'District'),
('RS', '16', 'Zlatibor', 'District'),
('RS', '17', 'Moravica', 'District'),
('RS', '18', 'Raka', 'District'),
('RS', '19', 'Rasina', 'District'),
('RS', '20', 'Niava', 'District'),
('RS', '21', 'Toplica', 'District'),
('RS', '22', 'Pirot', 'District'),
('RS', '23', 'Jablanica', 'District'),
('RS', '24', 'Pcinja', 'District'),
('RS', '25', 'Kosovo', 'District'),
('RS', '26', 'Pec´', 'District'),
('RS', '27', 'Prizren', 'District'),
('RS', '28', 'Kosovska Mitrovica', 'District'),
('RS', '29', 'Kosovo-Pomoravlje', 'District'),
('RS', 'KM', 'Kosovo-Metohija', 'Autonomous province'),
('RS', 'VO', 'Vojvodina', 'Autonomous province'),
('RU', 'AD', 'Adygeya, Respublika', 'Republic'),
('RU', 'AL', 'Altay, Respublika', 'Republic'),
('RU', 'ALT', 'Altayskiy kray', 'Administrative territory'),
('RU', 'AMU', 'Amurskaya oblast\'', 'Administrative region'),
('RU', 'ARK', 'Arkhangel\'skaya oblast,', 'Administrative region'),
('RU', 'AST', 'Astrakhanskaya oblast\'', 'Administrative region'),
('RU', 'BA', 'Bashkortostan, Respublika', 'Republic'),
('RU', 'BEL', 'Belgorodskaya oblast\'', 'Administrative region'),
('RU', 'BRY', 'Bryanskaya oblast\'', 'Administrative region'),
('RU', 'BU', 'Buryatiya, Respublika', 'Republic'),
('RU', 'CE', 'Chechenskaya Respublika', 'Republic'),
('RU', 'CHE', 'Chelyabinskaya oblast\'', 'Administrative region'),
('RU', 'CHU', 'Chukotskiy avtonomnyy okrug', 'Autonomous district'),
('RU', 'CU', 'Chuvashskaya Respublika', 'Republic'),
('RU', 'DA', 'Dagestan, Respublika', 'Republic'),
('RU', 'IN', 'Ingushskaya Respublika [Respublika Ingushetiya]', 'Republic'),
('RU', 'IRK', 'Irkutskaya oblast\'', 'Administrative region'),
('RU', 'IVA', 'Ivanovskaya oblast\'', 'Administrative region'),
('RU', 'KAM', 'Kamchatskaya oblast\'', 'Administrative region'),
('RU', 'KB', 'Kabardino-Balkarskaya Respublika', 'Republic'),
('RU', 'KC', 'Karachayevo-Cherkesskaya Respublika', 'Republic'),
('RU', 'KDA', 'Krasnodarskiy kray', 'Administrative territory'),
('RU', 'KEM', 'Kemerovskaya oblast\'', 'Administrative region'),
('RU', 'KGD', 'Kaliningradskaya oblast,', 'Administrative region'),
('RU', 'KGN', 'Kurganskaya oblast\'', 'Administrative region'),
('RU', 'KHA', 'Khabarovskiy kray', 'Administrative territory'),
('RU', 'KHM', 'Khanty-Mansiyskiy avtonomnyy okrug', 'Autonomous district'),
('RU', 'KIR', 'Kirovskaya oblast\'', 'Administrative region'),
('RU', 'KK', 'Khakasiya, Respublika', 'Republic'),
('RU', 'KL', 'Kalmykiya, Respublika', 'Republic'),
('RU', 'KLU', 'Kaluzhskaya oblast\'', 'Administrative region'),
('RU', 'KO', 'Komi, Respublika', 'Republic'),
('RU', 'KOS', 'Kostromskaya oblast\'', 'Administrative region'),
('RU', 'KR', 'Kareliya, Respublika', 'Republic'),
('RU', 'KRS', 'Kurskaya oblast\'', 'Administrative region'),
('RU', 'KYA', 'Krasnoyarskiy kray', 'Administrative territory'),
('RU', 'LEN', 'Leningradskaya oblast\'', 'Administrative region'),
('RU', 'LIP', 'Lipetskaya oblast\'', 'Administrative region'),
('RU', 'MAG', 'Magadanskaya oblast\'', 'Administrative region'),
('RU', 'ME', 'Mariy El, Respublika', 'Republic'),
('RU', 'MO', 'Mordoviya, Respublika', 'Republic'),
('RU', 'MOS', 'Moskovskaya oblast\'', 'Administrative region'),
('RU', 'MOW', 'Moskva', 'Autonomous city'),
('RU', 'MUR', 'Murmanskaya oblast\'', 'Administrative region'),
('RU', 'NEN', 'Nenetskiy avtonomnyy okrug', 'Autonomous district'),
('RU', 'NGR', 'Novgorodskaya oblast\'', 'Administrative region'),
('RU', 'NIZ', 'Nizhegorodskaya oblast\'', 'Administrative region'),
('RU', 'NVS', 'Novosibirskaya oblast\'', 'Administrative region'),
('RU', 'OMS', 'Omskaya oblast\'', 'Administrative region'),
('RU', 'ORE', 'Orenburgskaya oblast\'', 'Administrative region'),
('RU', 'ORL', 'Orlovskaya oblast\'', 'Administrative region'),
('RU', 'PER', 'Perm', 'Administrative territory'),
('RU', 'PNZ', 'Penzenskaya oblast\'', 'Administrative region'),
('RU', 'PRI', 'Primorskiy kray', 'Administrative territory'),
('RU', 'PSK', 'Pskovskaya oblast\'', 'Administrative region'),
('RU', 'ROS', 'Rostovskaya oblast\'', 'Administrative region'),
('RU', 'RYA', 'Ryazanskaya oblast\'', 'Administrative region'),
('RU', 'SA', 'Sakha, Respublika [Yakutiya]', 'Republic'),
('RU', 'SAK', 'Sakhalinskaya oblast\'', 'Administrative region'),
('RU', 'SAM', 'Samarskaya oblast\'', 'Administrative region'),
('RU', 'SAR', 'Saratovskaya oblast\'', 'Administrative region'),
('RU', 'SE', 'Severnaya Osetiya, Respublika Alaniya] [Respublika Severnaya Osetiya-Alaniya]', 'Republic'),
('RU', 'SMO', 'Smolenskaya oblast\'', 'Administrative region'),
('RU', 'SPE', 'Sankt-Peterburg', 'Autonomous city'),
('RU', 'STA', 'Stavropol\'skiy kray', 'Administrative territory'),
('RU', 'SVE', 'Sverdlovskaya oblast\'', 'Administrative region'),
('RU', 'TA', 'Tatarstan, Respublika', 'Republic'),
('RU', 'TAM', 'Tambovskaya oblast\'', 'Administrative region'),
('RU', 'TOM', 'Tomskaya oblast\'', 'Administrative region'),
('RU', 'TUL', 'Tul\'skaya oblast\'', 'Administrative region'),
('RU', 'TVE', 'Tverskaya oblast\'', 'Administrative region'),
('RU', 'TY', 'Tyva, Respublika [Tuva]', 'Republic'),
('RU', 'TYU', 'Tyumenskaya oblast\'', 'Administrative region'),
('RU', 'UD', 'Udmurtskaya Respublika', 'Republic'),
('RU', 'ULY', 'Ul\'yanovskaya oblast\'', 'Administrative region'),
('RU', 'VGG', 'Volgogradskaya oblast\'', 'Administrative region'),
('RU', 'VLA', 'Vladimirskaya oblast\'', 'Administrative region'),
('RU', 'VLG', 'Vologodskaya oblast\'', 'Administrative region'),
('RU', 'VOR', 'Voronezhskaya oblast\'', 'Administrative region'),
('RU', 'YAN', 'Yamalo-Nenetskiy avtonomnyy okrug', 'Autonomous district'),
('RU', 'YAR', 'Yaroslavskaya oblast\'', 'Administrative region'),
('RU', 'YEV', 'Yevreyskaya avtonomnaya oblast\'', 'Autonomous region'),
('RU', 'ZAB', 'Zabaykal\'skiy kray', 'Administrative territory'),
('RW', '01', 'Ville de Kigali', 'Town council'),
('RW', '02', 'Est', 'Province'),
('RW', '03', 'Nord', 'Province'),
('RW', '04', 'Ouest', 'Province'),
('RW', '05', 'Sud', 'Province'),
('SA', '01', 'Ar Riyad', 'Province'),
('SA', '02', 'Makkah', 'Province'),
('SA', '03', 'AI Madinah', 'Province'),
('SA', '04', 'Ash Sharqiyah', 'Province'),
('SA', '05', 'AI Qasim', 'Province'),
('SA', '06', 'Ha\'il', 'Province'),
('SA', '07', 'Tabuk', 'Province'),
('SA', '08', 'AI Hudud ash Shamaliyah', 'Province'),
('SA', '09', 'Jizan', 'Province'),
('SA', '10', 'Najran', 'Province'),
('SA', '11', 'AI Bahah', 'Province'),
('SA', '12', 'AI Jawf', 'Province'),
('SA', '14', '\'Asir', 'Province'),
('SB', 'CE', 'Central', 'Province'),
('SB', 'CH', 'Choiseul', 'Province'),
('SB', 'CT', 'Capital Territory (Honiara)', 'Capital territory'),
('SB', 'GU', 'Guadalcanal', 'Province'),
('SB', 'IS', 'Isabel', 'Province'),
('SB', 'MK', 'Makira', 'Province'),
('SB', 'ML', 'Malaita', 'Province'),
('SB', 'RB', 'Rennell and Bellona', 'Province'),
('SB', 'TE', 'Temotu', 'Province'),
('SB', 'WE', 'Western', 'Province'),
('SC', '01', 'Anse aux Pins', ''),
('SC', '02', 'Anse Boileau', ''),
('SC', '03', 'Anse Étoile', ''),
('SC', '04', 'Anse Louis', ''),
('SC', '05', 'Anse Royale', ''),
('SC', '06', 'Baie Lazare', ''),
('SC', '07', 'Baie Sainte Anne', ''),
('SC', '08', 'Beau Vallon', ''),
('SC', '09', 'Bel Air', ''),
('SC', '10', 'Bel Ombre', ''),
('SC', '11', 'Cascade', ''),
('SC', '12', 'Glacis', ''),
('SC', '13', 'Grand\' Anse (Mahé)', ''),
('SC', '14', 'Grand\' Anse (Praslin)', ''),
('SC', '15', 'La Digue', ''),
('SC', '16', 'La Rivière Anglaise', ''),
('SC', '17', 'Mont Buxton', ''),
('SC', '18', 'Mont Fleuri', ''),
('SC', '19', 'Plaisance', ''),
('SC', '20', 'Pointe La Rue', ''),
('SC', '21', 'Port Glaud', ''),
('SC', '22', 'Saint Louis', ''),
('SC', '23', 'Takamaka', ''),
('SC', '24', 'Lemamel', ''),
('SC', '25', 'Ros Kaiman', ''),
('SD', 'DC', 'Zalingei', 'State'),
('SD', 'DE', 'Sharq Darfur', 'State'),
('SD', 'DN', 'Shamal Darfur', 'State'),
('SD', 'DS', 'Janub Darfur', 'State'),
('SD', 'DW', 'Gharb Darfur', 'State'),
('SD', 'GD', 'Al Qadarif', 'State'),
('SD', 'GZ', 'Al Jazirah', 'State'),
('SD', 'KA', 'Kassala', 'State'),
('SD', 'KH', 'Al Khartum', 'State'),
('SD', 'KN', 'Shamal Kurdufan', 'State'),
('SD', 'KS', 'Gharb Kurdufan', 'State'),
('SD', 'NB', 'An Nil al Azraq', 'State'),
('SD', 'NO', 'Ash Shamaliyah', 'State'),
('SD', 'NR', 'An Nil', 'State'),
('SD', 'NW', 'An Nil al Abyad', 'State'),
('SD', 'RS', 'Al Bahr al Ahmar', 'State'),
('SD', 'SI', 'Sinnar', 'State'),
('SE', 'AB', 'Stockholms län', 'Province'),
('SE', 'AC', 'Västerbottens län', 'Province'),
('SE', 'BD', 'Norrbottens län', 'Province'),
('SE', 'C', 'Uppsala län', 'Province'),
('SE', 'D', 'Södermanlands län', 'Province'),
('SE', 'E', 'Östergötlands län', 'Province'),
('SE', 'F', 'Jönköpings län', 'Province'),
('SE', 'G', 'Kronoborgs län', 'Province'),
('SE', 'H', 'Kalmar län', 'Province'),
('SE', 'I', 'Gotlands län', 'Province'),
('SE', 'K', 'Blekinge län', 'Province'),
('SE', 'M', 'Skåne län', 'Province'),
('SE', 'N', 'Hallands län', 'Province'),
('SE', 'O', 'Västra Götalands län', 'Province'),
('SE', 'S', 'Värmlands län', 'Province'),
('SE', 'T', 'Örebro län', 'Province'),
('SE', 'U', 'Västmanlands län', 'Province'),
('SE', 'W', 'Dalarnes län', 'Province'),
('SE', 'X', 'Gävleborgs län', 'Province'),
('SE', 'Y', 'Västernorrlands län', 'Province'),
('SE', 'Z', 'Jämtlands län', 'Province'),
('SG', '01', 'Central Singapore', ''),
('SG', '02', 'North East', ''),
('SG', '03', 'North West', ''),
('SG', '04', 'South East', ''),
('SG', '05', 'South West', ''),
('SH', 'AC', 'Ascension', 'Dependency'),
('SH', 'SH', 'Saint Helena', 'Administrative area'),
('SH', 'TA', 'Tristan da Cunha', 'Dependency'),
('SI', '001', 'Ajdovcina', 'Commune'),
('SI', '002', 'Beltinci', 'Commune'),
('SI', '003', 'Bled', 'Commune'),
('SI', '004', 'Bohinj', 'Commune'),
('SI', '005', 'Borovnica', 'Commune'),
('SI', '006', 'Bovec', 'Commune'),
('SI', '007', 'Brda', 'Commune'),
('SI', '008', 'Brezovica', 'Commune'),
('SI', '009', 'Breice', 'Commune'),
('SI', '010', 'Tiina', 'Commune'),
('SI', '011', 'Celje', 'Commune'),
('SI', '012', 'Cerklje na Gorenjskem', 'Commune'),
('SI', '013', 'Cerknica', 'Commune'),
('SI', '014', 'Cerkno', 'Commune'),
('SI', '015', 'Crenovci', 'Commune'),
('SI', '016', 'Crna na Korokem', 'Commune'),
('SI', '017', 'Crnomelj', 'Commune'),
('SI', '018', 'Destrnik', 'Commune'),
('SI', '019', 'Divaca', 'Commune'),
('SI', '020', 'Dobrepolje', 'Commune'),
('SI', '021', 'Dobrova-Polhov Gradec', 'Commune'),
('SI', '022', 'Dol pri Ljubljani', 'Commune'),
('SI', '023', 'Domale', 'Commune'),
('SI', '024', 'Dornava', 'Commune'),
('SI', '025', 'Dravograd', 'Commune'),
('SI', '026', 'Duplek', 'Commune'),
('SI', '027', 'Gorenja vas-Poljane', 'Commune'),
('SI', '028', 'Gorinica', 'Commune'),
('SI', '029', 'Gornja Radgona', 'Commune'),
('SI', '030', 'Gornji Grad', 'Commune'),
('SI', '031', 'Gornji Petrovci', 'Commune'),
('SI', '032', 'Grosuplje', 'Commune'),
('SI', '033', 'alovci', 'Commune'),
('SI', '034', 'Hrastnik', 'Commune'),
('SI', '035', 'Hrpelje-Kozina', 'Commune'),
('SI', '036', 'Idrija', 'Commune'),
('SI', '037', 'Ig', 'Commune'),
('SI', '038', 'Ilirska Bistrica', 'Commune'),
('SI', '039', 'Ivancna Gorica', 'Commune'),
('SI', '040', 'Izola', 'Commune'),
('SI', '041', 'Jesenice', 'Commune'),
('SI', '042', 'Jurinci', 'Commune'),
('SI', '043', 'Kamnik', 'Commune'),
('SI', '044', 'Kanal', 'Commune'),
('SI', '045', 'Kidricevo', 'Commune'),
('SI', '046', 'Kobarid', 'Commune'),
('SI', '047', 'Kobilje', 'Commune'),
('SI', '048', 'Kocevje', 'Commune'),
('SI', '049', 'Komen', 'Commune'),
('SI', '050', 'Koper', 'Commune'),
('SI', '051', 'Kozje', 'Commune'),
('SI', '052', 'Kranj', 'Commune'),
('SI', '053', 'Kranjska Gora', 'Commune'),
('SI', '054', 'Krko', 'Commune'),
('SI', '055', 'Kungota', 'Commune'),
('SI', '056', 'Kuzma', 'Commune'),
('SI', '057', 'Lako', 'Commune'),
('SI', '058', 'Lenart', 'Commune'),
('SI', '059', 'Lendava', 'Commune'),
('SI', '060', 'Litija', 'Commune'),
('SI', '061', 'Ljubljana', 'Commune'),
('SI', '062', 'Ljubno', 'Commune'),
('SI', '063', 'Ljutomer', 'Commune'),
('SI', '064', 'Logatec', 'Commune'),
('SI', '065', 'Loka dolina', 'Commune'),
('SI', '066', 'Loki Potok', 'Commune'),
('SI', '067', 'Luce', 'Commune'),
('SI', '068', 'Lukovica', 'Commune'),
('SI', '069', 'Majperk', 'Commune'),
('SI', '070', 'Maribor', 'Commune'),
('SI', '071', 'Medvode', 'Commune'),
('SI', '072', 'Menge', 'Commune'),
('SI', '073', 'Metlika', 'Commune'),
('SI', '074', 'Meica', 'Commune'),
('SI', '075', 'Miren-Kostanjevica', 'Commune'),
('SI', '076', 'Mislinja', 'Commune'),
('SI', '077', 'Moravce', 'Commune'),
('SI', '078', 'Moravske Toplice', 'Commune'),
('SI', '079', 'Mozirje', 'Commune'),
('SI', '080', 'Murska Sobota', 'Commune'),
('SI', '081', 'Muta', 'Commune'),
('SI', '082', 'Naklo', 'Commune'),
('SI', '083', 'Nazarje', 'Commune'),
('SI', '084', 'Nova Gorica', 'Commune'),
('SI', '085', 'Novo mesto', 'Commune'),
('SI', '086', 'Odranci', 'Commune'),
('SI', '087', 'Ormo', 'Commune'),
('SI', '088', 'Osilnica', 'Commune'),
('SI', '089', 'Pesnica', 'Commune'),
('SI', '090', 'Piran', 'Commune'),
('SI', '091', 'Pivka', 'Commune'),
('SI', '092', 'Podcetrtek', 'Commune'),
('SI', '093', 'Podvelka', 'Commune'),
('SI', '094', 'Postojna', 'Commune'),
('SI', '095', 'Preddvor', 'Commune'),
('SI', '096', 'Ptuj', 'Commune'),
('SI', '097', 'Puconci', 'Commune'),
('SI', '098', 'Race-Fram', 'Commune'),
('SI', '099', 'Radece', 'Commune'),
('SI', '100', 'Radenci', 'Commune'),
('SI', '101', 'Radlje ob Dravi', 'Commune'),
('SI', '102', 'Radovljica', 'Commune'),
('SI', '103', 'Ravne na Korokem', 'Commune'),
('SI', '104', 'Ribnica', 'Commune'),
('SI', '105', 'Rogaovci', 'Commune'),
('SI', '106', 'Rogaka Slatina', 'Commune'),
('SI', '107', 'Rogatec', 'Commune'),
('SI', '108', 'Rue', 'Commune'),
('SI', '109', 'Semic', 'Commune'),
('SI', '110', 'Semic', 'Commune'),
('SI', '111', 'Semic', 'Commune'),
('SI', '112', 'Slovenj Gradec', 'Commune'),
('SI', '113', 'Slovenska Bistrica', 'Commune'),
('SI', '114', 'Slovenske Konjice', 'Commune'),
('SI', '115', 'Stare', 'Commune'),
('SI', '116', 'Sveti Jurij', 'Commune'),
('SI', '117', 'encur', 'Commune'),
('SI', '118', 'entilj', 'Commune'),
('SI', '119', 'entjernej', 'Commune'),
('SI', '120', 'entjur pri Celju', 'Commune'),
('SI', '121', 'kocjan', 'Commune'),
('SI', '122', 'kofja Loka', 'Commune'),
('SI', '123', 'kofljica', 'Commune'),
('SI', '124', 'marje pri Jelah', 'Commune'),
('SI', '125', 'martno ob Paki', 'Commune'),
('SI', '126', 'otanj', 'Commune'),
('SI', '127', 'tore', 'Commune'),
('SI', '128', 'Tolmin', 'Commune'),
('SI', '129', 'Trbovlje', 'Commune'),
('SI', '130', 'Trebnje', 'Commune'),
('SI', '131', 'Tric', 'Commune'),
('SI', '132', 'Turnice', 'Commune'),
('SI', '133', 'Velenje', 'Commune'),
('SI', '134', 'Velike Lace', 'Commune'),
('SI', '135', 'Videm', 'Commune'),
('SI', '136', 'Vipava', 'Commune'),
('SI', '137', 'Vitanje', 'Commune'),
('SI', '138', 'Vodice', 'Commune'),
('SI', '139', 'Vojnik', 'Commune'),
('SI', '140', 'Vrhnika', 'Commune'),
('SI', '141', 'Vuzenica', 'Commune'),
('SI', '142', 'Zagorje ob Savi', 'Commune'),
('SI', '143', 'Zavrc', 'Commune'),
('SI', '144', 'Zrece', 'Commune'),
('SI', '146', 'elezniki', 'Commune'),
('SI', '147', 'iri', 'Commune'),
('SI', '148', 'Benedikt', 'Commune'),
('SI', '149', 'Bistrica ob Sotli', 'Commune'),
('SI', '150', 'Bloke', 'Commune'),
('SI', '151', 'Braslovce', 'Commune'),
('SI', '152', 'Cankova', 'Commune'),
('SI', '153', 'Cerkvenjak', 'Commune'),
('SI', '154', 'Dobje', 'Commune'),
('SI', '155', 'Dobrna', 'Commune'),
('SI', '156', 'Dobrovnik', 'Commune'),
('SI', '157', 'Dolenjske Toplice', 'Commune'),
('SI', '158', 'Grad', 'Commune'),
('SI', '159', 'Hajdina', 'Commune'),
('SI', '160', 'Hoce-Slivnica', 'Commune'),
('SI', '161', 'Hodo', 'Commune'),
('SI', '162', 'Horjul', 'Commune'),
('SI', '163', 'Jezersko', 'Commune'),
('SI', '164', 'Komenda', 'Commune'),
('SI', '165', 'Kostel', 'Commune'),
('SI', '166', 'Krievci', 'Commune'),
('SI', '167', 'Lovrenc na Pohorju', 'Commune'),
('SI', '168', 'Markovci', 'Commune'),
('SI', '169', 'Miklav na Dravskem polju', 'Commune'),
('SI', '170', 'Mirna Pec', 'Commune'),
('SI', '171', 'Oplotnica', 'Commune'),
('SI', '172', 'Podlehnik', 'Commune'),
('SI', '173', 'Polzela', 'Commune'),
('SI', '174', 'Prebold', 'Commune'),
('SI', '175', 'Prevalje', 'Commune'),
('SI', '176', 'Razkrije', 'Commune'),
('SI', '177', 'Ribnica na Pohorju', 'Commune'),
('SI', '178', 'Selnica ob Dravi', 'Commune'),
('SI', '179', 'Sodraica', 'Commune'),
('SI', '180', 'Solcava', 'Commune'),
('SI', '181', 'Sveta Ana', 'Commune'),
('SI', '182', 'Sveti Andra v Slovenskih goricah', 'Commune'),
('SI', '183', 'empeter-Vrtojba', 'Commune'),
('SI', '184', 'Tabor', 'Commune'),
('SI', '185', 'Trnovska vas', 'Commune'),
('SI', '186', 'Trzin', 'Commune'),
('SI', '187', 'Velika Polana', 'Commune'),
('SI', '188', 'Verej', 'Commune'),
('SI', '189', 'Vransko', 'Commune'),
('SI', '190', 'alec', 'Commune'),
('SI', '191', 'etale', 'Commune'),
('SI', '192', 'irovnica', 'Commune'),
('SI', '193', 'uemberk', 'Commune'),
('SI', '194', 'martno pri Litiji', 'Commune'),
('SI', '195', 'Apace', 'Commune'),
('SI', '196', 'Cirkulane', 'Commune'),
('SI', '197', 'Kosanjevica na Krki', 'Commune'),
('SI', '198', 'Makole', 'Commune'),
('SI', '199', 'Mokronog-Trebelno', 'Commune'),
('SI', '200', 'Poljèane', 'Commune'),
('SI', '201', 'Renèe-Vogrsko', 'Commune'),
('SI', '202', 'Sredice ob Dravi', 'Commune'),
('SI', '203', 'Straa', 'Commune'),
('SI', '204', 'Sveta Trojica v Slovenskih Goricah', 'Commune'),
('SI', '205', 'Sveti Toma', 'Commune'),
('SI', '206', 'marjeke Toplice', 'Commune'),
('SI', '207', 'Gorje', 'Commune'),
('SI', '208', 'Log-Dragomer', 'Commune'),
('SI', '209', 'Reèica ob Savinji', 'Commune'),
('SI', '210', 'Sveti Jurij v Slovenskih Goricah', 'Commune'),
('SI', '211', 'entrupert', 'Commune'),
('SK', 'BC', 'Banskobystrický kraj', 'Region'),
('SK', 'BL', 'Bratislavský kraj', 'Region'),
('SK', 'KI', 'Koický kraj', 'Region'),
('SK', 'NI', 'Nitriansky kraj', 'Region'),
('SK', 'PV', 'Preovský kraj', 'Region'),
('SK', 'TA', 'Trnavský kraj', 'Region'),
('SK', 'TC', 'Trenciansky kraj', 'Region'),
('SK', 'ZI', 'ilinský kraj', 'Region'),
('SL', 'E', 'Eastern', 'Province'),
('SL', 'N', 'Northern', 'Province'),
('SL', 'S', 'Southern', 'Province'),
('SL', 'W', 'Western Area (Freetown)', 'Area'),
('SM', '01', 'Acquaviva', ''),
('SM', '02', 'Chiesanuova', ''),
('SM', '03', 'Domagnano', ''),
('SM', '04', 'Faetano', ''),
('SM', '05', 'Fiorentino', ''),
('SM', '06', 'Borgo Maggiore', ''),
('SM', '07', 'San Marino', ''),
('SM', '08', 'Montegiardino', ''),
('SM', '09', 'Serravalle', ''),
('SN', 'DB', 'Diourbel', 'Region'),
('SN', 'FK', 'Fatick', 'Region'),
('SN', 'KA', 'Kaffrine', 'Region'),
('SN', 'KD', 'Kolda', 'Region'),
('SN', 'KE', 'Kédougou', 'Region'),
('SN', 'KL', 'Kaolack', 'Region'),
('SN', 'LG', 'Louga', 'Region'),
('SN', 'M', 'Dakar', 'Region'),
('SN', 'MT', 'Matam', 'Region'),
('SN', 'SE', 'Sédhiou', 'Region'),
('SN', 'SL', 'Saint-Louis', 'Region'),
('SN', 'TC', 'Tambacounda', 'Region'),
('SN', 'TH', 'Thiès', 'Region'),
('SN', 'ZG', 'Ziguinchor', 'Region'),
('SO', 'AW', 'Awdal', 'Region');
INSERT INTO `mm_country_subdivisions` (`iso`, `code`, `name`, `type`) VALUES
('SO', 'BK', 'Bakool', 'Region'),
('SO', 'BN', 'Banaadir', 'Region'),
('SO', 'BR', 'Bari', 'Region'),
('SO', 'BY', 'Bay', 'Region'),
('SO', 'GA', 'Galguduud', 'Region'),
('SO', 'GE', 'Gedo', 'Region'),
('SO', 'HI', 'Hiiraan', 'Region'),
('SO', 'JD', 'Jubbada Dhexe', 'Region'),
('SO', 'JH', 'Jubbada Hoose', 'Region'),
('SO', 'MU', 'Mudug', 'Region'),
('SO', 'NU', 'Nugaal', 'Region'),
('SO', 'SA', 'Sanaag', 'Region'),
('SO', 'SD', 'Shabeellaha Dhexe', 'Region'),
('SO', 'SH', 'Shabeellaha Hoose', 'Region'),
('SO', 'SO', 'Sool', 'Region'),
('SO', 'TO', 'Togdheer', 'Region'),
('SO', 'WO', 'Woqooyi Galbeed', 'Region'),
('SR', 'BR', 'Brokopondo', 'District'),
('SR', 'CM', 'Commewijne', 'District'),
('SR', 'CR', 'Coronie', 'District'),
('SR', 'MA', 'Marowijne', 'District'),
('SR', 'NI', 'Nickerie', 'District'),
('SR', 'PM', 'Paramaribo', ''),
('SR', 'PR', 'Para', 'District'),
('SR', 'SA', 'Saramacca', 'District'),
('SR', 'SI', 'Sipaliwini', 'District'),
('SR', 'WA', 'Wanica', 'District'),
('SS', 'BN', 'Northern Bahr el-Ghazal', 'State'),
('SS', 'BW', 'Western Bahr el-Ghazal', 'State'),
('SS', 'EC', 'Central Equatoria', 'State'),
('SS', 'EE', 'Eastern Equatoria', 'State'),
('SS', 'EW', 'Western Equatoria', 'State'),
('SS', 'JG', 'Jonglei', 'State'),
('SS', 'LK', 'Lakes', 'State'),
('SS', 'NU', 'Upper Nile', 'State'),
('SS', 'UY', 'Unity', 'State'),
('SS', 'WR', 'Warrap', 'State'),
('ST', 'P', 'Príncipe', 'Province'),
('ST', 'S', 'São Tomé', 'Province'),
('SV', 'AH', 'Ahuachapán', ''),
('SV', 'CA', 'Cabañas', ''),
('SV', 'CH', 'Chalatenango', ''),
('SV', 'CU', 'Cuscatlán', ''),
('SV', 'LI', 'La Libertad', ''),
('SV', 'MO', 'Morazán', ''),
('SV', 'PA', 'La Paz', ''),
('SV', 'SA', 'Santa Ana', ''),
('SV', 'SM', 'San Miguel', ''),
('SV', 'SO', 'Sonsonate', ''),
('SV', 'SS', 'San Salvador', ''),
('SV', 'SV', 'San Vicente', ''),
('SV', 'UN', 'La Unión', ''),
('SV', 'US', 'Usulután', ''),
('SY', 'DI', 'Dimashq', ''),
('SY', 'DR', 'Dar\'a', ''),
('SY', 'DY', 'Dayr az Zawr', ''),
('SY', 'HA', 'AI Hasakah', ''),
('SY', 'HI', 'Hims', ''),
('SY', 'HL', 'Halab', ''),
('SY', 'HM', 'Hamah', ''),
('SY', 'ID', 'Idlib', ''),
('SY', 'LA', 'AI Ladhiqiyah', ''),
('SY', 'Qu', 'AI Qunaytirah', ''),
('SY', 'RA', 'Ar Raqqah', ''),
('SY', 'RD', 'Rif Dimashq', ''),
('SY', 'SU', 'As Suwayda\'', ''),
('SY', 'TA', 'Tartus', ''),
('SZ', 'HH', 'Hhohho', 'District'),
('SZ', 'LU', 'Lubombo', 'District'),
('SZ', 'MA', 'Manzini', 'District'),
('SZ', 'SH', 'Shiselweni', 'District'),
('TD', 'BA', 'Batha', ''),
('TD', 'BG', 'Ba?r al Ghazal', ''),
('TD', 'BO', 'Burku', ''),
('TD', 'CB', 'Chari-Baguirmi', ''),
('TD', 'EN', 'Innidi', ''),
('TD', 'GR', 'Guéra', ''),
('TD', 'HL', 'Hadjer Lamis', ''),
('TD', 'KA', 'Kanem', ''),
('TD', 'LC', 'Lac', ''),
('TD', 'LO', 'Logone-Occidental', ''),
('TD', 'LR', 'Logone-Oriental', ''),
('TD', 'MA', 'Mandoul', ''),
('TD', 'MC', 'Moyen-Chari', ''),
('TD', 'ME', 'Mayo-Kébbi-Est', ''),
('TD', 'MO', 'Mayo-Kébbi-Ouest', ''),
('TD', 'ND', 'Ndjamena', ''),
('TD', 'OD', 'Ouaddaï', ''),
('TD', 'SA', 'Salamat', ''),
('TD', 'SI', 'Sila', ''),
('TD', 'TA', 'Tandjilé', ''),
('TD', 'TI', 'Tibasti', ''),
('TD', 'WF', 'Wadi Fira', ''),
('TG', 'C', 'Centre', ''),
('TG', 'K', 'Kara', ''),
('TG', 'M', 'Maritime (Région)', ''),
('TG', 'P', 'Plateaux', ''),
('TG', 'S', 'Savannes', ''),
('TH', '10', 'Krung Thep Maha Nakhon [Bangkok]', ''),
('TH', '11', 'Samut Prakan', ''),
('TH', '12', 'Nonthaburi', ''),
('TH', '13', 'Pathum Thani', ''),
('TH', '14', 'Phra Nakhon Si Ayutthaya', ''),
('TH', '15', 'Ang Thong', ''),
('TH', '16', 'Lop Buri', ''),
('TH', '17', 'Sing Buri', ''),
('TH', '18', 'Chai Nat', ''),
('TH', '19', 'Saraburi', ''),
('TH', '20', 'Chon Buri', ''),
('TH', '21', 'Rayong', ''),
('TH', '22', 'Chanthaburi', ''),
('TH', '23', 'Trat', ''),
('TH', '24', 'Chachoengsao', ''),
('TH', '25', 'Prachin Buri', ''),
('TH', '26', 'Nakhon Nayok', ''),
('TH', '27', 'Sa Kaeo', ''),
('TH', '30', 'Nakhon Ratchasima', ''),
('TH', '31', 'Buri Ram', ''),
('TH', '32', 'Surin', ''),
('TH', '33', 'Si Sa Ket', ''),
('TH', '34', 'Ubon Ratchathani', ''),
('TH', '35', 'Yasothon', ''),
('TH', '36', 'Chaiyaphum', ''),
('TH', '37', 'Amnat Charoen', ''),
('TH', '39', 'Nong Bua Lam Phu', ''),
('TH', '40', 'Khon Kaen', ''),
('TH', '41', 'Udon Thani', ''),
('TH', '42', 'Loei', ''),
('TH', '43', 'Nong Khai', ''),
('TH', '44', 'Maha Sarakham', ''),
('TH', '45', 'Roi Et', ''),
('TH', '46', 'Kalasin', ''),
('TH', '47', 'Sakon Nakhon', ''),
('TH', '48', 'Nakhon Phanom', ''),
('TH', '49', 'Mukdahan', ''),
('TH', '50', 'Chiang Mai', ''),
('TH', '51', 'Lamphun', ''),
('TH', '52', 'Lampang', ''),
('TH', '53', 'Uttaradit', ''),
('TH', '54', 'Phrae', ''),
('TH', '55', 'Nan', ''),
('TH', '56', 'Phayao', ''),
('TH', '57', 'Chiang Rai', ''),
('TH', '58', 'Mae Hong Son', ''),
('TH', '60', 'Nakhon Sawan', ''),
('TH', '61', 'Uthai Thani', ''),
('TH', '62', 'Kamphaeng Phet', ''),
('TH', '63', 'Tak', ''),
('TH', '64', 'Sukhothai', ''),
('TH', '65', 'Phitsanulok', ''),
('TH', '66', 'Phichit', ''),
('TH', '67', 'Phetchabun', ''),
('TH', '70', 'Ratchaburi', ''),
('TH', '71', 'Kanchanaburi', ''),
('TH', '72', 'Suphan Buri', ''),
('TH', '73', 'Nakhon Pathom', ''),
('TH', '74', 'Samut Sakhon', ''),
('TH', '75', 'Samut Songkhram', ''),
('TH', '76', 'Phetchaburi', ''),
('TH', '77', 'Prachuap Khiri Khan', ''),
('TH', '80', 'Nakhon Si Thammarat', ''),
('TH', '81', 'Krabi', ''),
('TH', '82', 'Phangnga', ''),
('TH', '83', 'Phuket', ''),
('TH', '84', 'Surat Thani', ''),
('TH', '85', 'Ranong', ''),
('TH', '86', 'Chumphon', ''),
('TH', '90', 'Songkhla', ''),
('TH', '91', 'Satun', ''),
('TH', '92', 'Trang', ''),
('TH', '93', 'Phatthalung', ''),
('TH', '94', 'Pattani', ''),
('TH', '95', 'Yala', ''),
('TH', '96', 'Narathiwat', ''),
('TH', 'S', 'Phatthaya', ''),
('TJ', 'GB', 'Gorno-Badakhshan', ''),
('TJ', 'KT', 'Khatlon', ''),
('TJ', 'SU', 'Sughd', ''),
('TL', 'AL', 'Aileu', ''),
('TL', 'AN', 'Ainaro', ''),
('TL', 'BA', 'Baucau', ''),
('TL', 'BO', 'Bobonaro', ''),
('TL', 'CO', 'Cova Lima', ''),
('TL', 'DI', 'Dili', ''),
('TL', 'ER', 'Ermera', ''),
('TL', 'LA', 'Lautem', ''),
('TL', 'LI', 'Liquiça', ''),
('TL', 'MF', 'Manufahi', ''),
('TL', 'MT', 'Manatuto', ''),
('TL', 'OE', 'Oecussi', ''),
('TL', 'VI', 'Viqueque', ''),
('TM', 'A', 'Ahal', ''),
('TM', 'B', 'Balkan', ''),
('TM', 'D', 'Dashowuz', ''),
('TM', 'L', 'Lebap', ''),
('TM', 'M', 'Mary', ''),
('TM', 'S', 'Asgabat', ''),
('TN', '11', 'Tunis', 'Governorate'),
('TN', '12', 'L\'Ariana', 'Governorate'),
('TN', '13', 'Ben Arous', 'Governorate'),
('TN', '14', 'La Manouba', 'Governorate'),
('TN', '21', 'Nabeul', 'Governorate'),
('TN', '22', 'Zaghouan', 'Governorate'),
('TN', '23', 'Bizerte', 'Governorate'),
('TN', '31', 'Béja', 'Governorate'),
('TN', '32', 'Jendouba', 'Governorate'),
('TN', '33', 'Le Kef', 'Governorate'),
('TN', '34', 'Siliana', 'Governorate'),
('TN', '41', 'Kairouan', 'Governorate'),
('TN', '42', 'Kasserine', 'Governorate'),
('TN', '43', 'Sidi Bouzid', 'Governorate'),
('TN', '51', 'Sousse', 'Governorate'),
('TN', '52', 'Monastir', 'Governorate'),
('TN', '53', 'Mahdia', 'Governorate'),
('TN', '61', 'Sfax', 'Governorate'),
('TN', '71', 'Gafsa', 'Governorate'),
('TN', '72', 'Tozeur', 'Governorate'),
('TN', '73', 'Kebili', 'Governorate'),
('TN', '81', 'Gabès', 'Governorate'),
('TN', '82', 'Medenine', 'Governorate'),
('TN', '83', 'Tataouine', 'Governorate'),
('TO', '01', '\'Eua', ''),
('TO', '02', 'Ha\'apai', ''),
('TO', '03', 'Niuas', ''),
('TO', '04', 'Tongatapu', ''),
('TO', '05', 'Vava\'u', ''),
('TR', '01', 'Adana', 'Province'),
('TR', '02', 'Adiyaman', 'Province'),
('TR', '03', 'Afyon', 'Province'),
('TR', '04', 'Agri', 'Province'),
('TR', '05', 'Amasya', 'Province'),
('TR', '06', 'Ankara', 'Province'),
('TR', '07', 'Antalya', 'Province'),
('TR', '08', 'Artvin', 'Province'),
('TR', '09', 'Aydin', 'Province'),
('TR', '10', 'Balikesir', 'Province'),
('TR', '11', 'Bilecik', 'Province'),
('TR', '12', 'Bingol', 'Province'),
('TR', '13', 'Bitlis', 'Province'),
('TR', '14', 'Bolu', 'Province'),
('TR', '15', 'Burdur', 'Province'),
('TR', '16', 'Bursa', 'Province'),
('TR', '17', 'Canakkale', 'Province'),
('TR', '18', 'Cankiri', 'Province'),
('TR', '19', 'Corum', 'Province'),
('TR', '20', 'Denizli', 'Province'),
('TR', '21', 'Diyarbakir', 'Province'),
('TR', '22', 'Edirne', 'Province'),
('TR', '23', 'Elazig', 'Province'),
('TR', '24', 'Erzincan', 'Province'),
('TR', '25', 'Erzurum', 'Province'),
('TR', '26', 'Eskisehir', 'Province'),
('TR', '27', 'Gaziantep', 'Province'),
('TR', '28', 'Giresun', 'Province'),
('TR', '29', 'Gümüshane', 'Province'),
('TR', '30', 'Hakkari', 'Province'),
('TR', '31', 'Hatay', 'Province'),
('TR', '32', 'Isparta', 'Province'),
('TR', '33', 'Icel', 'Province'),
('TR', '34', 'Istanbul', 'Province'),
('TR', '35', 'Izmir', 'Province'),
('TR', '36', 'Kars', 'Province'),
('TR', '37', 'Kastamonu', 'Province'),
('TR', '38', 'Kayseri', 'Province'),
('TR', '39', 'Kirklareli', 'Province'),
('TR', '40', 'Kirsehir', 'Province'),
('TR', '41', 'Kocaeli', 'Province'),
('TR', '42', 'Konya', 'Province'),
('TR', '43', 'Kütahya', 'Province'),
('TR', '44', 'Malatya', 'Province'),
('TR', '45', 'Manisa', 'Province'),
('TR', '46', 'Kahramanmaras', 'Province'),
('TR', '47', 'Mardin', 'Province'),
('TR', '48', 'Mugla', 'Province'),
('TR', '49', 'Mus', 'Province'),
('TR', '50', 'Nevsehir', 'Province'),
('TR', '51', 'Nigde', 'Province'),
('TR', '52', 'Ordu', 'Province'),
('TR', '53', 'Rize', 'Province'),
('TR', '54', 'Sakarya', 'Province'),
('TR', '55', 'Samsun', 'Province'),
('TR', '56', 'Siirt', 'Province'),
('TR', '57', 'Sinop', 'Province'),
('TR', '58', 'Sivas', 'Province'),
('TR', '59', 'Tekirdag', 'Province'),
('TR', '60', 'Tokat', 'Province'),
('TR', '61', 'Trabzon', 'Province'),
('TR', '62', 'Tunceli', 'Province'),
('TR', '63', 'Sanliurfa', 'Province'),
('TR', '64', 'Usak', 'Province'),
('TR', '65', 'Van', 'Province'),
('TR', '66', 'Yozgat', 'Province'),
('TR', '67', 'Zonguldak', 'Province'),
('TR', '68', 'Aksaray', 'Province'),
('TR', '69', 'Bayburt', 'Province'),
('TR', '70', 'Karaman', 'Province'),
('TR', '71', 'Kirkkale', 'Province'),
('TR', '72', 'Batman', 'Province'),
('TR', '73', 'Sirnak', 'Province'),
('TR', '74', 'Bartin', 'Province'),
('TR', '75', 'Ardahan', 'Province'),
('TR', '76', 'Igdir', 'Province'),
('TR', '77', 'Yalova', 'Province'),
('TR', '78', 'Karabuk', 'Province'),
('TR', '79', 'Kilis', 'Province'),
('TR', '80', 'Osmaniye', 'Province'),
('TR', '81', 'Düzce', 'Province'),
('TT', 'ARI', 'Arima', 'Municipality'),
('TT', 'CHA', 'Chaguanas', 'Municipality'),
('TT', 'CTT', 'Couva-Tabaquite-Talparo', ''),
('TT', 'DMN', 'Diego Martin', ''),
('TT', 'ETO', 'Eastern Tobago', ''),
('TT', 'PED', 'Penal-Debe', ''),
('TT', 'POS', 'Port of Spain', 'Municipality'),
('TT', 'PRT', 'Princes Town', ''),
('TT', 'PTF', 'Point Fortin', 'Municipality'),
('TT', 'RCM', 'Rio Claro-Mayaro', ''),
('TT', 'SFO', 'San Fernando', 'Municipality'),
('TT', 'SGE', 'Sangre Grande', ''),
('TT', 'SIP', 'Siparia', ''),
('TT', 'SJL', 'San Juan-Laventille', ''),
('TT', 'TUP', 'Tunapuna-Piarco', ''),
('TT', 'WTO', 'Western Tobago', ''),
('TV', 'FUN', 'Funafuti', 'Town council'),
('TV', 'NIT', 'Niutao', 'Island council'),
('TV', 'NIU', 'Nui', 'Island council'),
('TV', 'NKF', 'Nukufetau', 'Island council'),
('TV', 'NKL', 'Nukulaelae', 'Island council'),
('TV', 'NMA', 'Nanumea', 'Island council'),
('TV', 'NMG', 'Nanumanga', 'Island council'),
('TV', 'VAI', 'Vaitupu', 'Island council'),
('TW', 'CHA', 'Changhua', 'district'),
('TW', 'CYI', 'Chiayi', 'Municipality'),
('TW', 'CYQ', 'Chiayi', 'district'),
('TW', 'HSQ', 'Chiayi', 'district'),
('TW', 'HSZ', 'Hsinchu', 'Municipality'),
('TW', 'HUA', 'Hualien', 'district'),
('TW', 'ILA', 'Ilan', 'district'),
('TW', 'KEE', 'Keelung', 'Municipality'),
('TW', 'KHH', 'Kaohsiung', 'special municipality'),
('TW', 'KHQ', 'Kaohsiung', 'district'),
('TW', 'MIA', 'Miaoli', 'district'),
('TW', 'NAN', 'Nantou', 'district'),
('TW', 'PEN', 'Penghu', 'district'),
('TW', 'PIF', 'Pingtung', 'district'),
('TW', 'TAO', 'Taoyuan', 'district'),
('TW', 'TNN', 'Tainan', 'Municipality'),
('TW', 'TNQ', 'Tainan', 'district'),
('TW', 'TPE', 'Taipei', 'special municipality'),
('TW', 'TPQ', 'Taipei', 'district'),
('TW', 'TTT', 'Taitung', 'district'),
('TW', 'TXG', 'Taichung', 'Municipality'),
('TW', 'TXQ', 'Taichung', 'district'),
('TW', 'YUN', 'Yunlin', 'district'),
('TZ', '01', 'Arusha', 'Region'),
('TZ', '02', 'Dar es Salaam', 'Region'),
('TZ', '03', 'Dodoma', 'Region'),
('TZ', '04', 'Iringa', 'Region'),
('TZ', '05', 'Kagera', 'Region'),
('TZ', '06', 'Kaskazini Pemba', 'Region'),
('TZ', '07', 'Kaskazini Unguja', 'Region'),
('TZ', '08', 'Kigoma', 'Region'),
('TZ', '09', 'Kilimanjaro', 'Region'),
('TZ', '10', 'Kusini Pemba', 'Region'),
('TZ', '11', 'Kusini Unguja', 'Region'),
('TZ', '12', 'Lindi', 'Region'),
('TZ', '13', 'Mara', 'Region'),
('TZ', '14', 'Mbeya', 'Region'),
('TZ', '15', 'Mjini Magharibi', 'Region'),
('TZ', '16', 'Morogoro', 'Region'),
('TZ', '17', 'Mtwara', 'Region'),
('TZ', '18', 'Mwanza', 'Region'),
('TZ', '19', 'Pwani', 'Region'),
('TZ', '20', 'Rukwa', 'Region'),
('TZ', '21', 'Ruvuma', 'Region'),
('TZ', '22', 'Shinyanga', 'Region'),
('TZ', '23', 'Singida', 'Region'),
('TZ', '24', 'Tabora', 'Region'),
('TZ', '25', 'Tanga', 'Region'),
('TZ', '26', 'Manyara', 'Region'),
('UA', '05', 'Vinnyts\'ka Oblast\'', ''),
('UA', '07', 'Volyns\'ka Oblast\'', ''),
('UA', '09', 'Luhans\'ka Oblast\'', ''),
('UA', '12', 'Dnipropetrovs\'ka Oblast\'', ''),
('UA', '14', 'Donets\'ka Oblast\'', ''),
('UA', '18', 'Zhytomyrs\'ka Oblast\'', ''),
('UA', '21', 'Zakarpats\'ka Oblast\'', ''),
('UA', '23', 'Zaporiz\'ka Oblast\'', ''),
('UA', '26', 'Ivano-Frankivs\'ka Oblast\'', ''),
('UA', '30', 'Kyïv', ''),
('UA', '32', 'Kylvs\'ka Oblast\'', ''),
('UA', '35', 'Kirovohrads\'ka Oblast\'', ''),
('UA', '40', 'Sevastopol\'', ''),
('UA', '43', 'Respublika Krym', ''),
('UA', '46', 'L\'vivs\'ka Oblast\'', ''),
('UA', '48', 'Mykolaivs\'ka Oblast\'', ''),
('UA', '51', 'Odes\'ka Oblast\'', ''),
('UA', '53', 'Poltavs\'ka Oblast\'', ''),
('UA', '56', 'Rivnens\'ka Oblast\'', ''),
('UA', '59', 'Sums\'ka Oblast\'', ''),
('UA', '61', 'Ternopil\'s\'ka Oblast\'', ''),
('UA', '63', 'Kharkivs\'ka Oblast\'', ''),
('UA', '65', 'Khersons\'ka Oblast\'', ''),
('UA', '68', 'Khmel\'nyts\'ka Oblast\'', ''),
('UA', '71', 'Cherkas\'ka Oblast\'', ''),
('UA', '74', 'Chernihivs\'ka Oblast\'', ''),
('UA', '77', 'Chernivets\'ka Oblast\'', ''),
('UG', '101', 'Kalangala', 'District'),
('UG', '102', 'Kampala', 'District'),
('UG', '103', 'Kiboga', 'District'),
('UG', '104', 'Luwero', 'District'),
('UG', '105', 'Masaka', 'District'),
('UG', '106', 'Mpigi', 'District'),
('UG', '107', 'Mubende', 'District'),
('UG', '108', 'Mukono', 'District'),
('UG', '109', 'Nakasongola', 'District'),
('UG', '110', 'Rakai', 'District'),
('UG', '111', 'Sembabule', 'District'),
('UG', '112', 'Kayunga', 'District'),
('UG', '113', 'Wakiso', 'District'),
('UG', '114', 'Mityana', ''),
('UG', '115', 'Nakaseke', ''),
('UG', '116', 'Lyantonde', ''),
('UG', '201', 'Bugiri', 'District'),
('UG', '202', 'Busia', 'District'),
('UG', '203', 'Iganga', 'District'),
('UG', '204', 'Jinja', 'District'),
('UG', '205', 'Kamuli', 'District'),
('UG', '206', 'Kapchorwa', 'District'),
('UG', '207', 'Katakwi', 'District'),
('UG', '208', 'Kumi', 'District'),
('UG', '209', 'Mbale', 'District'),
('UG', '210', 'Pallisa', 'District'),
('UG', '211', 'Soroti', 'District'),
('UG', '212', 'Tororo', 'District'),
('UG', '213', 'Kaberamaido', 'District'),
('UG', '215', 'Sironko', 'District'),
('UG', '216', 'Amuria', ''),
('UG', '217', 'Budaka', ''),
('UG', '218', 'Bukwa', ''),
('UG', '219', 'Butaleja', ''),
('UG', '220', 'Kaliro', ''),
('UG', '221', 'Manafwa', ''),
('UG', '222', 'Namutumba', ''),
('UG', '223', 'Bududa', ''),
('UG', '224', 'Bukedea', ''),
('UG', '244', 'Mayuge', 'District'),
('UG', '301', 'Adjumani', 'District'),
('UG', '302', 'Apac', 'District'),
('UG', '303', 'Arua', 'District'),
('UG', '304', 'Gulu', 'District'),
('UG', '305', 'Kitgum', 'District'),
('UG', '306', 'Kotido', 'District'),
('UG', '307', 'Lira', 'District'),
('UG', '308', 'Moroto', 'District'),
('UG', '309', 'Moyo', 'District'),
('UG', '310', 'Nebbi', 'District'),
('UG', '311', 'Nakapiripirit', 'District'),
('UG', '312', 'Pader', 'District'),
('UG', '313', 'Yumbe', 'District'),
('UG', '314', 'Amolatar', ''),
('UG', '315', 'Kaabong', ''),
('UG', '316', 'Koboko', ''),
('UG', '317', 'Abim', ''),
('UG', '318', 'Dokolo', ''),
('UG', '319', 'Amuru', ''),
('UG', '320', 'Maracha', ''),
('UG', '321', 'Oyam', ''),
('UG', '401', 'Bundibugyo', 'District'),
('UG', '402', 'Bushenyi', 'District'),
('UG', '403', 'Hoima', 'District'),
('UG', '404', 'Kabale', 'District'),
('UG', '405', 'Kabarole', 'District'),
('UG', '406', 'Kasese', 'District'),
('UG', '407', 'Kibaale', 'District'),
('UG', '408', 'Kisoro', 'District'),
('UG', '409', 'Masindi', 'District'),
('UG', '410', 'Mbarara', 'District'),
('UG', '411', 'Ntungamo', 'District'),
('UG', '412', 'Rukungiri', 'District'),
('UG', '413', 'Kamwenge', 'District'),
('UG', '414', 'Kanungu', 'District'),
('UG', '415', 'Kyenjojo', 'District'),
('UG', '416', 'Ibanda', ''),
('UG', '417', 'Isingiro', ''),
('UG', '418', 'Kiruhura', ''),
('UG', '419', 'Buliisa', ''),
('UM', '67', 'Johnston Atoll (ISO reserved code = JT)', 'Islands/Groups of Islands'),
('UM', '71', 'Midway Islands (ISO reserved code = I)', 'Islands/Groups of Islands'),
('UM', '76', 'Navassa Island (ISO reserved code = NV)', 'Islands/Groups of Islands'),
('UM', '79', 'Wake Island (ISO reserved code = WK)', 'Islands/Groups of Islands'),
('UM', '81', 'Baker Island', 'Islands/Groups of Islands'),
('UM', '84', 'Howland Island', 'Islands/Groups of Islands'),
('UM', '86', 'Jarvis Island', 'Islands/Groups of Islands'),
('UM', '89', 'Kingman Reef', 'Islands/Groups of Islands'),
('UM', '95', 'Palmyra Atoll', 'Islands/Groups of Islands'),
('US', 'AK', 'Alaska', 'State'),
('US', 'AL', 'Alabama', 'State'),
('US', 'AR', 'Arkansas', 'State'),
('US', 'AS', 'American Samoa (see also separate entry under AS)', 'Outlying area'),
('US', 'AZ', 'Arizona', 'State'),
('US', 'CA', 'California', 'State'),
('US', 'CO', 'Colorado', 'State'),
('US', 'CT', 'Connecticut', 'State'),
('US', 'DC', 'District of Columbia', 'District'),
('US', 'DE', 'Delaware', 'State'),
('US', 'FL', 'Florida', 'State'),
('US', 'GA', 'Georgia', 'State'),
('US', 'GU', 'Guam (see also separate entry under GU)', 'Outlying area'),
('US', 'HI', 'Hawaii', 'State'),
('US', 'IA', 'Iowa', 'State'),
('US', 'ID', 'Idaho', 'State'),
('US', 'IL', 'Illinois', 'State'),
('US', 'IN', 'Indiana', 'State'),
('US', 'KS', 'Kansas', 'State'),
('US', 'KY', 'Kentucky', 'State'),
('US', 'LA', 'Louisiana', 'State'),
('US', 'MA', 'Massachusetts', 'State'),
('US', 'MD', 'Maryland', 'State'),
('US', 'ME', 'Maine', 'State'),
('US', 'MI', 'Michigan', 'State'),
('US', 'MN', 'Minnesota', 'State'),
('US', 'MO', 'Missouri', 'State'),
('US', 'MP', 'Northern Mariana Islands (see also separate entry MP)', 'Outlying area'),
('US', 'MS', 'Mississippi', 'State'),
('US', 'MT', 'Montana', 'State'),
('US', 'NC', 'North Carolina', 'State'),
('US', 'ND', 'North Dakota', 'State'),
('US', 'NE', 'Nebraska', 'State'),
('US', 'NH', 'New Hampshire', 'State'),
('US', 'NJ', 'New Jersey', 'State'),
('US', 'NM', 'New Mexico', 'State'),
('US', 'NV', 'Nevada', 'State'),
('US', 'NY', 'New York', 'State'),
('US', 'OH', 'Ohio', 'State'),
('US', 'OK', 'Oklahoma', 'State'),
('US', 'OR', 'Oregon', 'State'),
('US', 'PA', 'Pennsylvania', 'State'),
('US', 'PR', 'Puerto Rico (see also separate entry under PR)', 'Outlying area'),
('US', 'RI', 'Rhode Island', 'State'),
('US', 'SC', 'South Carolina', 'State'),
('US', 'SD', 'South Dakota', 'State'),
('US', 'TN', 'Tennessee', 'State'),
('US', 'TX', 'Texas', 'State'),
('US', 'UM', 'U.S. Minor Outlying Islands (cf. separate entry UM)', 'Outlying area'),
('US', 'UT', 'Utah', 'State'),
('US', 'VA', 'Virginia', 'State'),
('US', 'VI', 'Virgin Islands of the U.S. (see also separate entry VI)', 'Outlying area'),
('US', 'VT', 'Vermont', 'State'),
('US', 'WA', 'Washington', 'State'),
('US', 'WI', 'Wisconsin', 'State'),
('US', 'WV', 'West Virginia', 'State'),
('US', 'WY', 'Wyoming', 'State'),
('UY', 'AR', 'Artigas', ''),
('UY', 'CA', 'Canelones', ''),
('UY', 'CL', 'Cerro Largo', ''),
('UY', 'CO', 'Colonia', ''),
('UY', 'DU', 'Durazno', ''),
('UY', 'FD', 'Florida', ''),
('UY', 'FS', 'Flores', ''),
('UY', 'LA', 'Lavalleja', ''),
('UY', 'MA', 'Maldonado', ''),
('UY', 'MO', 'Montevideo', ''),
('UY', 'PA', 'Paysandú', ''),
('UY', 'RN', 'Río Negro', ''),
('UY', 'RO', 'Rocha', ''),
('UY', 'RV', 'Rivera', ''),
('UY', 'SA', 'Salto', ''),
('UY', 'SJ', 'San José', ''),
('UY', 'SO', 'Soriano', ''),
('UY', 'TA', 'Tacuarembó', ''),
('UY', 'TT', 'Treinta y Tres', ''),
('UZ', 'AN', 'Andijon', 'Region'),
('UZ', 'BU', 'Bukhoro', 'Region'),
('UZ', 'FA', 'Farghona', 'Region'),
('UZ', 'JI', 'Jizzakh', 'Region'),
('UZ', 'KH', 'Khorazm', 'Region'),
('UZ', 'NG', 'Namangan', 'Region'),
('UZ', 'NW', 'Nawoiy', 'Region'),
('UZ', 'QA', 'Qashqadaryo', 'Region'),
('UZ', 'QR', 'Qoraqalpoghiston Respublikasi', 'Republic'),
('UZ', 'SA', 'Samarqand', 'Region'),
('UZ', 'SI', 'Sirdaryo', 'Region'),
('UZ', 'SU', 'Surkhondaryo', 'Region'),
('UZ', 'TK', 'Toshkent', 'City'),
('UZ', 'TO', 'Toshkent', 'Region'),
('UZ', 'XO', 'Xorazm', 'Region'),
('VC', '01', 'Charlotte', ''),
('VC', '02', 'Saint Andrew', ''),
('VC', '03', 'Saint David', ''),
('VC', '04', 'Saint George', ''),
('VC', '05', 'Saint Patrick', ''),
('VC', '06', 'Grenadines', ''),
('VE', 'A', 'Distrito Federal', 'Federal district'),
('VE', 'B', 'Anzoátegui', 'State'),
('VE', 'C', 'Apure', 'State'),
('VE', 'D', 'Aragua', 'State'),
('VE', 'E', 'Barinas', 'State'),
('VE', 'F', 'Bolívar', 'State'),
('VE', 'G', 'Carabobo', 'State'),
('VE', 'H', 'Cojedes', 'State'),
('VE', 'I', 'Falcón', 'State'),
('VE', 'J', 'Guárico', 'State'),
('VE', 'K', 'Lara', 'State'),
('VE', 'L', 'Mérida', 'State'),
('VE', 'M', 'Miranda', 'State'),
('VE', 'N', 'Monagas', 'State'),
('VE', 'O', 'Nueva Esparta', 'State'),
('VE', 'P', 'Portuguesa', 'State'),
('VE', 'R', 'Sucre', 'State'),
('VE', 'S', 'Táchira', 'State'),
('VE', 'T', 'Trujillo', 'State'),
('VE', 'U', 'Yaracuy', 'State'),
('VE', 'V', 'Zulia', 'State'),
('VE', 'W', 'Dependencias Federales', 'Federal dependencies'),
('VE', 'X', 'vargas', 'State'),
('VE', 'Y', 'Delta Amacuro', 'State'),
('VE', 'Z', 'Amazonas', 'State'),
('VN', '01', 'Lai Chau', 'Province'),
('VN', '02', 'Lao Cai', 'Province'),
('VN', '03', 'Ha Giang', 'Province'),
('VN', '04', 'Cao Bang', 'Province'),
('VN', '05', 'Son La', 'Province'),
('VN', '06', 'Yen Bai', 'Province'),
('VN', '07', 'Tuyen Quang', 'Province'),
('VN', '09', 'Lang Son', 'Province'),
('VN', '13', 'Quang Ninh', 'Province'),
('VN', '14', 'Hoa Binh', 'Province'),
('VN', '15', 'Ha Tay', 'Province'),
('VN', '18', 'Ninh Binh', 'Province'),
('VN', '20', 'Thai Binh', 'Province'),
('VN', '21', 'Thanh Hoa', 'Province'),
('VN', '22', 'Nghe An', 'Province'),
('VN', '23', 'Ha Tinh', 'Province'),
('VN', '24', 'Quang Binh', 'Province'),
('VN', '25', 'Quang Tri', 'Province'),
('VN', '26', 'Thua Thien-Hue', 'Province'),
('VN', '27', 'Quang Nam', 'Province'),
('VN', '28', 'Kon Tum', 'Province'),
('VN', '29', 'Quang Ngai', 'Province'),
('VN', '30', 'Gia Lai', 'Province'),
('VN', '31', 'Binh Dinh', 'Province'),
('VN', '32', 'Phu Yen', 'Province'),
('VN', '33', 'Dak Lak', 'Province'),
('VN', '34', 'Khanh Hoa', 'Province'),
('VN', '35', 'Lam Dong', 'Province'),
('VN', '36', 'Ninh Thuan', 'Province'),
('VN', '37', 'Tay Ninh', 'Province'),
('VN', '39', 'Dong Nai', 'Province'),
('VN', '40', 'Binh Thuan', 'Province'),
('VN', '41', 'Long An', 'Province'),
('VN', '43', 'Ba Ria-Vung Tau', 'Province'),
('VN', '44', 'An Giang', 'Province'),
('VN', '45', 'Dong Thap', 'Province'),
('VN', '46', 'Tien Giang', 'Province'),
('VN', '47', 'Kien Giang', 'Province'),
('VN', '49', 'Vinh Long', 'Province'),
('VN', '50', 'Ben Tre', 'Province'),
('VN', '51', 'Tra Vinh', 'Province'),
('VN', '52', 'Soc Trang', 'Province'),
('VN', '53', 'Bac Kan', 'Province'),
('VN', '54', 'Bac Giang', 'Province'),
('VN', '55', 'Bac Lieu', 'Province'),
('VN', '56', 'Bac Ninh', 'Province'),
('VN', '57', 'Binh Duong', 'Province'),
('VN', '58', 'Binh Phuoc', 'Province'),
('VN', '59', 'Ca Mau', 'Province'),
('VN', '61', 'Hai Duong', 'Province'),
('VN', '63', 'Ha Nam', 'Province'),
('VN', '66', 'Hung Yen', 'Province'),
('VN', '67', 'Nam Dinh', 'Province'),
('VN', '68', 'Phu Tho', 'Province'),
('VN', '69', 'Thai Nguyen', 'Province'),
('VN', '70', 'Vinh Phuc', 'Province'),
('VN', '71', 'Dien Bien', 'Province'),
('VN', '72', 'Dak Nong', 'Province'),
('VN', '73', 'Hau Giang', 'Province'),
('VN', 'CT', 'Can Tho', 'Municipality'),
('VN', 'DN', 'Da Nang, thanh pho', 'Municipality'),
('VN', 'HN', 'Ha Noi, thu do', 'Municipality'),
('VN', 'HP', 'Hai Phong', 'Municipality'),
('VN', 'SG', 'Ho Chi Minh, thanh pho [Sai Gon]', 'Municipality'),
('VU', 'MAP', 'Malampa', ''),
('VU', 'PAM', 'Pénama', ''),
('VU', 'SAM', 'Sanma', ''),
('VU', 'SEE', 'Shéfa', ''),
('VU', 'TAE', 'Taféa', ''),
('VU', 'TOB', 'Torba', ''),
('WS', 'AA', 'Alana', ''),
('WS', 'AL', 'Aiga-I-le-Tai', ''),
('WS', 'AT', 'Atua', ''),
('WS', 'FA', 'Fa\'asaleleaga', ''),
('WS', 'GE', 'Gaga\'emauga', ''),
('WS', 'GI', 'Gagaifomauga', ''),
('WS', 'PA', 'Palauli', ''),
('WS', 'SA', 'Satupa \'itea', ''),
('WS', 'TU', 'Tuamasaga', ''),
('WS', 'VF', 'Va\'a-o-Fonoti', ''),
('WS', 'VS', 'Vaisigano', ''),
('YE', 'AB', 'Abyan', 'Governorate'),
('YE', 'AD', '\'Adan', 'Governorate'),
('YE', 'AM', '\'Amran', 'Governorate'),
('YE', 'BA', 'Al Bayda\'', 'Governorate'),
('YE', 'DA', 'A? ?ali\'', 'Governorate'),
('YE', 'DH', 'Dharnar', 'Governorate'),
('YE', 'HD', 'Haqramawt', 'Governorate'),
('YE', 'HJ', 'Hiajjah', 'Governorate'),
('YE', 'HU', 'Al Hudaydah', 'Governorate'),
('YE', 'IB', 'Ibb', 'Governorate'),
('YE', 'JA', 'Al Jawf', 'Governorate'),
('YE', 'LA', 'Lahij', 'Governorate'),
('YE', 'MA', 'Ma\'rib', 'Governorate'),
('YE', 'MR', 'Al Mahrah', 'Governorate'),
('YE', 'MW', 'Al Mahwit', 'Governorate'),
('YE', 'RA', 'Raymah', 'Governorate'),
('YE', 'SA', 'San?a\' [city]', 'Municipality'),
('YE', 'SD', 'Sa\'dah', 'Governorate'),
('YE', 'SH', 'Shabwah', 'Governorate'),
('YE', 'SN', 'San\'a,', 'Governorate'),
('YE', 'TA', 'Ta\'izz', 'Governorate'),
('ZA', 'EC', 'Eastern Cape', ''),
('ZA', 'FS', 'Free State', ''),
('ZA', 'GT', 'Gauteng', ''),
('ZA', 'LP', 'Limpopo', ''),
('ZA', 'MP', 'Mpumalanga', ''),
('ZA', 'NC', 'Northern Cape', ''),
('ZA', 'NL', 'Kwazulu-Natal', ''),
('ZA', 'NW', 'North-West', ''),
('ZA', 'WC', 'Western Cape', ''),
('ZM', '01', 'Western', ''),
('ZM', '02', 'Central', ''),
('ZM', '03', 'Eastern', ''),
('ZM', '04', 'Luapula', ''),
('ZM', '05', 'Northern', ''),
('ZM', '06', 'North-Western', ''),
('ZM', '07', 'Southern', ''),
('ZM', '08', 'Copperbelt', ''),
('ZM', '09', 'Lusaka', ''),
('ZW', 'BU', 'Bulawayo', ''),
('ZW', 'HA', 'Harare', ''),
('ZW', 'MA', 'Manicaland', ''),
('ZW', 'MC', 'Mashonaland Central', ''),
('ZW', 'ME', 'Mashonaland East', ''),
('ZW', 'MI', 'Midlands', ''),
('ZW', 'MN', 'Matabeleland North', ''),
('ZW', 'MS', 'Matabeleland South', ''),
('ZW', 'MV', 'Masvingo', ''),
('ZW', 'MW', 'Mashonaland West', '');

-- --------------------------------------------------------

--
-- Table structure for table `mm_coupons`
--

CREATE TABLE `mm_coupons` (
  `id` int(11) UNSIGNED NOT NULL,
  `coupon_name` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `coupon_code` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `coupon_type` enum('percentage','dollar','free') COLLATE utf8_unicode_ci DEFAULT 'percentage',
  `coupon_value` decimal(19,4) NOT NULL,
  `coupon_value_currency` char(3) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `quantity` int(11) NOT NULL DEFAULT '0',
  `start_date` timestamp NULL DEFAULT NULL,
  `end_date` timestamp NULL DEFAULT NULL,
  `recurring_billing_setting` enum('all','first') COLLATE utf8_unicode_ci DEFAULT 'all',
  `is_gift` smallint(1) NOT NULL DEFAULT '0',
  `is_archived` smallint(1) NOT NULL DEFAULT '0',
  `gift_user_id` bigint(20) UNSIGNED NOT NULL,
  `gift_order_item_id` bigint(20) UNSIGNED NOT NULL,
  `date_modified` timestamp NULL DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_coupon_restrictions`
--

CREATE TABLE `mm_coupon_restrictions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `coupon_id` int(11) UNSIGNED NOT NULL,
  `product_id` int(11) UNSIGNED NOT NULL,
  `date_modified` timestamp NULL DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_coupon_usage`
--

CREATE TABLE `mm_coupon_usage` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `coupon_id` int(11) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `product_id` int(11) UNSIGNED NOT NULL,
  `product_order_item_id` bigint(20) UNSIGNED NOT NULL,
  `date_modified` timestamp NULL DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_custom_fields`
--

CREATE TABLE `mm_custom_fields` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `type` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `show_on_my_account` tinyint(4) DEFAULT '1',
  `is_hidden` tinyint(4) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_custom_field_data`
--

CREATE TABLE `mm_custom_field_data` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `custom_field_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `value` text COLLATE utf8_unicode_ci NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_updated` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_custom_field_options`
--

CREATE TABLE `mm_custom_field_options` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `custom_field_id` bigint(20) UNSIGNED NOT NULL,
  `value` varchar(255) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_diagnostic_log`
--

CREATE TABLE `mm_diagnostic_log` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `type` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `ip_address` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,
  `session` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `location` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `line` int(11) DEFAULT NULL,
  `event` text COLLATE utf8_unicode_ci NOT NULL,
  `event_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_email_provider_bundle_mappings`
--

CREATE TABLE `mm_email_provider_bundle_mappings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `list_type` varchar(10) COLLATE utf8_unicode_ci NOT NULL,
  `bundle_id` int(11) UNSIGNED NOT NULL,
  `list_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email_service_provider_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_email_provider_mappings`
--

CREATE TABLE `mm_email_provider_mappings` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `member_type_id` int(11) UNSIGNED NOT NULL,
  `list_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `email_service_provider_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_email_service_providers`
--

CREATE TABLE `mm_email_service_providers` (
  `id` int(11) UNSIGNED NOT NULL,
  `provider_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `provider_token` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `username` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `api_key` text COLLATE utf8_unicode_ci,
  `additional_data` text COLLATE utf8_unicode_ci,
  `active` smallint(5) UNSIGNED NOT NULL DEFAULT '0',
  `prospect_list_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cancellation_list_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_email_service_providers`
--

INSERT INTO `mm_email_service_providers` (`id`, `provider_name`, `provider_token`, `username`, `password`, `api_key`, `additional_data`, `active`, `prospect_list_id`, `cancellation_list_id`) VALUES
(1, 'None', 'default', NULL, NULL, NULL, NULL, 1, NULL, NULL),
(2, 'ActiveCampaign', 'activecampaign', NULL, NULL, NULL, NULL, 0, NULL, NULL),
(3, 'MailChimp', 'mailchimp', NULL, NULL, NULL, NULL, 0, NULL, NULL),
(4, 'iContact', 'icontact', NULL, NULL, '3Nnuk4Mt6sFTbDzzRQe6piN6S9qq2TLW', NULL, 0, NULL, NULL),
(5, 'AWeber', 'aweber', NULL, NULL, NULL, NULL, 0, NULL, NULL),
(6, 'GetResponse', 'getresponse', NULL, NULL, NULL, NULL, 0, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `mm_employee_accounts`
--

CREATE TABLE `mm_employee_accounts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `display_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `first_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `last_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `phone` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `access_restrictions` longtext COLLATE utf8_unicode_ci NOT NULL,
  `allow_export` tinyint(4) NOT NULL DEFAULT '0',
  `role_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `is_default` tinyint(4) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_employee_accounts`
--

INSERT INTO `mm_employee_accounts` (`id`, `display_name`, `first_name`, `last_name`, `email`, `phone`, `access_restrictions`, `allow_export`, `role_id`, `user_id`, `is_default`) VALUES
(1, 'admin', NULL, NULL, 'cqthanh.zx@gmail.com', NULL, '', 0, 'administrator', 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_flatrate_shipping_options`
--

CREATE TABLE `mm_flatrate_shipping_options` (
  `id` bigint(20) NOT NULL,
  `option_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `rate` decimal(19,4) NOT NULL,
  `currency` char(3) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'USD'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_login_token`
--

CREATE TABLE `mm_login_token` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `login_token` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `age` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_login_token`
--

INSERT INTO `mm_login_token` (`id`, `login_token`, `user_id`, `age`) VALUES
(1, '7ta3zSGf8sMoDPm1o0aR88UxwSqPfLgN', 2, '2018-12-14 08:54:29');

-- --------------------------------------------------------

--
-- Table structure for table `mm_log_api`
--

CREATE TABLE `mm_log_api` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `request` varchar(355) COLLATE utf8_unicode_ci NOT NULL,
  `message` text COLLATE utf8_unicode_ci NOT NULL,
  `ipaddress` varchar(355) COLLATE utf8_unicode_ci NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_log_events`
--

CREATE TABLE `mm_log_events` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `event_type` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ip` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `referrer` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `additional_params` text COLLATE utf8_unicode_ci NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `date_modified` timestamp NULL DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_log_events`
--

INSERT INTO `mm_log_events` (`id`, `event_type`, `ip`, `url`, `referrer`, `additional_params`, `user_id`, `date_modified`, `date_added`) VALUES
(1, 'email', '', '', '', 'a:5:{s:16:\"email-to-address\";s:17:\"cqthanh@gmail.com\";s:18:\"email-cc-addresses\";s:0:\"\";s:18:\"email-from-address\";s:20:\"cqthanh.zx@gmail.com\";s:13:\"email-subject\";s:14:\"Welcome Thanh!\";s:10:\"email-body\";s:406:\"Hi Thanh,\n\nThanks for joining our community!\n\nYou can login with the following credentials:\nUsername: cqthanh@gmail.com\nPassword: ## password hidden for security ##\n\n<a href=\"http://localhost/wordpress/home/?reftok=7ta3zSGf8sMoDPm1o0aR88UxwSqPfLgN\">Click here to login</a>\n\nIf you have any questions, feel free to contact us at <a href=\"mailto:cqthanh.zx@gmail.com\">cqthanh.zx@gmail.com</a>.\n\nThanks!\nadmin\";}', 2, '2018-12-13 18:54:30', '2018-12-13 18:54:30'),
(2, 'access-rights', '', '', '', 'a:3:{s:12:\"access-event\";s:13:\"mm_member_add\";s:9:\"access-id\";s:1:\"1\";s:23:\"access-is-complimentary\";s:5:\"false\";}', 2, '2018-12-13 18:54:30', '2018-12-13 18:54:30');

-- --------------------------------------------------------

--
-- Table structure for table `mm_membership_levels`
--

CREATE TABLE `mm_membership_levels` (
  `id` int(11) UNSIGNED NOT NULL,
  `reference_key` varchar(6) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `is_free` tinyint(4) NOT NULL DEFAULT '0',
  `is_default` tinyint(4) NOT NULL DEFAULT '0',
  `description` text COLLATE utf8_unicode_ci,
  `wp_role` varchar(120) COLLATE utf8_unicode_ci DEFAULT 'mm-ignore-role',
  `default_product_id` int(11) UNSIGNED DEFAULT NULL,
  `status` tinyint(4) NOT NULL,
  `email_subject` text COLLATE utf8_unicode_ci NOT NULL,
  `email_body` text COLLATE utf8_unicode_ci NOT NULL,
  `email_from_id` bigint(20) UNSIGNED NOT NULL,
  `welcome_email_enabled` tinyint(4) DEFAULT '1',
  `expire_amount` int(10) DEFAULT NULL,
  `expire_period` enum('days','weeks','months') COLLATE utf8_unicode_ci DEFAULT 'months',
  `expires` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_membership_levels`
--

INSERT INTO `mm_membership_levels` (`id`, `reference_key`, `name`, `is_free`, `is_default`, `description`, `wp_role`, `default_product_id`, `status`, `email_subject`, `email_body`, `email_from_id`, `welcome_email_enabled`, `expire_amount`, `expire_period`, `expires`) VALUES
(1, '', 'Free Membership', 1, 1, 'Default Free Membership', 'mm-ignore-role', NULL, 1, 'Welcome [MM_Member_Data name=\'firstName\']!', 'Hi [MM_Member_Data name=\'firstName\'],\n\nThanks for joining our community!\n\nYou can login with the following credentials:\nUsername: [MM_Member_Data name=\'username\']\nPassword: [MM_Member_Data name=\'password\']\n\n<a href=\"[MM_CorePage_Link type=\'homepage\' autoLogin=\'true\']\">Click here to login</a>\n\nIf you have any questions, feel free to contact us at <a href=\"mailto:[MM_Employee_Data name=\'email\']\">[MM_Employee_Data name=\'email\']</a>.\n\nThanks!\n[MM_Employee_Data name=\'displayName\']', 1, 1, NULL, 'months', 0);

-- --------------------------------------------------------

--
-- Table structure for table `mm_membership_level_categories`
--

CREATE TABLE `mm_membership_level_categories` (
  `category_id` bigint(20) UNSIGNED NOT NULL,
  `membership_level_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_membership_level_products`
--

CREATE TABLE `mm_membership_level_products` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `membership_id` int(11) UNSIGNED NOT NULL,
  `product_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_orders`
--

CREATE TABLE `mm_orders` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `order_number` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `payment_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `affiliate_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `sub_affiliate_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_first_name` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_last_name` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_phone` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_address1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_address2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_city` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_state` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_province` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_postal_code` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_country` varchar(2) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_first_name` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_last_name` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_phone` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_address1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_address2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_city` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_state` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_province` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_postal_code` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_country` char(2) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_option_key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_option_description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `subtotal` decimal(19,4) DEFAULT NULL,
  `shipping` decimal(19,4) DEFAULT NULL,
  `discount` decimal(19,4) DEFAULT NULL,
  `tax` decimal(19,4) DEFAULT NULL,
  `total` decimal(19,4) DEFAULT NULL,
  `currency` char(3) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'USD',
  `status` tinyint(4) NOT NULL,
  `ip_address` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `form_submission_id` char(10) COLLATE utf8_unicode_ci DEFAULT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `date_modified` timestamp NULL DEFAULT NULL,
  `is_test` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_order_items`
--

CREATE TABLE `mm_order_items` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `order_id` bigint(20) UNSIGNED NOT NULL,
  `item_type` smallint(6) NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `amount` decimal(19,4) NOT NULL,
  `currency` char(3) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'USD',
  `quantity` int(11) NOT NULL,
  `total` decimal(19,4) NOT NULL,
  `item_id` int(11) UNSIGNED DEFAULT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  `is_recurring` smallint(1) NOT NULL DEFAULT '0',
  `recurring_amount` decimal(19,4) DEFAULT NULL,
  `recurring_discount` decimal(19,4) DEFAULT NULL,
  `trial_amount` decimal(19,4) DEFAULT NULL,
  `trial_frequency` enum('months','days','weeks','years') COLLATE utf8_unicode_ci DEFAULT NULL,
  `trial_duration` int(11) DEFAULT NULL,
  `rebill_period` int(11) DEFAULT NULL,
  `rebill_frequency` enum('months','days','weeks','years') COLLATE utf8_unicode_ci DEFAULT NULL,
  `max_rebills` int(11) DEFAULT NULL,
  `is_gift` tinyint(1) NOT NULL DEFAULT '0',
  `is_test` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_order_item_access`
--

CREATE TABLE `mm_order_item_access` (
  `order_item_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `access_type` enum('membership','bundle') COLLATE utf8_unicode_ci NOT NULL DEFAULT 'membership',
  `access_type_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_payment_services`
--

CREATE TABLE `mm_payment_services` (
  `id` int(11) UNSIGNED NOT NULL,
  `token` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `settings` longtext COLLATE utf8_unicode_ci NOT NULL,
  `active` smallint(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_payment_services`
--

INSERT INTO `mm_payment_services` (`id`, `token`, `name`, `settings`, `active`) VALUES
(1, 'PAYPAL', 'PayPal', '', 0),
(2, 'AUTHORIZENET', 'Authorize.net', '', 0),
(3, 'AUTHORIZENETCIM', 'Authorize.net CIM', '', 0),
(4, 'BRAINTREE', 'Braintree', '', 0),
(5, 'CHARGIFY', 'Chargify', '', 0),
(6, 'LIMELIGHT', 'Lime Light', '', 0),
(7, 'STRIPE', 'Stripe', '', 0),
(8, 'TWOCHECKOUT', '2Checkout', '', 0),
(9, 'CLICKBANK', 'ClickBank', '', 0),
(10, 'LITLE', 'Litle', '', 0),
(11, 'COINBASE', 'Coinbase (Wallet Required)', '', 0),
(12, 'COINBASEMINIMAL', 'Coinbase (Wallet Ignored)', '', 0),
(13, 'TEST', 'Test Payment Service', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `mm_posts_access`
--

CREATE TABLE `mm_posts_access` (
  `post_id` bigint(20) UNSIGNED NOT NULL,
  `access_type` enum('member_type','access_tag') COLLATE utf8_unicode_ci NOT NULL DEFAULT 'member_type',
  `access_id` int(11) UNSIGNED NOT NULL,
  `days` char(5) COLLATE utf8_unicode_ci DEFAULT NULL,
  `is_smart_content` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_products`
--

CREATE TABLE `mm_products` (
  `id` int(11) UNSIGNED NOT NULL,
  `reference_key` varchar(6) COLLATE utf8_unicode_ci NOT NULL,
  `status` tinyint(4) DEFAULT '1',
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `sku` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `description` text COLLATE utf8_unicode_ci NOT NULL,
  `price` decimal(20,4) NOT NULL,
  `currency` char(3) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'USD',
  `is_shippable` tinyint(4) NOT NULL,
  `has_trial` tinyint(4) NOT NULL,
  `trial_frequency` enum('months','days','weeks','years') COLLATE utf8_unicode_ci DEFAULT 'months',
  `rebill_period` int(11) NOT NULL,
  `rebill_frequency` enum('months','days','weeks','years') COLLATE utf8_unicode_ci DEFAULT 'months',
  `trial_amount` decimal(20,2) NOT NULL,
  `trial_duration` int(11) DEFAULT NULL,
  `do_limit_trial` tinyint(4) DEFAULT '0',
  `limit_trial_alt_product_id` int(11) UNSIGNED DEFAULT '0',
  `do_limit_payments` tinyint(4) DEFAULT '0',
  `number_of_payments` int(11) DEFAULT NULL,
  `last_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `purchase_confirmation_message` longtext COLLATE utf8_unicode_ci NOT NULL,
  `commission_profile_id` int(11) DEFAULT '-1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_queued_scheduled_events`
--

CREATE TABLE `mm_queued_scheduled_events` (
  `event_id` bigint(20) UNSIGNED NOT NULL,
  `command` tinyint(3) UNSIGNED NOT NULL,
  `queued_date` datetime NOT NULL,
  `batch_id` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `batch_started` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_report_data_cache`
--

CREATE TABLE `mm_report_data_cache` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `query_target` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `query_token` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `query_params` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `param_hash` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `query_data` longtext COLLATE utf8_unicode_ci,
  `status` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `expiration_date` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_scheduled_events`
--

CREATE TABLE `mm_scheduled_events` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `event_type` tinyint(3) UNSIGNED NOT NULL,
  `event_data` text COLLATE utf8_unicode_ci NOT NULL,
  `scheduled_date` datetime NOT NULL,
  `processed_date` datetime DEFAULT NULL,
  `status` tinyint(3) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_scheduled_payments`
--

CREATE TABLE `mm_scheduled_payments` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `order_item_id` bigint(20) UNSIGNED NOT NULL,
  `payment_service_id` int(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_sessions`
--

CREATE TABLE `mm_sessions` (
  `id` varchar(55) COLLATE utf8_unicode_ci NOT NULL,
  `data` longtext COLLATE utf8_unicode_ci NOT NULL,
  `ip_address` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `expiration_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_sessions`
--

INSERT INTO `mm_sessions` (`id`, `data`, `ip_address`, `expiration_date`) VALUES
('223baede026a8e19c34af86819a9aed6', 'YToxOntzOjIyOiJtbV9tbS1sYXN0LWRlbmllZC1wYWdlIjtpOjE0O30=', '127.0.0.1', '2018-12-20 04:13:17'),
('d6547259ddd0170d01619c1b322aa92b', 'YToxOntzOjEwOiJtbV9wcmV2aWV3IjtzOjMxMjY6Ik86MTA6Ik1NX1ByZXZpZXciOjU6e3M6MjI6IgBNTV9QcmV2aWV3AGFjY2Vzc1RhZ3MiO2E6MDp7fXM6MTY6IgBNTV9QcmV2aWV3AHVzZXIiO086NzoiTU1fVXNlciI6Nzc6e3M6MjE6IgBNTV9Vc2VyAG1lbWJlcnNoaXBJZCI7TjtzOjE1OiIATU1fVXNlcgBzdGF0dXMiO3M6MToiMSI7czoyMjoiAE1NX1VzZXIAcGVuZGluZ1N0YXR1cyI7czoxOiIwIjtzOjIxOiIATU1fVXNlcgBpbXBvcnRlZEZsYWciO3M6MToiMCI7czoyNDoiAE1NX1VzZXIAbGFzdFVwZGF0ZWREYXRlIjtOO3M6MjY6IgBNTV9Vc2VyAHN0YXR1c1VwZGF0ZWREYXRlIjtOO3M6MjI6IgBNTV9Vc2VyAHN0YXR1c01lc3NhZ2UiO3M6MDoiIjtzOjIzOiIATU1fVXNlcgBkYXlzQ2FsY01ldGhvZCI7czo5OiJqb2luX2RhdGUiO3M6MjI6IgBNTV9Vc2VyAGRheXNDYWxjVmFsdWUiO3M6MDoiIjtzOjI1OiIATU1fVXNlcgBiZWNhbWVBY3RpdmVEYXRlIjtOO3M6MTQ6IgBNTV9Vc2VyAHBob25lIjtzOjE0OiIoNTU1KSA1NTUtNTU1NSI7czoxNzoiAE1NX1VzZXIAdXNlcm5hbWUiO3M6MTQ6InNhbXBsZXVzZXJuYW1lIjtzOjE0OiIATU1fVXNlcgBlbWFpbCI7czoxNToic2FtcGxlQHRlc3QuY29tIjtzOjE4OiIATU1fVXNlcgBmaXJzdE5hbWUiO3M6NToiQWRtaW4iO3M6MTc6IgBNTV9Vc2VyAGxhc3ROYW1lIjtzOjQ6IlRlc3QiO3M6MjU6IgBNTV9Vc2VyAHJlZ2lzdHJhdGlvbkRhdGUiO047czoyNToiAE1NX1VzZXIAY2FuY2VsbGF0aW9uRGF0ZSI7TjtzOjIzOiIATU1fVXNlcgBleHBpcmF0aW9uRGF0ZSI7TjtzOjE0OiIATU1fVXNlcgBub3RlcyI7czowOiIiO3M6MjU6IgBNTV9Vc2VyAHN1YnNjcmliZWRMaXN0SWQiO3M6MDoiIjtzOjI5OiIATU1fVXNlcgBzdWJzY3JpYmVkUHJvdmlkZXJJZCI7czowOiIiO3M6MjI6IgBNTV9Vc2VyAGxhc3RMb2dpbkRhdGUiO047czoyNzoiAE1NX1VzZXIAbGFzdExvZ2luSXBBZGRyZXNzIjtzOjA6IiI7czoxOToiAE1NX1VzZXIAbG9naW5Db3VudCI7aTotMTtzOjI0OiIATU1fVXNlcgBwYWdlQWNjZXNzQ291bnQiO2k6LTE7czoxOToiAE1NX1VzZXIAZW1haWxDb3VudCI7aTotMTtzOjI5OiIATU1fVXNlcgB3ZWxjb21lRW1haWxTZW50RGF0ZSI7TjtzOjIzOiIATU1fVXNlcgBiaWxsaW5nQWRkcmVzcyI7czoxMjoiMTIzIEZha2UgU3QuIjtzOjIwOiIATU1fVXNlcgBiaWxsaW5nQ2l0eSI7czo3OiJOb3doZXJlIjtzOjIxOiIATU1fVXNlcgBiaWxsaW5nU3RhdGUiO3M6MjoiVFgiO3M6MTk6IgBNTV9Vc2VyAGJpbGxpbmdaaXAiO3M6NToiNTU1NTUiO3M6MjM6IgBNTV9Vc2VyAGJpbGxpbmdDb3VudHJ5IjtzOjI6IlVTIjtzOjI0OiIATU1fVXNlcgBzaGlwcGluZ0FkZHJlc3MiO3M6MTI6IjEyMyBGYWtlIFN0LiI7czoyMToiAE1NX1VzZXIAc2hpcHBpbmdDaXR5IjtzOjc6Ik5vd2hlcmUiO3M6MjI6IgBNTV9Vc2VyAHNoaXBwaW5nU3RhdGUiO3M6MjoiVFgiO3M6MjA6IgBNTV9Vc2VyAHNoaXBwaW5nWmlwIjtzOjU6IjU1NTU1IjtzOjI0OiIATU1fVXNlcgBzaGlwcGluZ0NvdW50cnkiO3M6MjoiVVMiO3M6MjI6IgBNTV9Vc2VyAHRvdGFsUGF5bWVudHMiO2k6MDtzOjIxOiIATU1fVXNlcgB0b3RhbFJlZnVuZHMiO2k6MDtzOjI3OiIATU1fVXNlcgBmb3Jnb3RQYXNzd29yZEhhc2giO047czoxOToiAE1NX1VzZXIAbWVtYmVyc2hpcCI7TjtzOjI1OiIATU1fVXNlcgBsYXN0TWVtYmVyc2hpcElkIjtzOjA6IiI7czoyNzoiAE1NX1VzZXIAbGFzdE1lbWJlcnNoaXBOYW1lIjtzOjA6IiI7czoyNzoiAE1NX1VzZXIAbGFzdERheXNDYWxjTWV0aG9kIjtzOjA6IiI7czoyNjoiAE1NX1VzZXIAbGFzdERheXNDYWxjVmFsdWUiO3M6MDoiIjtzOjI5OiIATU1fVXNlcgBsYXN0Q2FuY2VsbGF0aW9uRGF0ZSI7czowOiIiO3M6Mjc6IgBNTV9Vc2VyAGxhc3RFeHBpcmF0aW9uRGF0ZSI7czowOiIiO3M6MjI6IgBNTV9Vc2VyAGxhc3RGaXJzdE5hbWUiO3M6MDoiIjtzOjIxOiIATU1fVXNlcgBsYXN0TGFzdE5hbWUiO3M6MDoiIjtzOjE4OiIATU1fVXNlcgBsYXN0RW1haWwiO3M6MDoiIjtzOjIxOiIATU1fVXNlcgBsYXN0VXNlcm5hbWUiO3M6MDoiIjtzOjE4OiIATU1fVXNlcgBsYXN0UGhvbmUiO3M6MDoiIjtzOjE4OiIATU1fVXNlcgBsYXN0Tm90ZXMiO3M6MDoiIjtzOjE5OiIATU1fVXNlcgBsYXN0U3RhdHVzIjtzOjA6IiI7czoyMzoiAE1NX1VzZXIAbGFzdFN0YXR1c05hbWUiO3M6MDoiIjtzOjI3OiIATU1fVXNlcgBsYXN0QmlsbGluZ0FkZHJlc3MiO3M6MDoiIjtzOjI0OiIATU1fVXNlcgBsYXN0QmlsbGluZ0NpdHkiO3M6MDoiIjtzOjI1OiIATU1fVXNlcgBsYXN0QmlsbGluZ1N0YXRlIjtzOjA6IiI7czoyMzoiAE1NX1VzZXIAbGFzdEJpbGxpbmdaaXAiO3M6MDoiIjtzOjI3OiIATU1fVXNlcgBsYXN0QmlsbGluZ0NvdW50cnkiO3M6MDoiIjtzOjI4OiIATU1fVXNlcgBsYXN0U2hpcHBpbmdBZGRyZXNzIjtzOjA6IiI7czoyNToiAE1NX1VzZXIAbGFzdFNoaXBwaW5nQ2l0eSI7czowOiIiO3M6MjY6IgBNTV9Vc2VyAGxhc3RTaGlwcGluZ1N0YXRlIjtzOjA6IiI7czoyNDoiAE1NX1VzZXIAbGFzdFNoaXBwaW5nWmlwIjtzOjA6IiI7czoyODoiAE1NX1VzZXIAbGFzdFNoaXBwaW5nQ291bnRyeSI7czowOiIiO3M6MjI6IgBNTV9Vc2VyAHN0YXR1c1VwZGF0ZWQiO2I6MDtzOjI5OiIATU1fVXNlcgBzZW5kV2VsY29tZUVtYWlsRmxhZyI7YjoxO3M6MzU6IgBNTV9Vc2VyAG1lbWJlcnNoaXBMZXZlbENoYW5nZWRGbGFnIjtiOjA7czozMToiAE1NX1VzZXIAbGFzdEZvcmdvdFBhc3N3b3JkSGFzaCI7TjtzOjI2OiIATU1fVXNlcgBvcmlnaW5BZmZpbGlhdGVJZCI7czowOiIiO3M6Mjk6IgBNTV9Vc2VyAG9yaWdpblN1YmFmZmlsaWF0ZUlkIjtzOjA6IiI7czoyMDoiAE1NX1VzZXIAaXNDU1ZJbXBvcnQiO2I6MDtzOjIyOiIATU1fVXNlcgBmb3Jnb3R0ZW5GbGFnIjtzOjE6IjAiO3M6NToiACoAaWQiO2k6MDtzOjE2OiIATU1fRW50aXR5AHZhbGlkIjtiOjE7czoxODoiAE1NX0VudGl0eQBhdXRoS2V5IjtzOjA6IiI7czoxNzoiACoAbm90aWZ5U2VydmljZXMiO2I6MTt9czoxNjoiAE1NX1ByZXZpZXcAZGF5cyI7aTowO3M6MjQ6IgBNTV9QcmV2aWV3AG1lbWJlclR5cGVJZCI7aTowO3M6Mjg6IgBNTV9QcmV2aWV3AGFjY2Vzc1RhZ0FwcGxpZWQiO047fSI7fQ==', '127.0.0.1', '2018-12-20 04:13:19');

-- --------------------------------------------------------

--
-- Table structure for table `mm_shipping_methods`
--

CREATE TABLE `mm_shipping_methods` (
  `id` int(11) UNSIGNED NOT NULL,
  `token` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `settings` longtext COLLATE utf8_unicode_ci NOT NULL,
  `active` smallint(6) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_shipping_methods`
--

INSERT INTO `mm_shipping_methods` (`id`, `token`, `name`, `settings`, `active`) VALUES
(1, 'FLATRATE', 'Flat Rate', '', 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_smarttags`
--

CREATE TABLE `mm_smarttags` (
  `id` int(11) UNSIGNED NOT NULL,
  `group_id` int(11) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `visible` tinyint(4) NOT NULL DEFAULT '1',
  `autoload` tinyint(1) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_smarttags`
--

INSERT INTO `mm_smarttags` (`id`, `group_id`, `name`, `visible`, `autoload`) VALUES
(100, 1, 'MM_Content_Data', 1, 1),
(101, 1, 'MM_Content_Link', 1, 1),
(200, 2, 'MM_CorePage_Link', 1, 1),
(300, 3, 'MM_CustomField_Data', 1, 1),
(400, 4, 'MM_Employee_Data', 1, 1),
(500, 5, 'MM_Error_Message', 1, 1),
(600, 6, 'MM_Form', 1, 1),
(601, 6, 'MM_Form_Section', 1, 0),
(602, 6, 'MM_Form_Field', 1, 0),
(603, 6, 'MM_Form_Data', 1, 0),
(604, 6, 'MM_Form_Message', 1, 0),
(605, 6, 'MM_Form_Button', 1, 0),
(606, 6, 'MM_Form_Subsection', 1, 0),
(700, 7, 'MM_Member_Data', 1, 1),
(701, 7, 'MM_Member_Link', 1, 1),
(800, 8, 'MM_Order_Data', 1, 1),
(801, 8, 'MM_Purchase_Link', 1, 1),
(900, 9, 'MM_Access_Decision', 1, 1),
(901, 9, 'MM_Affiliate_Decision', 1, 1),
(902, 9, 'MM_Custom_Decision', 1, 1),
(903, 9, 'MM_Member_Decision', 1, 1),
(904, 9, 'MM_Order_Decision', 1, 1),
(905, 9, 'MM_Order_Subdecision', 1, 1),
(1000, 10, 'MM_Product_Data', 1, 1),
(1100, 11, 'MM_Affiliate_Data', 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `mm_smarttag_groups`
--

CREATE TABLE `mm_smarttag_groups` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `parent_id` bigint(20) UNSIGNED DEFAULT '0',
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `visible` tinyint(4) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_smarttag_groups`
--

INSERT INTO `mm_smarttag_groups` (`id`, `parent_id`, `name`, `visible`) VALUES
(1, 0, 'Content', 1),
(2, 0, 'Core Pages', 1),
(3, 0, 'Custom Fields', 1),
(4, 0, 'Employees', 1),
(5, 0, 'Errors', 1),
(6, 0, 'Forms', 1),
(7, 0, 'Members', 1),
(8, 0, 'Orders', 1),
(9, 0, 'Decisions', 1),
(10, 0, 'Products', 1),
(11, 0, 'Affiliates', 0);

-- --------------------------------------------------------

--
-- Table structure for table `mm_social_login_linked_profiles`
--

CREATE TABLE `mm_social_login_linked_profiles` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `provider_id` bigint(20) NOT NULL,
  `unique_id` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` bigint(20) NOT NULL,
  `removable` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_social_login_providers`
--

CREATE TABLE `mm_social_login_providers` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `active` tinyint(1) DEFAULT '0',
  `api_key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `api_secret` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `allow_signups` tinyint(4) DEFAULT '1',
  `signup_membership_level` bigint(20) DEFAULT '0',
  `settings` longtext COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_top_level_domains`
--

CREATE TABLE `mm_top_level_domains` (
  `suffix` varchar(55) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_transaction_key`
--

CREATE TABLE `mm_transaction_key` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `transaction_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL,
  `order_id` bigint(20) UNSIGNED NOT NULL,
  `age` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_transaction_log`
--

CREATE TABLE `mm_transaction_log` (
  `id` bigint(20) NOT NULL,
  `order_id` bigint(20) UNSIGNED NOT NULL,
  `order_item_id` bigint(20) UNSIGNED DEFAULT NULL,
  `amount` decimal(19,4) NOT NULL,
  `currency` char(3) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'USD',
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `payment_service_id` int(11) UNSIGNED DEFAULT NULL,
  `payment_service_detail_id` bigint(20) UNSIGNED DEFAULT NULL,
  `transaction_type` int(11) UNSIGNED NOT NULL,
  `transaction_date` datetime NOT NULL,
  `is_test` tinyint(4) NOT NULL DEFAULT '0',
  `refund_id` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_user_data`
--

CREATE TABLE `mm_user_data` (
  `wp_user_id` bigint(20) NOT NULL,
  `membership_level_id` int(11) UNSIGNED NOT NULL,
  `status` tinyint(4) NOT NULL,
  `pending_status` tinyint(4) NOT NULL DEFAULT '0',
  `imported` tinyint(4) NOT NULL DEFAULT '0',
  `status_message` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `days_calc_method` enum('join_date','custom_date','fixed') COLLATE utf8_unicode_ci NOT NULL DEFAULT 'join_date',
  `days_calc_value` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `notes` text COLLATE utf8_unicode_ci,
  `first_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `last_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `phone` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_address1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_address2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_city` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_state` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_province` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_postal_code` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
  `billing_country` varchar(2) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_address1` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_address2` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_city` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_state` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_province` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_postal_code` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
  `shipping_country` varchar(2) COLLATE utf8_unicode_ci DEFAULT NULL,
  `subscribed_provider_id` int(11) UNSIGNED DEFAULT NULL,
  `subscribed_list_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `origin_affiliate_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
  `origin_subaffiliate_id` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
  `became_active` timestamp NULL DEFAULT NULL,
  `welcome_email_sent` timestamp NULL DEFAULT NULL,
  `forgotten` tinyint(4) NOT NULL DEFAULT '0',
  `last_login_date` timestamp NULL DEFAULT NULL,
  `status_updated` timestamp NULL DEFAULT NULL,
  `cancellation_date` timestamp NULL DEFAULT NULL,
  `expiration_date` timestamp NULL DEFAULT NULL,
  `last_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_user_data`
--

INSERT INTO `mm_user_data` (`wp_user_id`, `membership_level_id`, `status`, `pending_status`, `imported`, `status_message`, `days_calc_method`, `days_calc_value`, `notes`, `first_name`, `last_name`, `phone`, `billing_address1`, `billing_address2`, `billing_city`, `billing_state`, `billing_province`, `billing_postal_code`, `billing_country`, `shipping_address1`, `shipping_address2`, `shipping_city`, `shipping_state`, `shipping_province`, `shipping_postal_code`, `shipping_country`, `subscribed_provider_id`, `subscribed_list_id`, `origin_affiliate_id`, `origin_subaffiliate_id`, `became_active`, `welcome_email_sent`, `forgotten`, `last_login_date`, `status_updated`, `cancellation_date`, `expiration_date`, `last_updated`) VALUES
(2, 1, 1, 0, 0, '', 'join_date', '', '', 'Thanh', 'Che', '0967077834', '', NULL, '', '', NULL, '', '', '', NULL, '', '', NULL, '', '', 0, '', '', '', '2018-12-13 18:54:29', '2018-12-13 18:54:30', 0, NULL, '2018-12-13 18:54:29', NULL, NULL, '2018-12-13 18:54:29');

-- --------------------------------------------------------

--
-- Table structure for table `mm_user_defined_pages`
--

CREATE TABLE `mm_user_defined_pages` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `icon_type` tinyint(1) DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `mm_version_releases`
--

CREATE TABLE `mm_version_releases` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `version` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `date_added` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `date_modified` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `mm_version_releases`
--

INSERT INTO `mm_version_releases` (`id`, `version`, `date_added`, `date_modified`) VALUES
(1, '2.2.8-102', '2018-11-20 23:34:48', '2018-11-20 16:38:56');

-- --------------------------------------------------------

--
-- Table structure for table `wp_commentmeta`
--

CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `comment_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_comments`
--

CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) UNSIGNED NOT NULL,
  `comment_post_ID` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_comments`
--

INSERT INTO `wp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(1, 1, 'A WordPress Commenter', 'wapuu@wordpress.example', 'https://wordpress.org/', '', '2018-11-20 23:34:16', '2018-11-20 23:34:16', 'Hi, this is a comment.\nTo get started with moderating, editing, and deleting comments, please visit the Comments screen in the dashboard.\nCommenter avatars come from <a href=\"https://gravatar.com\">Gravatar</a>.', 0, '1', '', '', 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_links`
--

CREATE TABLE `wp_links` (
  `link_id` bigint(20) UNSIGNED NOT NULL,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) UNSIGNED NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_options`
--

CREATE TABLE `wp_options` (
  `option_id` bigint(20) UNSIGNED NOT NULL,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://renshawspt.local', 'yes'),
(2, 'home', 'http://renshawspt.local', 'yes'),
(3, 'blogname', 'Renshawspt', 'yes'),
(4, 'blogdescription', 'Just another WordPress site', 'yes'),
(5, 'users_can_register', '0', 'yes'),
(6, 'admin_email', 'cqthanh.zx@gmail.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'F j, Y', 'yes'),
(24, 'time_format', 'g:i a', 'yes'),
(25, 'links_updated_date_format', 'F j, Y g:i a', 'yes'),
(26, 'comment_moderation', '0', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/', 'yes'),
(29, 'rewrite_rules', 'a:89:{s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:58:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:68:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:88:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:83:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:83:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:64:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:53:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/embed/?$\";s:91:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/trackback/?$\";s:85:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&tb=1\";s:77:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:72:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]\";s:65:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&paged=$matches[5]\";s:72:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$\";s:98:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&cpage=$matches[5]\";s:61:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)(?:/([0-9]+))?/?$\";s:97:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&page=$matches[5]\";s:47:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:57:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:77:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:72:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:53:\"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&cpage=$matches[4]\";s:51:\"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]\";s:38:\"([0-9]{4})/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&cpage=$matches[2]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:2:{i:0;s:27:\"gdpr-banner/gdpr-banner.php\";i:1;s:21:\"membermouse/index.php\";}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'comment_max_links', '2', 'yes'),
(37, 'gmt_offset', '0', 'yes'),
(38, 'default_email_category', '1', 'yes'),
(39, 'recently_edited', '', 'no'),
(40, 'template', 'renshawspt', 'yes'),
(41, 'stylesheet', 'renshawspt', 'yes'),
(42, 'comment_whitelist', '1', 'yes'),
(43, 'blacklist_keys', '', 'no'),
(44, 'comment_registration', '0', 'yes'),
(45, 'html_type', 'text/html', 'yes'),
(46, 'use_trackback', '0', 'yes'),
(47, 'default_role', 'subscriber', 'yes'),
(48, 'db_version', '38590', 'yes'),
(49, 'uploads_use_yearmonth_folders', '1', 'yes'),
(50, 'upload_path', '', 'yes'),
(51, 'blog_public', '1', 'yes'),
(52, 'default_link_category', '2', 'yes'),
(53, 'show_on_front', 'posts', 'yes'),
(54, 'tag_base', '', 'yes'),
(55, 'show_avatars', '1', 'yes'),
(56, 'avatar_rating', 'G', 'yes'),
(57, 'upload_url_path', '', 'yes'),
(58, 'thumbnail_size_w', '150', 'yes'),
(59, 'thumbnail_size_h', '150', 'yes'),
(60, 'thumbnail_crop', '1', 'yes'),
(61, 'medium_size_w', '300', 'yes'),
(62, 'medium_size_h', '300', 'yes'),
(63, 'avatar_default', 'mystery', 'yes'),
(64, 'large_size_w', '1024', 'yes'),
(65, 'large_size_h', '1024', 'yes'),
(66, 'image_default_link_type', 'none', 'yes'),
(67, 'image_default_size', '', 'yes'),
(68, 'image_default_align', '', 'yes'),
(69, 'close_comments_for_old_posts', '0', 'yes'),
(70, 'close_comments_days_old', '14', 'yes'),
(71, 'thread_comments', '1', 'yes'),
(72, 'thread_comments_depth', '5', 'yes'),
(73, 'page_comments', '0', 'yes'),
(74, 'comments_per_page', '50', 'yes'),
(75, 'default_comments_page', 'newest', 'yes'),
(76, 'comment_order', 'asc', 'yes'),
(77, 'sticky_posts', 'a:0:{}', 'yes'),
(78, 'widget_categories', 'a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(79, 'widget_text', 'a:0:{}', 'yes'),
(80, 'widget_rss', 'a:0:{}', 'yes'),
(81, 'uninstall_plugins', 'a:0:{}', 'no'),
(82, 'timezone_string', '', 'yes'),
(83, 'page_for_posts', '0', 'yes'),
(84, 'page_on_front', '0', 'yes'),
(85, 'default_post_format', '0', 'yes'),
(86, 'link_manager_enabled', '0', 'yes'),
(87, 'finished_splitting_shared_terms', '1', 'yes'),
(88, 'site_icon', '0', 'yes'),
(89, 'medium_large_size_w', '768', 'yes'),
(90, 'medium_large_size_h', '0', 'yes'),
(91, 'wp_page_for_privacy_policy', '3', 'yes'),
(92, 'show_comments_cookies_opt_in', '0', 'yes'),
(93, 'initial_db_version', '38590', 'yes'),
(94, 'wp_user_roles', 'a:9:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}s:24:\"mm_role_customer_support\";a:2:{s:4:\"name\";s:7:\"Support\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:17:\"moderate_comments\";b:1;}}s:22:\"mm_role_customer_sales\";a:2:{s:4:\"name\";s:5:\"Sales\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:17:\"moderate_comments\";b:1;}}s:15:\"mm_role_analyst\";a:2:{s:4:\"name\";s:7:\"Analyst\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:17:\"moderate_comments\";b:1;}}s:23:\"mm_role_product_manager\";a:2:{s:4:\"name\";s:15:\"Product Manager\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:17:\"moderate_comments\";b:1;}}}', 'yes'),
(95, 'fresh_site', '0', 'yes'),
(96, 'widget_search', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(97, 'widget_recent-posts', 'a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(98, 'widget_recent-comments', 'a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(99, 'widget_archives', 'a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(100, 'widget_meta', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(101, 'sidebars_widgets', 'a:5:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}s:13:\"array_version\";i:3;}', 'yes'),
(102, 'widget_pages', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(103, 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(104, 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(105, 'widget_media_image', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(106, 'widget_media_gallery', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(107, 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(108, 'widget_tag_cloud', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(109, 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(110, 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(111, 'cron', 'a:9:{i:1545272094;a:1:{s:15:\"mm_session_reap\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:21:\"session_reap_interval\";s:4:\"args\";a:0:{}s:8:\"interval\";i:300;}}}i:1545273256;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1545273294;a:1:{s:30:\"mm_check_scheduled_event_queue\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:20:\"queue_check_interval\";s:4:\"args\";a:0:{}s:8:\"interval\";i:1800;}}}i:1545305656;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1545305931;a:1:{s:12:\"mm_cron_hook\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1545348868;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1545348894;a:1:{s:27:\"register_orphaned_schedules\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1545357936;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}', 'yes'),
(112, 'theme_mods_twentyseventeen', 'a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1542757119;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}', 'yes'),
(116, '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:3:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.0.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.0.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.0.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.0.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.0.2\";s:7:\"version\";s:5:\"5.0.2\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.0\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.0.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.0.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.0.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.0.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.0.2\";s:7:\"version\";s:5:\"5.0.2\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.0\";s:15:\"partial_version\";s:0:\"\";s:9:\"new_files\";s:1:\"1\";}i:2;O:8:\"stdClass\":11:{s:8:\"response\";s:10:\"autoupdate\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.9.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.9.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.9.9-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.9.9-new-bundled.zip\";s:7:\"partial\";s:69:\"https://downloads.wordpress.org/release/wordpress-4.9.9-partial-8.zip\";s:8:\"rollback\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.9.9-rollback-8.zip\";}s:7:\"current\";s:5:\"4.9.9\";s:7:\"version\";s:5:\"4.9.9\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.0\";s:15:\"partial_version\";s:5:\"4.9.8\";s:9:\"new_files\";s:0:\"\";}}s:12:\"last_checked\";i:1545270345;s:15:\"version_checked\";s:5:\"4.9.8\";s:12:\"translations\";a:0:{}}', 'no'),
(125, 'can_compress_scripts', '1', 'no'),
(130, 'recently_activated', 'a:1:{s:13:\"gdpr/gdpr.php\";i:1545271930;}', 'yes'),
(142, 'mm-last-code-refresh', '1542756871', 'yes'),
(143, 'mm-option-failed-checkin-count', '1', 'yes'),
(144, 'mm-last-checkin', 'MjAxOC0xMi0xOCAwMjowODoyNw==', 'yes'),
(145, 'mm-license-data', 'Tzo4OiJzdGRDbGFzcyI6MTQ6e3M6MjoiaWQiO3M6NToiMTE5OTMiO3M6ODoibWVtYmVySWQiO3M6NDoiMzc4OSI7czo0OiJuYW1lIjtzOjA6IiI7czozOiJ1cmwiO3M6MjY6Imh0dHA6Ly9sb2NhbGhvc3Qvd29yZHByZXNzIjtzOjY6ImFwaUtleSI7czozMjoibnVneHJrY3Bhd3VqbjZ6Nm83Ym1manhqNmNiN2V5djciO3M6OToiYXBpU2VjcmV0IjtzOjMyOiJjNmZxZ3l5eDhtbzY5dGpnb3pxaTIydHR4NW4ydXF2eCI7czoxMjoibWFqb3JWZXJzaW9uIjtzOjU6IjIuMi44IjtzOjEyOiJtaW5vclZlcnNpb24iO3M6MzoiMTAyIjtzOjIwOiJwZXJtaXNzaW9uc1Byb2ZpbGVJZCI7czoyOiItMSI7czoxMToicGVybWlzc2lvbnMiO3M6NzA0OiJ7InB5bXRfc2VydmljZV9hdXRob3JpemVuZXQiOjEsInB5bXRfc2VydmljZV9hdXRob3JpemVuZXRfY2ltIjoxLCJweW10X3NlcnZpY2VfcGF5cGFsIjoxLCJweW10X3NlcnZpY2VfY2xpY2tiYW5rIjoxLCJweW10X3NlcnZpY2VfY2hhcmdpZnkiOjAsInB5bXRfc2VydmljZV9zdHJpcGUiOjEsInB5bXRfc2VydmljZV9icmFpbnRyZWUiOjEsInB5bXRfc2VydmljZV9saW1lbGlnaHQiOjAsInB5bXRfc2VydmljZV9jb2luYmFzZSI6MSwicHltdF9zZXJ2aWNlX2xpdGxlIjowLCJzaG93X21tX2Zvb3RlciI6MCwibWF4X251bWJlcl9tZW1iZXJzIjoxMDAsImZlYXR1cmVfYnVuZGxlcyI6MSwiZmVhdHVyZV9kcmlwX2NvbnRlbnRfc2NoZWR1bGUiOjEsImZlYXR1cmVfYXBpIjoxLCJmZWF0dXJlX3B1c2hfbm90aWZpY2F0aW9ucyI6MSwiZmVhdHVyZV9waHBfaW50ZXJmYWNlIjoxLCJmZWF0dXJlX3NtYXJ0X2NvbnRlbnRfdGFncyI6MSwiZmVhdHVyZV9hZmZpbGlhdGVfbWdtdCI6MSwiZmVhdHVyZV9sb2FkX2JhbGFuY2luZyI6MCwiZmVhdHVyZV9lbXBsb3llZV9hY2NvdW50cyI6MCwiZmVhdHVyZV9hZHZfc3Vic2NyaXB0aW9uX21nbXQiOjAsImZlYXR1cmVfcmVwb3J0aW5nX3N1aXRlIjowLCJleHRlbnNpb25fdXNlcnZvaWNlIjowLCJleHRlbnNpb25fc29jaWFsX2xvZ2luIjowLCJzdXBwb3J0X2VtYWlsIjoxLCJzdXBwb3J0X3Bob25lIjowfSI7czo2OiJzdGF0dXMiO3M6MToiMSI7czoxNDoiaXNBcmNoaXZlZEZsYWciO2I6MDtzOjExOiJsYXN0VXBkYXRlZCI7czoxOToiMjAxOC0xMi0xNCAwMTo0MToxMSI7czo5OiJkYXRlQWRkZWQiO3M6MTk6IjIwMTctMDQtMTMgMjM6NDI6MjYiO30=', 'yes'),
(146, 'mm-minor-version', '102', 'yes'),
(147, 'wp_-mm-scheduling-regulator', 'completed', 'yes'),
(148, 'mm-option-acct-security', '1', 'yes'),
(149, 'mm-option-acct-security-max-ips', '5', 'yes'),
(150, 'mm-option-homepage-setting', '0', 'yes'),
(151, 'mm-option-use-member-homepage', '1', 'yes'),
(152, 'mm-option-show-login-logout-link', '0', 'yes'),
(153, 'mm-option-hide-protected-menu-items', '1', 'yes'),
(154, 'mm-option-use-mm-login-page', '1', 'yes'),
(155, 'mm-option-use-mm-reset-password-page', '1', 'yes'),
(156, 'mm-option-country-selections', 'a:1:{s:2:\"US\";s:2:\"US\";}', 'yes'),
(157, 'mm-forgot-password-email-subject', 'Reset your password', 'yes'),
(158, 'mm-forgot-password-email-body', 'Hi [MM_Member_Data name=\'firstName\'],\n\nClick the link below to reset your account password:\n	\n<a href=\"[MM_CorePage_Link type=\'resetpassword\']\">[MM_CorePage_Link type=\'resetpassword\']</a>\n	\nIf you have any questions, please contact us at [MM_Employee_Data name=\'email\'].\n	\nThanks,\n[MM_Employee_Data name=\'displayName\']', 'yes'),
(159, 'mm-option-affiliate', 'affid', 'yes'),
(160, 'mm-option-sub-affiliate', 'sid', 'yes'),
(161, 'mm-option-affiliate-lifespan', '30', 'yes'),
(162, 'mm-option-login-token-lifespan', '15', 'yes'),
(163, 'mm-option-use-checkout-form-test-data', '0', 'yes'),
(164, 'mm-option-purchase-confirmation-dialog-width', '450', 'yes'),
(165, 'mm-option-purchase-confirmation-dialog-height', '200', 'yes'),
(166, 'mm-option-dflt-checkout-item-type', 'membership_level', 'yes'),
(167, 'mm-option-dflt-checkout-item-id', '-1', 'yes'),
(168, 'mm-option-show-preview-bar', '1', 'yes'),
(169, 'mm-option-hide-admin-bar', '1', 'yes'),
(170, 'mm-option-enable-wp-autop', '1', 'yes'),
(171, 'mm-option-enable-username-change', '0', 'yes'),
(172, 'mm-option-allow-logged-out-purchases', '1', 'yes'),
(173, 'mm-option-allow-duplicate-subscriptions', '0', 'yes'),
(174, 'mm-option-checkout-paid-message', 'Please wait while we process your order...', 'yes'),
(175, 'mm-option-checkout-free-message', 'Please wait while we create your account...', 'yes'),
(176, 'mm-option-checkout-message-css', 'mm-checkout-processing-message', 'yes'),
(177, 'mm-option-currency', 'USD', 'yes'),
(178, 'mm-option-use-jquery-ui', '1', 'yes'),
(179, 'mm-option-allow-overdue-access', '0', 'yes'),
(180, 'mm-option-captcha-enabled', '0', 'yes'),
(181, 'mm-option-use-mm-css-reset-password', '1', 'yes'),
(182, 'mm-option-diagnostic-mode', 'off', 'yes'),
(183, 'mm-force-use-db-cache', '0', 'yes'),
(184, 'mm-option-currency-format-postfix-iso', 'false', 'yes'),
(185, 'mm-option-affiliate-alias', '', 'yes'),
(186, 'mm-option-sub-affiliate-alias', '', 'yes'),
(187, 'mm-site-in-test-mode', '0', 'yes'),
(188, 'mm-option-captcha-key', '', 'yes'),
(189, 'mm-option-captcha-private-key', '', 'yes'),
(190, 'mm-option-forget-member-email_address', '1', 'yes'),
(191, 'mm-option-forget-member-address', '1', 'yes'),
(192, 'mm-option-forget-member-country', '1', 'yes'),
(193, 'mm-option-forget-member-order-address', '1', 'yes'),
(194, 'mm-option-forget-member-order-country', '1', 'yes'),
(195, 'mm-option-forget-member-activity-log', '1', 'yes'),
(196, 'mm-option-forget-member-custom-fields', '1', 'yes'),
(197, 'mm-option-disable-explicit-links', '1', 'yes'),
(198, 'mm-option-purchase-link-style', 'reference-links', 'yes'),
(199, 'mm-option-smarttag-version', '2.1', 'yes'),
(200, 'mm-option-activity-log-cleanup-enabled', '1', 'yes'),
(201, 'mm-option-activity-log-cleanup-interval', '365', 'yes'),
(202, 'mm-option-use-mm-css-checkout', '1', 'yes'),
(203, 'mm-option-use-mm-css-my-account', '1', 'yes'),
(204, 'mm-option-use-mm-css-login', '1', 'yes'),
(205, 'mm-option-use-mm-css-forgot-password', '1', 'yes'),
(206, 'mm-option-enable-membership-proration', '1', 'yes'),
(207, 'mm-option-drip-content-time-setting', 'local', 'yes'),
(208, 'mm-overdue-payment-notification-installed', '1', 'yes'),
(209, 'smarttags', 'a:19:{i:0;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"100\";s:8:\"group_id\";s:1:\"1\";s:4:\"name\";s:15:\"MM_Content_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:1;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"101\";s:8:\"group_id\";s:1:\"1\";s:4:\"name\";s:15:\"MM_Content_Link\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:2;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"200\";s:8:\"group_id\";s:1:\"2\";s:4:\"name\";s:16:\"MM_CorePage_Link\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:3;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"300\";s:8:\"group_id\";s:1:\"3\";s:4:\"name\";s:19:\"MM_CustomField_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:4;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"400\";s:8:\"group_id\";s:1:\"4\";s:4:\"name\";s:16:\"MM_Employee_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:5;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"500\";s:8:\"group_id\";s:1:\"5\";s:4:\"name\";s:16:\"MM_Error_Message\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:6;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"600\";s:8:\"group_id\";s:1:\"6\";s:4:\"name\";s:7:\"MM_Form\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:7;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"700\";s:8:\"group_id\";s:1:\"7\";s:4:\"name\";s:14:\"MM_Member_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:8;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"701\";s:8:\"group_id\";s:1:\"7\";s:4:\"name\";s:14:\"MM_Member_Link\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:9;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"800\";s:8:\"group_id\";s:1:\"8\";s:4:\"name\";s:13:\"MM_Order_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:10;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"801\";s:8:\"group_id\";s:1:\"8\";s:4:\"name\";s:16:\"MM_Purchase_Link\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:11;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"900\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:18:\"MM_Access_Decision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:12;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"901\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:21:\"MM_Affiliate_Decision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:13;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"902\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:18:\"MM_Custom_Decision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:14;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"903\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:18:\"MM_Member_Decision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:15;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"904\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:17:\"MM_Order_Decision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:16;O:8:\"stdClass\":5:{s:2:\"id\";s:3:\"905\";s:8:\"group_id\";s:1:\"9\";s:4:\"name\";s:20:\"MM_Order_Subdecision\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:17;O:8:\"stdClass\":5:{s:2:\"id\";s:4:\"1000\";s:8:\"group_id\";s:2:\"10\";s:4:\"name\";s:15:\"MM_Product_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}i:18;O:8:\"stdClass\":5:{s:2:\"id\";s:4:\"1100\";s:8:\"group_id\";s:2:\"11\";s:4:\"name\";s:17:\"MM_Affiliate_Data\";s:7:\"visible\";s:1:\"1\";s:8:\"autoload\";s:1:\"1\";}}', 'yes'),
(210, 'mm-major-version', '2.2.8', 'yes'),
(211, 'mm-upgrade-notice', '', 'yes'),
(212, 'widget_mm_smartwidget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(213, 'widget_mm_dripcontentwidget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(215, 'mm-option-core-page-cache', 'a:11:{i:1;a:1:{i:5;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:22:\"renshawspt.local/home/\";}}i:2;a:1:{i:6;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:24:\"renshawspt.local/cancel/\";}}i:3;a:1:{i:7;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:26:\"renshawspt.local/mm-error/\";}}i:4;a:1:{i:8;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:23:\"renshawspt.local/login/\";}}i:5;a:1:{i:10;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:33:\"renshawspt.local/forgot-password/\";}}i:6;a:1:{i:12;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:26:\"renshawspt.local/checkout/\";}}i:7;a:1:{i:15;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:30:\"renshawspt.local/confirmation/\";}}i:10;a:1:{i:14;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:27:\"renshawspt.local/myaccount/\";}}i:11;a:1:{i:9;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:24:\"renshawspt.local/logout/\";}}i:12;a:1:{i:13;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:29:\"renshawspt.local/redeem-gift/\";}}i:13;a:1:{i:11;a:3:{s:8:\"ref_type\";N;s:6:\"ref_id\";N;s:9:\"permalink\";s:32:\"renshawspt.local/reset-password/\";}}}', 'yes'),
(216, 'mm-option-safe-mode', 'off', 'yes'),
(219, 'WPLANG', '', 'yes'),
(220, 'new_admin_email', 'cqthanh.zx@gmail.com', 'yes'),
(232, 'current_theme', 'Twenty Seventeen/renshawspt', 'yes'),
(233, 'theme_mods_renshawspt', 'a:2:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}}', 'yes'),
(234, 'theme_switched', '', 'yes'),
(243, '_transient_timeout_mmlogintrackid_admin', '1547862718', 'no'),
(244, '_transient_mmlogintrackid_admin', 'a:5:{i:0;s:32:\"93d507bf46a912a03dad7d8c1889eee2\";i:1;s:32:\"1458c57c074bfb9a91a4a9c428d79891\";i:2;s:32:\"aafdcce51719220fef13297ea4994dba\";i:3;s:32:\"fea1db4d11edc1bfa2d70fc1136bc4f9\";i:4;s:32:\"86847f8a9e5de70926aa25d72ec8e6aa\";}', 'no'),
(287, '_site_transient_timeout_theme_roots', '1545272149', 'no'),
(288, '_site_transient_theme_roots', 'a:5:{s:10:\"renshawspt\";s:7:\"/themes\";s:13:\"themify-ultra\";s:7:\"/themes\";s:13:\"twentyfifteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";}', 'no'),
(289, '_site_transient_update_themes', 'O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1545270355;s:7:\"checked\";a:4:{s:10:\"renshawspt\";s:3:\"1.4\";s:13:\"twentyfifteen\";s:3:\"2.0\";s:15:\"twentyseventeen\";s:3:\"1.7\";s:13:\"twentysixteen\";s:3:\"1.5\";}s:8:\"response\";a:3:{s:13:\"twentyfifteen\";a:4:{s:5:\"theme\";s:13:\"twentyfifteen\";s:11:\"new_version\";s:3:\"2.2\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentyfifteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentyfifteen.2.2.zip\";}s:15:\"twentyseventeen\";a:4:{s:5:\"theme\";s:15:\"twentyseventeen\";s:11:\"new_version\";s:3:\"1.9\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentyseventeen/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentyseventeen.1.9.zip\";}s:13:\"twentysixteen\";a:4:{s:5:\"theme\";s:13:\"twentysixteen\";s:11:\"new_version\";s:3:\"1.7\";s:3:\"url\";s:43:\"https://wordpress.org/themes/twentysixteen/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/theme/twentysixteen.1.7.zip\";}}s:12:\"translations\";a:0:{}}', 'no'),
(290, '_site_transient_update_plugins', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1545271928;s:7:\"checked\";a:6:{s:19:\"akismet/akismet.php\";s:5:\"4.0.8\";s:13:\"gdpr/gdpr.php\";s:5:\"2.1.0\";s:27:\"gdpr-banner/gdpr-banner.php\";s:7:\"1.1.0.5\";s:9:\"hello.php\";s:3:\"1.7\";s:21:\"membermouse/index.php\";s:5:\"2.2.8\";s:35:\"themify-builder/themify-builder.php\";s:5:\"4.1.1\";}s:8:\"response\";a:2:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:3:\"4.1\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/akismet.4.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:3:\"5.0\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:35:\"themify-builder/themify-builder.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:29:\"w.org/plugins/themify-builder\";s:4:\"slug\";s:15:\"themify-builder\";s:6:\"plugin\";s:35:\"themify-builder/themify-builder.php\";s:11:\"new_version\";s:5:\"4.1.3\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/themify-builder/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/themify-builder.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:68:\"https://ps.w.org/themify-builder/assets/icon-128x128.png?rev=1995752\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:70:\"https://ps.w.org/themify-builder/assets/banner-772x250.png?rev=1995753\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:5:\"5.0.1\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:3:{s:13:\"gdpr/gdpr.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:18:\"w.org/plugins/gdpr\";s:4:\"slug\";s:4:\"gdpr\";s:6:\"plugin\";s:13:\"gdpr/gdpr.php\";s:11:\"new_version\";s:5:\"2.1.0\";s:3:\"url\";s:35:\"https://wordpress.org/plugins/gdpr/\";s:7:\"package\";s:53:\"https://downloads.wordpress.org/plugin/gdpr.2.1.0.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:57:\"https://ps.w.org/gdpr/assets/icon-256x256.png?rev=1837142\";s:2:\"1x\";s:49:\"https://ps.w.org/gdpr/assets/icon.svg?rev=1837142\";s:3:\"svg\";s:49:\"https://ps.w.org/gdpr/assets/icon.svg?rev=1837142\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:60:\"https://ps.w.org/gdpr/assets/banner-1544x500.png?rev=1837142\";s:2:\"1x\";s:59:\"https://ps.w.org/gdpr/assets/banner-772x250.png?rev=1837142\";}s:11:\"banners_rtl\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/gdpr/assets/banner-1544x500-rtl.png?rev=1837142\";s:2:\"1x\";s:63:\"https://ps.w.org/gdpr/assets/banner-772x250-rtl.png?rev=1837142\";}}s:27:\"gdpr-banner/gdpr-banner.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/gdpr-banner\";s:4:\"slug\";s:11:\"gdpr-banner\";s:6:\"plugin\";s:27:\"gdpr-banner/gdpr-banner.php\";s:11:\"new_version\";s:7:\"1.1.0.5\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/gdpr-banner/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/gdpr-banner.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/gdpr-banner/assets/icon-256x256.jpg?rev=1804068\";s:2:\"1x\";s:64:\"https://ps.w.org/gdpr-banner/assets/icon-128x128.jpg?rev=1804068\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:66:\"https://ps.w.org/gdpr-banner/assets/banner-772x250.jpg?rev=1804069\";}s:11:\"banners_rtl\";a:0:{}}s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=969907\";s:2:\"1x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=969907\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:65:\"https://ps.w.org/hello-dolly/assets/banner-772x250.png?rev=478342\";}s:11:\"banners_rtl\";a:0:{}}}}', 'no'),
(292, '_transient_timeout_feed_b27b5af21d80cf3c571790d64af7e81d', '1545277921', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(293, '_transient_feed_b27b5af21d80cf3c571790d64af7e81d', 'a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:49:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Updates – MemberMouse\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"https://membermouse.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 19 Dec 2018 18:44:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://wordpress.org/?v=4.9.7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"MemberMouse 2.2.8 Released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/updates/membermouse-2-2-8-released/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/updates/membermouse-2-2-8-released/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 10 May 2018 18:45:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://membermouse.com/?p=2226\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:646:\"MemberMouse 2.2.8 is now available &#8211; you can upgrade directly from your WordPress Dashboard or download using the link below to manually upgrade. In addition, we’ve updated our legal documentation (End User Licensing Agreement, Terms of Sale, Terms of Service and Privacy Policy) and these can all be reviewed on our site. We want to give you an overview of what you can expect in this latest release and with our updated legal policies: GDPR tools. The upcoming General Data Protection Regulation (GDPR) places new obligations <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-8-released/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Cynthia Bennett\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/updates/membermouse-2-2-8-released/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"MemberMouse 2.2.7 Released!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/updates/membermouse-2-2-7-released/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/updates/membermouse-2-2-7-released/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 May 2017 16:00:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"https://membermouse.com/?p=1990\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:727:\"The MemberMouse team is happy to announce our new release, version 2.2.7. This version includes enhancements to the plugin deactivation protocol, support for Authorize.net Accept.js, updates to Facebook Social Login as well as several enhancements and bug fixes. See the remainder of this article for details on the release and instructions on how to upgrade. Release Highlights Updated MemberMouse license deactivation protocol to alert the site admin prior to deactivation and allow for a longer window before the plugin deactivates. Implemented Authorize.net&#8217;s new Accept.js token exchange, minimizing the <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-7-released/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Cynthia Bennett\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/updates/membermouse-2-2-7-released/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"MemberMouse 2.2.6 Released!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/updates/membermouse-2-2-6-released/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/updates/membermouse-2-2-6-released/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 28 Sep 2016 17:09:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1910\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:705:\"The MemberMouse team is excited to bring you a fantastic new release, version 2.2.6. This version includes updates relating to WordPress 4.6, localization support, Zapier and ActiveCampaign integrations and numerous enhancements and bug fixes. See the remainder of this article for details on the release and instructions on how to upgrade. Release Highlights Tested with WordPress 4.6 ActiveCampaign email integration Localization support. Now it&#8217;s possible to translate most text in MemberMouse to the language of your choice Zapier is now integrated directly into the push notification <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-6-released/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Eric Turnnessen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/updates/membermouse-2-2-6-released/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"MemberMouse 2.2.5 Released!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/updates/membermouse-2-2-5-released/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/updates/membermouse-2-2-5-released/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Apr 2016 19:28:52 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1603\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:696:\"The MemberMouse team is excited to bring you a fantastic new release, version 2.2.5. This version includes updates relating to WordPress 4.5, infrastructure upgrades, security enhancements and numerous bug fixes. As part of our continuing commitment to provide a secure platform for our customers, we engaged Pritect.net to conduct a security audit on our full codebase. This release addresses multiple issues that were discovered, ranging from privilege escalation vulnerabilities to strengthening the source of entropy used in API key and password generation. Special thanks to James <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-5-released/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Eric Turnnessen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/updates/membermouse-2-2-5-released/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"MemberMouse 2.2.4 Release Today!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/updates/membermouse-2-2-4-release-today/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"https://membermouse.com/updates/membermouse-2-2-4-release-today/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 14 Dec 2015 21:02:12 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1490\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:672:\"The MemberMouse team is excited to bring you a fantastic new release, version 2.2.4. This version brings a handful of powerful new features, essential security updates, performance enhancements and more. This release is something we consider as an essential release for anyone using MemberMouse. In addition to a host of new features and bug fixes, this release includes necessary security updates and amazing performance enhancements which increase the performance of the MemberMouse plugin between 100% and 300% across the board. A big thank you to those <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-4-release-today/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Eric Turnnessen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"https://membermouse.com/updates/membermouse-2-2-4-release-today/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"MemberMouse 2.2.3 Released Today!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://membermouse.com/updates/membermouse-2-2-3-released-today/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://membermouse.com/updates/membermouse-2-2-3-released-today/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 23 Apr 2015 22:05:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1381\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:640:\"The MemberMouse team is excited to bring you a fantastic new release, version 2.2.3. This version brings more than a handful of powerful new features. If some of these things sound awfully technical, don’t sweat it. Just know that our developers are hard at work making improvements to the platform, adding new features, and making sure things are always up to date with WordPress and the other services with which we integrate. In fact, there are a lot of very technical things in this release that we won&#8217;t get <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-3-released-today/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://membermouse.com/updates/membermouse-2-2-3-released-today/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"MemberMouse 2.2.0 – Massive Update!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://membermouse.com/updates/membermouse-2-2-0-massive-update/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://membermouse.com/updates/membermouse-2-2-0-massive-update/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 19 Aug 2014 18:09:36 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1115\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:664:\"I’m pleased to announce the release of MemberMouse 2.2.0. This release contains major improvements for all plans. Here are a few of the highlights. As always, you can see the release notes for more details… Customer Value, Churn &#38; Retention Reporting is Here! We’ve upgraded the basic reporting for Starter, Builder, and Growth Plans, and we’ve released a series of enhanced reports for Advanced plans and up. This reporting suite gives you all of the powerful metrics you’ve been requesting. I am absolutely convinced this reporting <a class=\"moretag\" href=\"https://membermouse.com/updates/membermouse-2-2-0-massive-update/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://membermouse.com/updates/membermouse-2-2-0-massive-update/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:27:\"\n		\n		\n		\n		\n				\n\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"2.1.1 Release – MM Community! Gifting, Pending Cancellation, UserVoice &amp; More…\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"https://membermouse.com/updates/2-1-1-release-mm-community-gifting-cancellation-uservoice-more/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 26 Mar 2014 18:03:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1026\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:726:\"The team at MemberMouse is excited to bring you another feature packed release. This new version of the plugin includes some excellent new functionality. In addition to this release, we&#8217;re also introducing the &#8220;MemberMouse Community.&#8221; Introducing the MemberMouse Community! We invite you to participate in the brand new MemberMouse community. Consider it a place to share tips and tricks, best practices, and success stories. We believe that there is tremendous value in building a community that can foster growth and provide ancillary support above and beyond <a class=\"moretag\" href=\"https://membermouse.com/updates/2-1-1-release-mm-community-gifting-cancellation-uservoice-more/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:27:\"\n		\n		\n		\n		\n				\n\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Introducing MemberMouse 2.0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"https://membermouse.com/updates/introducing-membermouse-2-0/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 01 Mar 2013 21:05:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://membermouse.com/?p=72\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:501:\"Welcome to MemberMouse 2.0! This version represents a big step forward for the MemberMouse platform. You will notice many improvements in usability and functionality. What you won&#8217;t see are the major improvements that have been made under the hood. These include speed improvements and database query optimization that truly position MemberMouse as the only enterprise-class membership platform available to small businesses today. Look for more improvements to our reporting system coming soon.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Eric Turnnessen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:27:\"\n		\n		\n		\n		\n				\n\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"Start Collecting Money in Minutes with Powerful Checkout Pages\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"https://membermouse.com/updates/start-collecting-money-in-minutes-with-powerful-checkout-pages/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Dec 2012 23:09:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Updates\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://membermouse.com/?p=78\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:687:\"We\'re really excited about the new checkout page! We have given you more opportunities than ever to directly sign up members. All you have to do is start with our built-in template, customize it to your needs and within minutes you can start collecting payments. Collecting payments from your customers the most critical part of your business. That\'s why your checkout page should have advanced technical functionality to run smoothly and securely, a clean design that is easy to understand, dynamic marketing capabilities proven to convert <a class=\"moretag\" href=\"https://membermouse.com/updates/start-collecting-money-in-minutes-with-powerful-checkout-pages/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Eric Turnnessen\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://membermouse.com/category/updates/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:42:\"Requests_Utility_CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:12:{s:4:\"date\";s:29:\"Thu, 20 Dec 2018 01:52:01 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:12:\"x-robots-tag\";s:15:\"noindex, follow\";s:4:\"link\";s:60:\"<https://membermouse.com/wp-json/>; rel=\"https://api.w.org/\"\";s:4:\"vary\";s:33:\"X-Forwarded-Proto,Accept-Encoding\";s:13:\"last-modified\";s:29:\"Wed, 19 Dec 2018 18:44:25 GMT\";s:4:\"etag\";s:34:\"\"19868d4ac3f1a5bf1fbeba259e0f9c36\"\";s:3:\"via\";s:10:\"1.1 google\";s:7:\"alt-svc\";s:5:\"clear\";s:9:\"expect-ct\";s:87:\"max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"\";s:6:\"server\";s:10:\"cloudflare\";s:6:\"cf-ray\";s:20:\"48be7794488533d3-HKG\";}}s:5:\"build\";s:14:\"20181217023028\";}', 'no'),
(294, '_transient_timeout_feed_mod_b27b5af21d80cf3c571790d64af7e81d', '1545277921', 'no'),
(295, '_transient_feed_mod_b27b5af21d80cf3c571790d64af7e81d', '1545270721', 'no'),
(296, '_transient_timeout_feed_6f6b8787c147114b57a3f79e3384e027', '1545277922', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(297, '_transient_feed_6f6b8787c147114b57a3f79e3384e027', 'a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:40:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Academy – MemberMouse\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"https://membermouse.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 19 Dec 2018 18:44:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"https://wordpress.org/?v=4.9.7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:7:{i:0;a:6:{s:4:\"data\";s:51:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"MM Academy EP7: Sales Process Optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://membermouse.com/academy/mm-academy-ep7-sales-process-optimization/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://membermouse.com/academy/mm-academy-ep7-sales-process-optimization/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 18 Aug 2018 20:32:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:6:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:24:\"conversion rate increase\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:21:\"membership businesses\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:20:\"membership marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:26:\"sales process optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:25:\"wordpress membership site\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1475\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:673:\"MemberMouse Academy Episode 7: Sales Process Optimization. Learn what Mitch Bowler is doing to increase his conversion rate and get new members for his art technique wordpress membership website. This episode is jam packed with great conversion tips and tricks! Run time is just over an hour, but it&#8217;s worth watching. Here&#8217;s an overview of what you&#8217;ll learn in this instructive Academy call on sales process optimization: How Mitch Built a Successful Art Technique Site How to Transform Your Passion into a Business (1:44) How to <a class=\"moretag\" href=\"https://membermouse.com/academy/mm-academy-ep7-sales-process-optimization/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://membermouse.com/academy/mm-academy-ep7-sales-process-optimization/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:54:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n		\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"MM Academy EP6: 2 Million Page Views / Month\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"https://membermouse.com/academy/mm-academy-ep6-2-million-page-views-month/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"https://membermouse.com/academy/mm-academy-ep6-2-million-page-views-month/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 20 Jul 2018 15:41:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:7:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:11:\"copywriting\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:23:\"lifetime customer value\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"membermouse\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:19:\"membership business\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:3:\"seo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:28:\"wordpress membership plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1423\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:659:\"MemberMouse Academy Episode 6: In this episode, I interview Special Guest Jason Glaspey, one of the original producers of PaleoPlan.com Jason reveals how he helped bring the site to 2 Million Page Views per month, with revenues well into the six figures. He also shares some great tips on copywriting and how to continuously improve your business. A strong call overall and definitely worth watching. Here&#8217;s an overview of what you&#8217;ll learn in this Academy call: How PaleoPlan Reached 2 Million Page Views / Month How to <a class=\"moretag\" href=\"https://membermouse.com/academy/mm-academy-ep6-2-million-page-views-month/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"https://membermouse.com/academy/mm-academy-ep6-2-million-page-views-month/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"MM Academy EP5: John Warrillow\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://membermouse.com/academy/mm-academy-ep5-john-warrillow/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://membermouse.com/academy/mm-academy-ep5-john-warrillow/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 10 Jun 2018 20:07:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1413\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:732:\"MemberMouse Academy Episode 5: In this episode, I interview Special Guest John Warrillow, author of &#8220;Built to Sell,&#8221; and &#8220;The Automatic Customer.&#8221; John talks about the critical metrics of a membership business, including Lifetime Customer Value, Valuation, Retention and more&#8230; This is an audio only call, but it contains some of the most important topics you need to consider when growing a for-profit membership business. Specifically, the relationship between customer value and customer acquisition cost. Here&#8217;s an overview of what you&#8217;ll learn this this Academy call: How <a class=\"moretag\" href=\"https://membermouse.com/academy/mm-academy-ep5-john-warrillow/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/academy/mm-academy-ep5-john-warrillow/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:51:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"MM Academy EP4: Landing Page Critique\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"https://membermouse.com/academy/landing-page-critique/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://membermouse.com/academy/landing-page-critique/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 21 Apr 2018 18:16:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:6:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:15:\"conversion rate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:17:\"marketing funnels\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:11:\"membermouse\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:15:\"membership site\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:26:\"sales process optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1367\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:627:\"MemberMouse Academy Episode 4: I’m with Ryan Fritz from HurlbutVisuals.com, and we look at ways to improve the conversion rate of his membership site, so his team can bring their world-class cinematography education to a broader audience. Well worth watching! Here’s a few things you’ll learn in this week’s video: * How to improve the perception of value of your membership site * How to better communicate your value proposition with images * How to use video and 3rd party testimonials to increase desire * How <a class=\"moretag\" href=\"https://membermouse.com/academy/landing-page-critique/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/academy/landing-page-critique/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n		\n		\n		\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"MM Academy EP3: Growing Beyond 5 Figures A Month\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://membermouse.com/academy/growing-beyond-5-figures-a-month/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"https://membermouse.com/academy/growing-beyond-5-figures-a-month/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 14 Apr 2018 17:41:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:9:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"adwords\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:9:\"authority\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:15:\"conversion rate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:12:\"free to paid\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:23:\"lifetime customer value\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:11:\"membermouse\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:7;a:5:{s:4:\"data\";s:7:\"options\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:8;a:5:{s:4:\"data\";s:13:\"product shots\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1315\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:590:\"MemberMouse Academy Episode 3: I’m with Kirk Du Plessis from OptionAlpha.com, and we look at ways for him to grow beyond 5 figures a month. Here’s a few things you’ll learn in this week’s video: * How to improve your checkout page for higher conversion * How to better communicate your value proposition with images * How to move members from free to paying customers * How to increase the perceived value of a free product * How to go from being a good marketer to <a class=\"moretag\" href=\"https://membermouse.com/academy/growing-beyond-5-figures-a-month/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"https://membermouse.com/academy/growing-beyond-5-figures-a-month/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:54:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n		\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"MM Academy EP2: Sales Process Optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"https://membermouse.com/academy/sales-process-optimization/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"https://membermouse.com/academy/sales-process-optimization/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 06 Apr 2018 16:55:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:7:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"adwords\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"checkout page\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:15:\"conversion rate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:16:\"get more members\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:16:\"paid advertising\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:13:\"sales process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1307\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:635:\"MemberMouse Academy Episode 2: I&#8217;m with my new friend Luke Ward from BassGorilla.com, and I go through all the very important parts of a membership site sales process. I estimate that if Luke implements my changes, he&#8217;ll be able to 5x his sales! Here&#8217;s a few things you&#8217;ll learn in this week&#8217;s video: * How to improve your checkout page for higher conversion * How to better communicate your value proposition with images * How to streamline your product offering for higher conversion * How to <a class=\"moretag\" href=\"https://membermouse.com/academy/sales-process-optimization/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"https://membermouse.com/academy/sales-process-optimization/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:36:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"MM Academy EP1: Growing to 11,000 Members\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"https://membermouse.com/academy/growing-to-11000-members/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"https://membermouse.com/academy/growing-to-11000-members/#respond\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2018 15:37:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Academy\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"http://membermouse.com/?p=1303\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:676:\"MemberMouse Academy Episode 1: Growing to 11,000 Members with Special Guest Chris Palmer from AngleofAttack.com. Learn how Chris grew his membership site to 11,000 members, plus tips and tricks for scaling your own membership website. Hosted by Dan Caron and Eric Turnnessen of MemberMouse. What you&#8217;ll learn: Why Uniques Products Are Ideal for Membership Sites Automating Customer Support At Every Opportunity How Chris Grew His Membership Site to 11,000 Members Leveraging a Free Product to Get New Members Moving Customers From Free to Paid Subscriptions Use <a class=\"moretag\" href=\"https://membermouse.com/academy/growing-to-11000-members/\">... Continue Reading</a>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Dan Caron\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"https://membermouse.com/academy/growing-to-11000-members/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:46:\"https://membermouse.com/category/academy/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";O:42:\"Requests_Utility_CaseInsensitiveDictionary\":1:{s:7:\"\0*\0data\";a:12:{s:4:\"date\";s:29:\"Thu, 20 Dec 2018 01:52:02 GMT\";s:12:\"content-type\";s:34:\"application/rss+xml; charset=UTF-8\";s:12:\"x-robots-tag\";s:15:\"noindex, follow\";s:4:\"link\";s:60:\"<https://membermouse.com/wp-json/>; rel=\"https://api.w.org/\"\";s:4:\"vary\";s:33:\"X-Forwarded-Proto,Accept-Encoding\";s:13:\"last-modified\";s:29:\"Wed, 19 Dec 2018 18:44:25 GMT\";s:4:\"etag\";s:34:\"\"19868d4ac3f1a5bf1fbeba259e0f9c36\"\";s:3:\"via\";s:10:\"1.1 google\";s:7:\"alt-svc\";s:5:\"clear\";s:9:\"expect-ct\";s:87:\"max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\"\";s:6:\"server\";s:10:\"cloudflare\";s:6:\"cf-ray\";s:20:\"48be779e2f5d84e4-HKG\";}}s:5:\"build\";s:14:\"20181217023028\";}', 'no'),
(298, '_transient_timeout_feed_mod_6f6b8787c147114b57a3f79e3384e027', '1545277923', 'no'),
(299, '_transient_feed_mod_6f6b8787c147114b57a3f79e3384e027', '1545270723', 'no'),
(305, '_transient_timeout_plugin_slugs', '1545358338', 'no'),
(306, '_transient_plugin_slugs', 'a:5:{i:0;s:19:\"akismet/akismet.php\";i:1;s:27:\"gdpr-banner/gdpr-banner.php\";i:2;s:9:\"hello.php\";i:3;s:21:\"membermouse/index.php\";i:4;s:35:\"themify-builder/themify-builder.php\";}', 'no'),
(307, 'gdpr_disable_css', '', 'yes'),
(308, 'gdpr_enable_telemetry_tracker', '', 'yes'),
(309, 'gdpr_use_recaptcha', '', 'yes'),
(310, 'gdpr_recaptcha_site_key', '', 'yes'),
(311, 'gdpr_recaptcha_secret_key', '', 'yes'),
(312, 'gdpr_add_consent_checkboxes_registration', '1', 'yes'),
(313, 'gdpr_add_consent_checkboxes_checkout', '1', 'yes'),
(314, 'gdpr_cookie_popup_content', 'a:4:{s:9:\"necessary\";a:4:{s:4:\"name\";s:9:\"Necessary\";s:6:\"status\";s:8:\"required\";s:12:\"cookies_used\";s:0:\"\";s:10:\"how_we_use\";s:0:\"\";}s:11:\"advertising\";a:4:{s:4:\"name\";s:11:\"Advertising\";s:6:\"status\";s:2:\"on\";s:12:\"cookies_used\";s:0:\"\";s:10:\"how_we_use\";s:0:\"\";}s:9:\"analytics\";a:4:{s:4:\"name\";s:9:\"Analytics\";s:6:\"status\";s:2:\"on\";s:12:\"cookies_used\";s:0:\"\";s:10:\"how_we_use\";s:0:\"\";}s:5:\"other\";a:4:{s:4:\"name\";s:5:\"Other\";s:6:\"status\";s:2:\"on\";s:12:\"cookies_used\";s:0:\"\";s:10:\"how_we_use\";s:0:\"\";}}', 'yes'),
(315, 'gdpr_refresh_after_preferences_update', '1', 'yes'),
(316, 'gdpr_enable_privacy_bar', '1', 'yes'),
(317, 'gdpr_display_cookie_categories_in_bar', '', 'yes'),
(318, 'gdpr_hide_from_bots', '1', 'yes'),
(319, 'gdpr_reconsent_template', 'modal', 'yes');

-- --------------------------------------------------------

--
-- Table structure for table `wp_postmeta`
--

CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `post_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(2, 3, '_wp_page_template', 'default'),
(3, 16, '_edit_last', '1'),
(4, 16, '_edit_lock', '1544753551:1'),
(5, 8, '_edit_lock', '1545100903:1'),
(6, 8, '_edit_last', '1'),
(7, 25, '_edit_last', '1'),
(8, 25, '_edit_lock', '1545271702:1');

-- --------------------------------------------------------

--
-- Table structure for table `wp_posts`
--

CREATE TABLE `wp_posts` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1, 1, '2018-11-20 23:34:16', '2018-11-20 23:34:16', 'Welcome to WordPress. This is your first post. Edit or delete it, then start writing!', 'Hello world!', '', 'publish', 'open', 'open', '', 'hello-world', '', '', '2018-11-20 23:34:16', '2018-11-20 23:34:16', '', 0, 'http://localhost/wordpress/?p=1', 0, 'post', '', 1),
(2, 1, '2018-11-20 23:34:16', '2018-11-20 23:34:16', 'This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href=\"http://localhost/wordpress/wp-admin/\">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Sample Page', '', 'publish', 'closed', 'open', '', 'sample-page', '', '', '2018-11-20 23:34:16', '2018-11-20 23:34:16', '', 0, 'http://localhost/wordpress/?page_id=2', 0, 'page', '', 0),
(3, 1, '2018-11-20 23:34:16', '2018-11-20 23:34:16', '<h2>Who we are</h2><p>Our website address is: http://localhost/wordpress.</p><h2>What personal data we collect and why we collect it</h2><h3>Comments</h3><p>When visitors leave comments on the site we collect the data shown in the comments form, and also the visitor&#8217;s IP address and browser user agent string to help spam detection.</p><p>An anonymized string created from your email address (also called a hash) may be provided to the Gravatar service to see if you are using it. The Gravatar service privacy policy is available here: https://automattic.com/privacy/. After approval of your comment, your profile picture is visible to the public in the context of your comment.</p><h3>Media</h3><p>If you upload images to the website, you should avoid uploading images with embedded location data (EXIF GPS) included. Visitors to the website can download and extract any location data from images on the website.</p><h3>Contact forms</h3><h3>Cookies</h3><p>If you leave a comment on our site you may opt-in to saving your name, email address and website in cookies. These are for your convenience so that you do not have to fill in your details again when you leave another comment. These cookies will last for one year.</p><p>If you have an account and you log in to this site, we will set a temporary cookie to determine if your browser accepts cookies. This cookie contains no personal data and is discarded when you close your browser.</p><p>When you log in, we will also set up several cookies to save your login information and your screen display choices. Login cookies last for two days, and screen options cookies last for a year. If you select &quot;Remember Me&quot;, your login will persist for two weeks. If you log out of your account, the login cookies will be removed.</p><p>If you edit or publish an article, an additional cookie will be saved in your browser. This cookie includes no personal data and simply indicates the post ID of the article you just edited. It expires after 1 day.</p><h3>Embedded content from other websites</h3><p>Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.</p><p>These websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.</p><h3>Analytics</h3><h2>Who we share your data with</h2><h2>How long we retain your data</h2><p>If you leave a comment, the comment and its metadata are retained indefinitely. This is so we can recognize and approve any follow-up comments automatically instead of holding them in a moderation queue.</p><p>For users that register on our website (if any), we also store the personal information they provide in their user profile. All users can see, edit, or delete their personal information at any time (except they cannot change their username). Website administrators can also see and edit that information.</p><h2>What rights you have over your data</h2><p>If you have an account on this site, or have left comments, you can request to receive an exported file of the personal data we hold about you, including any data you have provided to us. You can also request that we erase any personal data we hold about you. This does not include any data we are obliged to keep for administrative, legal, or security purposes.</p><h2>Where we send your data</h2><p>Visitor comments may be checked through an automated spam detection service.</p><h2>Your contact information</h2><h2>Additional information</h2><h3>How we protect your data</h3><h3>What data breach procedures we have in place</h3><h3>What third parties we receive data from</h3><h3>What automated decision making and/or profiling we do with user data</h3><h3>Industry regulatory disclosure requirements</h3>', 'Privacy Policy', '', 'draft', 'closed', 'open', '', 'privacy-policy', '', '', '2018-11-20 23:34:16', '2018-11-20 23:34:16', '', 0, 'http://localhost/wordpress/?page_id=3', 0, 'page', '', 0),
(5, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', 'Welcome [MM_Member_Data name=\'firstName\']!\nThis is the member home page for [MM_Member_Data name=\'membershipName\'] members.', '[MM_Member_Data name=\"membershipName\"] Home Page', '', 'publish', 'open', 'open', '', 'home', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(6, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '[MM_Member_Decision isMember=\'true\' status=\'active|overdue\']\nClick the link below to cancel your membership:\n<a href=\"[MM_Member_Link type=\'cancelMembership\']\">Cancel Membership</a>\n[/MM_Member_Decision]\n\n[MM_Member_Decision isMember=\'true\' status=\'pending_cancel\']\nYour subscription has been canceled and you will no longer be billed.\nYour account will remain active until [MM_Member_Data name=\'cancellationDate\' dateFormat=\'M j, Y\'].\n[/MM_Member_Decision]\n\n[MM_Member_Decision status=\'canceled\']\nYour account is now canceled.\n[/MM_Member_Decision]\n\n[MM_Member_Decision isMember=\'false\']\nYour account is canceled.\n[/MM_Member_Decision]', 'Cancel Membership', '', 'publish', 'open', 'open', '', 'cancel', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(7, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', 'An error has occurred:\n<span style=\"color:#cc0000;\">[MM_Error_Message]</span>\n\nIf you continue to experience this problem, please contact our support team at <a href=\"mailto:[MM_Employee_Data name=\'email\']\">[MM_Employee_Data name=\'email\']</a>.', 'Error', '', 'publish', 'open', 'open', '', 'mm-error', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(8, 1, '2018-11-21 06:34:48', '2018-11-21 06:34:48', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">\r\n<div class=\"loginbox\">\r\n\r\n[MM_Form_Message type=\'success\']\r\n[MM_Form_Message type=\'error\']\r\n<h3>Members Login Here</h3>\r\n<div class=\"mm-field-column username\">[MM_Form_Field name=\'username\']</div>\r\n<div class=\"mm-field-column password\">[MM_Form_Field name=\'password\']</div>\r\n<div class=\"forgotpass\"><a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a></div>\r\n<div class=\"loginbtn\">[MM_Form_Button type=\'login\' label=\'Login\']</div>\r\n<div class=\"rememberme\">\r\n<label for=\"rememberme\" class=\"mm-remember-me\">\r\n<input name=\"rememberme\" id=\"rememberme\" type=\"checkbox\" checked=\"checked\" value=\"forever\">\r\nRemember me</label>\r\n</div>\r\n</div>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'publish', 'open', 'open', '', 'login', '', '', '2018-12-18 02:13:09', '2018-12-18 02:13:09', '', 0, '', 0, 'page', '', 0),
(9, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', 'You have successfully logged out.', 'Logout', '', 'publish', 'open', 'open', '', 'logout', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(10, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '[MM_Form type=\'forgotPassword\']\n<div class=\"mm-forgot-password\">\n[MM_Form_Message type=\'error\']\n[MM_Form_Message type=\'success\']\n\n<h3>Enter your email address below</h3>\n[MM_Form_Field name=\'email\']\n[MM_Form_Button type=\'submit\' label=\'Submit\']\n</div>\n[/MM_Form]', 'Forgot Password', '', 'publish', 'open', 'open', '', 'forgot-password', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(11, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '[MM_Member_Decision isMember=\'true\']\nYou are already logged in! Need to log out? You can do that <a href=\"[MM_CorePage_Link type=\'logout\']\" title=\"Log out\">here</a>.\n[/MM_Member_Decision]\n\n[MM_Member_Decision isMember=\'false\']\n[MM_Form type=\'resetPassword\']\n<div class=\"mm-resetpassword\">\n[MM_Form_Message type=\'error\']\n\n<h3>Reset your password</h3>\n\n<table>\n    <tr>\n      	<td class=\"mm-label-column\">\n      		<span class=\'mm-label\'>Password</span>\n      	</td>\n      	<td class=\"mm-field-column\">\n      		[MM_Form_Field name=\'password\']\n      	</td>\n    </tr>\n    <tr>\n      	<td class=\"mm-label-column\">\n      		<span class=\'mm-label\'>Confirm Password</span>\n      	</td>\n      	<td class=\"mm-field-column\">\n      		[MM_Form_Field name=\'password-confirm\']\n      	</td>\n    </tr>\n    <tr>\n      	<td class=\"mm-label-column\"></td>\n      	<td class=\"mm-field-column\">\n      		[MM_Form_Button type=\'submit\' label=\'Submit\']\n      	</td>\n    </tr>\n</table>\n</div>\n[/MM_Form]\n[/MM_Member_Decision]', 'Reset Password', '', 'publish', 'open', 'open', '', 'reset-password', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(12, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '<div class=\"mm-checkoutContainer\">\n[MM_Form type=\'checkout\']\n[MM_Form_Message type=\'error\']\n	<div class=\"mm_left_column\">\n		[MM_Form_Section type=\'accountInfo\']\n		<div id=\"mm-account-information-section\" class=\"mm-checkoutInfoBlock\">\n			<h3>Account Information</h3>\n			<p class=\"mm-formField\">\n				<label>First Name:</label>\n				[MM_Form_Field type=\'input\' name=\'firstName\' customAttributes=\'placeholder=\"First Name\"\']\n			</p>\n			<p class=\"mm-formField\">\n				<label>Last Name:</label>\n				[MM_Form_Field type=\'input\' name=\'lastName\' customAttributes=\'placeholder=\"Last Name\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Email:</label>\n				[MM_Form_Field type=\'input\' name=\'email\' customAttributes=\'placeholder=\"Email Address\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Password:</label>\n				[MM_Form_Field type=\'input\' name=\'password\' customAttributes=\'placeholder=\"Password\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Phone:</label>\n				[MM_Form_Field type=\'input\' name=\'phone\' isRequired=\'false\' customAttributes=\'placeholder=\"Phone Number\"\'] \n			</p>\n\n		</div>\n		[/MM_Form_Section]		\n		[MM_Form_Section type=\'billingInfo\']\n		<div id=\"mm-billing-information-section\" class=\"mm-checkoutInfoBlock\">\n			<h3>Billing Details</h3>\n			<p class=\"mm-ccLogos\"><img src=\"http://localhost/wordpress/wp-content/plugins/membermouse/resources/images/cclogos.gif\" width=\"199\" height=\"30\" alt=\"Visa, Master Card, American Express, Discover\" />\n			</p>\n			<p class=\"mm-formField\">\n				<label>Credit Card:</label>\n				[MM_Form_Field name=\'ccNumber\' customAttributes=\'placeholder=\"Credit Card Number\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Security Code:</label>\n				[MM_Form_Field name=\'ccSecurityCode\' customAttributes=\'placeholder=\"Security Code\"\'] \n			</p>\n			<p id=\"mm-checkout-expiration-date\" class=\"mm-checkout-expiration-date mm-formField\">\n				<label>Expiration Date: </label>\n				[MM_Form_Field name=\'ccExpirationDate\'] \n			</p>\n			\n			<p style=\"clear:both;\"></p>\n			 \n			<h3 class=\"mm-hr\">Billing Address</h3>\n			\n			<p class=\"mm-formField\">\n				<label>Address:</label>\n				[MM_Form_Field name=\'billingAddress\' customAttributes=\'placeholder=\"Billing Address\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>City:</label>\n				[MM_Form_Field name=\'billingCity\' customAttributes=\'placeholder=\"Billing City\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>State:</label>\n				[MM_Form_Field name=\'billingState\' customAttributes=\'placeholder=\"Billing State\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Zip:</label>\n				[MM_Form_Field name=\'billingZipCode\' customAttributes=\'placeholder=\"Billing Zip Code\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Country:</label>\n				[MM_Form_Field name=\'billingCountry\'] \n			</p>\n\n		</div>\n		[/MM_Form_Section]\n		[MM_Form_Section type=\'shippingInfo\']\n		<div id=\"mm-shipping-information-section\" class=\"mm-checkoutInfoBlock\">\n\n			<h3>Shipping Address</h3>\n			\n			<p id=\"mm-shipping-method-block\" class=\"mm-formField\">\n				<label>Shipping Method:</label>\n				[MM_Form_Field name=\'shippingMethod\'] \n			</p>\n			<p class=\"mm-formField\"> \n				Shipping is the same as billing\n				[MM_Form_Field name=\'shippingSameAsBilling\']\n			</p>\n			\n			[MM_Form_Subsection type=\'shippingAddress\']\n			<div>\n				<p class=\"mm-formField\">\n					<label>Address:</label>\n					[MM_Form_Field name=\'shippingAddress\' customAttributes=\'placeholder=\"Shipping Address\"\'] \n				</p>\n				<p class=\"mm-formField\">\n					<label>City:</label>\n					[MM_Form_Field name=\'shippingCity\' customAttributes=\'placeholder=\"Shipping City\"\'] \n				</p>\n				<p class=\"mm-formField\">\n					<label>State:</label>\n					[MM_Form_Field name=\'shippingState\' customAttributes=\'placeholder=\"Shipping State\"\'] \n				</p>\n				<p class=\"mm-formField\">\n					<label>Zip :</label>\n					[MM_Form_Field name=\'shippingZipCode\' customAttributes=\'placeholder=\"Shipping Zip Code\"\'] \n				</p>\n				<p class=\"mm-formField\">\n					<label>Country:</label>\n					[MM_Form_Field name=\'shippingCountry\'] \n				</p>\n			</div>\n			[/MM_Form_Subsection] 			\n		</div>\n		[/MM_Form_Section]\n		[MM_Form_Section type=\'coupon\']\n		<div id=\"mm-coupon-block\" class=\"mm-couponSection mm-checkoutInfoBlock\">\n\n			<h3>Coupons</h3>\n			<p class=\"mm-formField\"> \n				[MM_Form_Field name=\'couponCode\'] \n				<a href=\"[MM_Form_Button type=\'applyCoupon\']\" class=\"mm-button\">Apply Coupon</a>\n			</p>\n				\n			[MM_Form_Message type=\'couponSuccess\']\n			[MM_Form_Message type=\'couponError\']  \n		</div>\n		[/MM_Form_Section]\n	</div>\n	<div class=\"mm_right_column\">\n		<div class=\"mm-checkoutSection2\">\n			<h2>[MM_Form_Data name=\'productName\' useAccessName=\'false\']</h2>\n			<p class=\"mm-productDesc\">[MM_Form_Data name=\'productDescription\']</p>\n			<ul>\n				<li><span class=\"mm-prices\">Product Price:</span> [MM_Form_Data name=\'productPriceDescription\'] </li>\n				[MM_Order_Decision isShippable=\'true\']\n				<li><span class=\"mm-prices\">Shipping Price:</span> [MM_Form_Data name=\'shippingPrice\'] </li>\n				[/MM_Order_Decision]\n				[MM_Order_Decision isDiscounted=\'true\']\n				<li><span class=\"mm-prices\">Discount:</span> [MM_Form_Data name=\'discount\'] </li>\n				[/MM_Order_Decision]\n				<li><span class=\"mm-prices\">Total Price:</span> [MM_Form_Data name=\'totalPrice\'] </li>\n			</ul>\n		</div>\n		<div class=\"mm-purchaseSection\">\n			<div class=\"mm-giftsection\">\n				[MM_Member_Decision isMember=\'true\']\n				<p>[MM_Form_Field type=\'input\' name=\'gift\'] Is this a gift?</p>\n				[/MM_Member_Decision]\n			</div>\n			<div class=\"mm-paymentbuttons\">\n				[MM_Form_Button type=\'all\' label=\'Submit Order\' color=\'orange\']\n			</div>\n		</div>\n	</div>\n[/MM_Form]\n</div>', 'Checkout', '', 'publish', 'open', 'open', '', 'checkout', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(13, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '<div class=\"mm-checkoutContainer\">\n[MM_Form type=\'checkout\']\n[MM_Form_Message type=\'error\']\n	<div class=\"mm_left_column\">\n		[MM_Form_Section type=\'accountInfo\']\n		<div id=\"mm-account-information-section\" class=\"mm-checkoutInfoBlock\">\n			<h3>Account Information</h3>\n			<p class=\"mm-formField\">\n				<label>First Name:</label>\n				[MM_Form_Field type=\'input\' name=\'firstName\' customAttributes=\'placeholder=\"First Name\"\']\n			</p>\n			<p class=\"mm-formField\">\n				<label>Last Name:</label>\n				[MM_Form_Field type=\'input\' name=\'lastName\' customAttributes=\'placeholder=\"Last Name\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Email:</label>\n				[MM_Form_Field type=\'input\' name=\'email\' customAttributes=\'placeholder=\"Email Address\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Password:</label>\n				[MM_Form_Field type=\'input\' name=\'password\' customAttributes=\'placeholder=\"Password\"\'] \n			</p>\n			<p class=\"mm-formField\">\n				<label>Phone:</label>\n				[MM_Form_Field type=\'input\' name=\'phone\' isRequired=\'false\' customAttributes=\'placeholder=\"Phone Number\"\'] \n			</p>\n		</div>\n		[/MM_Form_Section]		\n		\n		[MM_Form_Section type=\'coupon\']\n		<div id=\"mm-coupon-block\" class=\"mm-couponSection mm-checkoutInfoBlock\">\n\n			<h3>Gift Code</h3>\n			<p class=\"mm-formField\"> \n				[MM_Form_Field name=\'couponCode\'] \n				<a href=\"[MM_Form_Button type=\'applyCoupon\']\" class=\"mm-button\">Apply Gift Code</a>\n			</p>\n				\n			[MM_Form_Message type=\'couponSuccess\']\n			[MM_Form_Message type=\'couponError\']  \n		</div>\n		[/MM_Form_Section]\n	</div>\n	<div class=\"mm_right_column\">\n		<div class=\"mm-checkoutSection2\">\n			<h2>[MM_Form_Data name=\'productName\']</h2>\n			<p class=\"mm-productDesc\">[MM_Form_Data name=\'productDescription\']</p>\n		</div>\n		<div class=\"mm-purchaseSection\">\n			[MM_Order_Decision isDiscounted=\'true\']\n				<a href=\"[MM_Form_Button type=\'submit\']\" class=\"mm-button large green\">Redeem Gift</a>\n			[/MM_Order_Decision]\n			[MM_Order_Decision isDiscounted=\'false\']\n				<em>Enter a valid gift code to redeem your gift</em>\n			[/MM_Order_Decision]\n		</div>\n	</div>\n	\n	[MM_Form_Field type=\'hidden\' name=\'phone\'] \n	[MM_Form_Field type=\'hidden\' name=\'billingAddress\'] \n	[MM_Form_Field type=\'hidden\' name=\'billingCity\']\n	[MM_Form_Field type=\'hidden\' name=\'billingState\'] \n	[MM_Form_Field type=\'hidden\' name=\'billingZipCode\'] \n	[MM_Form_Field type=\'hidden\' name=\'billingCountry\'] \n	[MM_Form_Field type=\'hidden\' name=\'shippingAddress\'] \n	[MM_Form_Field type=\'hidden\' name=\'shippingCity\'] \n	[MM_Form_Field type=\'hidden\' name=\'shippingState\'] \n	[MM_Form_Field type=\'hidden\' name=\'shippingZipCode\'] \n	[MM_Form_Field type=\'hidden\' name=\'shippingCountry\']\n[/MM_Form]\n</div>', 'Redeem Gift', '', 'publish', 'open', 'open', '', 'redeem-gift', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(14, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '[MM_Form type=\'myaccount\']\n<div class=\"mm-myaccount\">\n  	[MM_Form_Message type=\'error\']\n  \n  	<div id=\"mm-account-details-section\" class=\"mm-myaccount-module\">\n	    <div id=\"mm-account-details-header\" class=\"mm-myaccount-module-header\"> \n	    	<i class=\"fa fa-user mm-icon blue\" style=\" font-size:1.2em; position:relative; top:1px;\"></i>	    	Account Details \n	    	<a href=\"[MM_Form_Button type=\'updateAccountDetails\']\" id=\"mm-account-details-update-button\" class=\"mm-update-button\">update</a>\n	    </div>\n	    <div class=\"mm-myaccount-content-wrapper\">\n		    <div id=\"mm-account-details-body\" class=\"mm-myaccount-block\">\n		    	<p id=\"mm-element-first-name\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-first-name\" class=\"mm-myaccount-label\">\n			    		First Name: \n			    	</span>\n			    	<span id=\"mm-data-first-name\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'firstName\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-last-name\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-last-name\" class=\"mm-myaccount-label\">\n			    		Last Name: \n			    	</span>\n			    	<span id=\"mm-data-last-name\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'lastName\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-phone\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-phone\" class=\"mm-myaccount-label\">\n			    		Phone: \n			    	</span>\n			    	<span id=\"mm-data-phone\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'phone\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-email\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-email\" class=\"mm-myaccount-label\">\n			    		Email: \n			    	</span>\n			    	<span id=\"mm-data-email\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'email\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-username\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-username\" class=\"mm-myaccount-label\">\n			    		Username: \n			    	</span>\n			    	<span id=\"mm-data-username\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'username\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-password\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-password\" class=\"mm-myaccount-label\">\n			    		Password: \n			    	</span>\n			    	<span id=\"mm-data-password\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'password\']\n			    	</span>\n		    	</p>\n		    	<p id=\"mm-element-registration\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-registration\" class=\"mm-myaccount-label\">\n			    		Member Since: \n			    	</span>\n			    	<span id=\"mm-data-registration\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'registrationDate\']\n			    	</span>\n		    	</p>\n		    	[MM_Member_Decision status=\'pending_cancel\']\n		    	<p id=\"mm-element-pending-cancellation\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-pending-cancellation\" class=\"mm-myaccount-label\">\n			    		Account will cancel on [MM_Member_Data name=\'cancellationDate\' dateFormat=\'M j, Y\']\n			    	</span>\n		    	</p>\n		    	[/MM_Member_Decision]\n		    	<p id=\"mm-element-membership-level\" class=\"mm-myaccount-element\">\n			    	<span id=\"mm-label-membership-level\" class=\"mm-myaccount-label\">\n			    		Membership Level: \n			    	</span>\n			    	<span id=\"mm-data-membership-level\" class=\"mm-myaccount-data\">\n			    		[MM_Form_Data name=\'membershipLevelName\']\n			    		[MM_Member_Decision status=\'!pending_cancel\']\n			    		<a href=\"[MM_Form_Button type=\'cancelMembership\']\" class=\"mm-cancel-membership-button\">cancel</a>\n			    		[/MM_Member_Decision]\n			    	</span>\n		    	</p>\n		    </div>\n		    <div id=\"mm-account-profile-body\" class=\"mm-myaccount-block\">\n		    	[MM_Form_Data name=\'customFields\']\n		    </div>\n	    </div>\n  	</div>\n  \n  	<div id=\"mm-billing-shipping-info-section\" class=\"mm-myaccount-module\">\n    	<div id=\"mm-billing-info-container\" class=\"mm-myaccount-block\">\n      		<div id=\"mm-billing-info-header\" class=\"mm-myaccount-module-header\">\n      			<i class=\"fa fa-credit-card mm-icon blue\" style=\" font-size:1.2em; position:relative; top:1px;\"></i> \n      			Billing Address \n      			<a href=\"[MM_Form_Button type=\'updateBillingInfo\']\" id=\"mm-billing-info-update-button\" class=\"mm-update-button\">update</a>\n      		</div>\n      		<div class=\"mm-myaccount-content-wrapper\">\n	      		<div id=\"mm-billing-info-body\"> \n			    	<p id=\"mm-element-billing-address\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-billing-address\" class=\"mm-myaccount-label\">\n				    		Address: \n				    	</span>\n				    	<span id=\"mm-data-billing-address\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'billingAddress\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-billing-city\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-billing-city\" class=\"mm-myaccount-label\">\n				    		City: \n				    	</span>\n				    	<span id=\"mm-data-billing-city\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'billingCity\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-billing-state\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-billing-state\" class=\"mm-myaccount-label\">\n				    		State: \n				    	</span>\n				    	<span id=\"mm-data-billing-state\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'billingState\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-billing-zip-code\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-billing-zip-code\" class=\"mm-myaccount-label\">\n				    		Zip Code: \n				    	</span>\n				    	<span id=\"mm-data-billing-zip-code\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'billingZipCode\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-billing-country\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-billing-country\" class=\"mm-myaccount-label\">\n				    		Country: \n				    	</span>\n				    	<span id=\"mm-data-billing-country\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'billingCountry\']\n				    	</span>\n			    	</p>\n	      		</div>\n      		</div>\n    	</div>\n    	<div id=\"mm-shipping-info-container\" class=\"mm-myaccount-block\">\n      		<div id=\"mm-shipping-info-header\" class=\"mm-myaccount-module-header\">\n      			<i class=\"fa fa-truck mm-icon blue\" style=\" font-size:1.2em; position:relative; top:1px;\"></i>      			Shipping Address \n      			<a href=\"[MM_Form_Button type=\'updateShippingInfo\']\" id=\"mm-shipping-info-update-button\" class=\"mm-update-button\">update</a>\n      		</div>\n      		<div class=\"mm-myaccount-content-wrapper\">\n	      		<div id=\"mm-shipping-info-body\"> \n	      			<p id=\"mm-element-shipping-address\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-shipping-address\" class=\"mm-myaccount-label\">\n				    		Address: \n				    	</span>\n				    	<span id=\"mm-data-shipping-address\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'shippingAddress\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-shipping-city\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-shipping-city\" class=\"mm-myaccount-label\">\n				    		City: \n				    	</span>\n				    	<span id=\"mm-data-shipping-city\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'shippingCity\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-shipping-state\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-shipping-state\" class=\"mm-myaccount-label\">\n				    		State: \n				    	</span>\n				    	<span id=\"mm-data-shipping-state\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'shippingState\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-shipping-zip-code\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-shipping-zip-code\" class=\"mm-myaccount-label\">\n				    		Zip Code: \n				    	</span>\n				    	<span id=\"mm-data-shipping-zip-code\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'shippingZipCode\']\n				    	</span>\n			    	</p>\n			    	<p id=\"mm-element-shipping-country\" class=\"mm-myaccount-element\">\n				    	<span id=\"mm-label-shipping-country\" class=\"mm-myaccount-label\">\n				    		Country: \n				    	</span>\n				    	<span id=\"mm-data-shipping-country\" class=\"mm-myaccount-data\">\n				    		[MM_Form_Data name=\'shippingCountry\']\n				    	</span>\n			    	</p>\n	      		</div>\n      		</div>\n    	</div>\n	</div>\n  \n  	<div id=\"mm-subscription-info-section\" class=\"mm-myaccount-module\">\n    	<div id=\"mm-subscription-info-header\" class=\"mm-myaccount-module-header\"> \n    		<i class=\"fa fa-refresh mm-icon blue\" style=\" font-size:1.2em; position:relative; top:1px;\"></i> \n    		Subscriptions \n    	</div>\n    	<div class=\"mm-myaccount-content-wrapper\">\n	    	<div id=\"mm-subscription-info-body\"> \n	    		[MM_Form_Data name=\'subscriptions\']\n	    	</div>\n    	</div>\n  	</div>\n  \n  	<div id=\"mm-order-history-section\" class=\"mm-myaccount-module\">\n    	<div id=\"mm-order-history-header\" class=\"mm-myaccount-module-header\">\n    		<i class=\"fa fa-shopping-cart mm-icon blue\" style=\" font-size:1.2em; position:relative; top:1px;\"></i>    		Order History (most recent orders)\n    		<a href=\"[MM_Form_Button type=\'viewOrderHistory\']\" id=\"mm-order-history-view-all-button\" class=\"mm-update-button\">view all</a>\n    	</div>\n    	<div id=\"mm-order-history-body\" class=\"mm-myaccount-content-wrapper\">\n      		[MM_Form_Data name=\'orderHistory\']\n    	</div>\n  	</div>\n  	\n  	[MM_Form_Section type=\'gifts\']\n  	<div id=\"mm-gifts-section\" class=\"mm-myaccount-module\">\n    	<div id=\"mm-gifts-header\" class=\"mm-myaccount-module-header\">\n    		<i class=\"fa fa-gift mm-icon purple\" style=\" font-size:1.2em; position:relative; top:1px;\"></i>    		Gifts Purchased (most recent gifts)\n    		<a href=\"[MM_Form_Button type=\'viewGiftHistory\']\" id=\"mm-gifts-view-all-button\" class=\"mm-update-button\">view all</a>\n    	</div>\n    	<div id=\"mm-gifts-body\" class=\"mm-myaccount-content-wrapper\">\n      		[MM_Form_Data name=\'gifts\']\n    	</div>\n  	</div>\n  	[/MM_Form_Section]\n    \n    [MM_Form_Section type=\'socialLogin\']\n    <div id=\"mm-social-login-section\" class=\"mm-myaccount-module\">\n   		<div id=\"mm-social-login-header\" class=\"mm-myaccount-module-header\"> \n    	Social Networks\n    	</div>\n        <div class=\"mm-myaccount-content-wrapper\">\n	   	<div id=\"mm-social-login-body\">\n	    	[MM_Form_Data name=\'socialLogin\']\n	    </div>\n   		</div>\n     </div>\n     [/MM_Form_Section]\n\n</div>\n[/MM_Form]', 'My Account', '', 'publish', 'open', 'open', '', 'myaccount', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(15, 1, '2018-11-21 06:34:48', '0000-00-00 00:00:00', '\n<h3>Thank you for your order, [MM_Member_Data name=\'firstName\']!</h3>\n\n<p>\n<strong>Your login credentials are:</strong><br/>\nUsername: [MM_Member_Data name=\'username\']<br/>\nPassword: <em>Hidden for security purposes</em>\n</p>\n\n[MM_Order_Decision isGift=\'true\']\n<p>\nThis item was purchased as a gift. The following link can be used to redeem the gift:<br/>\n[MM_Order_Data name=\'giftLink\']\n</p>\n[/MM_Order_Decision]\n\n<p>\n<strong>Here are your order details:</strong><br/>\nName: [MM_Member_Data name=\'firstName\'] [MM_Member_Data name=\'lastName\']<br/>\nEmail: [MM_Member_Data name=\'email\']\n</p>\n\n[MM_Order_Decision isFree=\'false\']\n<p>\nOrder ID: [MM_Order_Data name=\'id\']<br/>\nSubtotal: [MM_Order_Data name=\'subtotal\' doFormat=\'true\']<br/>\n[MM_Order_Subdecision isDiscounted=\'true\']\nDiscount: [MM_Order_Data name=\'discount\' doFormat=\'true\']<br/>\n[/MM_Order_Subdecision]\n[MM_Order_Subdecision isShippable=\'true\']\nShipping: [MM_Order_Data name=\'shipping\' doFormat=\'true\']<br/>\n[/MM_Order_Subdecision]\nOrder Total: [MM_Order_Data name=\'total\' doFormat=\'true\']\n</p>\n\n<p>\nBilling Address:<br/>\n[MM_Order_Data name=\'billingAddress\']<br/>\n[MM_Order_Data name=\'billingCity\'], [MM_Order_Data name=\'billingState\'] [MM_Order_Data name=\'billingZipCode\']<br/>\n[MM_Order_Data name=\'billingCountry\']<br/>\n</p>\n[/MM_Order_Decision]\n\n[MM_Order_Decision isShippable=\'true\']\n<p>\nShipping Address:<br/>\n[MM_Order_Data name=\'shippingAddress\']<br/>\n[MM_Order_Data name=\'shippingCity\'], [MM_Order_Data name=\'shippingState\'] [MM_Order_Data name=\'shippingZipCode\']<br/>\n[MM_Order_Data name=\'shippingCountry\']<br/><br/>\n\nShipping Method: [MM_Order_Data name=\'shippingMethod\']\n</p>\n[/MM_Order_Decision]\n\n<p>If you have any questions concerning your order, feel free to contact us at <a href=\"mailto:[MM_Employee_Data name=\'email\']\">[MM_Employee_Data name=\'email\']</a>.</p>', 'Thank You', '', 'publish', 'open', 'open', '', 'confirmation', '', '', '0000-00-00 00:00:00', '0000-00-00 00:00:00', '', 0, '', 0, 'page', '', 0),
(16, 1, '2018-12-14 02:05:49', '2018-12-14 02:05:49', '', 'Member dashboard', '', 'publish', 'closed', 'closed', '', 'member-dashboard', '', '', '2018-12-14 02:05:49', '2018-12-14 02:05:49', '', 0, 'http://localhost/wordpress/?page_id=16', 0, 'page', '', 0),
(17, 1, '2018-12-14 02:05:49', '2018-12-14 02:05:49', '', 'Member dashboard', '', 'inherit', 'closed', 'closed', '', '16-revision-v1', '', '', '2018-12-14 02:05:49', '2018-12-14 02:05:49', '', 16, 'http://localhost/wordpress/2018/12/14/16-revision-v1/', 0, 'revision', '', 0),
(18, 1, '2018-12-17 02:05:45', '2018-12-17 02:05:45', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">[MM_Form_Message type=\'error\']\r\n[MM_Form_Message type=\'success\']\r\n<h3>Members Login Here</h3>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\">[MM_Form_Field name=\'username\']</td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\">[MM_Form_Field name=\'password\']</td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\">[MM_Form_Button type=\'login\' label=\'Login\']\r\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']</td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"><a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-17 02:05:45', '2018-12-17 02:05:45', '', 8, 'http://localhost/wordpress/2018/12/17/8-revision-v1/', 0, 'revision', '', 0),
(19, 1, '2018-12-18 02:12:57', '2018-12-18 02:12:57', '[MM_Member_Decision isMember=\'true\']\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\n[/MM_Member_Decision]\n\n[MM_Member_Decision isMember=\'false\']\n[MM_Form type=\'login\']\n<div class=\"mm-login\">\n<div class=\"loginbox\">\n\n[MM_Form_Message type=\'success\']\n[MM_Form_Message type=\'error\']\n<h3>Members Login Here</h3>\n<div class=\"mm-field-column username\">[MM_Form_Field name=\'username\']</div>\n<div class=\"mm-field-column password\">[MM_Form_Field name=\'password\']</div>\n<div class=\"forgotpass\"><a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a></div>\n<div class=\"loginbtn\">[MM_Form_Button type=\'login\' label=\'Login\']</div>\n<div class=\"rememberme\">\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']\n</div>\n</div>\n</div>\n[/MM_Form]\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-autosave-v1', '', '', '2018-12-18 02:12:57', '2018-12-18 02:12:57', '', 8, 'http://localhost/wordpress/2018/12/17/8-autosave-v1/', 0, 'revision', '', 0),
(20, 1, '2018-12-17 02:11:24', '2018-12-17 02:11:24', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">[MM_Form_Message type=\'error\']\r\n[MM_Form_Message type=\'success\']\r\n<div class=\"loginbox\">\r\n<h3>Members Login Here</h3>\r\n[MM_Form_Field name=\'username\']\r\n\r\n[MM_Form_Field name=\'password\']\r\n\r\n[MM_Form_Button type=\'login\' label=\'Login\']\r\n\r\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']\r\n\r\n<a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a>\r\n</div>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-17 02:11:24', '2018-12-17 02:11:24', '', 8, 'http://localhost/wordpress/2018/12/17/8-revision-v1/', 0, 'revision', '', 0),
(21, 1, '2018-12-17 02:17:04', '2018-12-17 02:17:04', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">[MM_Form_Message type=\'error\']\r\n[MM_Form_Message type=\'success\']\r\n<div class=\"loginbox\">\r\n<h3>Members Login Here</h3>\r\n\r\n<div class=\"mm-field-column username\">\r\n[MM_Form_Field name=\'username\']\r\n</div>\r\n\r\n<div class=\"mm-field-column password\">\r\n[MM_Form_Field name=\'password\']\r\n</div>\r\n\r\n<div class=\"forgotpass\">\r\n<a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a>\r\n</div>\r\n<div class=\"loginbtn\">\r\n[MM_Form_Button type=\'login\' label=\'Login\']\r\n</div>\r\n<div class=\"rememberme\">\r\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']\r\n</div>\r\n</div>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-17 02:17:04', '2018-12-17 02:17:04', '', 8, 'http://localhost/wordpress/2018/12/17/8-revision-v1/', 0, 'revision', '', 0),
(22, 1, '2018-12-17 02:18:34', '2018-12-17 02:18:34', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">\r\n\r\n<div class=\"loginbox\">\r\n<h3>Members Login Here</h3>\r\n\r\n[MM_Form_Message type=\'success\']\r\n[MM_Form_Message type=\'error\']\r\n\r\n<div class=\"mm-field-column username\">\r\n[MM_Form_Field name=\'username\']\r\n</div>\r\n\r\n<div class=\"mm-field-column password\">\r\n[MM_Form_Field name=\'password\']\r\n</div>\r\n\r\n<div class=\"forgotpass\">\r\n<a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a>\r\n</div>\r\n<div class=\"loginbtn\">\r\n[MM_Form_Button type=\'login\' label=\'Login\']\r\n</div>\r\n<div class=\"rememberme\">\r\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']\r\n</div>\r\n</div>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-17 02:18:34', '2018-12-17 02:18:34', '', 8, 'http://localhost/wordpress/2018/12/17/8-revision-v1/', 0, 'revision', '', 0),
(23, 1, '2018-12-17 02:19:08', '2018-12-17 02:19:08', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">\r\n\r\n<div class=\"loginbox\">\r\n\r\n[MM_Form_Message type=\'success\']\r\n[MM_Form_Message type=\'error\']\r\n\r\n<h3>Members Login Here</h3>\r\n\r\n\r\n<div class=\"mm-field-column username\">\r\n[MM_Form_Field name=\'username\']\r\n</div>\r\n\r\n<div class=\"mm-field-column password\">\r\n[MM_Form_Field name=\'password\']\r\n</div>\r\n\r\n<div class=\"forgotpass\">\r\n<a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a>\r\n</div>\r\n<div class=\"loginbtn\">\r\n[MM_Form_Button type=\'login\' label=\'Login\']\r\n</div>\r\n<div class=\"rememberme\">\r\n[MM_Form_Field name=\'rememberMe\' label=\'Remember me\']\r\n</div>\r\n</div>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n<tr>\r\n<td class=\"mm-label-column\"></td>\r\n<td class=\"mm-field-column\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-17 02:19:08', '2018-12-17 02:19:08', '', 8, 'http://localhost/wordpress/2018/12/17/8-revision-v1/', 0, 'revision', '', 0),
(24, 1, '2018-12-18 02:13:09', '2018-12-18 02:13:09', '[MM_Member_Decision isMember=\'true\']\r\nYou are already logged in! Need to log out? You can do that <a title=\"Log out\" href=\"[MM_CorePage_Link type=\'logout\']\">here</a>.\r\n[/MM_Member_Decision]\r\n\r\n[MM_Member_Decision isMember=\'false\']\r\n[MM_Form type=\'login\']\r\n<div class=\"mm-login\">\r\n<div class=\"loginbox\">\r\n\r\n[MM_Form_Message type=\'success\']\r\n[MM_Form_Message type=\'error\']\r\n<h3>Members Login Here</h3>\r\n<div class=\"mm-field-column username\">[MM_Form_Field name=\'username\']</div>\r\n<div class=\"mm-field-column password\">[MM_Form_Field name=\'password\']</div>\r\n<div class=\"forgotpass\"><a class=\"mm-forgot-password\" href=\"[MM_CorePage_Link type=\'forgotPassword\']\">Forgot Password</a></div>\r\n<div class=\"loginbtn\">[MM_Form_Button type=\'login\' label=\'Login\']</div>\r\n<div class=\"rememberme\">\r\n<label for=\"rememberme\" class=\"mm-remember-me\">\r\n<input name=\"rememberme\" id=\"rememberme\" type=\"checkbox\" checked=\"checked\" value=\"forever\">\r\nRemember me</label>\r\n</div>\r\n</div>\r\n</div>\r\n[/MM_Form]\r\n[/MM_Member_Decision]', 'Login', '', 'inherit', 'closed', 'closed', '', '8-revision-v1', '', '', '2018-12-18 02:13:09', '2018-12-18 02:13:09', '', 8, 'http://renshawspt.local/2018/12/18/8-revision-v1/', 0, 'revision', '', 0),
(25, 1, '2018-12-20 01:52:13', '2018-12-20 01:52:13', '', 'Get Started', '', 'publish', 'closed', 'closed', '', 'get-started', '', '', '2018-12-20 01:52:13', '2018-12-20 01:52:13', '', 0, 'http://renshawspt.local/?page_id=25', 0, 'page', '', 0),
(26, 1, '2018-12-20 01:52:13', '2018-12-20 01:52:13', '', 'Get Started', '', 'inherit', 'closed', 'closed', '', '25-revision-v1', '', '', '2018-12-20 01:52:13', '2018-12-20 01:52:13', '', 25, 'http://renshawspt.local/2018/12/20/25-revision-v1/', 0, 'revision', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_termmeta`
--

CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_terms`
--

CREATE TABLE `wp_terms` (
  `term_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'Uncategorized', 'uncategorized', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_relationships`
--

CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(1, 1, 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_taxonomy`
--

CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_usermeta`
--

CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'admin'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'syntax_highlighting', 'true'),
(7, 1, 'comment_shortcuts', 'false'),
(8, 1, 'admin_color', 'fresh'),
(9, 1, 'use_ssl', '0'),
(10, 1, 'show_admin_bar_front', 'true'),
(11, 1, 'locale', ''),
(12, 1, 'wp_capabilities', 'a:1:{s:13:\"administrator\";b:1;}'),
(13, 1, 'wp_user_level', '10'),
(14, 1, 'dismissed_wp_pointers', 'wp496_privacy'),
(15, 1, 'show_welcome_panel', '1'),
(17, 1, 'wp_dashboard_quick_press_last_post_id', '4'),
(18, 2, 'nickname', 'cqthanh@gmail.com'),
(19, 2, 'first_name', 'Thanh'),
(20, 2, 'last_name', 'Che'),
(21, 2, 'description', ''),
(22, 2, 'rich_editing', 'true'),
(23, 2, 'syntax_highlighting', 'true'),
(24, 2, 'comment_shortcuts', 'false'),
(25, 2, 'admin_color', 'fresh'),
(26, 2, 'use_ssl', '0'),
(27, 2, 'show_admin_bar_front', 'false'),
(28, 2, 'locale', ''),
(29, 2, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(30, 2, 'wp_user_level', '0'),
(31, 2, 'dismissed_wp_pointers', 'wp496_privacy'),
(32, 1, 'session_tokens', 'a:4:{s:64:\"4fc9a1fe5c83952659b9875be5728deafdeafed1b8626b5d3d80fb7e9e0aa50c\";a:4:{s:10:\"expiration\";i:1545962722;s:2:\"ip\";s:3:\"::1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.17 Safari/537.36\";s:5:\"login\";i:1544753122;}s:64:\"29bbc10c2e41cfabe952edd4bf8c792f9d8a603dc7a5eb4c4f2080c095b53e6a\";a:4:{s:10:\"expiration\";i:1546221870;s:2:\"ip\";s:3:\"::1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.17 Safari/537.36\";s:5:\"login\";i:1545012270;}s:64:\"a7d8a0be64e9a4d07c20d15ddd649ba5574af5cfccb900b46f25ef4eed0ad489\";a:4:{s:10:\"expiration\";i:1546308619;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.17 Safari/537.36\";s:5:\"login\";i:1545099019;}s:64:\"3efd1b0db65f29229f3155ae7deca99f41cc1947fe00d6a426375630db961a24\";a:4:{s:10:\"expiration\";i:1546480318;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.28 Safari/537.36\";s:5:\"login\";i:1545270718;}}'),
(33, 1, 'wp_user-settings', 'editor=html'),
(34, 1, 'wp_user-settings-time', '1545012680');

-- --------------------------------------------------------

--
-- Table structure for table `wp_users`
--

CREATE TABLE `wp_users` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'admin', '$P$BBfYDuoHyIIq4g8WKYSiqnnHJD08dp1', 'admin', 'cqthanh.zx@gmail.com', '', '2018-11-20 23:34:16', '', 0, 'admin'),
(2, 'cqthanh@gmail.com', '$P$BlmtwIGS5/jdwogwPXUbbjLhF00TFg/', 'cqthanhgmail-com', 'cqthanh@gmail.com', '', '2018-12-14 01:54:29', '', 0, 'Thanh C');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `mm_actions`
--
ALTER TABLE `mm_actions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_affiliate_partner_payouts`
--
ALTER TABLE `mm_affiliate_partner_payouts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_affiliate_providers`
--
ALTER TABLE `mm_affiliate_providers`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `provider_token` (`provider_token`);

--
-- Indexes for table `mm_affiliate_provider_mappings`
--
ALTER TABLE `mm_affiliate_provider_mappings`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_affiliate_rebill_commissions`
--
ALTER TABLE `mm_affiliate_rebill_commissions`
  ADD PRIMARY KEY (`affiliate_provider_id`,`affiliate_id`,`order_number`,`transaction_id`);

--
-- Indexes for table `mm_api_keys`
--
ALTER TABLE `mm_api_keys`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_applied_bundles`
--
ALTER TABLE `mm_applied_bundles`
  ADD UNIQUE KEY `unique_access_type` (`access_type`,`bundle_id`,`access_type_id`),
  ADD KEY `access_type` (`access_type`),
  ADD KEY `bundle_id` (`bundle_id`);

--
-- Indexes for table `mm_bundles`
--
ALTER TABLE `mm_bundles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_card_on_file`
--
ALTER TABLE `mm_card_on_file`
  ADD PRIMARY KEY (`id`),
  ADD KEY `card_on_file_user_id_idx` (`user_id`);

--
-- Indexes for table `mm_commission_profiles`
--
ALTER TABLE `mm_commission_profiles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_commission_profiles_name_unique` (`name`);

--
-- Indexes for table `mm_container`
--
ALTER TABLE `mm_container`
  ADD PRIMARY KEY (`id`),
  ADD KEY `name` (`name`);

--
-- Indexes for table `mm_core_pages`
--
ALTER TABLE `mm_core_pages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `core_page_idx1` (`core_page_type_id`,`ref_type`,`ref_id`,`page_id`);

--
-- Indexes for table `mm_core_page_types`
--
ALTER TABLE `mm_core_page_types`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_countries`
--
ALTER TABLE `mm_countries`
  ADD PRIMARY KEY (`iso`);

--
-- Indexes for table `mm_country_subdivisions`
--
ALTER TABLE `mm_country_subdivisions`
  ADD PRIMARY KEY (`iso`,`code`);

--
-- Indexes for table `mm_coupons`
--
ALTER TABLE `mm_coupons`
  ADD PRIMARY KEY (`id`),
  ADD KEY `coupons_coupon_code_idx` (`coupon_code`),
  ADD KEY `coupons_start_date_end_date_idx` (`start_date`,`end_date`),
  ADD KEY `coupons_gift_user_id_idx` (`gift_user_id`),
  ADD KEY `coupons_gift_order_item_id_idx` (`gift_order_item_id`);

--
-- Indexes for table `mm_coupon_restrictions`
--
ALTER TABLE `mm_coupon_restrictions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_coupon_usage`
--
ALTER TABLE `mm_coupon_usage`
  ADD PRIMARY KEY (`id`),
  ADD KEY `coupon_usage_coupon_id_idx` (`coupon_id`);

--
-- Indexes for table `mm_custom_fields`
--
ALTER TABLE `mm_custom_fields`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_custom_field_data`
--
ALTER TABLE `mm_custom_field_data`
  ADD PRIMARY KEY (`id`),
  ADD KEY `custom_field_id` (`custom_field_id`);

--
-- Indexes for table `mm_custom_field_options`
--
ALTER TABLE `mm_custom_field_options`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_diagnostic_log`
--
ALTER TABLE `mm_diagnostic_log`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_email_provider_bundle_mappings`
--
ALTER TABLE `mm_email_provider_bundle_mappings`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_email_provider_mappings`
--
ALTER TABLE `mm_email_provider_mappings`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_email_service_providers`
--
ALTER TABLE `mm_email_service_providers`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `provider_token` (`provider_token`);

--
-- Indexes for table `mm_employee_accounts`
--
ALTER TABLE `mm_employee_accounts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_flatrate_shipping_options`
--
ALTER TABLE `mm_flatrate_shipping_options`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_login_token`
--
ALTER TABLE `mm_login_token`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_login_token_login_token_unique` (`login_token`);

--
-- Indexes for table `mm_log_api`
--
ALTER TABLE `mm_log_api`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_log_events`
--
ALTER TABLE `mm_log_events`
  ADD PRIMARY KEY (`id`),
  ADD KEY `event_user_id_idx` (`user_id`),
  ADD KEY `mm_log_events_idx1` (`event_type`,`user_id`);

--
-- Indexes for table `mm_membership_levels`
--
ALTER TABLE `mm_membership_levels`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_membership_levels_name_unique` (`name`);

--
-- Indexes for table `mm_membership_level_products`
--
ALTER TABLE `mm_membership_level_products`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_orders`
--
ALTER TABLE `mm_orders`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_orders_order_number_unique` (`order_number`),
  ADD KEY `order_user_id_idx` (`user_id`),
  ADD KEY `order_form_submission_idx` (`form_submission_id`),
  ADD KEY `mm_order_is_test_idx` (`is_test`);

--
-- Indexes for table `mm_order_items`
--
ALTER TABLE `mm_order_items`
  ADD PRIMARY KEY (`id`),
  ADD KEY `order_items_order_id_idx` (`order_id`),
  ADD KEY `item_type_item_id_idx` (`item_type`,`item_id`),
  ADD KEY `mm_order_items_is_test_idx` (`is_test`);

--
-- Indexes for table `mm_order_item_access`
--
ALTER TABLE `mm_order_item_access`
  ADD KEY `order_item_access_order_item_id_idx` (`order_item_id`),
  ADD KEY `order_item_access_user_id_idx` (`user_id`);

--
-- Indexes for table `mm_payment_services`
--
ALTER TABLE `mm_payment_services`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_payment_services_token_unique` (`token`);

--
-- Indexes for table `mm_posts_access`
--
ALTER TABLE `mm_posts_access`
  ADD KEY `post_id` (`post_id`),
  ADD KEY `access_type` (`access_type`),
  ADD KEY `is_smart_content` (`is_smart_content`),
  ADD KEY `access_id` (`access_id`);

--
-- Indexes for table `mm_products`
--
ALTER TABLE `mm_products`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_queued_scheduled_events`
--
ALTER TABLE `mm_queued_scheduled_events`
  ADD PRIMARY KEY (`event_id`),
  ADD KEY `queued_event_command_type_lookup_idx` (`command`,`queued_date`),
  ADD KEY `queued_event_batch_id_lookup_idx` (`batch_id`);

--
-- Indexes for table `mm_report_data_cache`
--
ALTER TABLE `mm_report_data_cache`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mm_report_data_cache_date_idx` (`expiration_date`);

--
-- Indexes for table `mm_scheduled_events`
--
ALTER TABLE `mm_scheduled_events`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mm_scheduler_event_type_idx` (`event_type`),
  ADD KEY `mm_scheduler_scheduled_date_idx` (`scheduled_date`),
  ADD KEY `mm_scheduler_status_idx` (`status`);

--
-- Indexes for table `mm_scheduled_payments`
--
ALTER TABLE `mm_scheduled_payments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `scheduled_payment_oiu_lookup_idx` (`order_item_id`,`user_id`);

--
-- Indexes for table `mm_sessions`
--
ALTER TABLE `mm_sessions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mm_session_lookup_idx` (`id`,`ip_address`),
  ADD KEY `mm_session_reap_idx` (`expiration_date`);

--
-- Indexes for table `mm_shipping_methods`
--
ALTER TABLE `mm_shipping_methods`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_shipping_methods_token_unique` (`token`);

--
-- Indexes for table `mm_smarttags`
--
ALTER TABLE `mm_smarttags`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mm_smarttags_autoload_idx` (`autoload`),
  ADD KEY `group_id` (`group_id`,`visible`);

--
-- Indexes for table `mm_smarttag_groups`
--
ALTER TABLE `mm_smarttag_groups`
  ADD PRIMARY KEY (`id`),
  ADD KEY `parent_id` (`parent_id`,`visible`);

--
-- Indexes for table `mm_social_login_linked_profiles`
--
ALTER TABLE `mm_social_login_linked_profiles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `social_login_unique_id_lookup_idx` (`provider_id`,`unique_id`);

--
-- Indexes for table `mm_social_login_providers`
--
ALTER TABLE `mm_social_login_providers`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_social_login_providers_token_unique` (`token`);

--
-- Indexes for table `mm_top_level_domains`
--
ALTER TABLE `mm_top_level_domains`
  ADD PRIMARY KEY (`suffix`);

--
-- Indexes for table `mm_transaction_key`
--
ALTER TABLE `mm_transaction_key`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mm_transaction_key_transaction_key_unique` (`transaction_key`);

--
-- Indexes for table `mm_transaction_log`
--
ALTER TABLE `mm_transaction_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `transaction_type_idx` (`transaction_type`,`transaction_date`),
  ADD KEY `order_order_item_id` (`order_id`,`order_item_id`),
  ADD KEY `payment_service_detail_lookup_idx` (`payment_service_id`,`payment_service_detail_id`),
  ADD KEY `mm_transaction_log_is_test_idx` (`is_test`);

--
-- Indexes for table `mm_user_data`
--
ALTER TABLE `mm_user_data`
  ADD PRIMARY KEY (`wp_user_id`),
  ADD KEY `mm_user_data_mls_lookup` (`membership_level_id`,`status`),
  ADD KEY `mm_user_data_statdate_idx` (`status`,`status_updated`);

--
-- Indexes for table `mm_user_defined_pages`
--
ALTER TABLE `mm_user_defined_pages`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mm_version_releases`
--
ALTER TABLE `mm_version_releases`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `comment_id` (`comment_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_comments`
--
ALTER TABLE `wp_comments`
  ADD PRIMARY KEY (`comment_ID`),
  ADD KEY `comment_post_ID` (`comment_post_ID`),
  ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  ADD KEY `comment_date_gmt` (`comment_date_gmt`),
  ADD KEY `comment_parent` (`comment_parent`),
  ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- Indexes for table `wp_links`
--
ALTER TABLE `wp_links`
  ADD PRIMARY KEY (`link_id`),
  ADD KEY `link_visible` (`link_visible`);

--
-- Indexes for table `wp_options`
--
ALTER TABLE `wp_options`
  ADD PRIMARY KEY (`option_id`),
  ADD UNIQUE KEY `option_name` (`option_name`);

--
-- Indexes for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- Indexes for table `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `term_id` (`term_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_terms`
--
ALTER TABLE `wp_terms`
  ADD PRIMARY KEY (`term_id`),
  ADD KEY `slug` (`slug`(191)),
  ADD KEY `name` (`name`(191));

--
-- Indexes for table `wp_term_relationships`
--
ALTER TABLE `wp_term_relationships`
  ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- Indexes for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  ADD PRIMARY KEY (`term_taxonomy_id`),
  ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  ADD KEY `taxonomy` (`taxonomy`);

--
-- Indexes for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  ADD PRIMARY KEY (`umeta_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_users`
--
ALTER TABLE `wp_users`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `user_login_key` (`user_login`),
  ADD KEY `user_nicename` (`user_nicename`),
  ADD KEY `user_email` (`user_email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `mm_actions`
--
ALTER TABLE `mm_actions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_affiliate_partner_payouts`
--
ALTER TABLE `mm_affiliate_partner_payouts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_affiliate_providers`
--
ALTER TABLE `mm_affiliate_providers`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `mm_affiliate_provider_mappings`
--
ALTER TABLE `mm_affiliate_provider_mappings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_api_keys`
--
ALTER TABLE `mm_api_keys`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_bundles`
--
ALTER TABLE `mm_bundles`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_card_on_file`
--
ALTER TABLE `mm_card_on_file`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_commission_profiles`
--
ALTER TABLE `mm_commission_profiles`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_container`
--
ALTER TABLE `mm_container`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=262;

--
-- AUTO_INCREMENT for table `mm_core_pages`
--
ALTER TABLE `mm_core_pages`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `mm_core_page_types`
--
ALTER TABLE `mm_core_page_types`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `mm_coupons`
--
ALTER TABLE `mm_coupons`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_coupon_restrictions`
--
ALTER TABLE `mm_coupon_restrictions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_coupon_usage`
--
ALTER TABLE `mm_coupon_usage`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_custom_fields`
--
ALTER TABLE `mm_custom_fields`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_custom_field_data`
--
ALTER TABLE `mm_custom_field_data`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_custom_field_options`
--
ALTER TABLE `mm_custom_field_options`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_diagnostic_log`
--
ALTER TABLE `mm_diagnostic_log`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_email_provider_bundle_mappings`
--
ALTER TABLE `mm_email_provider_bundle_mappings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_email_provider_mappings`
--
ALTER TABLE `mm_email_provider_mappings`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_email_service_providers`
--
ALTER TABLE `mm_email_service_providers`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `mm_employee_accounts`
--
ALTER TABLE `mm_employee_accounts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_flatrate_shipping_options`
--
ALTER TABLE `mm_flatrate_shipping_options`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_login_token`
--
ALTER TABLE `mm_login_token`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_log_api`
--
ALTER TABLE `mm_log_api`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_log_events`
--
ALTER TABLE `mm_log_events`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `mm_membership_levels`
--
ALTER TABLE `mm_membership_levels`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_membership_level_products`
--
ALTER TABLE `mm_membership_level_products`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_orders`
--
ALTER TABLE `mm_orders`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_order_items`
--
ALTER TABLE `mm_order_items`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_payment_services`
--
ALTER TABLE `mm_payment_services`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `mm_products`
--
ALTER TABLE `mm_products`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_report_data_cache`
--
ALTER TABLE `mm_report_data_cache`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_scheduled_events`
--
ALTER TABLE `mm_scheduled_events`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_shipping_methods`
--
ALTER TABLE `mm_shipping_methods`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `mm_smarttags`
--
ALTER TABLE `mm_smarttags`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1101;

--
-- AUTO_INCREMENT for table `mm_smarttag_groups`
--
ALTER TABLE `mm_smarttag_groups`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `mm_social_login_linked_profiles`
--
ALTER TABLE `mm_social_login_linked_profiles`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_social_login_providers`
--
ALTER TABLE `mm_social_login_providers`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_transaction_key`
--
ALTER TABLE `mm_transaction_key`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_transaction_log`
--
ALTER TABLE `mm_transaction_log`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_user_defined_pages`
--
ALTER TABLE `mm_user_defined_pages`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `mm_version_releases`
--
ALTER TABLE `mm_version_releases`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `wp_comments`
--
ALTER TABLE `wp_comments`
  MODIFY `comment_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `wp_links`
--
ALTER TABLE `wp_links`
  MODIFY `link_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `wp_options`
--
ALTER TABLE `wp_options`
  MODIFY `option_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=320;

--
-- AUTO_INCREMENT for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=27;

--
-- AUTO_INCREMENT for table `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `wp_terms`
--
ALTER TABLE `wp_terms`
  MODIFY `term_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  MODIFY `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  MODIFY `umeta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;

--
-- AUTO_INCREMENT for table `wp_users`
--
ALTER TABLE `wp_users`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
